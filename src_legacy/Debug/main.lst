Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED18-Dec-22     11:58:00     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
041A39                     A   144    _errno:
041A39                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 */
                           A   161    ;   10	
                           A   162    ;   11	#include <ez80.h>
                           A   163    ;   12	#include <stdio.h>
                           A   164    ;   13	#include <stdlib.h>
                           A   165    ;   14	#include <ERRNO.H>
                           A   166    ;   15	#include "mos-interface.h"
                           A   167    ;   16	#include "flash.h"
                           A   168    ;   17	#include "agontimer.h"
                           A   169    ;   18	#include "crc32.h"
                           A   170    ;   19	
                           A   171    ;   20	int errno; // needed by standard librar
                           A   172    	SEGMENT CODE
                           A   173    ;   21	enum states{firmware,recover,systemrese
                           A   174    ;   22	
                           A   175    ;   23	#define FILENAME	"firmware102.bin"
                           A   176    ;   24	#define CRC102		0xfe59e98d
                           A   177    ;   25	
                           A   178    ;   26	// separate putch function that doesn't
                           A   179    ;   27	// UART0 initialization done by MOS fir
                           A   180    ;   28	// This utility doesn't run without MOS
                           A   181    ;   29	int putch(int c)
                           A   182    ;   30	{
0400D7                     A   183    _putch:
                           A   184    .DEFINE "_putch"
                           A   185    
                           A   186    .VALUE _putch
                           A   187    
                           A   188    .CLASS 2
                           A   189    
                           A   190    .TYPE 68
                           A   191    
                           A   192    .ENDEF
                           A   193    
                           A   194    .BEGFUNC "putch",30,"_putch"
                           A   195    
                           A   196    .LINE 30
                           A   197    
                           A   198    .DEFINE "c"
                           A   199    
                           A   200    .CLASS 65
                           A   201    
                           A   202    .VALUE 6
                           A   203    
                           A   204    .TYPE 4
                           A   205    
0400D7 DDE5                A   206    	PUSH	IX
0400D9 DD210000 00         A   207    	LD	IX,0
0400DE DD39                A   208    	ADD	IX,SP
                           A   209    .ENDEF
                           A   210    
                           A   211    ;   31		UINT8 lsr,temt;
                           A   212    ;   32		
                           A   213    ;   33		while((UART0_LSR & 0x40) == 0);
0400E0                     A   214    L_1:
                           A   215    .LINE 33
                           A   216    
0400E0 ED38C5              A   217    	IN0	A,(197)
0400E3 E640                A   218    	AND	A,%40
0400E5 B7ED62              A   219    	UEXT	HL
0400E8 6F                  A   220    	LD	L,A
0400E9 CD B2 10 04         A   221    	CALL	__icmpzero
0400ED 28 F1               A   222    	JR	Z,L_1
                           A   223    ;   34		UART0_THR = c;
                           A   224    .LINE 34
                           A   225    
0400EF DD7E06              A   226    	LD	A,(IX+%6)
0400F2 ED39C0              A   227    	OUT0	(192),A
                           A   228    ;   35		return c;
                           A   229    .LINE 35
                           A   230    
0400F5 DD2706              A   231    	LD	HL,(IX+%6)
                           A   232    ;   36	}
                           A   233    .LINE 36
                           A   234    
0400F8 DDF9                A   235    	LD	SP,IX
0400FA DDE1                A   236    	POP	IX
0400FC C9                  A   237    	RET	
                           A   238    
                           A   239    
                           A   240    ;**************************** _putch **********
                           A   241    ;Name                         Addr/Register   S
                           A   242    ;c                                     IX+6    
                           A   243    
                           A   244    
                           A   245    ; Stack Frame Size: 9 (bytes)
                           A   246    ;       Spill Code: 0 (instruction)
                           A   247    
                           A   248    
                           A   249    .ENDFUNC "putch",36,"_putch"
                           A   250    ;   37	
                           A   251    ;   38	int main(int argc, char * argv[]) {
0400FD                     A   252    _main:
                           A   253    .DEFINE "_main"
                           A   254    
                           A   255    .VALUE _main
                           A   256    
                           A   257    .CLASS 2
                           A   258    
                           A   259    .TYPE 68
                           A   260    
                           A   261    .ENDEF
                           A   262    
                           A   263    .BEGFUNC "main",38,"_main"
                           A   264    
                           A   265    .LINE 38
                           A   266    
                           A   267    .DEFINE "argc"
                           A   268    
                           A   269    .CLASS 65
                           A   270    
                           A   271    .VALUE 6
                           A   272    
                           A   273    .TYPE 4
                           A   274    
                           A   275    .ENDEF
                           A   276    
                           A   277    .DEFINE "argv"
                           A   278    
                           A   279    .CLASS 65
                           A   280    
                           A   281    .VALUE 9
                           A   282    
                           A   283    .TYPE 290
                           A   284    
                           A   285    .ENDEF
                           A   286    
                           A   287    .DEFINE "counter"
                           A   288    
                           A   289    .CLASS 65
                           A   290    
                           A   291    .VALUE -3
                           A   292    
                           A   293    .TYPE 14
                           A   294    
                           A   295    .ENDEF
                           A   296    
                           A   297    .DEFINE "size"
                           A   298    
                           A   299    .CLASS 65
                           A   300    
                           A   301    .VALUE -6
                           A   302    
                           A   303    .TYPE 14
                           A   304    
                           A   305    .ENDEF
                           A   306    
                           A   307    .DEFINE "response"
                           A   308    
                           A   309    .CLASS 65
                           A   310    
                           A   311    .VALUE -7
                           A   312    
                           A   313    .TYPE 12
                           A   314    
                           A   315    .ENDEF
                           A   316    
                           A   317    .DEFINE "file"
                           A   318    
                           A   319    .CLASS 65
                           A   320    
                           A   321    .VALUE -8
                           A   322    
                           A   323    .TYPE 12
                           A   324    
                           A   325    .ENDEF
                           A   326    
                           A   327    .DEFINE "addressfrom"
                           A   328    
                           A   329    .CLASS 65
                           A   330    
                           A   331    .VALUE -11
                           A   332    
                           A   333    .TYPE 14
                           A   334    
                           A   335    .ENDEF
                           A   336    
                           A   337    .DEFINE "state"
                           A   338    
                           A   339    .CLASS 65
                           A   340    
                           A   341    .VALUE -14
                           A   342    
                           A   343    .TYPE 4
                           A   344    
                           A   345    .ENDEF
                           A   346    
                           A   347    .DEFINE "pagemax"
                           A   348    
                           A   349    .CLASS 65
                           A   350    
                           A   351    .VALUE -17
                           A   352    
                           A   353    .TYPE 14
                           A   354    
                           A   355    .ENDEF
                           A   356    
                           A   357    .DEFINE "ptr"
                           A   358    
                           A   359    .CLASS 65
                           A   360    
                           A   361    .VALUE -20
                           A   362    
                           A   363    .TYPE 34
                           A   364    
                           A   365    .ENDEF
                           A   366    
                           A   367    .DEFINE "addressto"
                           A   368    
                           A   369    .CLASS 65
                           A   370    
                           A   371    .VALUE -23
                           A   372    
                           A   373    .TYPE 14
                           A   374    
                           A   375    .ENDEF
                           A   376    
                           A   377    .DEFINE "value"
                           A   378    
                           A   379    .CLASS 65
                           A   380    
                           A   381    .VALUE -24
                           A   382    
                           A   383    .TYPE 12
                           A   384    
                           A   385    .ENDEF
                           A   386    
                           A   387    .DEFINE "crcresult"
                           A   388    
                           A   389    .CLASS 65
                           A   390    
                           A   391    .VALUE -28
                           A   392    
                           A   393    .TYPE 15
                           A   394    
                           A   395    .ENDEF
                           A   396    
                           A   397    .DEFINE "lastpagebytes"
                           A   398    
                           A   399    .CLASS 65
                           A   400    
                           A   401    .VALUE -31
                           A   402    
                           A   403    .TYPE 14
                           A   404    
                           A   405    .ENDEF
                           A   406    
                           A   407    .DEFINE "crcexpected"
                           A   408    
                           A   409    .CLASS 65
                           A   410    
                           A   411    .VALUE -38
                           A   412    
                           A   413    .TYPE 15
                           A   414    
                           A   415    .ENDEF
                           A   416    
                           A   417    .DEFINE "crcbackup"
                           A   418    
                           A   419    .CLASS 65
                           A   420    
                           A   421    .VALUE -42
                           A   422    
                           A   423    .TYPE 15
                           A   424    
                           A   425    .ENDEF
                           A   426    
0400FD DDE5                A   427    	PUSH	IX
0400FF DD210000 00         A   428    	LD	IX,0
040104 DD39                A   429    	ADD	IX,SP
040106 ED22D3              A   430    	LEA	HL,IX+%FFFFFFD3
040109 F9                  A   431    	LD	SP,HL
                           A   432    ;   39		UINT32 crcexpected,crcresult,crcbac
                           A   433    ;   40		UINT24 size = 0;
                           A   434    .LINE 40
                           A   435    
04010A 01000000            A   436    	LD	BC,0
04010E DD0FFA              A   437    	LD	(IX+%FFFFFFFA),BC
                           A   438    ;   41		UINT8 file;
                           A   439    ;   42		char* ptr = (char*)BUFFER1;
                           A   440    .LINE 42
                           A   441    
040111 01000005            A   442    	LD	BC,327680
040115 DD0FEC              A   443    	LD	(IX+%FFFFFFEC),BC
                           A   444    ;   43		UINT8 response;
                           A   445    ;   44		UINT8 value;
                           A   446    ;   45		UINT24 counter,pagemax, lastpagebyt
                           A   447    ;   46		UINT24 addressto,addressfrom;
                           A   448    ;   47		enum states state;
                           A   449    ;   48		
                           A   450    ;   49		printf("Agon MOS firmware upgrade u
                           A   451    .LINE 49
                           A   452    
040118 01 FD 0C 04         A   453    	LD	BC,___print_uputch
04011C ED43 BC 16 04       A   454    	LD	(___print_xputch),BC
040121 01 3F 17 04         A   455    	LD	BC,L__2
040125 C5                  A   456    	PUSH	BC
040126 CD 92 0B 04         A   457    	CALL	___print_sendstring
04012A C1                  A   458    	POP	BC
                           A   459    ;   50		printf("This utility will upgrade a
                           A   460    .LINE 50
                           A   461    
04012B 01 FD 0C 04         A   462    	LD	BC,___print_uputch
04012F ED43 BC 16 04       A   463    	LD	(___print_xputch),BC
040134 01 63 17 04         A   464    	LD	BC,L__3
040138 C5                  A   465    	PUSH	BC
040139 CD 92 0B 04         A   466    	CALL	___print_sendstring
04013D C1                  A   467    	POP	BC
                           A   468    ;   51		
                           A   469    ;   52		file = mos_fopen(FILENAME, fa_read)
                           A   470    .LINE 52
                           A   471    
04013E 01010000            A   472    	LD	BC,1
040142 C5                  A   473    	PUSH	BC
040143 01 A8 17 04         A   474    	LD	BC,L__4
040147 C5                  A   475    	PUSH	BC
040148 CD DC 06 04         A   476    	CALL	_mos_fopen
04014C C1                  A   477    	POP	BC
04014D C1                  A   478    	POP	BC
04014E DD77F8              A   479    	LD	(IX+%FFFFFFF8),A
                           A   480    ;   53		if(!file)
                           A   481    .LINE 53
                           A   482    
040151 B7                  A   483    	OR	A,A
040152 20 29               A   484    	JR	NZ,L_7
                           A   485    ;   54		{
                           A   486    ;   55			printf("Error opening \"%s\" - 
                           A   487    .LINE 55
                           A   488    
040154 01 FD 0C 04         A   489    	LD	BC,___print_uputch
040158 ED43 BC 16 04       A   490    	LD	(___print_xputch),BC
04015D 01 B8 17 04         A   491    	LD	BC,L__6
040161 C5                  A   492    	PUSH	BC
040162 CD 92 0B 04         A   493    	CALL	___print_sendstring
040166 C1                  A   494    	POP	BC
040167 01 C8 17 04         A   495    	LD	BC,L__7
04016B C5                  A   496    	PUSH	BC
04016C CD 92 0B 04         A   497    	CALL	___print_sendstring
040170 C1                  A   498    	POP	BC
040171 01 D8 17 04         A   499    	LD	BC,L__8
040175 C5                  A   500    	PUSH	BC
040176 CD 92 0B 04         A   501    	CALL	___print_sendstring
04017A C1                  A   502    	POP	BC
                           A   503    ;   56			while(1);
04017B                     A   504    L_5:
                           A   505    .LINE 56
                           A   506    
04017B 18 FE               A   507    	JR	L_5
                           A   508    ;   57		}
04017D                     A   509    L_7:
                           A   510    .LINE 57
                           A   511    
                           A   512    ;   58		
                           A   513    ;   59		crcexpected = CRC102;
                           A   514    .LINE 59
                           A   515    
04017D 018DE959            A   516    	LD	BC,5892493
040181 3EFE                A   517    	LD	A,%FE
040183 DD0FDA              A   518    	LD	(IX+%FFFFFFDA),BC
040186 DD77DD              A   519    	LD	(IX+%FFFFFFDD),A
                           A   520    ;   60	
                           A   521    ;   61		printf("Loading file : %s\n\r",FILE
                           A   522    .LINE 61
                           A   523    
040189 01 FD 0C 04         A   524    	LD	BC,___print_uputch
04018D ED43 BC 16 04       A   525    	LD	(___print_xputch),BC
040192 01 F5 17 04         A   526    	LD	BC,L__9
040196 C5                  A   527    	PUSH	BC
040197 CD 92 0B 04         A   528    	CALL	___print_sendstring
04019B C1                  A   529    	POP	BC
04019C 01 05 18 04         A   530    	LD	BC,L__10
0401A0 C5                  A   531    	PUSH	BC
0401A1 CD 92 0B 04         A   532    	CALL	___print_sendstring
0401A5 C1                  A   533    	POP	BC
0401A6 01 15 18 04         A   534    	LD	BC,L__11
0401AA C5                  A   535    	PUSH	BC
0401AB CD 92 0B 04         A   536    	CALL	___print_sendstring
0401AF C1                  A   537    	POP	BC
                           A   538    ;   62		printf("File size    : %d byte(s)",
                           A   539    .LINE 62
                           A   540    
0401B0 01 FD 0C 04         A   541    	LD	BC,___print_uputch
0401B4 ED43 BC 16 04       A   542    	LD	(___print_xputch),BC
0401B9 01 18 18 04         A   543    	LD	BC,L__12
0401BD C5                  A   544    	PUSH	BC
0401BE CD 92 0B 04         A   545    	CALL	___print_sendstring
0401C2 C1                  A   546    	POP	BC
0401C3 01000000            A   547    	LD	BC,0
0401C7 C5                  A   548    	PUSH	BC
0401C8 C5                  A   549    	PUSH	BC
0401C9 CD 97 0D 04         A   550    	CALL	__u_itoa
0401CD C1                  A   551    	POP	BC
0401CE C1                  A   552    	POP	BC
0401CF 01 28 18 04         A   553    	LD	BC,L__13
0401D3 C5                  A   554    	PUSH	BC
0401D4 CD 92 0B 04         A   555    	CALL	___print_sendstring
0401D8 C1                  A   556    	POP	BC
                           A   557    ;   63	
                           A   558    ;   64		// Read file to memory
                           A   559    ;   65		//mod = 0;
                           A   560    ;   66		while(!mos_feof(file))
                           A   561    .LINE 66
                           A   562    
0401D9 18 5C               A   563    	JR	L_11
0401DB                     A   564    L_12:
                           A   565    ;   67		{
                           A   566    ;   68			*ptr = mos_fgetc(file);
                           A   567    .LINE 68
                           A   568    
0401DB DD4EF8              A   569    	LD	C,(IX+%FFFFFFF8)
0401DE 0600                A   570    	LD	B,%0
0401E0 C5                  A   571    	PUSH	BC
0401E1 CD 09 07 04         A   572    	CALL	_mos_fgetc
0401E5 C1                  A   573    	POP	BC
0401E6 DD27EC              A   574    	LD	HL,(IX+%FFFFFFEC)
0401E9 77                  A   575    	LD	(HL),A
                           A   576    ;   69			ptr++;
                           A   577    .LINE 69
                           A   578    
0401EA DD07EC              A   579    	LD	BC,(IX+%FFFFFFEC)
0401ED 03                  A   580    	INC	BC
0401EE DD0FEC              A   581    	LD	(IX+%FFFFFFEC),BC
                           A   582    ;   70			size++;
                           A   583    .LINE 70
                           A   584    
0401F1 DD07FA              A   585    	LD	BC,(IX+%FFFFFFFA)
0401F4 03                  A   586    	INC	BC
0401F5 DD0FFA              A   587    	LD	(IX+%FFFFFFFA),BC
                           A   588    ;   71			//mod++;
                           A   589    ;   72			//if(mod > 1024)
                           A   590    ;   73			if(size%1024 == 0)
                           A   591    .LINE 73
                           A   592    
0401F8 01FF0300            A   593    	LD	BC,1023
0401FC DD27FA              A   594    	LD	HL,(IX+%FFFFFFFA)
0401FF CD 1E 14 04         A   595    	CALL	__iand
040203 CD B2 10 04         A   596    	CALL	__icmpzero
040207 20 2E               A   597    	JR	NZ,L_11
                           A   598    ;   74			{
                           A   599    ;   75				//mod = 0;
                           A   600    ;   76				printf("\rFile size    : %d
                           A   601    .LINE 76
                           A   602    
040209 01 FD 0C 04         A   603    	LD	BC,___print_uputch
04020D ED43 BC 16 04       A   604    	LD	(___print_xputch),BC
040212 01 31 18 04         A   605    	LD	BC,L__15
040216 C5                  A   606    	PUSH	BC
040217 CD 92 0B 04         A   607    	CALL	___print_sendstring
04021B C1                  A   608    	POP	BC
04021C DD07FA              A   609    	LD	BC,(IX+%FFFFFFFA)
04021F AF                  A   610    	XOR	A,A
040220 C5D1                A   611    	LD	DE,BC
040222 4F                  A   612    	LD	C,A
040223 0600                A   613    	LD	B,%0
040225 C5                  A   614    	PUSH	BC
040226 D5                  A   615    	PUSH	DE
040227 CD 97 0D 04         A   616    	CALL	__u_itoa
04022B C1                  A   617    	POP	BC
04022C C1                  A   618    	POP	BC
04022D 01 42 18 04         A   619    	LD	BC,L__16
040231 C5                  A   620    	PUSH	BC
040232 CD 92 0B 04         A   621    	CALL	___print_sendstring
040236 C1                  A   622    	POP	BC
                           A   623    ;   77	
                           A   624    ;   78			}
                           A   625    ;   79		}		
040237                     A   626    L_11:
                           A   627    .LINE 79
                           A   628    
040237 DD4EF8              A   629    	LD	C,(IX+%FFFFFFF8)
04023A 0600                A   630    	LD	B,%0
04023C C5                  A   631    	PUSH	BC
04023D CD 1E 07 04         A   632    	CALL	_mos_feof
040241 C1                  A   633    	POP	BC
040242 B7                  A   634    	OR	A,A
040243 28 96               A   635    	JR	Z,L_12
                           A   636    ;   80		mos_fclose(file);	
                           A   637    .LINE 80
                           A   638    
040245 DD4EF8              A   639    	LD	C,(IX+%FFFFFFF8)
040248 0600                A   640    	LD	B,%0
04024A C5                  A   641    	PUSH	BC
04024B CD F4 06 04         A   642    	CALL	_mos_fclose
04024F C1                  A   643    	POP	BC
                           A   644    ;   81		printf("\rFile size    : %d byte(s)
                           A   645    .LINE 81
                           A   646    
040250 01 FD 0C 04         A   647    	LD	BC,___print_uputch
040254 ED43 BC 16 04       A   648    	LD	(___print_xputch),BC
040259 01 4B 18 04         A   649    	LD	BC,L__18
04025D C5                  A   650    	PUSH	BC
04025E CD 92 0B 04         A   651    	CALL	___print_sendstring
040262 C1                  A   652    	POP	BC
040263 DD07FA              A   653    	LD	BC,(IX+%FFFFFFFA)
040266 AF                  A   654    	XOR	A,A
040267 C5D1                A   655    	LD	DE,BC
040269 4F                  A   656    	LD	C,A
04026A 0600                A   657    	LD	B,%0
04026C C5                  A   658    	PUSH	BC
04026D D5                  A   659    	PUSH	DE
04026E CD 97 0D 04         A   660    	CALL	__u_itoa
040272 C1                  A   661    	POP	BC
040273 C1                  A   662    	POP	BC
040274 01 5C 18 04         A   663    	LD	BC,L__19
040278 C5                  A   664    	PUSH	BC
040279 CD 92 0B 04         A   665    	CALL	___print_sendstring
04027D C1                  A   666    	POP	BC
                           A   667    ;   82	
                           A   668    ;   83		printf("Testing CRC32: 0x%08lx\n\r"
                           A   669    .LINE 83
                           A   670    
04027E 01 FD 0C 04         A   671    	LD	BC,___print_uputch
040282 ED43 BC 16 04       A   672    	LD	(___print_xputch),BC
040287 01 67 18 04         A   673    	LD	BC,L__20
04028B C5                  A   674    	PUSH	BC
04028C CD 92 0B 04         A   675    	CALL	___print_sendstring
040290 C1                  A   676    	POP	BC
040291 3E08                A   677    	LD	A,%8
040293 32 53 1E 04         A   678    	LD	(___print_fmt+5),A
040297 3E40                A   679    	LD	A,%40
040299 32 4F 1E 04         A   680    	LD	(___print_fmt+1),A
04029D 3E78                A   681    	LD	A,%78
04029F 32 52 1E 04         A   682    	LD	(___print_fmt+4),A
0402A3 01FE0000            A   683    	LD	BC,254
0402A7 C5                  A   684    	PUSH	BC
0402A8 018DE959            A   685    	LD	BC,5892493
0402AC C5                  A   686    	PUSH	BC
0402AD CD 86 14 04         A   687    	CALL	__u_ultoa
0402B1 C1                  A   688    	POP	BC
0402B2 C1                  A   689    	POP	BC
0402B3 01 79 18 04         A   690    	LD	BC,L__21
0402B7 C5                  A   691    	PUSH	BC
0402B8 CD 92 0B 04         A   692    	CALL	___print_sendstring
0402BC C1                  A   693    	POP	BC
                           A   694    ;   84		crcresult = crc32((char*)BUFFER1, s
                           A   695    .LINE 84
                           A   696    
0402BD DD07FA              A   697    	LD	BC,(IX+%FFFFFFFA)
0402C0 C5                  A   698    	PUSH	BC
0402C1 01000005            A   699    	LD	BC,327680
0402C5 C5                  A   700    	PUSH	BC
0402C6 CD 65 09 04         A   701    	CALL	_crc32
0402CA C1                  A   702    	POP	BC
0402CB C1                  A   703    	POP	BC
0402CC DD2FE4              A   704    	LD	(IX+%FFFFFFE4),HL
0402CF DD73E7              A   705    	LD	(IX+%FFFFFFE7),E
                           A   706    ;   85		printf("CRC32 result : 0x%08lx\n\r"
                           A   707    .LINE 85
                           A   708    
0402D2 01 FD 0C 04         A   709    	LD	BC,___print_uputch
0402D6 ED43 BC 16 04       A   710    	LD	(___print_xputch),BC
0402DB 01 7C 18 04         A   711    	LD	BC,L__22
0402DF C5                  A   712    	PUSH	BC
0402E0 CD 92 0B 04         A   713    	CALL	___print_sendstring
0402E4 C1                  A   714    	POP	BC
0402E5 3E08                A   715    	LD	A,%8
0402E7 32 53 1E 04         A   716    	LD	(___print_fmt+5),A
0402EB 3E40                A   717    	LD	A,%40
0402ED 32 4F 1E 04         A   718    	LD	(___print_fmt+1),A
0402F1 3E78                A   719    	LD	A,%78
0402F3 32 52 1E 04         A   720    	LD	(___print_fmt+4),A
0402F7 DD4EE7              A   721    	LD	C,(IX+%FFFFFFE7)
0402FA 0600                A   722    	LD	B,%0
0402FC C5                  A   723    	PUSH	BC
0402FD DD07E4              A   724    	LD	BC,(IX+%FFFFFFE4)
040300 C5                  A   725    	PUSH	BC
040301 CD 86 14 04         A   726    	CALL	__u_ultoa
040305 C1                  A   727    	POP	BC
040306 C1                  A   728    	POP	BC
040307 01 8E 18 04         A   729    	LD	BC,L__23
04030B C5                  A   730    	PUSH	BC
04030C CD 92 0B 04         A   731    	CALL	___print_sendstring
040310 C1                  A   732    	POP	BC
                           A   733    ;   86	
                           A   734    ;   87		if(crcexpected != crcresult)
                           A   735    .LINE 87
                           A   736    
040311 DD27E4              A   737    	LD	HL,(IX+%FFFFFFE4)
040314 DD5EE7              A   738    	LD	E,(IX+%FFFFFFE7)
040317 018DE959            A   739    	LD	BC,5892493
04031B 3EFE                A   740    	LD	A,%FE
04031D CD FB 13 04         A   741    	CALL	__lcmpu
040321 28 15               A   742    	JR	Z,L_17
                           A   743    ;   88		{
                           A   744    ;   89			printf("\n\rMismatch, aborting 
                           A   745    .LINE 89
                           A   746    
040323 01 FD 0C 04         A   747    	LD	BC,___print_uputch
040327 ED43 BC 16 04       A   748    	LD	(___print_xputch),BC
04032C 01 91 18 04         A   749    	LD	BC,L__25
040330 C5                  A   750    	PUSH	BC
040331 CD 92 0B 04         A   751    	CALL	___print_sendstring
040335 C1                  A   752    	POP	BC
                           A   753    ;   90			while(1);
040336                     A   754    L_15:
                           A   755    .LINE 90
                           A   756    
040336 18 FE               A   757    	JR	L_15
                           A   758    ;   91		}
040338                     A   759    L_17:
                           A   760    .LINE 91
                           A   761    
                           A   762    ;   92		printf("\n\rOK\n\r\n\r");
                           A   763    .LINE 92
                           A   764    
040338 01 FD 0C 04         A   765    	LD	BC,___print_uputch
04033C ED43 BC 16 04       A   766    	LD	(___print_xputch),BC
040341 01 C1 18 04         A   767    	LD	BC,L__26
040345 C5                  A   768    	PUSH	BC
040346 CD 92 0B 04         A   769    	CALL	___print_sendstring
04034A C1                  A   770    	POP	BC
                           A   771    ;   93	
                           A   772    ;   94		// Ask user to continue
                           A   773    ;   95		printf("Erase and program flash (y/
                           A   774    .LINE 95
                           A   775    
04034B 01 FD 0C 04         A   776    	LD	BC,___print_uputch
04034F ED43 BC 16 04       A   777    	LD	(___print_xputch),BC
040354 01 CA 18 04         A   778    	LD	BC,L__27
040358 C5                  A   779    	PUSH	BC
040359 CD 92 0B 04         A   780    	CALL	___print_sendstring
04035D C1                  A   781    	POP	BC
                           A   782    ;   96		response = 0;
                           A   783    .LINE 96
                           A   784    
04035E DD36F900            A   785    	LD	(IX+%FFFFFFF9),%0
                           A   786    ;   97		while((response != 'y') && (respons
                           A   787    .LINE 97
                           A   788    
040362 18 07               A   789    	JR	L_19
040364                     A   790    L_20:
040364 CD C3 06 04         A   791    	CALL	_getch
040368 DD77F9              A   792    	LD	(IX+%FFFFFFF9),A
04036B                     A   793    L_19:
04036B DD7EF9              A   794    	LD	A,(IX+%FFFFFFF9)
04036E FE79                A   795    	CP	A,%79
040370 28 07               A   796    	JR	Z,L_62
040372 DD7EF9              A   797    	LD	A,(IX+%FFFFFFF9)
040375 FE6E                A   798    	CP	A,%6E
040377 20 EB               A   799    	JR	NZ,L_20
040379                     A   800    L_62:
                           A   801    ;   98		if(response == 'y')
                           A   802    .LINE 98
                           A   803    
040379 DD7EF9              A   804    	LD	A,(IX+%FFFFFFF9)
04037C FE79                A   805    	CP	A,%79
04037E C2 A9 06 04         A   806    	JR	NZ,L_61
                           A   807    ;   99		{
                           A   808    ;  100			printf("\r\nBacking up existing
                           A   809    .LINE 100
                           A   810    
040382 01 FD 0C 04         A   811    	LD	BC,___print_uputch
040386 ED43 BC 16 04       A   812    	LD	(___print_xputch),BC
04038B 01 EA 18 04         A   813    	LD	BC,L__31
04038F C5                  A   814    	PUSH	BC
040390 CD 92 0B 04         A   815    	CALL	___print_sendstring
040394 C1                  A   816    	POP	BC
                           A   817    ;  101			fastmemcpy(BUFFER2, 0x0, FLASHS
                           A   818    .LINE 101
                           A   819    
040395 01000002            A   820    	LD	BC,131072
040399 C5                  A   821    	PUSH	BC
04039A 01000000            A   822    	LD	BC,0
04039E C5                  A   823    	PUSH	BC
04039F 01000007            A   824    	LD	BC,458752
0403A3 C5                  A   825    	PUSH	BC
0403A4 CD 60 07 04         A   826    	CALL	_fastmemcpy
0403A8 C1                  A   827    	POP	BC
0403A9 C1                  A   828    	POP	BC
0403AA C1                  A   829    	POP	BC
                           A   830    ;  102			crcbackup = crc32((char*)0x0, F
                           A   831    .LINE 102
                           A   832    
0403AB 01000002            A   833    	LD	BC,131072
0403AF C5                  A   834    	PUSH	BC
0403B0 01000000            A   835    	LD	BC,0
0403B4 C5                  A   836    	PUSH	BC
0403B5 CD 65 09 04         A   837    	CALL	_crc32
0403B9 C1                  A   838    	POP	BC
0403BA C1                  A   839    	POP	BC
0403BB DD2FD6              A   840    	LD	(IX+%FFFFFFD6),HL
0403BE DD73D9              A   841    	LD	(IX+%FFFFFFD9),E
                           A   842    ;  103			
                           A   843    ;  104			di();							
                           A   844    .LINE 104
                           A   845    
0403C1 F3                  A   846    	di
                           A   847    ;  105	
                           A   848    ;  106			// start address in flash
                           A   849    ;  107			addressto = FLASHSTART;
                           A   850    .LINE 107
                           A   851    
0403C2 01000000            A   852    	LD	BC,0
0403C6 DD0FE9              A   853    	LD	(IX+%FFFFFFE9),BC
                           A   854    ;  108			addressfrom = BUFFER1;
                           A   855    .LINE 108
                           A   856    
0403C9 01000005            A   857    	LD	BC,327680
0403CD DD0FF5              A   858    	LD	(IX+%FFFFFFF5),BC
                           A   859    ;  109			
                           A   860    ;  110			state = firmware;		
                           A   861    .LINE 110
                           A   862    
0403D0 01000000            A   863    	LD	BC,0
0403D4 DD0FF2              A   864    	LD	(IX+%FFFFFFF2),BC
                           A   865    ;  111			while(1)
0403D7                     A   866    L_59:
                           A   867    .LINE 111
                           A   868    
                           A   869    ;  112			{
                           A   870    ;  113				switch(state)
                           A   871    .LINE 113
                           A   872    
0403D7 DD27F2              A   873    	LD	HL,(IX+%FFFFFFF2)
0403DA CD B8 13 04         A   874    	CALL	__case8D
0403DE E9                  A   875    	JP	(HL)
0403DF                     A   876    L__32:
0403DF 0200                A   877    	DW	2
0403E1 00                  A   878    	DB	0
0403E2 EC0304              A   879    	DW24	L_21	
                           A   880    
0403E5 01                  A   881    	DB	1
0403E6 F50304              A   882    	DW24	L_22	
                           A   883    
0403E9 050404              A   884    	DW24	L_23	
                           A   885    
                           A   886    ;  114				{
                           A   887    ;  115					case firmware:
0403EC                     A   888    L_21:
                           A   889    .LINE 115
                           A   890    
                           A   891    ;  116						// start address in
                           A   892    ;  117						addressfrom = BUFFE
                           A   893    .LINE 117
                           A   894    
0403EC 01000005            A   895    	LD	BC,327680
0403F0 DD0FF5              A   896    	LD	(IX+%FFFFFFF5),BC
                           A   897    ;  118						break;
                           A   898    .LINE 118
                           A   899    
0403F3 18 7C               A   900    	JR	L_29
                           A   901    ;  119					case recover:
0403F5                     A   902    L_22:
                           A   903    .LINE 119
                           A   904    
                           A   905    ;  120						// start address in
                           A   906    ;  121						addressfrom = BUFFE
                           A   907    .LINE 121
                           A   908    
0403F5 01000007            A   909    	LD	BC,458752
0403F9 DD0FF5              A   910    	LD	(IX+%FFFFFFF5),BC
                           A   911    ;  122						size = FLASHSIZE;	
                           A   912    .LINE 122
                           A   913    
0403FC 01000002            A   914    	LD	BC,131072
040400 DD0FFA              A   915    	LD	(IX+%FFFFFFFA),BC
                           A   916    ;  123						break;
                           A   917    .LINE 123
                           A   918    
040403 18 6C               A   919    	JR	L_29
                           A   920    ;  124					default:
040405                     A   921    L_23:
                           A   922    .LINE 124
                           A   923    
                           A   924    ;  125						// RESET SYSTEM
                           A   925    ;  126						printf("\r\n");
                           A   926    .LINE 126
                           A   927    
040405 01 FD 0C 04         A   928    	LD	BC,___print_uputch
040409 ED43 BC 16 04       A   929    	LD	(___print_xputch),BC
04040E 01 0D 19 04         A   930    	LD	BC,L__33
040412 C5                  A   931    	PUSH	BC
040413 CD 92 0B 04         A   932    	CALL	___print_sendstring
040417 C1                  A   933    	POP	BC
                           A   934    ;  127						for(counter = 9; co
                           A   935    .LINE 127
                           A   936    
040418 01090000            A   937    	LD	BC,9
04041C DD0FFD              A   938    	LD	(IX+%FFFFFFFD),BC
04041F 18 41               A   939    	JR	L_27
040421                     A   940    L_25:
                           A   941    ;  128						{
                           A   942    ;  129							printf("\rReset
                           A   943    .LINE 129
                           A   944    
040421 01 FD 0C 04         A   945    	LD	BC,___print_uputch
040425 ED43 BC 16 04       A   946    	LD	(___print_xputch),BC
04042A 01 10 19 04         A   947    	LD	BC,L__34
04042E C5                  A   948    	PUSH	BC
04042F CD 92 0B 04         A   949    	CALL	___print_sendstring
040433 C1                  A   950    	POP	BC
040434 DD07FD              A   951    	LD	BC,(IX+%FFFFFFFD)
040437 AF                  A   952    	XOR	A,A
040438 C5D1                A   953    	LD	DE,BC
04043A 4F                  A   954    	LD	C,A
04043B 0600                A   955    	LD	B,%0
04043D C5                  A   956    	PUSH	BC
04043E D5                  A   957    	PUSH	DE
04043F CD 97 0D 04         A   958    	CALL	__u_itoa
040443 C1                  A   959    	POP	BC
040444 C1                  A   960    	POP	BC
040445 01730000            A   961    	LD	BC,115
040449 C5                  A   962    	PUSH	BC
04044A CD FD 0C 04         A   963    	CALL	___print_uputch
04044E C1                  A   964    	POP	BC
                           A   965    ;  130							delayms(1000);
                           A   966    .LINE 130
                           A   967    
04044F 01E80300            A   968    	LD	BC,1000
040453 C5                  A   969    	PUSH	BC
040454 CD 7F 07 04         A   970    	CALL	_delayms
040458 C1                  A   971    	POP	BC
040459 DD31FD              A   972    	LD	IY,(IX+%FFFFFFFD)
04045C ED33FF              A   973    	LEA	IY,IY+%FFFFFFFF
04045F DD3EFD              A   974    	LD	(IX+%FFFFFFFD),IY
                           A   975    ;  131						}
040462                     A   976    L_27:
                           A   977    .LINE 131
                           A   978    
040462 DD07FD              A   979    	LD	BC,(IX+%FFFFFFFD)
040465 B7                  A   980    	OR	A,A
040466 ED62                A   981    	SBC	HL,HL
040468 B7                  A   982    	OR	A,A
040469 ED42                A   983    	SBC	HL,BC
04046B 38 B4               A   984    	JR	C,L_25
                           A   985    ;  132						reset();
                           A   986    .LINE 132
                           A   987    
04046D CD 5E 07 04         A   988    	CALL	_reset
                           A   989    ;  133				}
040471                     A   990    L_29:
                           A   991    .LINE 133
                           A   992    
                           A   993    ;  134		
                           A   994    ;  135				// Unprotect and erase flas
                           A   995    ;  136				printf("\r\nErasing flash..
                           A   996    .LINE 136
                           A   997    
040471 01 FD 0C 04         A   998    	LD	BC,___print_uputch
040475 ED43 BC 16 04       A   999    	LD	(___print_xputch),BC
04047A 01 1B 19 04         A  1000    	LD	BC,L__36
04047E C5                  A  1001    	PUSH	BC
04047F CD 92 0B 04         A  1002    	CALL	___print_sendstring
040483 C1                  A  1003    	POP	BC
                           A  1004    ;  137				enableFlashKeyRegister();	
                           A  1005    .LINE 137
                           A  1006    
040484 CD 33 07 04         A  1007    	CALL	_enableFlashKeyRegister
                           A  1008    ;  138				FLASH_PROT = 0;				
                           A  1009    .LINE 138
                           A  1010    
040488 AF                  A  1011    	XOR	A,A
040489 ED39FA              A  1012    	OUT0	(250),A
                           A  1013    ;  139				enableFlashKeyRegister();	
                           A  1014    .LINE 139
                           A  1015    
04048C CD 33 07 04         A  1016    	CALL	_enableFlashKeyRegister
                           A  1017    ;  140				FLASH_FDIV = 0x5F;			
                           A  1018    .LINE 140
                           A  1019    
040490 3E5F                A  1020    	LD	A,%5F
040492 ED39F9              A  1021    	OUT0	(249),A
                           A  1022    ;  141				
                           A  1023    ;  142				for(counter = 0; counter < 
                           A  1024    .LINE 142
                           A  1025    
040495 01000000            A  1026    	LD	BC,0
040499 DD0FFD              A  1027    	LD	(IX+%FFFFFFFD),BC
04049C 18 1C               A  1028    	JR	L_35
04049E                     A  1029    L_33:
                           A  1030    ;  143				{
                           A  1031    ;  144					FLASH_PAGE = counter;
                           A  1032    .LINE 144
                           A  1033    
04049E DD7EFD              A  1034    	LD	A,(IX+%FFFFFFFD)
0404A1 ED39FC              A  1035    	OUT0	(252),A
                           A  1036    ;  145					FLASH_PGCTL = 0x02;		
                           A  1037    .LINE 145
                           A  1038    
0404A4 3E02                A  1039    	LD	A,%2
0404A6 ED39FF              A  1040    	OUT0	(255),A
                           A  1041    ;  146	
                           A  1042    ;  147					do
0404A9                     A  1043    L_31:
                           A  1044    .LINE 147
                           A  1045    
                           A  1046    ;  148					{
                           A  1047    ;  149						value = FLASH_PGCTL
                           A  1048    .LINE 149
                           A  1049    
0404A9 ED38FF              A  1050    	IN0	A,(255)
0404AC DD77E8              A  1051    	LD	(IX+%FFFFFFE8),A
                           A  1052    ;  150					}
                           A  1053    ;  151					while(value & 0x02);// 
                           A  1054    .LINE 151
                           A  1055    
0404AF E602                A  1056    	AND	A,%2
0404B1 20 F6               A  1057    	JR	NZ,L_31
0404B3 DD07FD              A  1058    	LD	BC,(IX+%FFFFFFFD)
0404B6 03                  A  1059    	INC	BC
0404B7 DD0FFD              A  1060    	LD	(IX+%FFFFFFFD),BC
                           A  1061    ;  152				}
0404BA                     A  1062    L_35:
                           A  1063    .LINE 152
                           A  1064    
0404BA 01800000            A  1065    	LD	BC,128
0404BE DD27FD              A  1066    	LD	HL,(IX+%FFFFFFFD)
0404C1 B7                  A  1067    	OR	A,A
0404C2 ED42                A  1068    	SBC	HL,BC
0404C4 38 D8               A  1069    	JR	C,L_33
                           A  1070    ;  153				
                           A  1071    ;  154				printf("\r\nWriting new fir
                           A  1072    .LINE 154
                           A  1073    
0404C6 01 FD 0C 04         A  1074    	LD	BC,___print_uputch
0404CA ED43 BC 16 04       A  1075    	LD	(___print_xputch),BC
0404CF 01 2F 19 04         A  1076    	LD	BC,L__39
0404D3 C5                  A  1077    	PUSH	BC
0404D4 CD 92 0B 04         A  1078    	CALL	___print_sendstring
0404D8 C1                  A  1079    	POP	BC
                           A  1080    ;  155				
                           A  1081    ;  156				// determine number of page
                           A  1082    ;  157				pagemax = size/PAGESIZE;
                           A  1083    .LINE 157
                           A  1084    
0404D9 DD27FA              A  1085    	LD	HL,(IX+%FFFFFFFA)
0404DC 3E0A                A  1086    	LD	A,%A
0404DE CD 8C 13 04         A  1087    	CALL	__ishru_b
0404E2 DD2FEF              A  1088    	LD	(IX+%FFFFFFEF),HL
                           A  1089    ;  158				if(size%PAGESIZE) // last p
                           A  1090    .LINE 158
                           A  1091    
0404E5 01FF0300            A  1092    	LD	BC,1023
0404E9 DD27FA              A  1093    	LD	HL,(IX+%FFFFFFFA)
0404EC CD 1E 14 04         A  1094    	CALL	__iand
0404F0 DD2FDE              A  1095    	LD	(IX+%FFFFFFDE),HL
0404F3 CD B2 10 04         A  1096    	CALL	__icmpzero
0404F7 28 0F               A  1097    	JR	Z,L_38
                           A  1098    ;  159				{
                           A  1099    ;  160					pagemax += 1;
                           A  1100    .LINE 160
                           A  1101    
0404F9 DD07EF              A  1102    	LD	BC,(IX+%FFFFFFEF)
0404FC 03                  A  1103    	INC	BC
0404FD DD0FEF              A  1104    	LD	(IX+%FFFFFFEF),BC
                           A  1105    ;  161					lastpagebytes = size%PA
                           A  1106    .LINE 161
                           A  1107    
040500 DD07DE              A  1108    	LD	BC,(IX+%FFFFFFDE)
040503 DD0FE1              A  1109    	LD	(IX+%FFFFFFE1),BC
                           A  1110    ;  162				}
                           A  1111    ;  163				else lastpagebytes = PAGESI
                           A  1112    .LINE 163
                           A  1113    
040506 18 07               A  1114    	JR	L_46
040508                     A  1115    L_38:
040508 01000400            A  1116    	LD	BC,1024
04050C DD0FE1              A  1117    	LD	(IX+%FFFFFFE1),BC
04050F                     A  1118    L_46:
                           A  1119    ;  164				
                           A  1120    ;  165				// write out each page to f
                           A  1121    ;  166				for(counter = 0; counter < 
                           A  1122    .LINE 166
                           A  1123    
04050F 01000000            A  1124    	LD	BC,0
040513 DD0FFD              A  1125    	LD	(IX+%FFFFFFFD),BC
040516 C3 C2 05 04         A  1126    	JR	L_45
04051A                     A  1127    L_43:
                           A  1128    ;  167				{
                           A  1129    ;  168					printf("\rWriting flash
                           A  1130    .LINE 168
                           A  1131    
04051A 01 FD 0C 04         A  1132    	LD	BC,___print_uputch
04051E ED43 BC 16 04       A  1133    	LD	(___print_xputch),BC
040523 01 4B 19 04         A  1134    	LD	BC,L__41
040527 C5                  A  1135    	PUSH	BC
040528 CD 92 0B 04         A  1136    	CALL	___print_sendstring
04052C C1                  A  1137    	POP	BC
04052D 3E03                A  1138    	LD	A,%3
04052F 32 53 1E 04         A  1139    	LD	(___print_fmt+5),A
040533 3E40                A  1140    	LD	A,%40
040535 32 4F 1E 04         A  1141    	LD	(___print_fmt+1),A
040539 DD07FD              A  1142    	LD	BC,(IX+%FFFFFFFD)
04053C 03                  A  1143    	INC	BC
04053D AF                  A  1144    	XOR	A,A
04053E C5D1                A  1145    	LD	DE,BC
040540 4F                  A  1146    	LD	C,A
040541 0600                A  1147    	LD	B,%0
040543 C5                  A  1148    	PUSH	BC
040544 D5                  A  1149    	PUSH	DE
040545 CD 97 0D 04         A  1150    	CALL	__u_itoa
040549 C1                  A  1151    	POP	BC
04054A C1                  A  1152    	POP	BC
04054B 012F0000            A  1153    	LD	BC,47
04054F C5                  A  1154    	PUSH	BC
040550 CD FD 0C 04         A  1155    	CALL	___print_uputch
040554 C1                  A  1156    	POP	BC
040555 3E03                A  1157    	LD	A,%3
040557 32 53 1E 04         A  1158    	LD	(___print_fmt+5),A
04055B 3E40                A  1159    	LD	A,%40
04055D 32 4F 1E 04         A  1160    	LD	(___print_fmt+1),A
040561 DD07EF              A  1161    	LD	BC,(IX+%FFFFFFEF)
040564 AF                  A  1162    	XOR	A,A
040565 C5D1                A  1163    	LD	DE,BC
040567 4F                  A  1164    	LD	C,A
040568 0600                A  1165    	LD	B,%0
04056A C5                  A  1166    	PUSH	BC
04056B D5                  A  1167    	PUSH	DE
04056C CD 97 0D 04         A  1168    	CALL	__u_itoa
040570 C1                  A  1169    	POP	BC
040571 C1                  A  1170    	POP	BC
                           A  1171    ;  169					
                           A  1172    ;  170					if(counter == (pagemax 
                           A  1173    .LINE 170
                           A  1174    
040572 DD31EF              A  1175    	LD	IY,(IX+%FFFFFFEF)
040575 ED23FF              A  1176    	LEA	HL,IY+%FFFFFFFF
040578 DD07FD              A  1177    	LD	BC,(IX+%FFFFFFFD)
04057B B7                  A  1178    	OR	A,A
04057C ED42                A  1179    	SBC	HL,BC
04057E 20 15               A  1180    	JR	NZ,L_41
                           A  1181    ;  171						fastmemcpy(addresst
                           A  1182    .LINE 171
                           A  1183    
040580 DD07E1              A  1184    	LD	BC,(IX+%FFFFFFE1)
040583 C5                  A  1185    	PUSH	BC
040584 DD07F5              A  1186    	LD	BC,(IX+%FFFFFFF5)
040587 C5                  A  1187    	PUSH	BC
040588 DD07E9              A  1188    	LD	BC,(IX+%FFFFFFE9)
04058B C5                  A  1189    	PUSH	BC
04058C CD 60 07 04         A  1190    	CALL	_fastmemcpy
040590 C1                  A  1191    	POP	BC
040591 C1                  A  1192    	POP	BC
040592 C1                  A  1193    	POP	BC
                           A  1194    ;  172						//printf("Fake copy
                           A  1195    ;  173					else 
                           A  1196    .LINE 173
                           A  1197    
040593 18 14               A  1198    	JR	L_42
040595                     A  1199    L_41:
                           A  1200    ;  174						fastmemcpy(addresst
                           A  1201    .LINE 174
                           A  1202    
040595 01000400            A  1203    	LD	BC,1024
040599 C5                  A  1204    	PUSH	BC
04059A DD07F5              A  1205    	LD	BC,(IX+%FFFFFFF5)
04059D C5                  A  1206    	PUSH	BC
04059E DD07E9              A  1207    	LD	BC,(IX+%FFFFFFE9)
0405A1 C5                  A  1208    	PUSH	BC
0405A2 CD 60 07 04         A  1209    	CALL	_fastmemcpy
0405A6 C1                  A  1210    	POP	BC
0405A7 C1                  A  1211    	POP	BC
0405A8 C1                  A  1212    	POP	BC
0405A9                     A  1213    L_42:
                           A  1214    ;  175						//printf("Fake copy
                           A  1215    ;  176				
                           A  1216    ;  177					addressto += PAGESIZE;
                           A  1217    .LINE 177
                           A  1218    
0405A9 01000400            A  1219    	LD	BC,1024
0405AD DD27E9              A  1220    	LD	HL,(IX+%FFFFFFE9)
0405B0 09                  A  1221    	ADD	HL,BC
0405B1 DD2FE9              A  1222    	LD	(IX+%FFFFFFE9),HL
                           A  1223    ;  178					addressfrom += PAGESIZE
                           A  1224    .LINE 178
                           A  1225    
0405B4 DD27F5              A  1226    	LD	HL,(IX+%FFFFFFF5)
0405B7 09                  A  1227    	ADD	HL,BC
0405B8 DD2FF5              A  1228    	LD	(IX+%FFFFFFF5),HL
0405BB DD07FD              A  1229    	LD	BC,(IX+%FFFFFFFD)
0405BE 03                  A  1230    	INC	BC
0405BF DD0FFD              A  1231    	LD	(IX+%FFFFFFFD),BC
                           A  1232    ;  179				}
0405C2                     A  1233    L_45:
                           A  1234    .LINE 179
                           A  1235    
0405C2 DD07EF              A  1236    	LD	BC,(IX+%FFFFFFEF)
0405C5 DD27FD              A  1237    	LD	HL,(IX+%FFFFFFFD)
0405C8 B7                  A  1238    	OR	A,A
0405C9 ED42                A  1239    	SBC	HL,BC
0405CB DA 1A 05 04         A  1240    	JR	C,L_43
                           A  1241    ;  180				lockFlashKeyRegister();	// 
                           A  1242    .LINE 180
                           A  1243    
0405CF CD 4B 07 04         A  1244    	CALL	_lockFlashKeyRegister
                           A  1245    ;  181				printf("\r\n");
                           A  1246    .LINE 181
                           A  1247    
0405D3 01 FD 0C 04         A  1248    	LD	BC,___print_uputch
0405D7 ED43 BC 16 04       A  1249    	LD	(___print_xputch),BC
0405DC 01 60 19 04         A  1250    	LD	BC,L__44
0405E0 C5                  A  1251    	PUSH	BC
0405E1 CD 92 0B 04         A  1252    	CALL	___print_sendstring
0405E5 C1                  A  1253    	POP	BC
                           A  1254    ;  182				
                           A  1255    ;  183				//Verify correct CRC in fla
                           A  1256    ;  184				printf("Verifying flash che
                           A  1257    .LINE 184
                           A  1258    
0405E6 01 FD 0C 04         A  1259    	LD	BC,___print_uputch
0405EA ED43 BC 16 04       A  1260    	LD	(___print_xputch),BC
0405EF 01 63 19 04         A  1261    	LD	BC,L__45
0405F3 C5                  A  1262    	PUSH	BC
0405F4 CD 92 0B 04         A  1263    	CALL	___print_sendstring
0405F8 C1                  A  1264    	POP	BC
                           A  1265    ;  185				crcresult = crc32((char*)FL
                           A  1266    .LINE 185
                           A  1267    
0405F9 DD07FA              A  1268    	LD	BC,(IX+%FFFFFFFA)
0405FC C5                  A  1269    	PUSH	BC
0405FD 01000000            A  1270    	LD	BC,0
040601 C5                  A  1271    	PUSH	BC
040602 CD 65 09 04         A  1272    	CALL	_crc32
040606 C1                  A  1273    	POP	BC
040607 C1                  A  1274    	POP	BC
040608 DD2FE4              A  1275    	LD	(IX+%FFFFFFE4),HL
04060B DD73E7              A  1276    	LD	(IX+%FFFFFFE7),E
                           A  1277    ;  186	
                           A  1278    ;  187				if(state == recover) crcexp
                           A  1279    .LINE 187
                           A  1280    
04060E 01010000            A  1281    	LD	BC,1
040612 DD27F2              A  1282    	LD	HL,(IX+%FFFFFFF2)
040615 B7                  A  1283    	OR	A,A
040616 ED42                A  1284    	SBC	HL,BC
040618 20 0C               A  1285    	JR	NZ,L_57
04061A DD07D6              A  1286    	LD	BC,(IX+%FFFFFFD6)
04061D DD7ED9              A  1287    	LD	A,(IX+%FFFFFFD9)
040620 DD0FDA              A  1288    	LD	(IX+%FFFFFFDA),BC
040623 DD77DD              A  1289    	LD	(IX+%FFFFFFDD),A
040626                     A  1290    L_57:
                           A  1291    ;  188				
                           A  1292    ;  189				if(crcresult == crcexpected
                           A  1293    .LINE 189
                           A  1294    
040626 DD27E4              A  1295    	LD	HL,(IX+%FFFFFFE4)
040629 DD5EE7              A  1296    	LD	E,(IX+%FFFFFFE7)
04062C DD07DA              A  1297    	LD	BC,(IX+%FFFFFFDA)
04062F DD7EDD              A  1298    	LD	A,(IX+%FFFFFFDD)
040632 CD FB 13 04         A  1299    	CALL	__lcmpu
040636 20 1E               A  1300    	JR	NZ,L_56
                           A  1301    ;  190				{
                           A  1302    ;  191					printf("- OK\r\n");
                           A  1303    .LINE 191
                           A  1304    
040638 01 FD 0C 04         A  1305    	LD	BC,___print_uputch
04063C ED43 BC 16 04       A  1306    	LD	(___print_xputch),BC
040641 01 80 19 04         A  1307    	LD	BC,L__48
040645 C5                  A  1308    	PUSH	BC
040646 CD 92 0B 04         A  1309    	CALL	___print_sendstring
04064A C1                  A  1310    	POP	BC
                           A  1311    ;  192					state = systemreset;
                           A  1312    .LINE 192
                           A  1313    
04064B 01020000            A  1314    	LD	BC,2
04064F DD0FF2              A  1315    	LD	(IX+%FFFFFFF2),BC
                           A  1316    ;  193				}
                           A  1317    ;  194				else // CRC Failure - next 
                           A  1318    .LINE 194
                           A  1319    
040652 C3 D7 03 04         A  1320    	JR	L_59
040656                     A  1321    L_56:
                           A  1322    ;  195				{	 // User interaction no
                           A  1323    ;  196					switch(state)
                           A  1324    .LINE 196
                           A  1325    
040656 DD27F2              A  1326    	LD	HL,(IX+%FFFFFFF2)
040659 CD B8 13 04         A  1327    	CALL	__case8D
04065D E9                  A  1328    	JP	(HL)
04065E                     A  1329    L__49:
04065E 0200                A  1330    	DW	2
040660 00                  A  1331    	DB	0
040661 6B0604              A  1332    	DW24	L_49	
                           A  1333    
040664 01                  A  1334    	DB	1
040665 890604              A  1335    	DW24	L_50	
                           A  1336    
040668 9E0604              A  1337    	DW24	L_53	
                           A  1338    
                           A  1339    ;  197					{
                           A  1340    ;  198						case firmware:
04066B                     A  1341    L_49:
                           A  1342    .LINE 198
                           A  1343    
                           A  1344    ;  199							printf("\r\nErr
                           A  1345    .LINE 199
                           A  1346    
04066B 01 FD 0C 04         A  1347    	LD	BC,___print_uputch
04066F ED43 BC 16 04       A  1348    	LD	(___print_xputch),BC
040674 01 87 19 04         A  1349    	LD	BC,L__50
040678 C5                  A  1350    	PUSH	BC
040679 CD 92 0B 04         A  1351    	CALL	___print_sendstring
04067D C1                  A  1352    	POP	BC
                           A  1353    ;  200							state = recover
                           A  1354    .LINE 200
                           A  1355    
04067E 01010000            A  1356    	LD	BC,1
040682 DD0FF2              A  1357    	LD	(IX+%FFFFFFF2),BC
                           A  1358    ;  201							break;
                           A  1359    .LINE 201
                           A  1360    
040685 C3 D7 03 04         A  1361    	JR	L_59
                           A  1362    ;  202						case recover:
040689                     A  1363    L_50:
                           A  1364    .LINE 202
                           A  1365    
                           A  1366    ;  203							printf("\r\nErr
                           A  1367    .LINE 203
                           A  1368    
040689 01 FD 0C 04         A  1369    	LD	BC,___print_uputch
04068D ED43 BC 16 04       A  1370    	LD	(___print_xputch),BC
040692 01 D4 19 04         A  1371    	LD	BC,L__51
040696 C5                  A  1372    	PUSH	BC
040697 CD 92 0B 04         A  1373    	CALL	___print_sendstring
04069B C1                  A  1374    	POP	BC
                           A  1375    ;  204							while(1); // no
04069C                     A  1376    L_52:
                           A  1377    .LINE 204
                           A  1378    
04069C 18 FE               A  1379    	JR	L_52
                           A  1380    ;  205						default:
04069E                     A  1381    L_53:
                           A  1382    .LINE 205
                           A  1383    
                           A  1384    ;  206							state = recover
                           A  1385    .LINE 206
                           A  1386    
04069E 01010000            A  1387    	LD	BC,1
0406A2 DD0FF2              A  1388    	LD	(IX+%FFFFFFF2),BC
0406A5 C3 D7 03 04         A  1389    	JR	L_59
                           A  1390    ;  207					}
                           A  1391    ;  208				}
                           A  1392    ;  209			}		
                           A  1393    ;  210		}
                           A  1394    ;  211		else printf("\n\rUser abort - pleas
0406A9                     A  1395    L_61:
                           A  1396    .LINE 211
                           A  1397    
0406A9 01 FD 0C 04         A  1398    	LD	BC,___print_uputch
0406AD ED43 BC 16 04       A  1399    	LD	(___print_xputch),BC
0406B2 01 11 1A 04         A  1400    	LD	BC,L__52
0406B6 C5                  A  1401    	PUSH	BC
0406B7 CD 92 0B 04         A  1402    	CALL	___print_sendstring
0406BB C1                  A  1403    	POP	BC
                           A  1404    ;  212		
                           A  1405    ;  213		while(1);
0406BC                     A  1406    L_64:
                           A  1407    .LINE 213
                           A  1408    
0406BC 18 FE               A  1409    	JR	L_64
                           A  1410    ;  214	}
                           A  1411    .LINE 214
                           A  1412    
0406BE DDF9                A  1413    	LD	SP,IX
0406C0 DDE1                A  1414    	POP	IX
0406C2 C9                  A  1415    	RET	
                           A  1416    
                           A  1417    
                           A  1418    ;**************************** _main ***********
                           A  1419    ;Name                         Addr/Register   S
                           A  1420    ;_lockFlashKeyRegister               IMPORT  --
                           A  1421    ;_enableFlashKeyRegister             IMPORT  --
                           A  1422    ;_reset                              IMPORT  --
                           A  1423    ;_delayms                            IMPORT  --
                           A  1424    ;_fastmemcpy                         IMPORT  --
                           A  1425    ;_getch                              IMPORT  --
                           A  1426    ;_crc32                              IMPORT  --
                           A  1427    ;__u_ultoa                           IMPORT  --
                           A  1428    ;___print_fmt                        IMPORT    
                           A  1429    ;_mos_fclose                         IMPORT  --
                           A  1430    ;_mos_feof                           IMPORT  --
                           A  1431    ;_mos_fgetc                          IMPORT  --
                           A  1432    ;__u_itoa                            IMPORT  --
                           A  1433    ;_mos_fopen                          IMPORT  --
                           A  1434    ;___print_sendstring                 IMPORT  --
                           A  1435    ;___print_xputch                     IMPORT    
                           A  1436    ;___print_uputch                     IMPORT  --
                           A  1437    ;crcbackup                            IX-42    
                           A  1438    ;crcexpected                          IX-38    
                           A  1439    ;G_0                                  IX-34    
                           A  1440    ;lastpagebytes                        IX-31    
                           A  1441    ;crcresult                            IX-28    
                           A  1442    ;value                                IX-24    
                           A  1443    ;addressto                            IX-23    
                           A  1444    ;ptr                                  IX-20    
                           A  1445    ;pagemax                              IX-17    
                           A  1446    ;state                                IX-14    
                           A  1447    ;addressfrom                          IX-11    
                           A  1448    ;file                                  IX-8    
                           A  1449    ;response                              IX-7    
                           A  1450    ;size                                  IX-6    
                           A  1451    ;counter                               IX-3    
                           A  1452    ;argv                                  IX+9    
                           A  1453    ;argc                                  IX+6    
                           A  1454    
                           A  1455    
                           A  1456    ; Stack Frame Size: 57 (bytes)
                           A  1457    ;       Spill Code: 0 (instruction)
                           A  1458    
                           A  1459    
                           A  1460    .ENDFUNC "main",214,"_main"
                           A  1461    	SEGMENT STRSECT
04173F                     A  1462    L__2:
04173F 41676F6E 204D4F53   A  1463    	DB	"Agon MOS firmware upgrade utility"
041747 20666972 6D776172 
04174F 65207570 67726164 
041757 65207574 696C6974 
04175F 79 
041760 0A0D00              A  1464    	DB	10,13,0
041763                     A  1465    L__3:
041763 54686973 20757469   A  1466    	DB	"This utility will upgrade an existing 
04176B 6C697479 2077696C 
041773 6C207570 67726164 
04177B 6520616E 20657869 
041783 7374696E 6720312E 
04178B 30302F31 2E303120 
041793 6669726D 77617265 
04179B 20746F20 312E3032 
0417A3 0D0A0D0A 00         A  1467    	DB	13,10,13,10,0
0417A8                     A  1468    L__4:
0417A8 6669726D 77617265   A  1469    	DB	"firmware102.bin"
0417B0 3130322E 62696E 
0417B7 00                  A  1470    	DB	0
0417B8                     A  1471    L__6:
0417B8 4572726F 72206F70   A  1472    	DB	"Error opening \""
0417C0 656E696E 672022 
0417C7 00                  A  1473    	DB	0
0417C8                     A  1474    L__7:
0417C8 6669726D 77617265   A  1475    	DB	"firmware102.bin"
0417D0 3130322E 62696E 
0417D7 00                  A  1476    	DB	0
0417D8                     A  1477    L__8:
0417D8 22202D20 706C6561   A  1478    	DB	"\" - please push reset button"
0417E0 73652070 75736820 
0417E8 72657365 74206275 
0417F0 74746F6E 
0417F4 00                  A  1479    	DB	0
0417F5                     A  1480    L__9:
0417F5 4C6F6164 696E6720   A  1481    	DB	"Loading file : "
0417FD 66696C65 203A20 
041804 00                  A  1482    	DB	0
041805                     A  1483    L__10:
041805 6669726D 77617265   A  1484    	DB	"firmware102.bin"
04180D 3130322E 62696E 
041814 00                  A  1485    	DB	0
041815                     A  1486    L__11:
041815 0A0D00              A  1487    	DB	10,13,0
041818                     A  1488    L__12:
041818 46696C65 2073697A   A  1489    	DB	"File size    : "
041820 65202020 203A20 
041827 00                  A  1490    	DB	0
041828                     A  1491    L__13:
041828 20627974 65287329   A  1492    	DB	" byte(s)"
041830 00                  A  1493    	DB	0
041831                     A  1494    L__15:
041831 0D                  A  1495    	DB	13
041832 46696C65 2073697A   A  1496    	DB	"File size    : "
04183A 65202020 203A20 
041841 00                  A  1497    	DB	0
041842                     A  1498    L__16:
041842 20627974 65287329   A  1499    	DB	" byte(s)"
04184A 00                  A  1500    	DB	0
04184B                     A  1501    L__18:
04184B 0D                  A  1502    	DB	13
04184C 46696C65 2073697A   A  1503    	DB	"File size    : "
041854 65202020 203A20 
04185B 00                  A  1504    	DB	0
04185C                     A  1505    L__19:
04185C 20627974 65287329   A  1506    	DB	" byte(s)"
041864 0A0D00              A  1507    	DB	10,13,0
041867                     A  1508    L__20:
041867 54657374 696E6720   A  1509    	DB	"Testing CRC32: 0x"
04186F 43524333 323A2030 
041877 78 
041878 00                  A  1510    	DB	0
041879                     A  1511    L__21:
041879 0A0D00              A  1512    	DB	10,13,0
04187C                     A  1513    L__22:
04187C 43524333 32207265   A  1514    	DB	"CRC32 result : 0x"
041884 73756C74 203A2030 
04188C 78 
04188D 00                  A  1515    	DB	0
04188E                     A  1516    L__23:
04188E 0A0D00              A  1517    	DB	10,13,0
041891                     A  1518    L__25:
041891 0A0D                A  1519    	DB	10,13
041893 4D69736D 61746368   A  1520    	DB	"Mismatch, aborting - please push reset
04189B 2C206162 6F727469 
0418A3 6E67202D 20706C65 
0418AB 61736520 70757368 
0418B3 20726573 65742062 
0418BB 7574746F 6E 
0418C0 00                  A  1521    	DB	0
0418C1                     A  1522    L__26:
0418C1 0A0D                A  1523    	DB	10,13
0418C3 4F4B                A  1524    	DB	"OK"
0418C5 0A0D0A0D 00         A  1525    	DB	10,13,10,13,0
0418CA                     A  1526    L__27:
0418CA 45726173 6520616E   A  1527    	DB	"Erase and program flash (y/n)? "
0418D2 64207072 6F677261 
0418DA 6D20666C 61736820 
0418E2 28792F6E 293F20 
0418E9 00                  A  1528    	DB	0
0418EA                     A  1529    L__31:
0418EA 0D0A                A  1530    	DB	13,10
0418EC 4261636B 696E6720   A  1531    	DB	"Backing up existing firmware... "
0418F4 75702065 78697374 
0418FC 696E6720 6669726D 
041904 77617265 2E2E2E20 
04190C 00                  A  1532    	DB	0
04190D                     A  1533    L__33:
04190D 0D0A00              A  1534    	DB	13,10,0
041910                     A  1535    L__34:
041910 0D                  A  1536    	DB	13
041911 52657365 7420696E   A  1537    	DB	"Reset in "
041919 20 
04191A 00                  A  1538    	DB	0
04191B                     A  1539    L__36:
04191B 0D0A                A  1540    	DB	13,10
04191D 45726173 696E6720   A  1541    	DB	"Erasing flash... "
041925 666C6173 682E2E2E 
04192D 20 
04192E 00                  A  1542    	DB	0
04192F                     A  1543    L__39:
04192F 0D0A                A  1544    	DB	13,10
041931 57726974 696E6720   A  1545    	DB	"Writing new firmware..."
041939 6E657720 6669726D 
041941 77617265 2E2E2E 
041948 0D0A00              A  1546    	DB	13,10,0
04194B                     A  1547    L__41:
04194B 0D                  A  1548    	DB	13
04194C 57726974 696E6720   A  1549    	DB	"Writing flash page "
041954 666C6173 68207061 
04195C 676520 
04195F 00                  A  1550    	DB	0
041960                     A  1551    L__44:
041960 0D0A00              A  1552    	DB	13,10,0
041963                     A  1553    L__45:
041963 56657269 6679696E   A  1554    	DB	"Verifying flash checksum... "
04196B 6720666C 61736820 
041973 63686563 6B73756D 
04197B 2E2E2E20 
04197F 00                  A  1555    	DB	0
041980                     A  1556    L__48:
041980 2D204F4B            A  1557    	DB	"- OK"
041984 0D0A00              A  1558    	DB	13,10,0
041987                     A  1559    L__50:
041987 0D0A                A  1560    	DB	13,10
041989 4572726F 72206F63   A  1561    	DB	"Error occured during flash write"
041991 63757265 64206475 
041999 72696E67 20666C61 
0419A1 73682077 72697465 
0419A9 0D0A                A  1562    	DB	13,10
0419AB 41747465 6D707469   A  1563    	DB	"Attempting to flash backup firmware...
0419B3 6E672074 6F20666C 
0419BB 61736820 6261636B 
0419C3 75702066 69726D77 
0419CB 6172652E 2E2E 
0419D1 0D0A00              A  1564    	DB	13,10,0
0419D4                     A  1565    L__51:
0419D4 0D0A                A  1566    	DB	13,10
0419D6 4572726F 72206F63   A  1567    	DB	"Error occured during flash write"
0419DE 63757265 64206475 
0419E6 72696E67 20666C61 
0419EE 73682077 72697465 
0419F6 0D0A                A  1568    	DB	13,10
0419F8 4261636B 75702072   A  1569    	DB	"Backup recovery failed"
041A00 65636F76 65727920 
041A08 6661696C 6564 
041A0E 0D0A00              A  1570    	DB	13,10,0
041A11                     A  1571    L__52:
041A11 0A0D                A  1572    	DB	10,13
041A13 55736572 2061626F   A  1573    	DB	"User abort - please push reset button"
041A1B 7274202D 20706C65 
041A23 61736520 70757368 
041A2B 20726573 65742062 
041A33 7574746F 6E 
041A38 00                  A  1574    	DB	0
                           A  1575    	XREF _crc32:ROM
                           A  1576    	XREF _delayms:ROM
                           A  1577    	XREF _reset:ROM
                           A  1578    	XREF _fastmemcpy:ROM
                           A  1579    	XREF _lockFlashKeyRegister:ROM
                           A  1580    	XREF _enableFlashKeyRegister:ROM
                           A  1581    	XREF _mos_feof:ROM
                           A  1582    	XREF _mos_fgetc:ROM
                           A  1583    	XREF _mos_fclose:ROM
                           A  1584    	XREF _mos_fopen:ROM
                           A  1585    	XREF _getch:ROM
                           A  1586    	XREF __u_ultoa:ROM
                           A  1587    	XREF __u_itoa:ROM
                           A  1588    	XREF ___print_sendstring:ROM
                           A  1589    	XREF ___print_xputch:ROM
                           A  1590    	XREF ___print_uputch:ROM
                           A  1591    	XREF ___print_fmt:ROM
                           A  1592    	XREF __lcmpu:ROM
                           A  1593    	XREF __iand:ROM
                           A  1594    	XREF __icmpzero:ROM
                           A  1595    	XREF __case8D:ROM
                           A  1596    	XREF __ishru_b:ROM
                           A  1597    	XDEF _main
                           A  1598    	XDEF _putch
                           A  1599    	XDEF _errno
                           A  1600    	END


Errors: 0
Warnings: 0
Lines Assembled: 1601
