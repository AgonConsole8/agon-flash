Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     11:19:36     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:		Flash interface
                           A     3    ; Author:		Jeroen Venema
                           A     4    ; Created:		16/12/2022
                           A     5    ; Last Updated:	14/10/2023
                           A     6    ; 
                           A     7    ; Modinfo:
                           A     8    ;	14/10/2023: VDP update routine added
                           A     9    
                           A    10    	XDEF _enableFlashKeyRegister
                           A    11    	XDEF _lockFlashKeyRegister
                           A    12    	XDEF _fastmemcpy
                           A    13    	XDEF _reset
                           A    14    	XDEF _startVDPupdate
                           A    15    	
                           A    16    	segment CODE
                           A    17    	.assume ADL=1
                           B     0    	.include "mos_api.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           A    19    
       00000400            A    20    BUFFERSIZE	EQU 1024
       00050000            A    21    buffer		EQU 50000h	; memory location
                           A    22    
0B0B7B                     A    23    _enableFlashKeyRegister:
0B0B7B DDE5                A    24    	PUSH	IX
0B0B7D DD210000 00         A    25    	LD		IX, 0
0B0B82 DD39                A    26    	ADD		IX, SP
                           A    27    	
                           A    28    	; actual work here
0B0B84 3EB6                A    29    	LD		A, b6h	; unlock
0B0B86 ED39F5              A    30    	OUT0	(F5h), A
0B0B89 3E49                A    31    	LD		A, 49h
0B0B8B ED39F5              A    32    	OUT0	(F5h), A
                           A    33    	
0B0B8E DDF9                A    34    	LD		SP, IX
0B0B90 DDE1                A    35    	POP		IX
0B0B92 C9                  A    36    	RET
                           A    37    
0B0B93                     A    38    _lockFlashKeyRegister:
0B0B93 DDE5                A    39    	PUSH	IX
0B0B95 DD210000 00         A    40    	LD		IX, 0
0B0B9A DD39                A    41    	ADD		IX, SP
                           A    42    	
0B0B9C 3EFF                A    43    	LD		A, FFh	; lock
0B0B9E ED39F5              A    44    	OUT0	(F5h), A
                           A    45    	
0B0BA1 DDF9                A    46    	LD		SP, IX
0B0BA3 DDE1                A    47    	POP		IX
0B0BA5 C9                  A    48    	RET
                           A    49    	
0B0BA6                     A    50    _reset:
0B0BA6 C7                  A    51    	RST	0h
0B0BA7 C9                  A    52    	RET ; will never get here
                           A    53    	
0B0BA8                     A    54    _fastmemcpy:
0B0BA8 DDE5                A    55    	PUSH	IX
0B0BAA DD210000 00         A    56    	LD		IX, 0
0B0BAF DD39                A    57    	ADD		IX, SP
                           A    58    
0B0BB1 C5                  A    59    	PUSH BC
0B0BB2 D5                  A    60    	PUSH DE
0B0BB3 E5                  A    61    	PUSH HL
                           A    62    	
0B0BB4 DD1706              A    63    	LD		DE, (IX+6)	; destination address
0B0BB7 DD2709              A    64    	LD		HL, (IX+9)	; source
0B0BBA DD070C              A    65    	LD		BC, (IX+12)	; number of bytes to wr
0B0BBD EDB0                A    66    	LDIR
                           A    67    
0B0BBF E1                  A    68    	POP HL
0B0BC0 D1                  A    69    	POP DE
0B0BC1 C1                  A    70    	POP BC
                           A    71    
0B0BC2 DDF9                A    72    	LD		SP, IX
0B0BC4 DDE1                A    73    	POP		IX
0B0BC6 C9                  A    74    	RET
                           A    75    
0B0BC7                     A    76    _startVDPupdate:
0B0BC7 DDE5                A    77    	PUSH	IX
0B0BC9 DD210000 00         A    78    	LD		IX, 0
0B0BCE DD39                A    79    	ADD		IX, SP
                           A    80    
0B0BD0 DD7E06              A    81    	LD	A, (IX+6)
0B0BD3 32 44 0C 0B         A    82    	LD	(filehandle), A
0B0BD7 DD2709              A    83    	LD	HL, (IX+9)
0B0BDA 22 45 0C 0B         A    84    	LD	(filesize), HL
                           A    85    
0B0BDE                     A    86    sendstartsequence:
0B0BDE 3E17                A    87        LD  A, 23
0B0BE0 5BD7                A    88        RST.LIL 10h
0B0BE2 3E1D                A    89        LD  A, 29
0B0BE4 5BD7                A    90        RST.LIL 10h
0B0BE6 3E01                A    91        LD  A, 1
0B0BE8 5BD7                A    92        RST.LIL 10h
                           A    93    
0B0BEA                     A    94    sendsize:
0B0BEA 2A 45 0C 0B         A    95    	LD	HL, (filesize)
0B0BEE 7D                  A    96        LD   A, L
0B0BEF 5BD7                A    97        RST.LIL 10h ; send LSB
0B0BF1 7C                  A    98        LD   A, H
0B0BF2 5BD7                A    99        RST.LIL 10h ; send middle byte
0B0BF4 E5                  A   100        PUSH HL
0B0BF5 33                  A   101        INC  SP
0B0BF6 F1                  A   102        POP  AF
0B0BF7 3B                  A   103        DEC  SP
0B0BF8 5BD7                A   104        RST.LIL 10h ; send MSB
                           A   105    
0B0BFA                     A   106    senddata_start:
0B0BFA 3E00                A   107        LD   A, 0
0B0BFC 32 43 0C 0B         A   108        LD   (checksum), A
                           A   109    
0B0C00                     A   110    senddata:
0B0C00 3A 44 0C 0B         A   111        LD   A, (filehandle)
0B0C04 4F                  A   112        LD   C, A
0B0C05 21000005            A   113        LD   HL, buffer
0B0C09 11000400            A   114        LD   DE, BUFFERSIZE
0B0C0D 3E1A                A   115        LD   A, mos_fread
0B0C0F 5BCF                A   116        RST.LIL 08h
0B0C11 7A                  A   117        LD   A, D
0B0C12 B3                  A   118        OR   E        ; 0 bytes read?
0B0C13 28 21               A   119        JR   Z, sendchecksum
                           A   120    
0B0C15 21000005            A   121        LD   HL, buffer
0B0C19 D5                  A   122        PUSH DE
0B0C1A C1                  A   123        POP  BC          ; length of the bufferstre
0B0C1B 3E00                A   124        LD   A, 0        ; don't care as bc is set
0B0C1D D5                  A   125        PUSH DE
0B0C1E 5BDF                A   126        RST.LIL 18h
0B0C20 D1                  A   127        POP  DE
                           A   128    ; calculate checksum
0B0C21 21000005            A   129        LD   HL, buffer
0B0C25                     A   130    $$:
0B0C25 3A 43 0C 0B         A   131        LD   A, (checksum)
0B0C29 86                  A   132        ADD  A, (HL)
0B0C2A 32 43 0C 0B         A   133        LD   (checksum), A
0B0C2E 1B                  A   134        DEC  DE
0B0C2F 23                  A   135        INC  HL
0B0C30 7A                  A   136        LD   A, D ; check if de == 0
0B0C31 B3                  A   137        OR   E
0B0C32 20 F1               A   138        JR   NZ, $B ; more bytes to send
                           A   139    
0B0C34 18 CA               A   140        JR   senddata ; next buffer read from disk
                           A   141    
0B0C36                     A   142    sendchecksum:
0B0C36 3A 43 0C 0B         A   143        LD   A, (checksum)
0B0C3A ED44                A   144        NEG ; calculate two's complement
0B0C3C 5BD7                A   145        RST.LIL 10h
                           A   146    
0B0C3E DDF9                A   147    	LD		SP, IX
0B0C40 DDE1                A   148    	POP		IX
0B0C42 C9                  A   149    	RET
                           A   150    
0B0C43                     A   151    checksum:
0B0C43                     A   152    	DS	1
0B0C44                     A   153    filehandle:
0B0C44                     A   154    	DS	1
0B0C45                     A   155    filesize:
0B0C45                     A   156    	DS	3
                           A   157    end


Errors: 0
Warnings: 0
Lines Assembled: 383
