Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     13:12:47     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
0B2448                     A   144    _errno:
0B2448                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   161    ;   10	 *                  Sends cls just befo
                           A   162    ;   11	 * 07/06/2023:		Included faster crc
                           A   163    ;   12	 */
                           A   164    ;   13	
                           A   165    ;   14	#include <ez80.h>
                           A   166    ;   15	#include <stdio.h>
                           A   167    ;   16	#include <stdlib.h>
                           A   168    ;   17	#include <ERRNO.H>
                           A   169    ;   18	#include "mos-interface.h"
                           A   170    ;   19	#include "flash.h"
                           A   171    ;   20	#include "agontimer.h"
                           A   172    ;   21	#include "crc32.h"
                           A   173    ;   22	#include "filesize.h"
                           A   174    ;   23	#include "./stdint.h"
                           A   175    ;   24	#include <string.h>
                           A   176    ;   25	
                           A   177    ;   26	#define UNLOCKMATCHLENGTH 9
                           A   178    ;   27	
                           A   179    ;   28	#define EXIT_FILENOTFOUND	4
                           A   180    ;   29	#define EXIT_INVALIDPARAMETER	19
                           A   181    ;   30	
                           A   182    ;   31	int errno; // needed by standard librar
                           A   183    	SEGMENT CODE
                           A   184    ;   32	enum states{firmware,recover,systemrese
                           A   185    ;   33	
                           A   186    ;   34	// separate putch function that doesn't
                           A   187    ;   35	// UART0 initialization done by MOS fir
                           A   188    ;   36	// This utility doesn't run without MOS
                           A   189    ;   37	int putch(int c)
                           A   190    ;   38	{
0B00E5                     A   191    _putch:
                           A   192    .DEFINE "_putch"
                           A   193    
                           A   194    .VALUE _putch
                           A   195    
                           A   196    .CLASS 2
                           A   197    
                           A   198    .TYPE 68
                           A   199    
                           A   200    .ENDEF
                           A   201    
                           A   202    .BEGFUNC "putch",38,"_putch"
                           A   203    
                           A   204    .LINE 38
                           A   205    
                           A   206    .DEFINE "c"
                           A   207    
                           A   208    .CLASS 65
                           A   209    
                           A   210    .VALUE 6
                           A   211    
                           A   212    .TYPE 4
                           A   213    
0B00E5 DDE5                A   214    	PUSH	IX
0B00E7 DD210000 00         A   215    	LD	IX,0
0B00EC DD39                A   216    	ADD	IX,SP
                           A   217    .ENDEF
                           A   218    
                           A   219    ;   39		UINT8 lsr,temt;
                           A   220    ;   40		
                           A   221    ;   41		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   222    L_1:
                           A   223    .LINE 41
                           A   224    
0B00EE ED38C5              A   225    	IN0	A,(197)
0B00F1 E640                A   226    	AND	A,%40
0B00F3 B7ED62              A   227    	UEXT	HL
0B00F6 6F                  A   228    	LD	L,A
0B00F7 CD 09 16 0B         A   229    	CALL	__icmpzero
0B00FB 28 F1               A   230    	JR	Z,L_1
                           A   231    ;   42		UART0_THR = c;
                           A   232    .LINE 42
                           A   233    
0B00FD DD7E06              A   234    	LD	A,(IX+%6)
0B0100 ED39C0              A   235    	OUT0	(192),A
                           A   236    ;   43		return c;
                           A   237    .LINE 43
                           A   238    
0B0103 DD2706              A   239    	LD	HL,(IX+%6)
                           A   240    ;   44	}
                           A   241    .LINE 44
                           A   242    
0B0106 DDF9                A   243    	LD	SP,IX
0B0108 DDE1                A   244    	POP	IX
0B010A C9                  A   245    	RET	
                           A   246    
                           A   247    
                           A   248    ;**************************** _putch **********
                           A   249    ;Name                         Addr/Register   S
                           A   250    ;c                                     IX+6    
                           A   251    
                           A   252    
                           A   253    ; Stack Frame Size: 9 (bytes)
                           A   254    ;       Spill Code: 0 (instruction)
                           A   255    
                           A   256    
                           A   257    .ENDFUNC "putch",44,"_putch"
                           A   258    ;   45	
                           A   259    ;   46	uint8_t getCharAt(uint16_t x, uint16_t 
0B010B                     A   260    _getCharAt:
                           A   261    .DEFINE "_getCharAt"
                           A   262    
                           A   263    .VALUE _getCharAt
                           A   264    
                           A   265    .CLASS 2
                           A   266    
                           A   267    .TYPE 76
                           A   268    
                           A   269    .ENDEF
                           A   270    
                           A   271    .BEGFUNC "getCharAt",46,"_getCharAt"
                           A   272    
                           A   273    .LINE 46
                           A   274    
                           A   275    .DEFINE "x"
                           A   276    
                           A   277    .CLASS 65
                           A   278    
                           A   279    .VALUE 6
                           A   280    
                           A   281    .TYPE 13
                           A   282    
                           A   283    .ENDEF
                           A   284    
                           A   285    .DEFINE "y"
                           A   286    
                           A   287    .CLASS 65
                           A   288    
                           A   289    .VALUE 9
                           A   290    
                           A   291    .TYPE 13
                           A   292    
                           A   293    .ENDEF
                           A   294    
0B010B DDE5                A   295    	PUSH	IX
0B010D DD210000 00         A   296    	LD	IX,0
0B0112 DD39                A   297    	ADD	IX,SP
                           A   298    ;   47		delayms(20);
                           A   299    .LINE 47
                           A   300    
0B0114 01140000            A   301    	LD	BC,20
0B0118 C5                  A   302    	PUSH	BC
0B0119 CD B3 0D 0B         A   303    	CALL	_delayms
0B011D C1                  A   304    	POP	BC
                           A   305    ;   48		putch(23);
                           A   306    .LINE 48
                           A   307    
0B011E 01170000            A   308    	LD	BC,23
0B0122 C5                  A   309    	PUSH	BC
0B0123 CD E5 00 0B         A   310    	CALL	_putch
0B0127 C1                  A   311    	POP	BC
                           A   312    ;   49		putch(0);
                           A   313    .LINE 49
                           A   314    
0B0128 01000000            A   315    	LD	BC,0
0B012C C5                  A   316    	PUSH	BC
0B012D CD E5 00 0B         A   317    	CALL	_putch
0B0131 C1                  A   318    	POP	BC
                           A   319    ;   50		putch(131);
                           A   320    .LINE 50
                           A   321    
0B0132 01830000            A   322    	LD	BC,131
0B0136 C5                  A   323    	PUSH	BC
0B0137 CD E5 00 0B         A   324    	CALL	_putch
0B013B C1                  A   325    	POP	BC
                           A   326    ;   51		putch(x & 0xFF);
                           A   327    .LINE 51
                           A   328    
0B013C DD0706              A   329    	LD	BC,(IX+%6)
0B013F CD 46 12 0B         A   330    	CALL	__stoiu
0B0143 7D                  A   331    	LD	A,L
0B0144 B7ED62              A   332    	UEXT	HL
0B0147 6F                  A   333    	LD	L,A
0B0148 E5                  A   334    	PUSH	HL
0B0149 CD E5 00 0B         A   335    	CALL	_putch
0B014D C1                  A   336    	POP	BC
                           A   337    ;   52		putch((x >> 8) & 0xFF);
                           A   338    .LINE 52
                           A   339    
0B014E DD0706              A   340    	LD	BC,(IX+%6)
0B0151 CD 46 12 0B         A   341    	CALL	__stoiu
0B0155 3E08                A   342    	LD	A,%8
0B0157 CD B6 10 0B         A   343    	CALL	__ishrs_b
0B015B 7D                  A   344    	LD	A,L
0B015C B7ED62              A   345    	UEXT	HL
0B015F 6F                  A   346    	LD	L,A
0B0160 E5                  A   347    	PUSH	HL
0B0161 CD E5 00 0B         A   348    	CALL	_putch
0B0165 C1                  A   349    	POP	BC
                           A   350    ;   53		putch(y & 0xFF);
                           A   351    .LINE 53
                           A   352    
0B0166 DD0709              A   353    	LD	BC,(IX+%9)
0B0169 CD 46 12 0B         A   354    	CALL	__stoiu
0B016D 7D                  A   355    	LD	A,L
0B016E B7ED62              A   356    	UEXT	HL
0B0171 6F                  A   357    	LD	L,A
0B0172 E5                  A   358    	PUSH	HL
0B0173 CD E5 00 0B         A   359    	CALL	_putch
0B0177 C1                  A   360    	POP	BC
                           A   361    ;   54		putch((y >> 8) & 0xFF);
                           A   362    .LINE 54
                           A   363    
0B0178 DD0709              A   364    	LD	BC,(IX+%9)
0B017B CD 46 12 0B         A   365    	CALL	__stoiu
0B017F 3E08                A   366    	LD	A,%8
0B0181 CD B6 10 0B         A   367    	CALL	__ishrs_b
0B0185 7D                  A   368    	LD	A,L
0B0186 B7ED62              A   369    	UEXT	HL
0B0189 6F                  A   370    	LD	L,A
0B018A E5                  A   371    	PUSH	HL
0B018B CD E5 00 0B         A   372    	CALL	_putch
0B018F C1                  A   373    	POP	BC
                           A   374    ;   55		delayms(20);
                           A   375    .LINE 55
                           A   376    
0B0190 01140000            A   377    	LD	BC,20
0B0194 C5                  A   378    	PUSH	BC
0B0195 CD B3 0D 0B         A   379    	CALL	_delayms
0B0199 C1                  A   380    	POP	BC
                           A   381    ;   56		return getsysvar_scrchar();
                           A   382    .LINE 56
                           A   383    
0B019A CD FF 0B 0B         A   384    	CALL	_getsysvar_scrchar
                           A   385    ;   57	}
                           A   386    .LINE 57
                           A   387    
0B019E DDF9                A   388    	LD	SP,IX
0B01A0 DDE1                A   389    	POP	IX
0B01A2 C9                  A   390    	RET	
                           A   391    
                           A   392    
                           A   393    ;**************************** _getCharAt ******
                           A   394    ;Name                         Addr/Register   S
                           A   395    ;_getsysvar_scrchar                  IMPORT  --
                           A   396    ;_putch                              IMPORT  --
                           A   397    ;_delayms                            IMPORT  --
                           A   398    ;y                                     IX+9    
                           A   399    ;x                                     IX+6    
                           A   400    
                           A   401    
                           A   402    ; Stack Frame Size: 12 (bytes)
                           A   403    ;       Spill Code: 0 (instruction)
                           A   404    
                           A   405    
                           A   406    .ENDFUNC "getCharAt",57,"_getCharAt"
                           A   407    ;   58	
                           A   408    ;   59	bool vdp_ota_present(void) {
0B01A3                     A   409    _vdp_ota_present:
                           A   410    .DEFINE "_vdp_ota_present"
                           A   411    
                           A   412    .VALUE _vdp_ota_present
                           A   413    
                           A   414    .CLASS 2
                           A   415    
                           A   416    .TYPE 76
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .BEGFUNC "vdp_ota_present",59,"_vdp_ota_present
                           A   421    
                           A   422    .LINE 59
                           A   423    
                           A   424    .DEFINE "n"
                           A   425    
                           A   426    .CLASS 65
                           A   427    
                           A   428    .VALUE -2
                           A   429    
                           A   430    .TYPE 13
                           A   431    
                           A   432    .ENDEF
                           A   433    
                           A   434    .DEFINE "test"
                           A   435    
                           A   436    .CLASS 65
                           A   437    
                           A   438    .VALUE -11
                           A   439    
                           A   440    .DIM 9
                           A   441    
                           A   442    .TYPE 98
                           A   443    
                           A   444    .ENDEF
                           A   445    
0B01A3 DDE5                A   446    	PUSH	IX
0B01A5 DD210000 00         A   447    	LD	IX,0
0B01AA DD39                A   448    	ADD	IX,SP
0B01AC ED22F5              A   449    	LEA	HL,IX+%FFFFFFF5
0B01AF F9                  A   450    	LD	SP,HL
                           A   451    ;   60		char test[UNLOCKMATCHLENGTH];
                           A   452    ;   61		uint16_t n;
                           A   453    ;   62	
                           A   454    ;   63		putch(23);
                           A   455    .LINE 63
                           A   456    
0B01B0 01170000            A   457    	LD	BC,23
0B01B4 C5                  A   458    	PUSH	BC
0B01B5 CD E5 00 0B         A   459    	CALL	_putch
0B01B9 C1                  A   460    	POP	BC
                           A   461    ;   64		putch(29);
                           A   462    .LINE 64
                           A   463    
0B01BA 011D0000            A   464    	LD	BC,29
0B01BE C5                  A   465    	PUSH	BC
0B01BF CD E5 00 0B         A   466    	CALL	_putch
0B01C3 C1                  A   467    	POP	BC
                           A   468    ;   65		putch(0);
                           A   469    .LINE 65
                           A   470    
0B01C4 01000000            A   471    	LD	BC,0
0B01C8 C5                  A   472    	PUSH	BC
0B01C9 CD E5 00 0B         A   473    	CALL	_putch
0B01CD C1                  A   474    	POP	BC
                           A   475    ;   66		printf("unlock");
                           A   476    .LINE 66
                           A   477    
0B01CE 01 4C 12 0B         A   478    	LD	BC,___print_uputch
0B01D2 ED43 04 20 0B       A   479    	LD	(___print_xputch),BC
0B01D7 01 87 20 0B         A   480    	LD	BC,L__3
0B01DB C5                  A   481    	PUSH	BC
0B01DC CD DB 10 0B         A   482    	CALL	___print_sendstring
0B01E0 C1                  A   483    	POP	BC
                           A   484    ;   67	
                           A   485    ;   68		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   486    .LINE 68
                           A   487    
0B01E1 DD36FE00            A   488    	LD	(IX+%FFFFFFFE),%0
0B01E5 DD36FF00            A   489    	LD	(IX+%FFFFFFFF),%0
0B01E9 18 2A               A   490    	JR	L_8
0B01EB                     A   491    L_6:
0B01EB 01030000            A   492    	LD	BC,3
0B01EF C5                  A   493    	PUSH	BC
0B01F0 DD31FE              A   494    	LD	IY,(IX+%FFFFFFFE)
0B01F3 ED0308              A   495    	LEA	BC,IY+%8
0B01F6 C5                  A   496    	PUSH	BC
0B01F7 CD 0B 01 0B         A   497    	CALL	_getCharAt
0B01FB C1                  A   498    	POP	BC
0B01FC C1                  A   499    	POP	BC
0B01FD DD07FE              A   500    	LD	BC,(IX+%FFFFFFFE)
0B0200 CD 46 12 0B         A   501    	CALL	__stoiu
0B0204 E5C1                A   502    	LD	BC,HL
0B0206 ED22F5              A   503    	LEA	HL,IX+%FFFFFFF5
0B0209 09                  A   504    	ADD	HL,BC
0B020A 77                  A   505    	LD	(HL),A
0B020B DD27FE              A   506    	LD	HL,(IX+%FFFFFFFE)
0B020E 23                  A   507    	INC	HL
0B020F DD75FE              A   508    	LD	(IX+%FFFFFFFE),L
0B0212 DD74FF              A   509    	LD	(IX+%FFFFFFFF),H
0B0215                     A   510    L_8:
0B0215 49010A00            A   511    	LD.LIS	BC,10
0B0219 DD27FE              A   512    	LD	HL,(IX+%FFFFFFFE)
0B021C B7                  A   513    	OR	A,A
0B021D 40ED42              A   514    	SBC.SIS	HL,BC
0B0220 38 C9               A   515    	JR	C,L_6
                           A   516    ;   69		// 3 - line on-screen
                           A   517    ;   70		if(memcmp(test, "unlocked!",UNLOCKM
                           A   518    .LINE 70
                           A   519    
0B0222 01090000            A   520    	LD	BC,9
0B0226 C5                  A   521    	PUSH	BC
0B0227 01 8E 20 0B         A   522    	LD	BC,L__5
0B022B C5                  A   523    	PUSH	BC
0B022C ED65F5              A   524    	PEA	IX+%FFFFFFF5
0B022F CD DF 15 0B         A   525    	CALL	_memcmp
0B0233 C1                  A   526    	POP	BC
0B0234 C1                  A   527    	POP	BC
0B0235 C1                  A   528    	POP	BC
0B0236 CD 09 16 0B         A   529    	CALL	__icmpzero
0B023A 20 04               A   530    	JR	NZ,L_10
0B023C 3E01                A   531    	LD	A,%1
0B023E 18 01               A   532    	JR	L_12
                           A   533    ;   71		else return false;
0B0240                     A   534    L_10:
                           A   535    .LINE 71
                           A   536    
0B0240 AF                  A   537    	XOR	A,A
                           A   538    ;   72	}
0B0241                     A   539    L_12:
                           A   540    .LINE 72
                           A   541    
0B0241 DDF9                A   542    	LD	SP,IX
0B0243 DDE1                A   543    	POP	IX
0B0245 C9                  A   544    	RET	
                           A   545    
                           A   546    
                           A   547    ;**************************** _vdp_ota_present 
                           A   548    ;Name                         Addr/Register   S
                           A   549    ;_memcmp                             IMPORT  --
                           A   550    ;___print_sendstring                 IMPORT  --
                           A   551    ;___print_xputch                     IMPORT    
                           A   552    ;___print_uputch                     IMPORT  --
                           A   553    ;_putch                              IMPORT  --
                           A   554    ;test                                 IX-11    
                           A   555    ;n                                     IX-2    
                           A   556    
                           A   557    
                           A   558    ; Stack Frame Size: 17 (bytes)
                           A   559    ;       Spill Code: 0 (instruction)
                           A   560    
                           A   561    
                           A   562    .ENDFUNC "vdp_ota_present",72,"_vdp_ota_present
                           A   563    	SEGMENT STRSECT
0B2087                     A   564    L__3:
0B2087 756E6C6F 636B       A   565    	DB	"unlock"
0B208D 00                  A   566    	DB	0
0B208E                     A   567    L__5:
0B208E 756E6C6F 636B6564   A   568    	DB	"unlocked!"
0B2096 21 
0B2097 00                  A   569    	DB	0
                           A   570    	SEGMENT DATA
0B1BDB                     A   571    _mos_magicnumbers:
0B1BDB F3                  A   572    	DB	243
0B1BDC ED                  A   573    	DB	237
0B1BDD 7D                  A   574    	DB	125
0B1BDE 5B                  A   575    	DB	91
0B1BDF C3                  A   576    	DB	195
                           A   577    .DEFINE "mos_magicnumbers"
                           A   578    .ALIAS "_mos_magicnumbers"
                           A   579    .CLASS 69
                           A   580    .VALUE _mos_magicnumbers
                           A   581    .DIM 5
                           A   582    .TYPE 108
                           A   583    .ENDEF
                           A   584    ;   73	
                           A   585    ;   74	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   586    	SEGMENT CODE
                           A   587    ;   75	#define MOS_MAGICLENGTH 5
                           A   588    ;   76	bool containsMosHeader(uint8_t *filesta
0B0246                     A   589    _containsMosHeader:
                           A   590    .DEFINE "_containsMosHeader"
                           A   591    
                           A   592    .VALUE _containsMosHeader
                           A   593    
                           A   594    .CLASS 2
                           A   595    
                           A   596    .TYPE 76
                           A   597    
                           A   598    .ENDEF
                           A   599    
                           A   600    .BEGFUNC "containsMosHeader",76,"_containsMosHe
                           A   601    
                           A   602    .LINE 76
                           A   603    
                           A   604    .DEFINE "filestart"
                           A   605    
                           A   606    .CLASS 65
                           A   607    
                           A   608    .VALUE 6
                           A   609    
                           A   610    .TYPE 44
                           A   611    
                           A   612    .ENDEF
                           A   613    
                           A   614    .DEFINE "n"
                           A   615    
                           A   616    .CLASS 65
                           A   617    
                           A   618    .VALUE -1
                           A   619    
                           A   620    .TYPE 12
                           A   621    
                           A   622    .ENDEF
                           A   623    
                           A   624    .DEFINE "match"
                           A   625    
                           A   626    .CLASS 65
                           A   627    
                           A   628    .VALUE -2
                           A   629    
                           A   630    .TYPE 12
                           A   631    
                           A   632    .ENDEF
                           A   633    
0B0246 DDE5                A   634    	PUSH	IX
0B0248 DD210000 00         A   635    	LD	IX,0
0B024D DD39                A   636    	ADD	IX,SP
0B024F 3B                  A   637    	DEC	SP
0B0250 3B                  A   638    	DEC	SP
                           A   639    ;   77		uint8_t n;
                           A   640    ;   78		bool match = true;
                           A   641    .LINE 78
                           A   642    
0B0251 DD36FE01            A   643    	LD	(IX+%FFFFFFFE),%1
                           A   644    ;   79	
                           A   645    ;   80		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A   646    .LINE 80
                           A   647    
0B0255 DD36FF00            A   648    	LD	(IX+%FFFFFFFF),%0
0B0259 18 27               A   649    	JR	L_17
0B025B                     A   650    L_15:
0B025B DD7EFF              A   651    	LD	A,(IX+%FFFFFFFF)
0B025E B7ED62              A   652    	UEXT	HL
0B0261 6F                  A   653    	LD	L,A
0B0262 01 DB 1B 0B         A   654    	LD	BC,_mos_magicnumbers
0B0266 09                  A   655    	ADD	HL,BC
0B0267 E5FDE1              A   656    	LD	IY,HL
0B026A DD7EFF              A   657    	LD	A,(IX+%FFFFFFFF)
0B026D B7ED62              A   658    	UEXT	HL
0B0270 6F                  A   659    	LD	L,A
0B0271 DD0706              A   660    	LD	BC,(IX+%6)
0B0274 09                  A   661    	ADD	HL,BC
0B0275 FD7E00              A   662    	LD	A,(IY)
0B0278 BE                  A   663    	CP	A,(HL)
0B0279 28 04               A   664    	JR	Z,L_16
0B027B DD36FE00            A   665    	LD	(IX+%FFFFFFFE),%0
0B027F                     A   666    L_16:
0B027F DD34FF              A   667    	INC	(IX+%FFFFFFFF)
0B0282                     A   668    L_17:
0B0282 DD7EFF              A   669    	LD	A,(IX+%FFFFFFFF)
0B0285 FE05                A   670    	CP	A,%5
0B0287 38 D2               A   671    	JR	C,L_15
                           A   672    ;   81		return match;
                           A   673    .LINE 81
                           A   674    
0B0289 DD7EFE              A   675    	LD	A,(IX+%FFFFFFFE)
                           A   676    ;   82	}
                           A   677    .LINE 82
                           A   678    
0B028C DDF9                A   679    	LD	SP,IX
0B028E DDE1                A   680    	POP	IX
0B0290 C9                  A   681    	RET	
                           A   682    
                           A   683    
                           A   684    ;**************************** _containsMosHeade
                           A   685    ;Name                         Addr/Register   S
                           A   686    ;_mos_magicnumbers                   STATIC    
                           A   687    ;match                                 IX-2    
                           A   688    ;n                                     IX-1    
                           A   689    ;filestart                             IX+6    
                           A   690    
                           A   691    
                           A   692    ; Stack Frame Size: 11 (bytes)
                           A   693    ;       Spill Code: 0 (instruction)
                           A   694    
                           A   695    
                           A   696    .ENDFUNC "containsMosHeader",82,"_containsMosHe
                           A   697    	SEGMENT DATA
0B1BE0                     A   698    _esp32_magicnumbers:
0B1BE0 32                  A   699    	DB	50
0B1BE1 54                  A   700    	DB	84
0B1BE2 CD                  A   701    	DB	205
0B1BE3 AB                  A   702    	DB	171
                           A   703    .DEFINE "esp32_magicnumbers"
                           A   704    .ALIAS "_esp32_magicnumbers"
                           A   705    .CLASS 69
                           A   706    .VALUE _esp32_magicnumbers
                           A   707    .DIM 4
                           A   708    .TYPE 108
                           A   709    .ENDEF
                           A   710    ;   83	
                           A   711    ;   84	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A   712    	SEGMENT CODE
                           A   713    ;   85	#define ESP32_MAGICLENGTH 4
                           A   714    ;   86	#define ESP32_MAGICSTART 0x20
                           A   715    ;   87	bool containsESP32Header(uint8_t *files
0B0291                     A   716    _containsESP32Header:
                           A   717    .DEFINE "_containsESP32Header"
                           A   718    
                           A   719    .VALUE _containsESP32Header
                           A   720    
                           A   721    .CLASS 2
                           A   722    
                           A   723    .TYPE 76
                           A   724    
                           A   725    .ENDEF
                           A   726    
                           A   727    .BEGFUNC "containsESP32Header",87,"_containsESP
                           A   728    
                           A   729    .LINE 87
                           A   730    
                           A   731    .DEFINE "filestart"
                           A   732    
                           A   733    .CLASS 65
                           A   734    
                           A   735    .VALUE 6
                           A   736    
                           A   737    .TYPE 44
                           A   738    
                           A   739    .ENDEF
                           A   740    
                           A   741    .DEFINE "n"
                           A   742    
                           A   743    .CLASS 65
                           A   744    
                           A   745    .VALUE -1
                           A   746    
                           A   747    .TYPE 12
                           A   748    
                           A   749    .ENDEF
                           A   750    
                           A   751    .DEFINE "match"
                           A   752    
                           A   753    .CLASS 65
                           A   754    
                           A   755    .VALUE -2
                           A   756    
                           A   757    .TYPE 12
                           A   758    
                           A   759    .ENDEF
                           A   760    
0B0291 DDE5                A   761    	PUSH	IX
0B0293 DD210000 00         A   762    	LD	IX,0
0B0298 DD39                A   763    	ADD	IX,SP
0B029A 3B                  A   764    	DEC	SP
0B029B 3B                  A   765    	DEC	SP
                           A   766    ;   88		uint8_t n;
                           A   767    ;   89		bool match = true;
                           A   768    .LINE 89
                           A   769    
0B029C DD36FE01            A   770    	LD	(IX+%FFFFFFFE),%1
                           A   771    ;   90	
                           A   772    ;   91		filestart += ESP32_MAGICSTART; // s
                           A   773    .LINE 91
                           A   774    
0B02A0 DD3106              A   775    	LD	IY,(IX+%6)
0B02A3 ED3320              A   776    	LEA	IY,IY+%20
0B02A6 DD3E06              A   777    	LD	(IX+%6),IY
                           A   778    ;   92		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A   779    .LINE 92
                           A   780    
0B02A9 DD36FF00            A   781    	LD	(IX+%FFFFFFFF),%0
0B02AD 18 27               A   782    	JR	L_24
0B02AF                     A   783    L_22:
                           A   784    ;   93			if(esp32_magicnumbers[n] != fil
                           A   785    .LINE 93
                           A   786    
0B02AF DD7EFF              A   787    	LD	A,(IX+%FFFFFFFF)
0B02B2 B7ED62              A   788    	UEXT	HL
0B02B5 6F                  A   789    	LD	L,A
0B02B6 01 E0 1B 0B         A   790    	LD	BC,_esp32_magicnumbers
0B02BA 09                  A   791    	ADD	HL,BC
0B02BB E5FDE1              A   792    	LD	IY,HL
0B02BE DD7EFF              A   793    	LD	A,(IX+%FFFFFFFF)
0B02C1 B7ED62              A   794    	UEXT	HL
0B02C4 6F                  A   795    	LD	L,A
0B02C5 DD0706              A   796    	LD	BC,(IX+%6)
0B02C8 09                  A   797    	ADD	HL,BC
0B02C9 FD7E00              A   798    	LD	A,(IY)
0B02CC BE                  A   799    	CP	A,(HL)
0B02CD 28 04               A   800    	JR	Z,L_23
0B02CF DD36FE00            A   801    	LD	(IX+%FFFFFFFE),%0
                           A   802    ;   94		}
0B02D3                     A   803    L_23:
                           A   804    .LINE 94
                           A   805    
0B02D3 DD34FF              A   806    	INC	(IX+%FFFFFFFF)
0B02D6                     A   807    L_24:
0B02D6 DD7EFF              A   808    	LD	A,(IX+%FFFFFFFF)
0B02D9 FE04                A   809    	CP	A,%4
0B02DB 38 D2               A   810    	JR	C,L_22
                           A   811    ;   95		return match;
                           A   812    .LINE 95
                           A   813    
0B02DD DD7EFE              A   814    	LD	A,(IX+%FFFFFFFE)
                           A   815    ;   96	}
                           A   816    .LINE 96
                           A   817    
0B02E0 DDF9                A   818    	LD	SP,IX
0B02E2 DDE1                A   819    	POP	IX
0B02E4 C9                  A   820    	RET	
                           A   821    
                           A   822    
                           A   823    ;**************************** _containsESP32Hea
                           A   824    ;Name                         Addr/Register   S
                           A   825    ;_esp32_magicnumbers                 STATIC    
                           A   826    ;match                                 IX-2    
                           A   827    ;n                                     IX-1    
                           A   828    ;filestart                             IX+6    
                           A   829    
                           A   830    
                           A   831    ; Stack Frame Size: 11 (bytes)
                           A   832    ;       Spill Code: 0 (instruction)
                           A   833    
                           A   834    
                           A   835    .ENDFUNC "containsESP32Header",96,"_containsESP
                           A   836    ;   97	
                           A   837    ;   98	void print_version(void) {
0B02E5                     A   838    _print_version:
                           A   839    .DEFINE "_print_version"
                           A   840    
                           A   841    .VALUE _print_version
                           A   842    
                           A   843    .CLASS 2
                           A   844    
                           A   845    .TYPE 65
                           A   846    
                           A   847    .ENDEF
                           A   848    
                           A   849    .BEGFUNC "print_version",98,"_print_version"
                           A   850    
0B02E5 DDE5                A   851    	PUSH	IX
0B02E7 DD210000 00         A   852    	LD	IX,0
0B02EC DD39                A   853    	ADD	IX,SP
                           A   854    ;   99		printf("Agon firmware upgrade utili
                           A   855    .LINE 99
                           A   856    
0B02EE 01 4C 12 0B         A   857    	LD	BC,___print_uputch
0B02F2 ED43 04 20 0B       A   858    	LD	(___print_xputch),BC
0B02F7 01 98 20 0B         A   859    	LD	BC,L__14
0B02FB C5                  A   860    	PUSH	BC
0B02FC CD DB 10 0B         A   861    	CALL	___print_sendstring
0B0300 C1                  A   862    	POP	BC
                           A   863    ;  100	}
                           A   864    .LINE 100
                           A   865    
0B0301 DDF9                A   866    	LD	SP,IX
0B0303 DDE1                A   867    	POP	IX
0B0305 C9                  A   868    	RET	
                           A   869    
                           A   870    
                           A   871    ;**************************** _print_version **
                           A   872    ;Name                         Addr/Register   S
                           A   873    ;___print_sendstring                 IMPORT  --
                           A   874    ;___print_xputch                     IMPORT    
                           A   875    ;___print_uputch                     IMPORT  --
                           A   876    
                           A   877    
                           A   878    ; Stack Frame Size: 6 (bytes)
                           A   879    ;       Spill Code: 0 (instruction)
                           A   880    
                           A   881    
                           A   882    .ENDFUNC "print_version",100,"_print_version"
                           A   883    	SEGMENT STRSECT
0B2098                     A   884    L__14:
0B2098 41676F6E 20666972   A   885    	DB	"Agon firmware upgrade utility v1.4"
0B20A0 6D776172 65207570 
0B20A8 67726164 65207574 
0B20B0 696C6974 79207631 
0B20B8 2E34 
0B20BA 0A0D0A0D 00         A   886    	DB	10,13,10,13,0
                           A   887    	SEGMENT CODE
                           A   888    ;  101	
                           A   889    ;  102	void usage(void) {
0B0306                     A   890    _usage:
                           A   891    .DEFINE "_usage"
                           A   892    
                           A   893    .VALUE _usage
                           A   894    
                           A   895    .CLASS 2
                           A   896    
                           A   897    .TYPE 65
                           A   898    
                           A   899    .ENDEF
                           A   900    
                           A   901    .BEGFUNC "usage",102,"_usage"
                           A   902    
0B0306 DDE5                A   903    	PUSH	IX
0B0308 DD210000 00         A   904    	LD	IX,0
0B030D DD39                A   905    	ADD	IX,SP
                           A   906    ;  103		print_version();
                           A   907    .LINE 103
                           A   908    
0B030F CD E5 02 0B         A   909    	CALL	_print_version
                           A   910    ;  104		printf("Usage: FLASH <mos|vdp> <fil
                           A   911    .LINE 104
                           A   912    
0B0313 01 4C 12 0B         A   913    	LD	BC,___print_uputch
0B0317 ED43 04 20 0B       A   914    	LD	(___print_xputch),BC
0B031C 01 BF 20 0B         A   915    	LD	BC,L__16
0B0320 C5                  A   916    	PUSH	BC
0B0321 CD DB 10 0B         A   917    	CALL	___print_sendstring
0B0325 C1                  A   918    	POP	BC
                           A   919    ;  105	}
                           A   920    .LINE 105
                           A   921    
0B0326 DDF9                A   922    	LD	SP,IX
0B0328 DDE1                A   923    	POP	IX
0B032A C9                  A   924    	RET	
                           A   925    
                           A   926    
                           A   927    ;**************************** _usage **********
                           A   928    ;Name                         Addr/Register   S
                           A   929    ;___print_sendstring                 IMPORT  --
                           A   930    ;___print_xputch                     IMPORT    
                           A   931    ;___print_uputch                     IMPORT  --
                           A   932    
                           A   933    
                           A   934    ; Stack Frame Size: 6 (bytes)
                           A   935    ;       Spill Code: 0 (instruction)
                           A   936    
                           A   937    
                           A   938    .ENDFUNC "usage",105,"_usage"
                           A   939    	SEGMENT STRSECT
0B20BF                     A   940    L__16:
0B20BF 55736167 653A2046   A   941    	DB	"Usage: FLASH <mos|vdp> <filename>"
0B20C7 4C415348 203C6D6F 
0B20CF 737C7664 703E203C 
0B20D7 66696C65 6E616D65 
0B20DF 3E 
0B20E0 0A0D00              A   942    	DB	10,13,0
                           A   943    	SEGMENT CODE
                           A   944    ;  106	
                           A   945    ;  107	typedef enum {
                           A   946    ;  108		MOS,
                           A   947    ;  109		VDP
                           A   948    ;  110	} flashtype;
                           A   949    ;  111	
                           A   950    ;  112	bool getResponse(flashtype t, uint32_t 
0B032B                     A   951    _getResponse:
                           A   952    .DEFINE "_getResponse"
                           A   953    
                           A   954    .VALUE _getResponse
                           A   955    
                           A   956    .CLASS 2
                           A   957    
                           A   958    .TYPE 76
                           A   959    
                           A   960    .ENDEF
                           A   961    
                           A   962    .BEGFUNC "getResponse",112,"_getResponse"
                           A   963    
                           A   964    .LINE 112
                           A   965    
                           A   966    .DEFINE "t"
                           A   967    
                           A   968    .CLASS 65
                           A   969    
                           A   970    .VALUE 6
                           A   971    
                           A   972    .TYPE 4
                           A   973    
                           A   974    .ENDEF
                           A   975    
                           A   976    .DEFINE "crc"
                           A   977    
                           A   978    .CLASS 65
                           A   979    
                           A   980    .VALUE 9
                           A   981    
                           A   982    .TYPE 15
                           A   983    
                           A   984    .ENDEF
                           A   985    
                           A   986    .DEFINE "response"
                           A   987    
                           A   988    .CLASS 65
                           A   989    
                           A   990    .VALUE -1
                           A   991    
                           A   992    .TYPE 12
                           A   993    
                           A   994    .ENDEF
                           A   995    
0B032B DDE5                A   996    	PUSH	IX
0B032D DD210000 00         A   997    	LD	IX,0
0B0332 DD39                A   998    	ADD	IX,SP
0B0334 3B                  A   999    	DEC	SP
                           A  1000    ;  113		uint8_t response = 0;
                           A  1001    .LINE 113
                           A  1002    
0B0335 DD36FF00            A  1003    	LD	(IX+%FFFFFFFF),%0
                           A  1004    ;  114	
                           A  1005    ;  115		switch(t) {
                           A  1006    .LINE 115
                           A  1007    
0B0339 DD2706              A  1008    	LD	HL,(IX+%6)
0B033C CD EB 18 0B         A  1009    	CALL	__case8D
0B0340 E9                  A  1010    	JP	(HL)
0B0341                     A  1011    L__18:
0B0341 0200                A  1012    	DW	2
0B0343 00                  A  1013    	DB	0
0B0344 4E030B              A  1014    	DW24	L_29	
                           A  1015    
0B0347 01                  A  1016    	DB	1
0B0348 8F030B              A  1017    	DW24	L_30	
                           A  1018    
0B034B D7030B              A  1019    	DW24	L_32	
                           A  1020    
                           A  1021    ;  116			case MOS:
0B034E                     A  1022    L_29:
                           A  1023    .LINE 116
                           A  1024    
                           A  1025    ;  117				printf("\r\n\r\n0x%04lX - f
                           A  1026    .LINE 117
                           A  1027    
0B034E 01 4C 12 0B         A  1028    	LD	BC,___print_uputch
0B0352 ED43 04 20 0B       A  1029    	LD	(___print_xputch),BC
0B0357 01 E3 20 0B         A  1030    	LD	BC,L__19
0B035B C5                  A  1031    	PUSH	BC
0B035C CD DB 10 0B         A  1032    	CALL	___print_sendstring
0B0360 C1                  A  1033    	POP	BC
0B0361 3E04                A  1034    	LD	A,%4
0B0363 32 5E 24 0B         A  1035    	LD	(___print_fmt+5),A
0B0367 3E60                A  1036    	LD	A,%60
0B0369 32 5A 24 0B         A  1037    	LD	(___print_fmt+1),A
0B036D 3E78                A  1038    	LD	A,%78
0B036F 32 5D 24 0B         A  1039    	LD	(___print_fmt+4),A
0B0373 DD4E0C              A  1040    	LD	C,(IX+%C)
0B0376 0600                A  1041    	LD	B,%0
0B0378 C5                  A  1042    	PUSH	BC
0B0379 DD0709              A  1043    	LD	BC,(IX+%9)
0B037C C5                  A  1044    	PUSH	BC
0B037D CD A5 19 0B         A  1045    	CALL	__u_ultoa
0B0381 C1                  A  1046    	POP	BC
0B0382 C1                  A  1047    	POP	BC
0B0383 01 EA 20 0B         A  1048    	LD	BC,L__20
0B0387 C5                  A  1049    	PUSH	BC
0B0388 CD DB 10 0B         A  1050    	CALL	___print_sendstring
0B038C C1                  A  1051    	POP	BC
                           A  1052    ;  118				break;
                           A  1053    .LINE 118
                           A  1054    
0B038D 18 48               A  1055    	JR	L_32
                           A  1056    ;  119			case VDP:
0B038F                     A  1057    L_30:
                           A  1058    .LINE 119
                           A  1059    
                           A  1060    ;  120				printf("\r\n\r\n0x%04lX - f
                           A  1061    .LINE 120
                           A  1062    
0B038F 01 4C 12 0B         A  1063    	LD	BC,___print_uputch
0B0393 ED43 04 20 0B       A  1064    	LD	(___print_xputch),BC
0B0398 01 01 21 0B         A  1065    	LD	BC,L__21
0B039C C5                  A  1066    	PUSH	BC
0B039D CD DB 10 0B         A  1067    	CALL	___print_sendstring
0B03A1 C1                  A  1068    	POP	BC
0B03A2 3E04                A  1069    	LD	A,%4
0B03A4 32 5E 24 0B         A  1070    	LD	(___print_fmt+5),A
0B03A8 3E60                A  1071    	LD	A,%60
0B03AA 32 5A 24 0B         A  1072    	LD	(___print_fmt+1),A
0B03AE 3E78                A  1073    	LD	A,%78
0B03B0 32 5D 24 0B         A  1074    	LD	(___print_fmt+4),A
0B03B4 DD4E0C              A  1075    	LD	C,(IX+%C)
0B03B7 0600                A  1076    	LD	B,%0
0B03B9 C5                  A  1077    	PUSH	BC
0B03BA DD0709              A  1078    	LD	BC,(IX+%9)
0B03BD C5                  A  1079    	PUSH	BC
0B03BE CD A5 19 0B         A  1080    	CALL	__u_ultoa
0B03C2 C1                  A  1081    	POP	BC
0B03C3 C1                  A  1082    	POP	BC
0B03C4 01 08 21 0B         A  1083    	LD	BC,L__22
0B03C8 C5                  A  1084    	PUSH	BC
0B03C9 CD DB 10 0B         A  1085    	CALL	___print_sendstring
0B03CD C1                  A  1086    	POP	BC
                           A  1087    ;  121				break;
                           A  1088    .LINE 121
                           A  1089    
0B03CE 18 07               A  1090    	JR	L_32
                           A  1091    ;  122		}
                           A  1092    ;  123	
                           A  1093    ;  124		while((response != 'y') && (respons
0B03D0                     A  1094    L_33:
                           A  1095    .LINE 124
                           A  1096    
0B03D0 CD C1 0B 0B         A  1097    	CALL	_getch
0B03D4 DD77FF              A  1098    	LD	(IX+%FFFFFFFF),A
0B03D7                     A  1099    L_32:
0B03D7 DD7EFF              A  1100    	LD	A,(IX+%FFFFFFFF)
0B03DA FE79                A  1101    	CP	A,%79
0B03DC 28 07               A  1102    	JR	Z,L_35
0B03DE DD7EFF              A  1103    	LD	A,(IX+%FFFFFFFF)
0B03E1 FE6E                A  1104    	CP	A,%6E
0B03E3 20 EB               A  1105    	JR	NZ,L_33
0B03E5                     A  1106    L_35:
                           A  1107    ;  125		printf("\r\nUser abort\n\r\n\r");
                           A  1108    .LINE 125
                           A  1109    
0B03E5 01 4C 12 0B         A  1110    	LD	BC,___print_uputch
0B03E9 ED43 04 20 0B       A  1111    	LD	(___print_xputch),BC
0B03EE 01 1F 21 0B         A  1112    	LD	BC,L__25
0B03F2 C5                  A  1113    	PUSH	BC
0B03F3 CD DB 10 0B         A  1114    	CALL	___print_sendstring
0B03F7 C1                  A  1115    	POP	BC
                           A  1116    ;  126		return response == 'y';
                           A  1117    .LINE 126
                           A  1118    
0B03F8 DD7EFF              A  1119    	LD	A,(IX+%FFFFFFFF)
0B03FB FE79                A  1120    	CP	A,%79
0B03FD 20 04               A  1121    	JR	NZ,L__27
0B03FF 3E01                A  1122    	LD	A,%1
0B0401 18 01               A  1123    	JR	L__28
0B0403                     A  1124    L__27:
0B0403 AF                  A  1125    	XOR	A,A
0B0404                     A  1126    L__28:
                           A  1127    ;  127	}
                           A  1128    .LINE 127
                           A  1129    
0B0404 DDF9                A  1130    	LD	SP,IX
0B0406 DDE1                A  1131    	POP	IX
0B0408 C9                  A  1132    	RET	
                           A  1133    
                           A  1134    
                           A  1135    ;**************************** _getResponse ****
                           A  1136    ;Name                         Addr/Register   S
                           A  1137    ;_getch                              IMPORT  --
                           A  1138    ;__u_ultoa                           IMPORT  --
                           A  1139    ;___print_fmt                        IMPORT    
                           A  1140    ;___print_sendstring                 IMPORT  --
                           A  1141    ;___print_xputch                     IMPORT    
                           A  1142    ;___print_uputch                     IMPORT  --
                           A  1143    ;response                              IX-1    
                           A  1144    ;crc                                   IX+9    
                           A  1145    ;t                                     IX+6    
                           A  1146    
                           A  1147    
                           A  1148    ; Stack Frame Size: 16 (bytes)
                           A  1149    ;       Spill Code: 0 (instruction)
                           A  1150    
                           A  1151    
                           A  1152    .ENDFUNC "getResponse",127,"_getResponse"
                           A  1153    	SEGMENT STRSECT
0B20E3                     A  1154    L__19:
0B20E3 0D0A0D0A            A  1155    	DB	13,10,13,10
0B20E7 3078                A  1156    	DB	"0x"
0B20E9 00                  A  1157    	DB	0
0B20EA                     A  1158    L__20:
0B20EA 202D2066 6C617368   A  1159    	DB	" - flash to MOS (y/n)?"
0B20F2 20746F20 4D4F5320 
0B20FA 28792F6E 293F 
0B2100 00                  A  1160    	DB	0
0B2101                     A  1161    L__21:
0B2101 0D0A0D0A            A  1162    	DB	13,10,13,10
0B2105 3078                A  1163    	DB	"0x"
0B2107 00                  A  1164    	DB	0
0B2108                     A  1165    L__22:
0B2108 202D2066 6C617368   A  1166    	DB	" - flash to VDP (y/n)?"
0B2110 20746F20 56445020 
0B2118 28792F6E 293F 
0B211E 00                  A  1167    	DB	0
0B211F                     A  1168    L__25:
0B211F 0D0A                A  1169    	DB	13,10
0B2121 55736572 2061626F   A  1170    	DB	"User abort"
0B2129 7274 
0B212B 0A0D0A0D 00         A  1171    	DB	10,13,10,13,0
                           A  1172    	SEGMENT CODE
                           A  1173    ;  128	
                           A  1174    ;  129	uint8_t update_vdp(char *filename) {
0B0409                     A  1175    _update_vdp:
                           A  1176    .DEFINE "_update_vdp"
                           A  1177    
                           A  1178    .VALUE _update_vdp
                           A  1179    
                           A  1180    .CLASS 2
                           A  1181    
                           A  1182    .TYPE 76
                           A  1183    
                           A  1184    .ENDEF
                           A  1185    
                           A  1186    .BEGFUNC "update_vdp",129,"_update_vdp"
                           A  1187    
                           A  1188    .LINE 129
                           A  1189    
                           A  1190    .DEFINE "filename"
                           A  1191    
                           A  1192    .CLASS 65
                           A  1193    
                           A  1194    .VALUE 6
                           A  1195    
                           A  1196    .TYPE 34
                           A  1197    
                           A  1198    .ENDEF
                           A  1199    
                           A  1200    .DEFINE "file"
                           A  1201    
                           A  1202    .CLASS 65
                           A  1203    
                           A  1204    .VALUE -1
                           A  1205    
                           A  1206    .TYPE 12
                           A  1207    
                           A  1208    .ENDEF
                           A  1209    
                           A  1210    .DEFINE "size"
                           A  1211    
                           A  1212    .CLASS 65
                           A  1213    
                           A  1214    .VALUE -4
                           A  1215    
                           A  1216    .TYPE 14
                           A  1217    
                           A  1218    .ENDEF
                           A  1219    
                           A  1220    .DEFINE "filesize"
                           A  1221    
                           A  1222    .CLASS 65
                           A  1223    
                           A  1224    .VALUE -7
                           A  1225    
                           A  1226    .TYPE 14
                           A  1227    
                           A  1228    .ENDEF
                           A  1229    
                           A  1230    .DEFINE "crcresult"
                           A  1231    
                           A  1232    .CLASS 65
                           A  1233    
                           A  1234    .VALUE -11
                           A  1235    
                           A  1236    .TYPE 15
                           A  1237    
                           A  1238    .ENDEF
                           A  1239    
                           A  1240    .DEFINE "buffer"
                           A  1241    
                           A  1242    .CLASS 65
                           A  1243    
                           A  1244    .VALUE -47
                           A  1245    
                           A  1246    .DIM 36
                           A  1247    
                           A  1248    .TYPE 108
                           A  1249    
                           A  1250    .ENDEF
                           A  1251    
0B0409 DDE5                A  1252    	PUSH	IX
0B040B DD210000 00         A  1253    	LD	IX,0
0B0410 DD39                A  1254    	ADD	IX,SP
0B0412 ED22D1              A  1255    	LEA	HL,IX+%FFFFFFD1
0B0415 F9                  A  1256    	LD	SP,HL
                           A  1257    ;  130		uint8_t file;
                           A  1258    ;  131		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1259    ;  132		uint24_t filesize;
                           A  1260    ;  133		uint32_t crcresult;
                           A  1261    ;  134		uint24_t size, n;
                           A  1262    ;  135		uint8_t response;
                           A  1263    ;  136	
                           A  1264    ;  137		putch(12); // cls
                           A  1265    .LINE 137
                           A  1266    
0B0416 010C0000            A  1267    	LD	BC,12
0B041A C5                  A  1268    	PUSH	BC
0B041B CD E5 00 0B         A  1269    	CALL	_putch
0B041F C1                  A  1270    	POP	BC
                           A  1271    ;  138		print_version();	
                           A  1272    .LINE 138
                           A  1273    
0B0420 CD E5 02 0B         A  1274    	CALL	_print_version
                           A  1275    ;  139		printf("Unlocking VDP updater...\r\
                           A  1276    .LINE 139
                           A  1277    
0B0424 01 4C 12 0B         A  1278    	LD	BC,___print_uputch
0B0428 ED43 04 20 0B       A  1279    	LD	(___print_xputch),BC
0B042D 01 30 21 0B         A  1280    	LD	BC,L__30
0B0431 C5                  A  1281    	PUSH	BC
0B0432 CD DB 10 0B         A  1282    	CALL	___print_sendstring
0B0436 C1                  A  1283    	POP	BC
                           A  1284    ;  140		
                           A  1285    ;  141		if(!vdp_ota_present()) {
                           A  1286    .LINE 141
                           A  1287    
0B0437 CD A3 01 0B         A  1288    	CALL	_vdp_ota_present
0B043B B7                  A  1289    	OR	A,A
0B043C 20 18               A  1290    	JR	NZ,L_38
                           A  1291    ;  142			printf(" failed - incompatible 
                           A  1292    .LINE 142
                           A  1293    
0B043E 01 4C 12 0B         A  1294    	LD	BC,___print_uputch
0B0442 ED43 04 20 0B       A  1295    	LD	(___print_xputch),BC
0B0447 01 4B 21 0B         A  1296    	LD	BC,L__32
0B044B C5                  A  1297    	PUSH	BC
0B044C CD DB 10 0B         A  1298    	CALL	___print_sendstring
0B0450 C1                  A  1299    	POP	BC
                           A  1300    ;  143			return 0;
                           A  1301    .LINE 143
                           A  1302    
0B0451 AF                  A  1303    	XOR	A,A
0B0452 C3 AE 05 0B         A  1304    	JR	L_50
                           A  1305    ;  144		}
0B0456                     A  1306    L_38:
                           A  1307    .LINE 144
                           A  1308    
                           A  1309    ;  145	
                           A  1310    ;  146		file = mos_fopen(filename, fa_read)
                           A  1311    .LINE 146
                           A  1312    
0B0456 01010000            A  1313    	LD	BC,1
0B045A C5                  A  1314    	PUSH	BC
0B045B DD0706              A  1315    	LD	BC,(IX+%6)
0B045E C5                  A  1316    	PUSH	BC
0B045F CD 0B 0C 0B         A  1317    	CALL	_mos_fopen
0B0463 C1                  A  1318    	POP	BC
0B0464 C1                  A  1319    	POP	BC
0B0465 DD77FF              A  1320    	LD	(IX+%FFFFFFFF),A
                           A  1321    ;  147		if(!file) {
                           A  1322    .LINE 147
                           A  1323    
0B0468 B7                  A  1324    	OR	A,A
0B0469 20 2C               A  1325    	JR	NZ,L_40
                           A  1326    ;  148			printf("Error opening \"%s\"\n\
                           A  1327    .LINE 148
                           A  1328    
0B046B 01 4C 12 0B         A  1329    	LD	BC,___print_uputch
0B046F ED43 04 20 0B       A  1330    	LD	(___print_xputch),BC
0B0474 01 68 21 0B         A  1331    	LD	BC,L__34
0B0478 C5                  A  1332    	PUSH	BC
0B0479 CD DB 10 0B         A  1333    	CALL	___print_sendstring
0B047D C1                  A  1334    	POP	BC
0B047E DD0706              A  1335    	LD	BC,(IX+%6)
0B0481 C5                  A  1336    	PUSH	BC
0B0482 CD DB 10 0B         A  1337    	CALL	___print_sendstring
0B0486 C1                  A  1338    	POP	BC
0B0487 01 78 21 0B         A  1339    	LD	BC,L__35
0B048B C5                  A  1340    	PUSH	BC
0B048C CD DB 10 0B         A  1341    	CALL	___print_sendstring
0B0490 C1                  A  1342    	POP	BC
                           A  1343    ;  149			return EXIT_FILENOTFOUND;
                           A  1344    .LINE 149
                           A  1345    
0B0491 3E04                A  1346    	LD	A,%4
0B0493 C3 AE 05 0B         A  1347    	JR	L_50
                           A  1348    ;  150		}
0B0497                     A  1349    L_40:
                           A  1350    .LINE 150
                           A  1351    
                           A  1352    ;  151	
                           A  1353    ;  152		mos_fread(file, (char *)buffer, ESP
                           A  1354    .LINE 152
                           A  1355    
0B0497 01240000            A  1356    	LD	BC,36
0B049B C5                  A  1357    	PUSH	BC
0B049C ED65D1              A  1358    	PEA	IX+%FFFFFFD1
0B049F DD4EFF              A  1359    	LD	C,(IX+%FFFFFFFF)
0B04A2 0600                A  1360    	LD	B,%0
0B04A4 C5                  A  1361    	PUSH	BC
0B04A5 CD 4D 0C 0B         A  1362    	CALL	_mos_fread
0B04A9 C1                  A  1363    	POP	BC
0B04AA C1                  A  1364    	POP	BC
0B04AB C1                  A  1365    	POP	BC
                           A  1366    ;  153		if(!containsESP32Header(buffer)) {
                           A  1367    .LINE 153
                           A  1368    
0B04AC ED65D1              A  1369    	PEA	IX+%FFFFFFD1
0B04AF CD 91 02 0B         A  1370    	CALL	_containsESP32Header
0B04B3 C1                  A  1371    	POP	BC
0B04B4 B7                  A  1372    	OR	A,A
0B04B5 20 19               A  1373    	JR	NZ,L_42
                           A  1374    ;  154			printf("File does not contain v
                           A  1375    .LINE 154
                           A  1376    
0B04B7 01 4C 12 0B         A  1377    	LD	BC,___print_uputch
0B04BB ED43 04 20 0B       A  1378    	LD	(___print_xputch),BC
0B04C0 01 7C 21 0B         A  1379    	LD	BC,L__37
0B04C4 C5                  A  1380    	PUSH	BC
0B04C5 CD DB 10 0B         A  1381    	CALL	___print_sendstring
0B04C9 C1                  A  1382    	POP	BC
                           A  1383    ;  155			return EXIT_INVALIDPARAMETER;
                           A  1384    .LINE 155
                           A  1385    
0B04CA 3E13                A  1386    	LD	A,%13
0B04CC C3 AE 05 0B         A  1387    	JR	L_50
                           A  1388    ;  156		}
0B04D0                     A  1389    L_42:
                           A  1390    .LINE 156
                           A  1391    
                           A  1392    ;  157		printf("\r\nValid ESP32 code\r\nCal
                           A  1393    .LINE 157
                           A  1394    
0B04D0 01 4C 12 0B         A  1395    	LD	BC,___print_uputch
0B04D4 ED43 04 20 0B       A  1396    	LD	(___print_xputch),BC
0B04D9 01 A5 21 0B         A  1397    	LD	BC,L__38
0B04DD C5                  A  1398    	PUSH	BC
0B04DE CD DB 10 0B         A  1399    	CALL	___print_sendstring
0B04E2 C1                  A  1400    	POP	BC
                           A  1401    ;  158		crc32_initialize();
                           A  1402    .LINE 158
                           A  1403    
0B04E3 CD 99 0F 0B         A  1404    	CALL	_crc32_initialize
                           A  1405    ;  159		mos_flseek(file, 0);
                           A  1406    .LINE 159
                           A  1407    
0B04E7 01000000            A  1408    	LD	BC,0
0B04EB C5                  A  1409    	PUSH	BC
0B04EC C5                  A  1410    	PUSH	BC
0B04ED DD4EFF              A  1411    	LD	C,(IX+%FFFFFFFF)
0B04F0 0600                A  1412    	LD	B,%0
0B04F2 C5                  A  1413    	PUSH	BC
0B04F3 CD C7 0C 0B         A  1414    	CALL	_mos_flseek
0B04F7 C1                  A  1415    	POP	BC
0B04F8 C1                  A  1416    	POP	BC
0B04F9 C1                  A  1417    	POP	BC
                           A  1418    ;  160		while(1) {
0B04FA                     A  1419    L_46:
                           A  1420    .LINE 160
                           A  1421    
                           A  1422    ;  161			size = mos_fread(file, (char *)
                           A  1423    .LINE 161
                           A  1424    
0B04FA 01004000            A  1425    	LD	BC,16384
0B04FE C5                  A  1426    	PUSH	BC
0B04FF 01000005            A  1427    	LD	BC,327680
0B0503 C5                  A  1428    	PUSH	BC
0B0504 DD4EFF              A  1429    	LD	C,(IX+%FFFFFFFF)
0B0507 0600                A  1430    	LD	B,%0
0B0509 C5                  A  1431    	PUSH	BC
0B050A CD 4D 0C 0B         A  1432    	CALL	_mos_fread
0B050E C1                  A  1433    	POP	BC
0B050F C1                  A  1434    	POP	BC
0B0510 C1                  A  1435    	POP	BC
0B0511 DD2FFC              A  1436    	LD	(IX+%FFFFFFFC),HL
                           A  1437    ;  162			if(size == 0) break;
                           A  1438    .LINE 162
                           A  1439    
0B0514 CD 09 16 0B         A  1440    	CALL	__icmpzero
0B0518 28 1B               A  1441    	JR	Z,L_47
                           A  1442    ;  163			putch('.');
                           A  1443    .LINE 163
                           A  1444    
0B051A 012E0000            A  1445    	LD	BC,46
0B051E C5                  A  1446    	PUSH	BC
0B051F CD E5 00 0B         A  1447    	CALL	_putch
0B0523 C1                  A  1448    	POP	BC
                           A  1449    ;  164			crc32((char *)BUFFER1, size);
                           A  1450    .LINE 164
                           A  1451    
0B0524 DD07FC              A  1452    	LD	BC,(IX+%FFFFFFFC)
0B0527 C5                  A  1453    	PUSH	BC
0B0528 01000005            A  1454    	LD	BC,327680
0B052C C5                  A  1455    	PUSH	BC
0B052D CD EB 0F 0B         A  1456    	CALL	_crc32
0B0531 C1                  A  1457    	POP	BC
0B0532 C1                  A  1458    	POP	BC
0B0533 18 C5               A  1459    	JR	L_46
                           A  1460    ;  165		}
0B0535                     A  1461    L_47:
                           A  1462    .LINE 165
                           A  1463    
                           A  1464    ;  166		crcresult = crc32_finalize();
                           A  1465    .LINE 166
                           A  1466    
0B0535 CD AE 0F 0B         A  1467    	CALL	_crc32_finalize
0B0539 DD2FF5              A  1468    	LD	(IX+%FFFFFFF5),HL
0B053C DD73F8              A  1469    	LD	(IX+%FFFFFFF8),E
                           A  1470    ;  167		if(!getResponse(VDP, crcresult)) re
                           A  1471    .LINE 167
                           A  1472    
0B053F DD4EF8              A  1473    	LD	C,(IX+%FFFFFFF8)
0B0542 0600                A  1474    	LD	B,%0
0B0544 C5                  A  1475    	PUSH	BC
0B0545 DD07F5              A  1476    	LD	BC,(IX+%FFFFFFF5)
0B0548 C5                  A  1477    	PUSH	BC
0B0549 01010000            A  1478    	LD	BC,1
0B054D C5                  A  1479    	PUSH	BC
0B054E CD 2B 03 0B         A  1480    	CALL	_getResponse
0B0552 C1                  A  1481    	POP	BC
0B0553 C1                  A  1482    	POP	BC
0B0554 C1                  A  1483    	POP	BC
0B0555 B7                  A  1484    	OR	A,A
0B0556 20 03               A  1485    	JR	NZ,L_49
0B0558 AF                  A  1486    	XOR	A,A
0B0559 18 53               A  1487    	JR	L_50
0B055B                     A  1488    L_49:
                           A  1489    ;  168	
                           A  1490    ;  169		// Do actual work here
                           A  1491    ;  170		mos_flseek(file, 0); // reset to ze
                           A  1492    .LINE 170
                           A  1493    
0B055B 01000000            A  1494    	LD	BC,0
0B055F C5                  A  1495    	PUSH	BC
0B0560 C5                  A  1496    	PUSH	BC
0B0561 DD4EFF              A  1497    	LD	C,(IX+%FFFFFFFF)
0B0564 0600                A  1498    	LD	B,%0
0B0566 C5                  A  1499    	PUSH	BC
0B0567 CD C7 0C 0B         A  1500    	CALL	_mos_flseek
0B056B C1                  A  1501    	POP	BC
0B056C C1                  A  1502    	POP	BC
0B056D C1                  A  1503    	POP	BC
                           A  1504    ;  171		printf("Updating VDP firmware\r\n")
                           A  1505    .LINE 171
                           A  1506    
0B056E 01 4C 12 0B         A  1507    	LD	BC,___print_uputch
0B0572 ED43 04 20 0B       A  1508    	LD	(___print_xputch),BC
0B0577 01 CB 21 0B         A  1509    	LD	BC,L__41
0B057B C5                  A  1510    	PUSH	BC
0B057C CD DB 10 0B         A  1511    	CALL	___print_sendstring
0B0580 C1                  A  1512    	POP	BC
                           A  1513    ;  172		filesize = getFileSize(file);	
                           A  1514    .LINE 172
                           A  1515    
0B0581 DD4EFF              A  1516    	LD	C,(IX+%FFFFFFFF)
0B0584 0600                A  1517    	LD	B,%0
0B0586 C5                  A  1518    	PUSH	BC
0B0587 CD 4B 10 0B         A  1519    	CALL	_getFileSize
0B058B C1                  A  1520    	POP	BC
0B058C DD2FF9              A  1521    	LD	(IX+%FFFFFFF9),HL
                           A  1522    ;  173		startVDPupdate(file, filesize);
                           A  1523    .LINE 173
                           A  1524    
0B058F E5C1                A  1525    	LD	BC,HL
0B0591 C5                  A  1526    	PUSH	BC
0B0592 DD4EFF              A  1527    	LD	C,(IX+%FFFFFFFF)
0B0595 0600                A  1528    	LD	B,%0
0B0597 C5                  A  1529    	PUSH	BC
0B0598 CD 32 0D 0B         A  1530    	CALL	_startVDPupdate
0B059C C1                  A  1531    	POP	BC
0B059D C1                  A  1532    	POP	BC
                           A  1533    ;  174		mos_fclose(file);
                           A  1534    .LINE 174
                           A  1535    
0B059E DD4EFF              A  1536    	LD	C,(IX+%FFFFFFFF)
0B05A1 0600                A  1537    	LD	B,%0
0B05A3 C5                  A  1538    	PUSH	BC
0B05A4 CD 23 0C 0B         A  1539    	CALL	_mos_fclose
0B05A8 C1                  A  1540    	POP	BC
                           A  1541    ;  175		reset();
                           A  1542    .LINE 175
                           A  1543    
0B05A9 CD 11 0D 0B         A  1544    	CALL	_reset
                           A  1545    ;  176		return 0; // will never return, but
                           A  1546    .LINE 176
                           A  1547    
0B05AD AF                  A  1548    	XOR	A,A
                           A  1549    ;  177	}
0B05AE                     A  1550    L_50:
                           A  1551    .LINE 177
                           A  1552    
0B05AE DDF9                A  1553    	LD	SP,IX
0B05B0 DDE1                A  1554    	POP	IX
0B05B2 C9                  A  1555    	RET	
                           A  1556    
                           A  1557    
                           A  1558    ;**************************** _update_vdp *****
                           A  1559    ;Name                         Addr/Register   S
                           A  1560    ;_reset                              IMPORT  --
                           A  1561    ;_mos_fclose                         IMPORT  --
                           A  1562    ;_startVDPupdate                     IMPORT  --
                           A  1563    ;_getFileSize                        IMPORT  --
                           A  1564    ;_crc32_finalize                     IMPORT  --
                           A  1565    ;_crc32                              IMPORT  --
                           A  1566    ;_mos_flseek                         IMPORT  --
                           A  1567    ;_crc32_initialize                   IMPORT  --
                           A  1568    ;_mos_fread                          IMPORT  --
                           A  1569    ;_mos_fopen                          IMPORT  --
                           A  1570    ;___print_sendstring                 IMPORT  --
                           A  1571    ;___print_xputch                     IMPORT    
                           A  1572    ;___print_uputch                     IMPORT  --
                           A  1573    ;_putch                              IMPORT  --
                           A  1574    ;buffer                               IX-47    
                           A  1575    ;crcresult                            IX-11    
                           A  1576    ;filesize                              IX-7    
                           A  1577    ;size                                  IX-4    
                           A  1578    ;file                                  IX-1    
                           A  1579    ;filename                              IX+6    
                           A  1580    
                           A  1581    
                           A  1582    ; Stack Frame Size: 56 (bytes)
                           A  1583    ;       Spill Code: 0 (instruction)
                           A  1584    
                           A  1585    
                           A  1586    .ENDFUNC "update_vdp",177,"_update_vdp"
                           A  1587    	SEGMENT STRSECT
0B2130                     A  1588    L__30:
0B2130 556E6C6F 636B696E   A  1589    	DB	"Unlocking VDP updater..."
0B2138 67205644 50207570 
0B2140 64617465 722E2E2E 
0B2148 0D0A00              A  1590    	DB	13,10,0
0B214B                     A  1591    L__32:
0B214B 20666169 6C656420   A  1592    	DB	" failed - incompatible VDP"
0B2153 2D20696E 636F6D70 
0B215B 61746962 6C652056 
0B2163 4450 
0B2165 0D0A00              A  1593    	DB	13,10,0
0B2168                     A  1594    L__34:
0B2168 4572726F 72206F70   A  1595    	DB	"Error opening \""
0B2170 656E696E 672022 
0B2177 00                  A  1596    	DB	0
0B2178                     A  1597    L__35:
0B2178 22                  A  1598    	DB	"\""
0B2179 0A0D00              A  1599    	DB	10,13,0
0B217C                     A  1600    L__37:
0B217C 46696C65 20646F65   A  1601    	DB	"File does not contain valid ESP32 code
0B2184 73206E6F 7420636F 
0B218C 6E746169 6E207661 
0B2194 6C696420 45535033 
0B219C 3220636F 6465 
0B21A2 0D0A00              A  1602    	DB	13,10,0
0B21A5                     A  1603    L__38:
0B21A5 0D0A                A  1604    	DB	13,10
0B21A7 56616C69 64204553   A  1605    	DB	"Valid ESP32 code"
0B21AF 50333220 636F6465 
0B21B7 0D0A                A  1606    	DB	13,10
0B21B9 43616C63 756C6174   A  1607    	DB	"Calculating CRC32"
0B21C1 696E6720 43524333 
0B21C9 32 
0B21CA 00                  A  1608    	DB	0
0B21CB                     A  1609    L__41:
0B21CB 55706461 74696E67   A  1610    	DB	"Updating VDP firmware"
0B21D3 20564450 20666972 
0B21DB 6D776172 65 
0B21E0 0D0A00              A  1611    	DB	13,10,0
                           A  1612    	SEGMENT CODE
                           A  1613    ;  178	
                           A  1614    ;  179	uint8_t update_mos(char *filename) {
0B05B3                     A  1615    _update_mos:
                           A  1616    .DEFINE "_update_mos"
                           A  1617    
                           A  1618    .VALUE _update_mos
                           A  1619    
                           A  1620    .CLASS 2
                           A  1621    
                           A  1622    .TYPE 76
                           A  1623    
                           A  1624    .ENDEF
                           A  1625    
                           A  1626    .BEGFUNC "update_mos",179,"_update_mos"
                           A  1627    
                           A  1628    .LINE 179
                           A  1629    
                           A  1630    .DEFINE "filename"
                           A  1631    
                           A  1632    .CLASS 65
                           A  1633    
                           A  1634    .VALUE 6
                           A  1635    
                           A  1636    .TYPE 34
                           A  1637    
                           A  1638    .ENDEF
                           A  1639    
                           A  1640    .DEFINE "counter"
                           A  1641    
                           A  1642    .CLASS 65
                           A  1643    
                           A  1644    .VALUE -3
                           A  1645    
                           A  1646    .TYPE 14
                           A  1647    
                           A  1648    .ENDEF
                           A  1649    
                           A  1650    .DEFINE "size"
                           A  1651    
                           A  1652    .CLASS 65
                           A  1653    
                           A  1654    .VALUE -6
                           A  1655    
                           A  1656    .TYPE 14
                           A  1657    
                           A  1658    .ENDEF
                           A  1659    
                           A  1660    .DEFINE "response"
                           A  1661    
                           A  1662    .CLASS 65
                           A  1663    
                           A  1664    .VALUE -7
                           A  1665    
                           A  1666    .TYPE 12
                           A  1667    
                           A  1668    .ENDEF
                           A  1669    
                           A  1670    .DEFINE "addressfrom"
                           A  1671    
                           A  1672    .CLASS 65
                           A  1673    
                           A  1674    .VALUE -10
                           A  1675    
                           A  1676    .TYPE 14
                           A  1677    
                           A  1678    .ENDEF
                           A  1679    
                           A  1680    .DEFINE "state"
                           A  1681    
                           A  1682    .CLASS 65
                           A  1683    
                           A  1684    .VALUE -13
                           A  1685    
                           A  1686    .TYPE 4
                           A  1687    
                           A  1688    .ENDEF
                           A  1689    
                           A  1690    .DEFINE "pagemax"
                           A  1691    
                           A  1692    .CLASS 65
                           A  1693    
                           A  1694    .VALUE -16
                           A  1695    
                           A  1696    .TYPE 14
                           A  1697    
                           A  1698    .ENDEF
                           A  1699    
                           A  1700    .DEFINE "ptr"
                           A  1701    
                           A  1702    .CLASS 65
                           A  1703    
                           A  1704    .VALUE -19
                           A  1705    
                           A  1706    .TYPE 34
                           A  1707    
                           A  1708    .ENDEF
                           A  1709    
                           A  1710    .DEFINE "addressto"
                           A  1711    
                           A  1712    .CLASS 65
                           A  1713    
                           A  1714    .VALUE -22
                           A  1715    
                           A  1716    .TYPE 14
                           A  1717    
                           A  1718    .ENDEF
                           A  1719    
                           A  1720    .DEFINE "crcresult"
                           A  1721    
                           A  1722    .CLASS 65
                           A  1723    
                           A  1724    .VALUE -26
                           A  1725    
                           A  1726    .TYPE 15
                           A  1727    
                           A  1728    .ENDEF
                           A  1729    
                           A  1730    .DEFINE "got"
                           A  1731    
                           A  1732    .CLASS 65
                           A  1733    
                           A  1734    .VALUE -29
                           A  1735    
                           A  1736    .TYPE 14
                           A  1737    
                           A  1738    .ENDEF
                           A  1739    
                           A  1740    .DEFINE "value"
                           A  1741    
                           A  1742    .CLASS 65
                           A  1743    
                           A  1744    .VALUE -30
                           A  1745    
                           A  1746    .TYPE 12
                           A  1747    
                           A  1748    .ENDEF
                           A  1749    
                           A  1750    .DEFINE "file"
                           A  1751    
                           A  1752    .CLASS 65
                           A  1753    
                           A  1754    .VALUE -31
                           A  1755    
                           A  1756    .TYPE 12
                           A  1757    
                           A  1758    .ENDEF
                           A  1759    
                           A  1760    .DEFINE "lastpagebytes"
                           A  1761    
                           A  1762    .CLASS 65
                           A  1763    
                           A  1764    .VALUE -34
                           A  1765    
                           A  1766    .TYPE 14
                           A  1767    
                           A  1768    .ENDEF
                           A  1769    
                           A  1770    .DEFINE "crcexpected"
                           A  1771    
                           A  1772    .CLASS 65
                           A  1773    
                           A  1774    .VALUE -38
                           A  1775    
                           A  1776    .TYPE 15
                           A  1777    
                           A  1778    .ENDEF
                           A  1779    
                           A  1780    .DEFINE "crcbackup"
                           A  1781    
                           A  1782    .CLASS 65
                           A  1783    
                           A  1784    .VALUE -45
                           A  1785    
                           A  1786    .TYPE 15
                           A  1787    
                           A  1788    .ENDEF
                           A  1789    
0B05B3 DDE5                A  1790    	PUSH	IX
0B05B5 DD210000 00         A  1791    	LD	IX,0
0B05BA DD39                A  1792    	ADD	IX,SP
0B05BC ED22D3              A  1793    	LEA	HL,IX+%FFFFFFD3
0B05BF F9                  A  1794    	LD	SP,HL
                           A  1795    ;  180		UINT32 crcexpected,crcresult,crcbac
                           A  1796    ;  181		UINT24 size = 0;
                           A  1797    .LINE 181
                           A  1798    
0B05C0 01000000            A  1799    	LD	BC,0
0B05C4 DD0FFA              A  1800    	LD	(IX+%FFFFFFFA),BC
                           A  1801    ;  182		UINT24 got;
                           A  1802    ;  183		UINT8 file;
                           A  1803    ;  184		char* ptr = (char*)BUFFER1;
                           A  1804    .LINE 184
                           A  1805    
0B05C7 01000005            A  1806    	LD	BC,327680
0B05CB DD0FED              A  1807    	LD	(IX+%FFFFFFED),BC
                           A  1808    ;  185		UINT8 response;
                           A  1809    ;  186		UINT8 value;
                           A  1810    ;  187		UINT24 counter,pagemax, lastpagebyt
                           A  1811    ;  188		UINT24 addressto,addressfrom;
                           A  1812    ;  189		enum states state;
                           A  1813    ;  190		
                           A  1814    ;  191		printf("Agon MOS firmware upgrade u
                           A  1815    .LINE 191
                           A  1816    
0B05CE 01 4C 12 0B         A  1817    	LD	BC,___print_uputch
0B05D2 ED43 04 20 0B       A  1818    	LD	(___print_xputch),BC
0B05D7 01 E3 21 0B         A  1819    	LD	BC,L__43
0B05DB C5                  A  1820    	PUSH	BC
0B05DC CD DB 10 0B         A  1821    	CALL	___print_sendstring
0B05E0 C1                  A  1822    	POP	BC
                           A  1823    ;  192		
                           A  1824    ;  193		return 0; // DISABLE FOR NOW
                           A  1825    .LINE 193
                           A  1826    
0B05E1 AF                  A  1827    	XOR	A,A
0B05E2 C3 2E 0B 0B         A  1828    	JR	L_108
                           A  1829    ;  194	
                           A  1830    ;  195		file = mos_fopen(filename, fa_read)
                           A  1831    ;  196		if(!file)
                           A  1832    ;  197		{
                           A  1833    ;  198			printf("Error opening \"%s\"\n\
                           A  1834    ;  199			return EXIT_FILENOTFOUND;
                           A  1835    ;  200		}
                           A  1836    ;  201		
                           A  1837    ;  202		printf("Loading file : %s\n\r",file
                           A  1838    ;  203		printf("File size    : %d byte(s)",
                           A  1839    ;  204	
                           A  1840    ;  205		// Read file to memory
                           A  1841    ;  206		while((got = mos_fread(file, ptr, B
0B05E6                     A  1842    L_54:
                           A  1843    .LINE 206
                           A  1844    
                           A  1845    ;  207		{
                           A  1846    ;  208			ptr += got;
                           A  1847    .LINE 208
                           A  1848    
0B05E6 DD07E3              A  1849    	LD	BC,(IX+%FFFFFFE3)
0B05E9 DD27ED              A  1850    	LD	HL,(IX+%FFFFFFED)
0B05EC 09                  A  1851    	ADD	HL,BC
0B05ED DD2FED              A  1852    	LD	(IX+%FFFFFFED),HL
                           A  1853    ;  209			size += got;
                           A  1854    .LINE 209
                           A  1855    
0B05F0 DD07E3              A  1856    	LD	BC,(IX+%FFFFFFE3)
0B05F3 DD27FA              A  1857    	LD	HL,(IX+%FFFFFFFA)
0B05F6 09                  A  1858    	ADD	HL,BC
0B05F7 DD2FFA              A  1859    	LD	(IX+%FFFFFFFA),HL
                           A  1860    ;  210			printf("\rFile size    : %d byt
                           A  1861    .LINE 210
                           A  1862    
0B05FA 01 4C 12 0B         A  1863    	LD	BC,___print_uputch
0B05FE ED43 04 20 0B       A  1864    	LD	(___print_xputch),BC
0B0603 01 0E 22 0B         A  1865    	LD	BC,L__44
0B0607 C5                  A  1866    	PUSH	BC
0B0608 CD DB 10 0B         A  1867    	CALL	___print_sendstring
0B060C C1                  A  1868    	POP	BC
0B060D DD07FA              A  1869    	LD	BC,(IX+%FFFFFFFA)
0B0610 AF                  A  1870    	XOR	A,A
0B0611 C5D1                A  1871    	LD	DE,BC
0B0613 4F                  A  1872    	LD	C,A
0B0614 0600                A  1873    	LD	B,%0
0B0616 C5                  A  1874    	PUSH	BC
0B0617 D5                  A  1875    	PUSH	DE
0B0618 CD D2 12 0B         A  1876    	CALL	__u_itoa
0B061C C1                  A  1877    	POP	BC
0B061D C1                  A  1878    	POP	BC
0B061E 01 1F 22 0B         A  1879    	LD	BC,L__45
0B0622 C5                  A  1880    	PUSH	BC
0B0623 CD DB 10 0B         A  1881    	CALL	___print_sendstring
0B0627 C1                  A  1882    	POP	BC
0B0628 01004000            A  1883    	LD	BC,16384
0B062C C5                  A  1884    	PUSH	BC
0B062D DD07ED              A  1885    	LD	BC,(IX+%FFFFFFED)
0B0630 C5                  A  1886    	PUSH	BC
0B0631 DD4EE1              A  1887    	LD	C,(IX+%FFFFFFE1)
0B0634 0600                A  1888    	LD	B,%0
0B0636 C5                  A  1889    	PUSH	BC
0B0637 CD 4D 0C 0B         A  1890    	CALL	_mos_fread
0B063B C1                  A  1891    	POP	BC
0B063C C1                  A  1892    	POP	BC
0B063D C1                  A  1893    	POP	BC
0B063E DD2FE3              A  1894    	LD	(IX+%FFFFFFE3),HL
0B0641 E5C1                A  1895    	LD	BC,HL
0B0643 B7                  A  1896    	OR	A,A
0B0644 ED62                A  1897    	SBC	HL,HL
0B0646 B7                  A  1898    	OR	A,A
0B0647 ED42                A  1899    	SBC	HL,BC
0B0649 38 9B               A  1900    	JR	C,L_54
                           A  1901    ;  211		}		
                           A  1902    ;  212		mos_fclose(file);	
                           A  1903    .LINE 212
                           A  1904    
0B064B DD4EE1              A  1905    	LD	C,(IX+%FFFFFFE1)
0B064E 0600                A  1906    	LD	B,%0
0B0650 C5                  A  1907    	PUSH	BC
0B0651 CD 23 0C 0B         A  1908    	CALL	_mos_fclose
0B0655 C1                  A  1909    	POP	BC
                           A  1910    ;  213		printf("\rFile size    : %d byte(s)
                           A  1911    .LINE 213
                           A  1912    
0B0656 01 4C 12 0B         A  1913    	LD	BC,___print_uputch
0B065A ED43 04 20 0B       A  1914    	LD	(___print_xputch),BC
0B065F 01 28 22 0B         A  1915    	LD	BC,L__47
0B0663 C5                  A  1916    	PUSH	BC
0B0664 CD DB 10 0B         A  1917    	CALL	___print_sendstring
0B0668 C1                  A  1918    	POP	BC
0B0669 DD07FA              A  1919    	LD	BC,(IX+%FFFFFFFA)
0B066C AF                  A  1920    	XOR	A,A
0B066D C5D1                A  1921    	LD	DE,BC
0B066F 4F                  A  1922    	LD	C,A
0B0670 0600                A  1923    	LD	B,%0
0B0672 C5                  A  1924    	PUSH	BC
0B0673 D5                  A  1925    	PUSH	DE
0B0674 CD D2 12 0B         A  1926    	CALL	__u_itoa
0B0678 C1                  A  1927    	POP	BC
0B0679 C1                  A  1928    	POP	BC
0B067A 01 39 22 0B         A  1929    	LD	BC,L__48
0B067E C5                  A  1930    	PUSH	BC
0B067F CD DB 10 0B         A  1931    	CALL	___print_sendstring
0B0683 C1                  A  1932    	POP	BC
                           A  1933    ;  214		if(size > FLASHSIZE)
                           A  1934    .LINE 214
                           A  1935    
0B0684 DD07FA              A  1936    	LD	BC,(IX+%FFFFFFFA)
0B0687 21000002            A  1937    	LD	HL,131072
0B068B B7                  A  1938    	OR	A,A
0B068C ED42                A  1939    	SBC	HL,BC
0B068E 30 18               A  1940    	JR	NC,L_58
                           A  1941    ;  215		{
                           A  1942    ;  216			printf("Too large for 128KB fla
                           A  1943    .LINE 216
                           A  1944    
0B0690 01 4C 12 0B         A  1945    	LD	BC,___print_uputch
0B0694 ED43 04 20 0B       A  1946    	LD	(___print_xputch),BC
0B0699 01 44 22 0B         A  1947    	LD	BC,L__50
0B069D C5                  A  1948    	PUSH	BC
0B069E CD DB 10 0B         A  1949    	CALL	___print_sendstring
0B06A2 C1                  A  1950    	POP	BC
                           A  1951    ;  217			return 0;
                           A  1952    .LINE 217
                           A  1953    
0B06A3 AF                  A  1954    	XOR	A,A
0B06A4 C3 2E 0B 0B         A  1955    	JR	L_108
                           A  1956    ;  218		}
0B06A8                     A  1957    L_58:
                           A  1958    .LINE 218
                           A  1959    
                           A  1960    ;  219	
                           A  1961    ;  220		if(!containsMosHeader((uint8_t *)pt
                           A  1962    .LINE 220
                           A  1963    
0B06A8 DD07ED              A  1964    	LD	BC,(IX+%FFFFFFED)
0B06AB C5                  A  1965    	PUSH	BC
0B06AC CD 46 02 0B         A  1966    	CALL	_containsMosHeader
0B06B0 C1                  A  1967    	POP	BC
0B06B1 B7                  A  1968    	OR	A,A
0B06B2 20 19               A  1969    	JR	NZ,L_59
                           A  1970    ;  221			printf("File does not contain v
                           A  1971    .LINE 221
                           A  1972    
0B06B4 01 4C 12 0B         A  1973    	LD	BC,___print_uputch
0B06B8 ED43 04 20 0B       A  1974    	LD	(___print_xputch),BC
0B06BD 01 6B 22 0B         A  1975    	LD	BC,L__52
0B06C1 C5                  A  1976    	PUSH	BC
0B06C2 CD DB 10 0B         A  1977    	CALL	___print_sendstring
0B06C6 C1                  A  1978    	POP	BC
                           A  1979    ;  222			return EXIT_INVALIDPARAMETER;
                           A  1980    .LINE 222
                           A  1981    
0B06C7 3E13                A  1982    	LD	A,%13
0B06C9 C3 2E 0B 0B         A  1983    	JR	L_108
                           A  1984    ;  223		}
0B06CD                     A  1985    L_59:
                           A  1986    .LINE 223
                           A  1987    
                           A  1988    ;  224	
                           A  1989    ;  225		crcexpected = 0;
                           A  1990    .LINE 225
                           A  1991    
0B06CD 01000000            A  1992    	LD	BC,0
0B06D1 AF                  A  1993    	XOR	A,A
0B06D2 DD0FDA              A  1994    	LD	(IX+%FFFFFFDA),BC
0B06D5 DD77DD              A  1995    	LD	(IX+%FFFFFFDD),A
                           A  1996    ;  226		printf("Testing CRC32: 0x%08lx\n\r"
                           A  1997    .LINE 226
                           A  1998    
0B06D8 01 4C 12 0B         A  1999    	LD	BC,___print_uputch
0B06DC ED43 04 20 0B       A  2000    	LD	(___print_xputch),BC
0B06E1 01 9F 22 0B         A  2001    	LD	BC,L__53
0B06E5 C5                  A  2002    	PUSH	BC
0B06E6 CD DB 10 0B         A  2003    	CALL	___print_sendstring
0B06EA C1                  A  2004    	POP	BC
0B06EB 3E08                A  2005    	LD	A,%8
0B06ED 32 5E 24 0B         A  2006    	LD	(___print_fmt+5),A
0B06F1 3E40                A  2007    	LD	A,%40
0B06F3 32 5A 24 0B         A  2008    	LD	(___print_fmt+1),A
0B06F7 3E78                A  2009    	LD	A,%78
0B06F9 32 5D 24 0B         A  2010    	LD	(___print_fmt+4),A
0B06FD 01000000            A  2011    	LD	BC,0
0B0701 C5                  A  2012    	PUSH	BC
0B0702 C5                  A  2013    	PUSH	BC
0B0703 CD A5 19 0B         A  2014    	CALL	__u_ultoa
0B0707 C1                  A  2015    	POP	BC
0B0708 C1                  A  2016    	POP	BC
0B0709 01 B1 22 0B         A  2017    	LD	BC,L__54
0B070D C5                  A  2018    	PUSH	BC
0B070E CD DB 10 0B         A  2019    	CALL	___print_sendstring
0B0712 C1                  A  2020    	POP	BC
                           A  2021    ;  227		crcresult = crc32((char*)BUFFER1, s
                           A  2022    .LINE 227
                           A  2023    
0B0713 DD07FA              A  2024    	LD	BC,(IX+%FFFFFFFA)
0B0716 C5                  A  2025    	PUSH	BC
0B0717 01000005            A  2026    	LD	BC,327680
0B071B C5                  A  2027    	PUSH	BC
0B071C CD EB 0F 0B         A  2028    	CALL	_crc32
0B0720 C1                  A  2029    	POP	BC
0B0721 C1                  A  2030    	POP	BC
0B0722 DD2FE6              A  2031    	LD	(IX+%FFFFFFE6),HL
0B0725 DD73E9              A  2032    	LD	(IX+%FFFFFFE9),E
                           A  2033    ;  228		printf("CRC32 result : 0x%08lx\n\r"
                           A  2034    .LINE 228
                           A  2035    
0B0728 01 4C 12 0B         A  2036    	LD	BC,___print_uputch
0B072C ED43 04 20 0B       A  2037    	LD	(___print_xputch),BC
0B0731 01 B4 22 0B         A  2038    	LD	BC,L__55
0B0735 C5                  A  2039    	PUSH	BC
0B0736 CD DB 10 0B         A  2040    	CALL	___print_sendstring
0B073A C1                  A  2041    	POP	BC
0B073B 3E08                A  2042    	LD	A,%8
0B073D 32 5E 24 0B         A  2043    	LD	(___print_fmt+5),A
0B0741 3E40                A  2044    	LD	A,%40
0B0743 32 5A 24 0B         A  2045    	LD	(___print_fmt+1),A
0B0747 3E78                A  2046    	LD	A,%78
0B0749 32 5D 24 0B         A  2047    	LD	(___print_fmt+4),A
0B074D DD4EE9              A  2048    	LD	C,(IX+%FFFFFFE9)
0B0750 0600                A  2049    	LD	B,%0
0B0752 C5                  A  2050    	PUSH	BC
0B0753 DD07E6              A  2051    	LD	BC,(IX+%FFFFFFE6)
0B0756 C5                  A  2052    	PUSH	BC
0B0757 CD A5 19 0B         A  2053    	CALL	__u_ultoa
0B075B C1                  A  2054    	POP	BC
0B075C C1                  A  2055    	POP	BC
0B075D 01 C6 22 0B         A  2056    	LD	BC,L__56
0B0761 C5                  A  2057    	PUSH	BC
0B0762 CD DB 10 0B         A  2058    	CALL	___print_sendstring
0B0766 C1                  A  2059    	POP	BC
                           A  2060    ;  229	
                           A  2061    ;  230		if(crcexpected != crcresult)
                           A  2062    .LINE 230
                           A  2063    
0B0767 DD27DA              A  2064    	LD	HL,(IX+%FFFFFFDA)
0B076A DD5EDD              A  2065    	LD	E,(IX+%FFFFFFDD)
0B076D DD07E6              A  2066    	LD	BC,(IX+%FFFFFFE6)
0B0770 DD7EE9              A  2067    	LD	A,(IX+%FFFFFFE9)
0B0773 CD 2E 19 0B         A  2068    	CALL	__lcmpu
0B0777 28 18               A  2069    	JR	Z,L_61
                           A  2070    ;  231		{
                           A  2071    ;  232			printf("\n\rMismatch - aborting
                           A  2072    .LINE 232
                           A  2073    
0B0779 01 4C 12 0B         A  2074    	LD	BC,___print_uputch
0B077D ED43 04 20 0B       A  2075    	LD	(___print_xputch),BC
0B0782 01 C9 22 0B         A  2076    	LD	BC,L__58
0B0786 C5                  A  2077    	PUSH	BC
0B0787 CD DB 10 0B         A  2078    	CALL	___print_sendstring
0B078B C1                  A  2079    	POP	BC
                           A  2080    ;  233			return 0;
                           A  2081    .LINE 233
                           A  2082    
0B078C AF                  A  2083    	XOR	A,A
0B078D C3 2E 0B 0B         A  2084    	JR	L_108
                           A  2085    ;  234		}
0B0791                     A  2086    L_61:
                           A  2087    .LINE 234
                           A  2088    
                           A  2089    ;  235		printf("\n\rOK\n\r\n\r");
                           A  2090    .LINE 235
                           A  2091    
0B0791 01 4C 12 0B         A  2092    	LD	BC,___print_uputch
0B0795 ED43 04 20 0B       A  2093    	LD	(___print_xputch),BC
0B079A 01 E1 22 0B         A  2094    	LD	BC,L__59
0B079E C5                  A  2095    	PUSH	BC
0B079F CD DB 10 0B         A  2096    	CALL	___print_sendstring
0B07A3 C1                  A  2097    	POP	BC
                           A  2098    ;  236	
                           A  2099    ;  237		// Ask user to continue
                           A  2100    ;  238		printf("Erase and program flash (y/
                           A  2101    .LINE 238
                           A  2102    
0B07A4 01 4C 12 0B         A  2103    	LD	BC,___print_uputch
0B07A8 ED43 04 20 0B       A  2104    	LD	(___print_xputch),BC
0B07AD 01 EA 22 0B         A  2105    	LD	BC,L__60
0B07B1 C5                  A  2106    	PUSH	BC
0B07B2 CD DB 10 0B         A  2107    	CALL	___print_sendstring
0B07B6 C1                  A  2108    	POP	BC
                           A  2109    ;  239		response = 0;
                           A  2110    .LINE 239
                           A  2111    
0B07B7 DD36F900            A  2112    	LD	(IX+%FFFFFFF9),%0
                           A  2113    ;  240		while((response != 'y') && (respons
                           A  2114    .LINE 240
                           A  2115    
0B07BB 18 07               A  2116    	JR	L_63
0B07BD                     A  2117    L_64:
0B07BD CD C1 0B 0B         A  2118    	CALL	_getch
0B07C1 DD77F9              A  2119    	LD	(IX+%FFFFFFF9),A
0B07C4                     A  2120    L_63:
0B07C4 DD7EF9              A  2121    	LD	A,(IX+%FFFFFFF9)
0B07C7 FE79                A  2122    	CP	A,%79
0B07C9 28 07               A  2123    	JR	Z,L_106
0B07CB DD7EF9              A  2124    	LD	A,(IX+%FFFFFFF9)
0B07CE FE6E                A  2125    	CP	A,%6E
0B07D0 20 EB               A  2126    	JR	NZ,L_64
0B07D2                     A  2127    L_106:
                           A  2128    ;  241		if(response == 'y')
                           A  2129    .LINE 241
                           A  2130    
0B07D2 DD7EF9              A  2131    	LD	A,(IX+%FFFFFFF9)
0B07D5 FE79                A  2132    	CP	A,%79
0B07D7 C2 1A 0B 0B         A  2133    	JR	NZ,L_105
                           A  2134    ;  242		{
                           A  2135    ;  243			printf("\r\nBacking up existing
                           A  2136    .LINE 243
                           A  2137    
0B07DB 01 4C 12 0B         A  2138    	LD	BC,___print_uputch
0B07DF ED43 04 20 0B       A  2139    	LD	(___print_xputch),BC
0B07E4 01 0A 23 0B         A  2140    	LD	BC,L__64
0B07E8 C5                  A  2141    	PUSH	BC
0B07E9 CD DB 10 0B         A  2142    	CALL	___print_sendstring
0B07ED C1                  A  2143    	POP	BC
                           A  2144    ;  244			fastmemcpy(BUFFER2, 0x0, FLASHS
                           A  2145    .LINE 244
                           A  2146    
0B07EE 01000002            A  2147    	LD	BC,131072
0B07F2 C5                  A  2148    	PUSH	BC
0B07F3 01000000            A  2149    	LD	BC,0
0B07F7 C5                  A  2150    	PUSH	BC
0B07F8 01000007            A  2151    	LD	BC,458752
0B07FC C5                  A  2152    	PUSH	BC
0B07FD CD 13 0D 0B         A  2153    	CALL	_fastmemcpy
0B0801 C1                  A  2154    	POP	BC
0B0802 C1                  A  2155    	POP	BC
0B0803 C1                  A  2156    	POP	BC
                           A  2157    ;  245			crcbackup = crc32((char*)0x0, F
                           A  2158    .LINE 245
                           A  2159    
0B0804 01000002            A  2160    	LD	BC,131072
0B0808 C5                  A  2161    	PUSH	BC
0B0809 01000000            A  2162    	LD	BC,0
0B080D C5                  A  2163    	PUSH	BC
0B080E CD EB 0F 0B         A  2164    	CALL	_crc32
0B0812 C1                  A  2165    	POP	BC
0B0813 C1                  A  2166    	POP	BC
0B0814 DD2FD3              A  2167    	LD	(IX+%FFFFFFD3),HL
0B0817 DD73D6              A  2168    	LD	(IX+%FFFFFFD6),E
                           A  2169    ;  246			
                           A  2170    ;  247			di();							
                           A  2171    .LINE 247
                           A  2172    
0B081A F3                  A  2173    	di
                           A  2174    ;  248	
                           A  2175    ;  249			// start address in flash
                           A  2176    ;  250			addressto = FLASHSTART;
                           A  2177    .LINE 250
                           A  2178    
0B081B 01000000            A  2179    	LD	BC,0
0B081F DD0FEA              A  2180    	LD	(IX+%FFFFFFEA),BC
                           A  2181    ;  251			addressfrom = BUFFER1;
                           A  2182    .LINE 251
                           A  2183    
0B0822 01000005            A  2184    	LD	BC,327680
0B0826 DD0FF6              A  2185    	LD	(IX+%FFFFFFF6),BC
                           A  2186    ;  252			
                           A  2187    ;  253			state = firmware;		
                           A  2188    .LINE 253
                           A  2189    
0B0829 01000000            A  2190    	LD	BC,0
0B082D DD0FF3              A  2191    	LD	(IX+%FFFFFFF3),BC
                           A  2192    ;  254			while(1)
0B0830                     A  2193    L_103:
                           A  2194    .LINE 254
                           A  2195    
                           A  2196    ;  255			{
                           A  2197    ;  256				switch(state)
                           A  2198    .LINE 256
                           A  2199    
0B0830 DD27F3              A  2200    	LD	HL,(IX+%FFFFFFF3)
0B0833 CD EB 18 0B         A  2201    	CALL	__case8D
0B0837 E9                  A  2202    	JP	(HL)
0B0838                     A  2203    L__65:
0B0838 0200                A  2204    	DW	2
0B083A 00                  A  2205    	DB	0
0B083B 45080B              A  2206    	DW24	L_65	
                           A  2207    
0B083E 01                  A  2208    	DB	1
0B083F 50080B              A  2209    	DW24	L_66	
                           A  2210    
0B0842 62080B              A  2211    	DW24	L_67	
                           A  2212    
                           A  2213    ;  257				{
                           A  2214    ;  258					case firmware:
0B0845                     A  2215    L_65:
                           A  2216    .LINE 258
                           A  2217    
                           A  2218    ;  259						// start address in
                           A  2219    ;  260						addressfrom = BUFFE
                           A  2220    .LINE 260
                           A  2221    
0B0845 01000005            A  2222    	LD	BC,327680
0B0849 DD0FF6              A  2223    	LD	(IX+%FFFFFFF6),BC
                           A  2224    ;  261						break;
                           A  2225    .LINE 261
                           A  2226    
0B084C C3 E2 08 0B         A  2227    	JR	L_73
                           A  2228    ;  262					case recover:
0B0850                     A  2229    L_66:
                           A  2230    .LINE 262
                           A  2231    
                           A  2232    ;  263						// start address in
                           A  2233    ;  264						addressfrom = BUFFE
                           A  2234    .LINE 264
                           A  2235    
0B0850 01000007            A  2236    	LD	BC,458752
0B0854 DD0FF6              A  2237    	LD	(IX+%FFFFFFF6),BC
                           A  2238    ;  265						size = FLASHSIZE;	
                           A  2239    .LINE 265
                           A  2240    
0B0857 01000002            A  2241    	LD	BC,131072
0B085B DD0FFA              A  2242    	LD	(IX+%FFFFFFFA),BC
                           A  2243    ;  266						break;
                           A  2244    .LINE 266
                           A  2245    
0B085E C3 E2 08 0B         A  2246    	JR	L_73
                           A  2247    ;  267					default:
0B0862                     A  2248    L_67:
                           A  2249    .LINE 267
                           A  2250    
                           A  2251    ;  268						// RESET SYSTEM
                           A  2252    ;  269						printf("\r\n");
                           A  2253    .LINE 269
                           A  2254    
0B0862 01 4C 12 0B         A  2255    	LD	BC,___print_uputch
0B0866 ED43 04 20 0B       A  2256    	LD	(___print_xputch),BC
0B086B 01 2D 23 0B         A  2257    	LD	BC,L__66
0B086F C5                  A  2258    	PUSH	BC
0B0870 CD DB 10 0B         A  2259    	CALL	___print_sendstring
0B0874 C1                  A  2260    	POP	BC
                           A  2261    ;  270						for(counter = 5; co
                           A  2262    .LINE 270
                           A  2263    
0B0875 01050000            A  2264    	LD	BC,5
0B0879 DD0FFD              A  2265    	LD	(IX+%FFFFFFFD),BC
0B087C 18 41               A  2266    	JR	L_71
0B087E                     A  2267    L_69:
                           A  2268    ;  271						{
                           A  2269    ;  272							printf("\rReset
                           A  2270    .LINE 272
                           A  2271    
0B087E 01 4C 12 0B         A  2272    	LD	BC,___print_uputch
0B0882 ED43 04 20 0B       A  2273    	LD	(___print_xputch),BC
0B0887 01 30 23 0B         A  2274    	LD	BC,L__67
0B088B C5                  A  2275    	PUSH	BC
0B088C CD DB 10 0B         A  2276    	CALL	___print_sendstring
0B0890 C1                  A  2277    	POP	BC
0B0891 DD07FD              A  2278    	LD	BC,(IX+%FFFFFFFD)
0B0894 AF                  A  2279    	XOR	A,A
0B0895 C5D1                A  2280    	LD	DE,BC
0B0897 4F                  A  2281    	LD	C,A
0B0898 0600                A  2282    	LD	B,%0
0B089A C5                  A  2283    	PUSH	BC
0B089B D5                  A  2284    	PUSH	DE
0B089C CD D2 12 0B         A  2285    	CALL	__u_itoa
0B08A0 C1                  A  2286    	POP	BC
0B08A1 C1                  A  2287    	POP	BC
0B08A2 01730000            A  2288    	LD	BC,115
0B08A6 C5                  A  2289    	PUSH	BC
0B08A7 CD 4C 12 0B         A  2290    	CALL	___print_uputch
0B08AB C1                  A  2291    	POP	BC
                           A  2292    ;  273							delayms(1000);
                           A  2293    .LINE 273
                           A  2294    
0B08AC 01E80300            A  2295    	LD	BC,1000
0B08B0 C5                  A  2296    	PUSH	BC
0B08B1 CD B3 0D 0B         A  2297    	CALL	_delayms
0B08B5 C1                  A  2298    	POP	BC
0B08B6 DD31FD              A  2299    	LD	IY,(IX+%FFFFFFFD)
0B08B9 ED33FF              A  2300    	LEA	IY,IY+%FFFFFFFF
0B08BC DD3EFD              A  2301    	LD	(IX+%FFFFFFFD),IY
                           A  2302    ;  274						}
0B08BF                     A  2303    L_71:
                           A  2304    .LINE 274
                           A  2305    
0B08BF DD07FD              A  2306    	LD	BC,(IX+%FFFFFFFD)
0B08C2 B7                  A  2307    	OR	A,A
0B08C3 ED62                A  2308    	SBC	HL,HL
0B08C5 B7                  A  2309    	OR	A,A
0B08C6 ED42                A  2310    	SBC	HL,BC
0B08C8 38 B4               A  2311    	JR	C,L_69
                           A  2312    ;  275						putch(12);
                           A  2313    .LINE 275
                           A  2314    
0B08CA 010C0000            A  2315    	LD	BC,12
0B08CE C5                  A  2316    	PUSH	BC
0B08CF CD E5 00 0B         A  2317    	CALL	_putch
0B08D3 C1                  A  2318    	POP	BC
                           A  2319    ;  276						delayms(500);
                           A  2320    .LINE 276
                           A  2321    
0B08D4 01F40100            A  2322    	LD	BC,500
0B08D8 C5                  A  2323    	PUSH	BC
0B08D9 CD B3 0D 0B         A  2324    	CALL	_delayms
0B08DD C1                  A  2325    	POP	BC
                           A  2326    ;  277						reset();
                           A  2327    .LINE 277
                           A  2328    
0B08DE CD 11 0D 0B         A  2329    	CALL	_reset
                           A  2330    ;  278				}
0B08E2                     A  2331    L_73:
                           A  2332    .LINE 278
                           A  2333    
                           A  2334    ;  279		
                           A  2335    ;  280				// Unprotect and erase flas
                           A  2336    ;  281				printf("\r\nErasing flash..
                           A  2337    .LINE 281
                           A  2338    
0B08E2 01 4C 12 0B         A  2339    	LD	BC,___print_uputch
0B08E6 ED43 04 20 0B       A  2340    	LD	(___print_xputch),BC
0B08EB 01 3B 23 0B         A  2341    	LD	BC,L__69
0B08EF C5                  A  2342    	PUSH	BC
0B08F0 CD DB 10 0B         A  2343    	CALL	___print_sendstring
0B08F4 C1                  A  2344    	POP	BC
                           A  2345    ;  282				enableFlashKeyRegister();	
                           A  2346    .LINE 282
                           A  2347    
0B08F5 CD E6 0C 0B         A  2348    	CALL	_enableFlashKeyRegister
                           A  2349    ;  283				FLASH_PROT = 0;				
                           A  2350    .LINE 283
                           A  2351    
0B08F9 AF                  A  2352    	XOR	A,A
0B08FA ED39FA              A  2353    	OUT0	(250),A
                           A  2354    ;  284				enableFlashKeyRegister();	
                           A  2355    .LINE 284
                           A  2356    
0B08FD CD E6 0C 0B         A  2357    	CALL	_enableFlashKeyRegister
                           A  2358    ;  285				FLASH_FDIV = 0x5F;			
                           A  2359    .LINE 285
                           A  2360    
0B0901 3E5F                A  2361    	LD	A,%5F
0B0903 ED39F9              A  2362    	OUT0	(249),A
                           A  2363    ;  286				
                           A  2364    ;  287				for(counter = 0; counter < 
                           A  2365    .LINE 287
                           A  2366    
0B0906 01000000            A  2367    	LD	BC,0
0B090A DD0FFD              A  2368    	LD	(IX+%FFFFFFFD),BC
0B090D 18 1C               A  2369    	JR	L_79
0B090F                     A  2370    L_77:
                           A  2371    ;  288				{
                           A  2372    ;  289					FLASH_PAGE = counter;
                           A  2373    .LINE 289
                           A  2374    
0B090F DD7EFD              A  2375    	LD	A,(IX+%FFFFFFFD)
0B0912 ED39FC              A  2376    	OUT0	(252),A
                           A  2377    ;  290					FLASH_PGCTL = 0x02;		
                           A  2378    .LINE 290
                           A  2379    
0B0915 3E02                A  2380    	LD	A,%2
0B0917 ED39FF              A  2381    	OUT0	(255),A
                           A  2382    ;  291	
                           A  2383    ;  292					do
0B091A                     A  2384    L_75:
                           A  2385    .LINE 292
                           A  2386    
                           A  2387    ;  293					{
                           A  2388    ;  294						value = FLASH_PGCTL
                           A  2389    .LINE 294
                           A  2390    
0B091A ED38FF              A  2391    	IN0	A,(255)
0B091D DD77E2              A  2392    	LD	(IX+%FFFFFFE2),A
                           A  2393    ;  295					}
                           A  2394    ;  296					while(value & 0x02);// 
                           A  2395    .LINE 296
                           A  2396    
0B0920 E602                A  2397    	AND	A,%2
0B0922 20 F6               A  2398    	JR	NZ,L_75
0B0924 DD07FD              A  2399    	LD	BC,(IX+%FFFFFFFD)
0B0927 03                  A  2400    	INC	BC
0B0928 DD0FFD              A  2401    	LD	(IX+%FFFFFFFD),BC
                           A  2402    ;  297				}
0B092B                     A  2403    L_79:
                           A  2404    .LINE 297
                           A  2405    
0B092B 01800000            A  2406    	LD	BC,128
0B092F DD27FD              A  2407    	LD	HL,(IX+%FFFFFFFD)
0B0932 B7                  A  2408    	OR	A,A
0B0933 ED42                A  2409    	SBC	HL,BC
0B0935 38 D8               A  2410    	JR	C,L_77
                           A  2411    ;  298				
                           A  2412    ;  299				printf("\r\nWriting new fir
                           A  2413    .LINE 299
                           A  2414    
0B0937 01 4C 12 0B         A  2415    	LD	BC,___print_uputch
0B093B ED43 04 20 0B       A  2416    	LD	(___print_xputch),BC
0B0940 01 4F 23 0B         A  2417    	LD	BC,L__72
0B0944 C5                  A  2418    	PUSH	BC
0B0945 CD DB 10 0B         A  2419    	CALL	___print_sendstring
0B0949 C1                  A  2420    	POP	BC
                           A  2421    ;  300				
                           A  2422    ;  301				// determine number of page
                           A  2423    ;  302				pagemax = size/PAGESIZE;
                           A  2424    .LINE 302
                           A  2425    
0B094A DD27FA              A  2426    	LD	HL,(IX+%FFFFFFFA)
0B094D 3E0A                A  2427    	LD	A,%A
0B094F CD BF 18 0B         A  2428    	CALL	__ishru_b
0B0953 DD2FF0              A  2429    	LD	(IX+%FFFFFFF0),HL
                           A  2430    ;  303				if(size%PAGESIZE) // last p
                           A  2431    .LINE 303
                           A  2432    
0B0956 01FF0300            A  2433    	LD	BC,1023
0B095A DD27FA              A  2434    	LD	HL,(IX+%FFFFFFFA)
0B095D CD 51 19 0B         A  2435    	CALL	__iand
0B0961 DD2FD7              A  2436    	LD	(IX+%FFFFFFD7),HL
0B0964 CD 09 16 0B         A  2437    	CALL	__icmpzero
0B0968 28 0F               A  2438    	JR	Z,L_82
                           A  2439    ;  304				{
                           A  2440    ;  305					pagemax += 1;
                           A  2441    .LINE 305
                           A  2442    
0B096A DD07F0              A  2443    	LD	BC,(IX+%FFFFFFF0)
0B096D 03                  A  2444    	INC	BC
0B096E DD0FF0              A  2445    	LD	(IX+%FFFFFFF0),BC
                           A  2446    ;  306					lastpagebytes = size%PA
                           A  2447    .LINE 306
                           A  2448    
0B0971 DD07D7              A  2449    	LD	BC,(IX+%FFFFFFD7)
0B0974 DD0FDE              A  2450    	LD	(IX+%FFFFFFDE),BC
                           A  2451    ;  307				}
                           A  2452    ;  308				else lastpagebytes = PAGESI
                           A  2453    .LINE 308
                           A  2454    
0B0977 18 07               A  2455    	JR	L_90
0B0979                     A  2456    L_82:
0B0979 01000400            A  2457    	LD	BC,1024
0B097D DD0FDE              A  2458    	LD	(IX+%FFFFFFDE),BC
0B0980                     A  2459    L_90:
                           A  2460    ;  309				
                           A  2461    ;  310				// write out each page to f
                           A  2462    ;  311				for(counter = 0; counter < 
                           A  2463    .LINE 311
                           A  2464    
0B0980 01000000            A  2465    	LD	BC,0
0B0984 DD0FFD              A  2466    	LD	(IX+%FFFFFFFD),BC
0B0987 C3 33 0A 0B         A  2467    	JR	L_89
0B098B                     A  2468    L_87:
                           A  2469    ;  312				{
                           A  2470    ;  313					printf("\rWriting flash
                           A  2471    .LINE 313
                           A  2472    
0B098B 01 4C 12 0B         A  2473    	LD	BC,___print_uputch
0B098F ED43 04 20 0B       A  2474    	LD	(___print_xputch),BC
0B0994 01 6B 23 0B         A  2475    	LD	BC,L__74
0B0998 C5                  A  2476    	PUSH	BC
0B0999 CD DB 10 0B         A  2477    	CALL	___print_sendstring
0B099D C1                  A  2478    	POP	BC
0B099E 3E03                A  2479    	LD	A,%3
0B09A0 32 5E 24 0B         A  2480    	LD	(___print_fmt+5),A
0B09A4 3E40                A  2481    	LD	A,%40
0B09A6 32 5A 24 0B         A  2482    	LD	(___print_fmt+1),A
0B09AA DD07FD              A  2483    	LD	BC,(IX+%FFFFFFFD)
0B09AD 03                  A  2484    	INC	BC
0B09AE AF                  A  2485    	XOR	A,A
0B09AF C5D1                A  2486    	LD	DE,BC
0B09B1 4F                  A  2487    	LD	C,A
0B09B2 0600                A  2488    	LD	B,%0
0B09B4 C5                  A  2489    	PUSH	BC
0B09B5 D5                  A  2490    	PUSH	DE
0B09B6 CD D2 12 0B         A  2491    	CALL	__u_itoa
0B09BA C1                  A  2492    	POP	BC
0B09BB C1                  A  2493    	POP	BC
0B09BC 012F0000            A  2494    	LD	BC,47
0B09C0 C5                  A  2495    	PUSH	BC
0B09C1 CD 4C 12 0B         A  2496    	CALL	___print_uputch
0B09C5 C1                  A  2497    	POP	BC
0B09C6 3E03                A  2498    	LD	A,%3
0B09C8 32 5E 24 0B         A  2499    	LD	(___print_fmt+5),A
0B09CC 3E40                A  2500    	LD	A,%40
0B09CE 32 5A 24 0B         A  2501    	LD	(___print_fmt+1),A
0B09D2 DD07F0              A  2502    	LD	BC,(IX+%FFFFFFF0)
0B09D5 AF                  A  2503    	XOR	A,A
0B09D6 C5D1                A  2504    	LD	DE,BC
0B09D8 4F                  A  2505    	LD	C,A
0B09D9 0600                A  2506    	LD	B,%0
0B09DB C5                  A  2507    	PUSH	BC
0B09DC D5                  A  2508    	PUSH	DE
0B09DD CD D2 12 0B         A  2509    	CALL	__u_itoa
0B09E1 C1                  A  2510    	POP	BC
0B09E2 C1                  A  2511    	POP	BC
                           A  2512    ;  314					
                           A  2513    ;  315					if(counter == (pagemax 
                           A  2514    .LINE 315
                           A  2515    
0B09E3 DD31F0              A  2516    	LD	IY,(IX+%FFFFFFF0)
0B09E6 ED23FF              A  2517    	LEA	HL,IY+%FFFFFFFF
0B09E9 DD07FD              A  2518    	LD	BC,(IX+%FFFFFFFD)
0B09EC B7                  A  2519    	OR	A,A
0B09ED ED42                A  2520    	SBC	HL,BC
0B09EF 20 15               A  2521    	JR	NZ,L_85
                           A  2522    ;  316						fastmemcpy(addresst
                           A  2523    .LINE 316
                           A  2524    
0B09F1 DD07DE              A  2525    	LD	BC,(IX+%FFFFFFDE)
0B09F4 C5                  A  2526    	PUSH	BC
0B09F5 DD07F6              A  2527    	LD	BC,(IX+%FFFFFFF6)
0B09F8 C5                  A  2528    	PUSH	BC
0B09F9 DD07EA              A  2529    	LD	BC,(IX+%FFFFFFEA)
0B09FC C5                  A  2530    	PUSH	BC
0B09FD CD 13 0D 0B         A  2531    	CALL	_fastmemcpy
0B0A01 C1                  A  2532    	POP	BC
0B0A02 C1                  A  2533    	POP	BC
0B0A03 C1                  A  2534    	POP	BC
                           A  2535    ;  317						//printf("Fake copy
                           A  2536    ;  318					else 
                           A  2537    .LINE 318
                           A  2538    
0B0A04 18 14               A  2539    	JR	L_86
0B0A06                     A  2540    L_85:
                           A  2541    ;  319						fastmemcpy(addresst
                           A  2542    .LINE 319
                           A  2543    
0B0A06 01000400            A  2544    	LD	BC,1024
0B0A0A C5                  A  2545    	PUSH	BC
0B0A0B DD07F6              A  2546    	LD	BC,(IX+%FFFFFFF6)
0B0A0E C5                  A  2547    	PUSH	BC
0B0A0F DD07EA              A  2548    	LD	BC,(IX+%FFFFFFEA)
0B0A12 C5                  A  2549    	PUSH	BC
0B0A13 CD 13 0D 0B         A  2550    	CALL	_fastmemcpy
0B0A17 C1                  A  2551    	POP	BC
0B0A18 C1                  A  2552    	POP	BC
0B0A19 C1                  A  2553    	POP	BC
0B0A1A                     A  2554    L_86:
                           A  2555    ;  320						//printf("Fake copy
                           A  2556    ;  321				
                           A  2557    ;  322					addressto += PAGESIZE;
                           A  2558    .LINE 322
                           A  2559    
0B0A1A 01000400            A  2560    	LD	BC,1024
0B0A1E DD27EA              A  2561    	LD	HL,(IX+%FFFFFFEA)
0B0A21 09                  A  2562    	ADD	HL,BC
0B0A22 DD2FEA              A  2563    	LD	(IX+%FFFFFFEA),HL
                           A  2564    ;  323					addressfrom += PAGESIZE
                           A  2565    .LINE 323
                           A  2566    
0B0A25 DD27F6              A  2567    	LD	HL,(IX+%FFFFFFF6)
0B0A28 09                  A  2568    	ADD	HL,BC
0B0A29 DD2FF6              A  2569    	LD	(IX+%FFFFFFF6),HL
0B0A2C DD07FD              A  2570    	LD	BC,(IX+%FFFFFFFD)
0B0A2F 03                  A  2571    	INC	BC
0B0A30 DD0FFD              A  2572    	LD	(IX+%FFFFFFFD),BC
                           A  2573    ;  324				}
0B0A33                     A  2574    L_89:
                           A  2575    .LINE 324
                           A  2576    
0B0A33 DD07F0              A  2577    	LD	BC,(IX+%FFFFFFF0)
0B0A36 DD27FD              A  2578    	LD	HL,(IX+%FFFFFFFD)
0B0A39 B7                  A  2579    	OR	A,A
0B0A3A ED42                A  2580    	SBC	HL,BC
0B0A3C DA 8B 09 0B         A  2581    	JR	C,L_87
                           A  2582    ;  325				lockFlashKeyRegister();	// 
                           A  2583    .LINE 325
                           A  2584    
0B0A40 CD FE 0C 0B         A  2585    	CALL	_lockFlashKeyRegister
                           A  2586    ;  326				printf("\r\n");
                           A  2587    .LINE 326
                           A  2588    
0B0A44 01 4C 12 0B         A  2589    	LD	BC,___print_uputch
0B0A48 ED43 04 20 0B       A  2590    	LD	(___print_xputch),BC
0B0A4D 01 80 23 0B         A  2591    	LD	BC,L__77
0B0A51 C5                  A  2592    	PUSH	BC
0B0A52 CD DB 10 0B         A  2593    	CALL	___print_sendstring
0B0A56 C1                  A  2594    	POP	BC
                           A  2595    ;  327				
                           A  2596    ;  328				//Verify correct CRC in fla
                           A  2597    ;  329				printf("Verifying flash che
                           A  2598    .LINE 329
                           A  2599    
0B0A57 01 4C 12 0B         A  2600    	LD	BC,___print_uputch
0B0A5B ED43 04 20 0B       A  2601    	LD	(___print_xputch),BC
0B0A60 01 83 23 0B         A  2602    	LD	BC,L__78
0B0A64 C5                  A  2603    	PUSH	BC
0B0A65 CD DB 10 0B         A  2604    	CALL	___print_sendstring
0B0A69 C1                  A  2605    	POP	BC
                           A  2606    ;  330				crcresult = crc32((char*)FL
                           A  2607    .LINE 330
                           A  2608    
0B0A6A DD07FA              A  2609    	LD	BC,(IX+%FFFFFFFA)
0B0A6D C5                  A  2610    	PUSH	BC
0B0A6E 01000000            A  2611    	LD	BC,0
0B0A72 C5                  A  2612    	PUSH	BC
0B0A73 CD EB 0F 0B         A  2613    	CALL	_crc32
0B0A77 C1                  A  2614    	POP	BC
0B0A78 C1                  A  2615    	POP	BC
0B0A79 DD2FE6              A  2616    	LD	(IX+%FFFFFFE6),HL
0B0A7C DD73E9              A  2617    	LD	(IX+%FFFFFFE9),E
                           A  2618    ;  331	
                           A  2619    ;  332				if(state == recover) crcexp
                           A  2620    .LINE 332
                           A  2621    
0B0A7F 01010000            A  2622    	LD	BC,1
0B0A83 DD27F3              A  2623    	LD	HL,(IX+%FFFFFFF3)
0B0A86 B7                  A  2624    	OR	A,A
0B0A87 ED42                A  2625    	SBC	HL,BC
0B0A89 20 0C               A  2626    	JR	NZ,L_101
0B0A8B DD07D3              A  2627    	LD	BC,(IX+%FFFFFFD3)
0B0A8E DD7ED6              A  2628    	LD	A,(IX+%FFFFFFD6)
0B0A91 DD0FDA              A  2629    	LD	(IX+%FFFFFFDA),BC
0B0A94 DD77DD              A  2630    	LD	(IX+%FFFFFFDD),A
0B0A97                     A  2631    L_101:
                           A  2632    ;  333				
                           A  2633    ;  334				if(crcresult == crcexpected
                           A  2634    .LINE 334
                           A  2635    
0B0A97 DD27E6              A  2636    	LD	HL,(IX+%FFFFFFE6)
0B0A9A DD5EE9              A  2637    	LD	E,(IX+%FFFFFFE9)
0B0A9D DD07DA              A  2638    	LD	BC,(IX+%FFFFFFDA)
0B0AA0 DD7EDD              A  2639    	LD	A,(IX+%FFFFFFDD)
0B0AA3 CD 2E 19 0B         A  2640    	CALL	__lcmpu
0B0AA7 20 1E               A  2641    	JR	NZ,L_100
                           A  2642    ;  335				{
                           A  2643    ;  336					printf("- OK\r\n");
                           A  2644    .LINE 336
                           A  2645    
0B0AA9 01 4C 12 0B         A  2646    	LD	BC,___print_uputch
0B0AAD ED43 04 20 0B       A  2647    	LD	(___print_xputch),BC
0B0AB2 01 A0 23 0B         A  2648    	LD	BC,L__81
0B0AB6 C5                  A  2649    	PUSH	BC
0B0AB7 CD DB 10 0B         A  2650    	CALL	___print_sendstring
0B0ABB C1                  A  2651    	POP	BC
                           A  2652    ;  337					state = systemreset;
                           A  2653    .LINE 337
                           A  2654    
0B0ABC 01020000            A  2655    	LD	BC,2
0B0AC0 DD0FF3              A  2656    	LD	(IX+%FFFFFFF3),BC
                           A  2657    ;  338				}
                           A  2658    ;  339				else // CRC Failure - next 
                           A  2659    .LINE 339
                           A  2660    
0B0AC3 C3 30 08 0B         A  2661    	JR	L_103
0B0AC7                     A  2662    L_100:
                           A  2663    ;  340				{	 // User interaction no
                           A  2664    ;  341					switch(state)
                           A  2665    .LINE 341
                           A  2666    
0B0AC7 DD27F3              A  2667    	LD	HL,(IX+%FFFFFFF3)
0B0ACA CD EB 18 0B         A  2668    	CALL	__case8D
0B0ACE E9                  A  2669    	JP	(HL)
0B0ACF                     A  2670    L__82:
0B0ACF 0200                A  2671    	DW	2
0B0AD1 00                  A  2672    	DB	0
0B0AD2 DC0A0B              A  2673    	DW24	L_93	
                           A  2674    
0B0AD5 01                  A  2675    	DB	1
0B0AD6 FA0A0B              A  2676    	DW24	L_94	
                           A  2677    
0B0AD9 0F0B0B              A  2678    	DW24	L_97	
                           A  2679    
                           A  2680    ;  342					{
                           A  2681    ;  343						case firmware:
0B0ADC                     A  2682    L_93:
                           A  2683    .LINE 343
                           A  2684    
                           A  2685    ;  344							printf("\r\nErr
                           A  2686    .LINE 344
                           A  2687    
0B0ADC 01 4C 12 0B         A  2688    	LD	BC,___print_uputch
0B0AE0 ED43 04 20 0B       A  2689    	LD	(___print_xputch),BC
0B0AE5 01 A7 23 0B         A  2690    	LD	BC,L__83
0B0AE9 C5                  A  2691    	PUSH	BC
0B0AEA CD DB 10 0B         A  2692    	CALL	___print_sendstring
0B0AEE C1                  A  2693    	POP	BC
                           A  2694    ;  345							state = recover
                           A  2695    .LINE 345
                           A  2696    
0B0AEF 01010000            A  2697    	LD	BC,1
0B0AF3 DD0FF3              A  2698    	LD	(IX+%FFFFFFF3),BC
                           A  2699    ;  346							break;
                           A  2700    .LINE 346
                           A  2701    
0B0AF6 C3 30 08 0B         A  2702    	JR	L_103
                           A  2703    ;  347						case recover:
0B0AFA                     A  2704    L_94:
                           A  2705    .LINE 347
                           A  2706    
                           A  2707    ;  348							printf("\r\nErr
                           A  2708    .LINE 348
                           A  2709    
0B0AFA 01 4C 12 0B         A  2710    	LD	BC,___print_uputch
0B0AFE ED43 04 20 0B       A  2711    	LD	(___print_xputch),BC
0B0B03 01 F4 23 0B         A  2712    	LD	BC,L__84
0B0B07 C5                  A  2713    	PUSH	BC
0B0B08 CD DB 10 0B         A  2714    	CALL	___print_sendstring
0B0B0C C1                  A  2715    	POP	BC
                           A  2716    ;  349							while(1); // no
0B0B0D                     A  2717    L_96:
                           A  2718    .LINE 349
                           A  2719    
0B0B0D 18 FE               A  2720    	JR	L_96
                           A  2721    ;  350						default:
0B0B0F                     A  2722    L_97:
                           A  2723    .LINE 350
                           A  2724    
                           A  2725    ;  351							state = recover
                           A  2726    .LINE 351
                           A  2727    
0B0B0F 01010000            A  2728    	LD	BC,1
0B0B13 DD0FF3              A  2729    	LD	(IX+%FFFFFFF3),BC
0B0B16 C3 30 08 0B         A  2730    	JR	L_103
                           A  2731    ;  352					}
                           A  2732    ;  353				}
                           A  2733    ;  354			}		
                           A  2734    ;  355		}
                           A  2735    ;  356		else printf("\n\rUser abort\n\r");
0B0B1A                     A  2736    L_105:
                           A  2737    .LINE 356
                           A  2738    
0B0B1A 01 4C 12 0B         A  2739    	LD	BC,___print_uputch
0B0B1E ED43 04 20 0B       A  2740    	LD	(___print_xputch),BC
0B0B23 01 31 24 0B         A  2741    	LD	BC,L__85
0B0B27 C5                  A  2742    	PUSH	BC
0B0B28 CD DB 10 0B         A  2743    	CALL	___print_sendstring
0B0B2C C1                  A  2744    	POP	BC
                           A  2745    ;  357		
                           A  2746    ;  358		return 0;
                           A  2747    .LINE 358
                           A  2748    
0B0B2D AF                  A  2749    	XOR	A,A
                           A  2750    ;  359	}
0B0B2E                     A  2751    L_108:
                           A  2752    .LINE 359
                           A  2753    
0B0B2E DDF9                A  2754    	LD	SP,IX
0B0B30 DDE1                A  2755    	POP	IX
0B0B32 C9                  A  2756    	RET	
                           A  2757    
                           A  2758    
                           A  2759    ;**************************** _update_mos *****
                           A  2760    ;Name                         Addr/Register   S
                           A  2761    ;_lockFlashKeyRegister               IMPORT  --
                           A  2762    ;_enableFlashKeyRegister             IMPORT  --
                           A  2763    ;_reset                              IMPORT  --
                           A  2764    ;_putch                              IMPORT  --
                           A  2765    ;_delayms                            IMPORT  --
                           A  2766    ;_fastmemcpy                         IMPORT  --
                           A  2767    ;_getch                              IMPORT  --
                           A  2768    ;_crc32                              IMPORT  --
                           A  2769    ;__u_ultoa                           IMPORT  --
                           A  2770    ;___print_fmt                        IMPORT    
                           A  2771    ;_mos_fclose                         IMPORT  --
                           A  2772    ;_mos_fread                          IMPORT  --
                           A  2773    ;__u_itoa                            IMPORT  --
                           A  2774    ;___print_sendstring                 IMPORT  --
                           A  2775    ;___print_xputch                     IMPORT    
                           A  2776    ;___print_uputch                     IMPORT  --
                           A  2777    ;crcbackup                            IX-45    
                           A  2778    ;G_0                                  IX-41    
                           A  2779    ;crcexpected                          IX-38    
                           A  2780    ;lastpagebytes                        IX-34    
                           A  2781    ;file                                 IX-31    
                           A  2782    ;value                                IX-30    
                           A  2783    ;got                                  IX-29    
                           A  2784    ;crcresult                            IX-26    
                           A  2785    ;addressto                            IX-22    
                           A  2786    ;ptr                                  IX-19    
                           A  2787    ;pagemax                              IX-16    
                           A  2788    ;state                                IX-13    
                           A  2789    ;addressfrom                          IX-10    
                           A  2790    ;response                              IX-7    
                           A  2791    ;size                                  IX-6    
                           A  2792    ;counter                               IX-3    
                           A  2793    ;filename                              IX+6    
                           A  2794    
                           A  2795    
                           A  2796    ; Stack Frame Size: 54 (bytes)
                           A  2797    ;       Spill Code: 0 (instruction)
                           A  2798    
                           A  2799    
                           A  2800    .ENDFUNC "update_mos",359,"_update_mos"
                           A  2801    	SEGMENT STRSECT
0B21E3                     A  2802    L__43:
0B21E3 41676F6E 204D4F53   A  2803    	DB	"Agon MOS firmware upgrade utility v1.4
0B21EB 20666972 6D776172 
0B21F3 65207570 67726164 
0B21FB 65207574 696C6974 
0B2203 79207631 2E34 
0B2209 0A0D0A0D 00         A  2804    	DB	10,13,10,13,0
0B220E                     A  2805    L__44:
0B220E 0D                  A  2806    	DB	13
0B220F 46696C65 2073697A   A  2807    	DB	"File size    : "
0B2217 65202020 203A20 
0B221E 00                  A  2808    	DB	0
0B221F                     A  2809    L__45:
0B221F 20627974 65287329   A  2810    	DB	" byte(s)"
0B2227 00                  A  2811    	DB	0
0B2228                     A  2812    L__47:
0B2228 0D                  A  2813    	DB	13
0B2229 46696C65 2073697A   A  2814    	DB	"File size    : "
0B2231 65202020 203A20 
0B2238 00                  A  2815    	DB	0
0B2239                     A  2816    L__48:
0B2239 20627974 65287329   A  2817    	DB	" byte(s)"
0B2241 0A0D00              A  2818    	DB	10,13,0
0B2244                     A  2819    L__50:
0B2244 546F6F20 6C617267   A  2820    	DB	"Too large for 128KB flash - aborting"
0B224C 6520666F 72203132 
0B2254 384B4220 666C6173 
0B225C 68202D20 61626F72 
0B2264 74696E67 
0B2268 0D0A00              A  2821    	DB	13,10,0
0B226B                     A  2822    L__52:
0B226B 46696C65 20646F65   A  2823    	DB	"File does not contain valid MOS ez80 s
0B2273 73206E6F 7420636F 
0B227B 6E746169 6E207661 
0B2283 6C696420 4D4F5320 
0B228B 657A3830 20737461 
0B2293 72747570 20636F64 
0B229B 65 
0B229C 0D0A00              A  2824    	DB	13,10,0
0B229F                     A  2825    L__53:
0B229F 54657374 696E6720   A  2826    	DB	"Testing CRC32: 0x"
0B22A7 43524333 323A2030 
0B22AF 78 
0B22B0 00                  A  2827    	DB	0
0B22B1                     A  2828    L__54:
0B22B1 0A0D00              A  2829    	DB	10,13,0
0B22B4                     A  2830    L__55:
0B22B4 43524333 32207265   A  2831    	DB	"CRC32 result : 0x"
0B22BC 73756C74 203A2030 
0B22C4 78 
0B22C5 00                  A  2832    	DB	0
0B22C6                     A  2833    L__56:
0B22C6 0A0D00              A  2834    	DB	10,13,0
0B22C9                     A  2835    L__58:
0B22C9 0A0D                A  2836    	DB	10,13
0B22CB 4D69736D 61746368   A  2837    	DB	"Mismatch - aborting"
0B22D3 202D2061 626F7274 
0B22DB 696E67 
0B22DE 0A0D00              A  2838    	DB	10,13,0
0B22E1                     A  2839    L__59:
0B22E1 0A0D                A  2840    	DB	10,13
0B22E3 4F4B                A  2841    	DB	"OK"
0B22E5 0A0D0A0D 00         A  2842    	DB	10,13,10,13,0
0B22EA                     A  2843    L__60:
0B22EA 45726173 6520616E   A  2844    	DB	"Erase and program flash (y/n)? "
0B22F2 64207072 6F677261 
0B22FA 6D20666C 61736820 
0B2302 28792F6E 293F20 
0B2309 00                  A  2845    	DB	0
0B230A                     A  2846    L__64:
0B230A 0D0A                A  2847    	DB	13,10
0B230C 4261636B 696E6720   A  2848    	DB	"Backing up existing firmware... "
0B2314 75702065 78697374 
0B231C 696E6720 6669726D 
0B2324 77617265 2E2E2E20 
0B232C 00                  A  2849    	DB	0
0B232D                     A  2850    L__66:
0B232D 0D0A00              A  2851    	DB	13,10,0
0B2330                     A  2852    L__67:
0B2330 0D                  A  2853    	DB	13
0B2331 52657365 7420696E   A  2854    	DB	"Reset in "
0B2339 20 
0B233A 00                  A  2855    	DB	0
0B233B                     A  2856    L__69:
0B233B 0D0A                A  2857    	DB	13,10
0B233D 45726173 696E6720   A  2858    	DB	"Erasing flash... "
0B2345 666C6173 682E2E2E 
0B234D 20 
0B234E 00                  A  2859    	DB	0
0B234F                     A  2860    L__72:
0B234F 0D0A                A  2861    	DB	13,10
0B2351 57726974 696E6720   A  2862    	DB	"Writing new firmware..."
0B2359 6E657720 6669726D 
0B2361 77617265 2E2E2E 
0B2368 0D0A00              A  2863    	DB	13,10,0
0B236B                     A  2864    L__74:
0B236B 0D                  A  2865    	DB	13
0B236C 57726974 696E6720   A  2866    	DB	"Writing flash page "
0B2374 666C6173 68207061 
0B237C 676520 
0B237F 00                  A  2867    	DB	0
0B2380                     A  2868    L__77:
0B2380 0D0A00              A  2869    	DB	13,10,0
0B2383                     A  2870    L__78:
0B2383 56657269 6679696E   A  2871    	DB	"Verifying flash checksum... "
0B238B 6720666C 61736820 
0B2393 63686563 6B73756D 
0B239B 2E2E2E20 
0B239F 00                  A  2872    	DB	0
0B23A0                     A  2873    L__81:
0B23A0 2D204F4B            A  2874    	DB	"- OK"
0B23A4 0D0A00              A  2875    	DB	13,10,0
0B23A7                     A  2876    L__83:
0B23A7 0D0A                A  2877    	DB	13,10
0B23A9 4572726F 72206F63   A  2878    	DB	"Error occured during flash write"
0B23B1 63757265 64206475 
0B23B9 72696E67 20666C61 
0B23C1 73682077 72697465 
0B23C9 0D0A                A  2879    	DB	13,10
0B23CB 41747465 6D707469   A  2880    	DB	"Attempting to flash backup firmware...
0B23D3 6E672074 6F20666C 
0B23DB 61736820 6261636B 
0B23E3 75702066 69726D77 
0B23EB 6172652E 2E2E 
0B23F1 0D0A00              A  2881    	DB	13,10,0
0B23F4                     A  2882    L__84:
0B23F4 0D0A                A  2883    	DB	13,10
0B23F6 4572726F 72206F63   A  2884    	DB	"Error occured during flash write"
0B23FE 63757265 64206475 
0B2406 72696E67 20666C61 
0B240E 73682077 72697465 
0B2416 0D0A                A  2885    	DB	13,10
0B2418 4261636B 75702072   A  2886    	DB	"Backup recovery failed"
0B2420 65636F76 65727920 
0B2428 6661696C 6564 
0B242E 0D0A00              A  2887    	DB	13,10,0
0B2431                     A  2888    L__85:
0B2431 0A0D                A  2889    	DB	10,13
0B2433 55736572 2061626F   A  2890    	DB	"User abort"
0B243B 7274 
0B243D 0A0D00              A  2891    	DB	10,13,0
                           A  2892    	SEGMENT CODE
                           A  2893    ;  360	
                           A  2894    ;  361	int main(int argc, char * argv[]) {
0B0B33                     A  2895    _main:
                           A  2896    .DEFINE "_main"
                           A  2897    
                           A  2898    .VALUE _main
                           A  2899    
                           A  2900    .CLASS 2
                           A  2901    
                           A  2902    .TYPE 68
                           A  2903    
                           A  2904    .ENDEF
                           A  2905    
                           A  2906    .BEGFUNC "main",361,"_main"
                           A  2907    
                           A  2908    .LINE 361
                           A  2909    
                           A  2910    .DEFINE "argc"
                           A  2911    
                           A  2912    .CLASS 65
                           A  2913    
                           A  2914    .VALUE 6
                           A  2915    
                           A  2916    .TYPE 4
                           A  2917    
                           A  2918    .ENDEF
                           A  2919    
                           A  2920    .DEFINE "argv"
                           A  2921    
                           A  2922    .CLASS 65
                           A  2923    
                           A  2924    .VALUE 9
                           A  2925    
                           A  2926    .TYPE 290
                           A  2927    
                           A  2928    .ENDEF
                           A  2929    
0B0B33 DDE5                A  2930    	PUSH	IX
0B0B35 DD210000 00         A  2931    	LD	IX,0
0B0B3A DD39                A  2932    	ADD	IX,SP
                           A  2933    ;  362	
                           A  2934    ;  363		if(argc != 3) {
                           A  2935    .LINE 363
                           A  2936    
0B0B3C 01030000            A  2937    	LD	BC,3
0B0B40 DD2706              A  2938    	LD	HL,(IX+%6)
0B0B43 B7                  A  2939    	OR	A,A
0B0B44 ED42                A  2940    	SBC	HL,BC
0B0B46 28 09               A  2941    	JR	Z,L_114
                           A  2942    ;  364			usage();
                           A  2943    .LINE 364
                           A  2944    
0B0B48 CD 06 03 0B         A  2945    	CALL	_usage
                           A  2946    ;  365			return 0;
                           A  2947    .LINE 365
                           A  2948    
0B0B4C B7                  A  2949    	OR	A,A
0B0B4D ED62                A  2950    	SBC	HL,HL
0B0B4F 18 6B               A  2951    	JR	L_115
                           A  2952    ;  366		}
0B0B51                     A  2953    L_114:
                           A  2954    .LINE 366
                           A  2955    
                           A  2956    ;  367	
                           A  2957    ;  368		if(memcmp(argv[1], "mos", 3) == 0) 
                           A  2958    .LINE 368
                           A  2959    
0B0B51 C5                  A  2960    	PUSH	BC
0B0B52 01 40 24 0B         A  2961    	LD	BC,L__88
0B0B56 C5                  A  2962    	PUSH	BC
0B0B57 DD3109              A  2963    	LD	IY,(IX+%9)
0B0B5A ED2303              A  2964    	LEA	HL,IY+%3
0B0B5D ED07                A  2965    	LD	BC,(HL)
0B0B5F C5                  A  2966    	PUSH	BC
0B0B60 CD DF 15 0B         A  2967    	CALL	_memcmp
0B0B64 C1                  A  2968    	POP	BC
0B0B65 C1                  A  2969    	POP	BC
0B0B66 C1                  A  2970    	POP	BC
0B0B67 CD 09 16 0B         A  2971    	CALL	__icmpzero
0B0B6B 20 14               A  2972    	JR	NZ,L_113
                           A  2973    ;  369			return update_mos(argv[2]);
                           A  2974    .LINE 369
                           A  2975    
0B0B6D DD3109              A  2976    	LD	IY,(IX+%9)
0B0B70 ED2306              A  2977    	LEA	HL,IY+%6
0B0B73 ED07                A  2978    	LD	BC,(HL)
0B0B75 C5                  A  2979    	PUSH	BC
0B0B76 CD B3 05 0B         A  2980    	CALL	_update_mos
0B0B7A C1                  A  2981    	POP	BC
0B0B7B B7ED62              A  2982    	UEXT	HL
0B0B7E 6F                  A  2983    	LD	L,A
0B0B7F 18 3B               A  2984    	JR	L_115
                           A  2985    ;  370		}
                           A  2986    ;  371		else {
0B0B81                     A  2987    L_113:
                           A  2988    .LINE 371
                           A  2989    
                           A  2990    ;  372			if(memcmp(argv[1], "vdp", 3) ==
                           A  2991    .LINE 372
                           A  2992    
0B0B81 01030000            A  2993    	LD	BC,3
0B0B85 C5                  A  2994    	PUSH	BC
0B0B86 01 44 24 0B         A  2995    	LD	BC,L__90
0B0B8A C5                  A  2996    	PUSH	BC
0B0B8B DD3109              A  2997    	LD	IY,(IX+%9)
0B0B8E ED2303              A  2998    	LEA	HL,IY+%3
0B0B91 ED07                A  2999    	LD	BC,(HL)
0B0B93 C5                  A  3000    	PUSH	BC
0B0B94 CD DF 15 0B         A  3001    	CALL	_memcmp
0B0B98 C1                  A  3002    	POP	BC
0B0B99 C1                  A  3003    	POP	BC
0B0B9A C1                  A  3004    	POP	BC
0B0B9B CD 09 16 0B         A  3005    	CALL	__icmpzero
0B0B9F 20 14               A  3006    	JR	NZ,L_111
                           A  3007    ;  373				return update_vdp(argv[2]);
                           A  3008    .LINE 373
                           A  3009    
0B0BA1 DD3109              A  3010    	LD	IY,(IX+%9)
0B0BA4 ED2306              A  3011    	LEA	HL,IY+%6
0B0BA7 ED07                A  3012    	LD	BC,(HL)
0B0BA9 C5                  A  3013    	PUSH	BC
0B0BAA CD 09 04 0B         A  3014    	CALL	_update_vdp
0B0BAE C1                  A  3015    	POP	BC
0B0BAF B7ED62              A  3016    	UEXT	HL
0B0BB2 6F                  A  3017    	LD	L,A
0B0BB3 18 07               A  3018    	JR	L_115
                           A  3019    ;  374			}
                           A  3020    ;  375			else {
0B0BB5                     A  3021    L_111:
                           A  3022    .LINE 375
                           A  3023    
                           A  3024    ;  376				usage();
                           A  3025    .LINE 376
                           A  3026    
0B0BB5 CD 06 03 0B         A  3027    	CALL	_usage
                           A  3028    ;  377				return 0;
                           A  3029    .LINE 377
                           A  3030    
0B0BB9 B7                  A  3031    	OR	A,A
0B0BBA ED62                A  3032    	SBC	HL,HL
                           A  3033    ;  378			}
                           A  3034    ;  379		}
                           A  3035    ;  380	}
0B0BBC                     A  3036    L_115:
                           A  3037    .LINE 380
                           A  3038    
0B0BBC DDF9                A  3039    	LD	SP,IX
0B0BBE DDE1                A  3040    	POP	IX
0B0BC0 C9                  A  3041    	RET	
                           A  3042    
                           A  3043    
                           A  3044    ;**************************** _main ***********
                           A  3045    ;Name                         Addr/Register   S
                           A  3046    ;_memcmp                             IMPORT  --
                           A  3047    ;argv                                  IX+9    
                           A  3048    ;argc                                  IX+6    
                           A  3049    
                           A  3050    
                           A  3051    ; Stack Frame Size: 12 (bytes)
                           A  3052    ;       Spill Code: 0 (instruction)
                           A  3053    
                           A  3054    
                           A  3055    .ENDFUNC "main",380,"_main"
                           A  3056    	SEGMENT STRSECT
0B2440                     A  3057    L__88:
0B2440 6D6F73              A  3058    	DB	"mos"
0B2443 00                  A  3059    	DB	0
0B2444                     A  3060    L__90:
0B2444 766470              A  3061    	DB	"vdp"
0B2447 00                  A  3062    	DB	0
                           A  3063    	XREF _memcmp:ROM
                           A  3064    	XREF _getFileSize:ROM
                           A  3065    	XREF _crc32_finalize:ROM
                           A  3066    	XREF _crc32_initialize:ROM
                           A  3067    	XREF _crc32:ROM
                           A  3068    	XREF _delayms:ROM
                           A  3069    	XREF _startVDPupdate:ROM
                           A  3070    	XREF _reset:ROM
                           A  3071    	XREF _fastmemcpy:ROM
                           A  3072    	XREF _lockFlashKeyRegister:ROM
                           A  3073    	XREF _enableFlashKeyRegister:ROM
                           A  3074    	XREF _mos_flseek:ROM
                           A  3075    	XREF _mos_fread:ROM
                           A  3076    	XREF _mos_fclose:ROM
                           A  3077    	XREF _mos_fopen:ROM
                           A  3078    	XREF _getsysvar_scrchar:ROM
                           A  3079    	XREF _getch:ROM
                           A  3080    	XREF __u_ultoa:ROM
                           A  3081    	XREF __u_itoa:ROM
                           A  3082    	XREF ___print_sendstring:ROM
                           A  3083    	XREF ___print_xputch:ROM
                           A  3084    	XREF ___print_uputch:ROM
                           A  3085    	XREF ___print_fmt:ROM
                           A  3086    	XREF __lcmpu:ROM
                           A  3087    	XREF __iand:ROM
                           A  3088    	XREF __stoiu:ROM
                           A  3089    	XREF __icmpzero:ROM
                           A  3090    	XREF __case8D:ROM
                           A  3091    	XREF __ishru_b:ROM
                           A  3092    	XREF __ishrs_b:ROM
                           A  3093    	XDEF _main
                           A  3094    	XDEF _update_mos
                           A  3095    	XDEF _update_vdp
                           A  3096    	XDEF _getResponse
                           A  3097    	XDEF _usage
                           A  3098    	XDEF _print_version
                           A  3099    	XDEF _containsESP32Header
                           A  3100    	XDEF _esp32_magicnumbers
                           A  3101    	XDEF _containsMosHeader
                           A  3102    	XDEF _mos_magicnumbers
                           A  3103    	XDEF _vdp_ota_present
                           A  3104    	XDEF _getCharAt
                           A  3105    	XDEF _putch
                           A  3106    	XDEF _errno
                           A  3107    	END


Errors: 0
Warnings: 0
Lines Assembled: 3108
