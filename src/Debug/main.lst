Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     11:19:36     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
0B1A17                     A   144    _errno:
0B1A17                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   161    ;   10	 *                  Sends cls just befo
                           A   162    ;   11	 * 07/06/2023:		Included faster crc
                           A   163    ;   12	 */
                           A   164    ;   13	
                           A   165    ;   14	#include <ez80.h>
                           A   166    ;   15	#include <stdio.h>
                           A   167    ;   16	#include <stdlib.h>
                           A   168    ;   17	#include <ERRNO.H>
                           A   169    ;   18	#include "mos-interface.h"
                           A   170    ;   19	#include "flash.h"
                           A   171    ;   20	#include "agontimer.h"
                           A   172    ;   21	#include "crc32.h"
                           A   173    ;   22	#include "filesize.h"
                           A   174    ;   23	#include "./stdint.h"
                           A   175    ;   24	#include <string.h>
                           A   176    ;   25	
                           A   177    ;   26	#define UNLOCKMATCHLENGTH 9
                           A   178    ;   27	
                           A   179    ;   28	#define EXIT_FILENOTFOUND	4
                           A   180    ;   29	#define EXIT_INVALIDPARAMETER	19
                           A   181    ;   30	
                           A   182    ;   31	int errno; // needed by standard librar
                           A   183    	SEGMENT CODE
                           A   184    ;   32	enum states{firmware,recover,systemrese
                           A   185    ;   33	
                           A   186    ;   34	// separate putch function that doesn't
                           A   187    ;   35	// UART0 initialization done by MOS fir
                           A   188    ;   36	// This utility doesn't run without MOS
                           A   189    ;   37	int putch(int c)
                           A   190    ;   38	{
0B00E5                     A   191    _putch:
                           A   192    .DEFINE "_putch"
                           A   193    
                           A   194    .VALUE _putch
                           A   195    
                           A   196    .CLASS 2
                           A   197    
                           A   198    .TYPE 68
                           A   199    
                           A   200    .ENDEF
                           A   201    
                           A   202    .BEGFUNC "putch",38,"_putch"
                           A   203    
                           A   204    .LINE 38
                           A   205    
                           A   206    .DEFINE "c"
                           A   207    
                           A   208    .CLASS 65
                           A   209    
                           A   210    .VALUE 6
                           A   211    
                           A   212    .TYPE 4
                           A   213    
0B00E5 DDE5                A   214    	PUSH	IX
0B00E7 DD210000 00         A   215    	LD	IX,0
0B00EC DD39                A   216    	ADD	IX,SP
                           A   217    .ENDEF
                           A   218    
                           A   219    ;   39		UINT8 lsr,temt;
                           A   220    ;   40		
                           A   221    ;   41		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   222    L_1:
                           A   223    .LINE 41
                           A   224    
0B00EE ED38C5              A   225    	IN0	A,(197)
0B00F1 E640                A   226    	AND	A,%40
0B00F3 B7ED62              A   227    	UEXT	HL
0B00F6 6F                  A   228    	LD	L,A
0B00F7 CD 3C 14 0B         A   229    	CALL	__icmpzero
0B00FB 28 F1               A   230    	JR	Z,L_1
                           A   231    ;   42		UART0_THR = c;
                           A   232    .LINE 42
                           A   233    
0B00FD DD7E06              A   234    	LD	A,(IX+%6)
0B0100 ED39C0              A   235    	OUT0	(192),A
                           A   236    ;   43		return c;
                           A   237    .LINE 43
                           A   238    
0B0103 DD2706              A   239    	LD	HL,(IX+%6)
                           A   240    ;   44	}
                           A   241    .LINE 44
                           A   242    
0B0106 DDF9                A   243    	LD	SP,IX
0B0108 DDE1                A   244    	POP	IX
0B010A C9                  A   245    	RET	
                           A   246    
                           A   247    
                           A   248    ;**************************** _putch **********
                           A   249    ;Name                         Addr/Register   S
                           A   250    ;c                                     IX+6    
                           A   251    
                           A   252    
                           A   253    ; Stack Frame Size: 9 (bytes)
                           A   254    ;       Spill Code: 0 (instruction)
                           A   255    
                           A   256    
                           A   257    .ENDFUNC "putch",44,"_putch"
                           A   258    ;   45	
                           A   259    ;   46	uint8_t getCharAt(uint16_t x, uint16_t 
0B010B                     A   260    _getCharAt:
                           A   261    .DEFINE "_getCharAt"
                           A   262    
                           A   263    .VALUE _getCharAt
                           A   264    
                           A   265    .CLASS 2
                           A   266    
                           A   267    .TYPE 76
                           A   268    
                           A   269    .ENDEF
                           A   270    
                           A   271    .BEGFUNC "getCharAt",46,"_getCharAt"
                           A   272    
                           A   273    .LINE 46
                           A   274    
                           A   275    .DEFINE "x"
                           A   276    
                           A   277    .CLASS 65
                           A   278    
                           A   279    .VALUE 6
                           A   280    
                           A   281    .TYPE 13
                           A   282    
                           A   283    .ENDEF
                           A   284    
                           A   285    .DEFINE "y"
                           A   286    
                           A   287    .CLASS 65
                           A   288    
                           A   289    .VALUE 9
                           A   290    
                           A   291    .TYPE 13
                           A   292    
                           A   293    .ENDEF
                           A   294    
0B010B DDE5                A   295    	PUSH	IX
0B010D DD210000 00         A   296    	LD	IX,0
0B0112 DD39                A   297    	ADD	IX,SP
                           A   298    ;   47		delayms(20);
                           A   299    .LINE 47
                           A   300    
0B0114 01140000            A   301    	LD	BC,20
0B0118 C5                  A   302    	PUSH	BC
0B0119 CD 48 0C 0B         A   303    	CALL	_delayms
0B011D C1                  A   304    	POP	BC
                           A   305    ;   48		putch(23);
                           A   306    .LINE 48
                           A   307    
0B011E 01170000            A   308    	LD	BC,23
0B0122 C5                  A   309    	PUSH	BC
0B0123 CD E5 00 0B         A   310    	CALL	_putch
0B0127 C1                  A   311    	POP	BC
                           A   312    ;   49		putch(0);
                           A   313    .LINE 49
                           A   314    
0B0128 01000000            A   315    	LD	BC,0
0B012C C5                  A   316    	PUSH	BC
0B012D CD E5 00 0B         A   317    	CALL	_putch
0B0131 C1                  A   318    	POP	BC
                           A   319    ;   50		putch(131);
                           A   320    .LINE 50
                           A   321    
0B0132 01830000            A   322    	LD	BC,131
0B0136 C5                  A   323    	PUSH	BC
0B0137 CD E5 00 0B         A   324    	CALL	_putch
0B013B C1                  A   325    	POP	BC
                           A   326    ;   51		putch(x & 0xFF);
                           A   327    .LINE 51
                           A   328    
0B013C DD0706              A   329    	LD	BC,(IX+%6)
0B013F CD 79 10 0B         A   330    	CALL	__stoiu
0B0143 7D                  A   331    	LD	A,L
0B0144 B7ED62              A   332    	UEXT	HL
0B0147 6F                  A   333    	LD	L,A
0B0148 E5                  A   334    	PUSH	HL
0B0149 CD E5 00 0B         A   335    	CALL	_putch
0B014D C1                  A   336    	POP	BC
                           A   337    ;   52		putch((x >> 8) & 0xFF);
                           A   338    .LINE 52
                           A   339    
0B014E DD0706              A   340    	LD	BC,(IX+%6)
0B0151 CD 79 10 0B         A   341    	CALL	__stoiu
0B0155 3E08                A   342    	LD	A,%8
0B0157 CD E9 0E 0B         A   343    	CALL	__ishrs_b
0B015B 7D                  A   344    	LD	A,L
0B015C B7ED62              A   345    	UEXT	HL
0B015F 6F                  A   346    	LD	L,A
0B0160 E5                  A   347    	PUSH	HL
0B0161 CD E5 00 0B         A   348    	CALL	_putch
0B0165 C1                  A   349    	POP	BC
                           A   350    ;   53		putch(y & 0xFF);
                           A   351    .LINE 53
                           A   352    
0B0166 DD0709              A   353    	LD	BC,(IX+%9)
0B0169 CD 79 10 0B         A   354    	CALL	__stoiu
0B016D 7D                  A   355    	LD	A,L
0B016E B7ED62              A   356    	UEXT	HL
0B0171 6F                  A   357    	LD	L,A
0B0172 E5                  A   358    	PUSH	HL
0B0173 CD E5 00 0B         A   359    	CALL	_putch
0B0177 C1                  A   360    	POP	BC
                           A   361    ;   54		putch((y >> 8) & 0xFF);
                           A   362    .LINE 54
                           A   363    
0B0178 DD0709              A   364    	LD	BC,(IX+%9)
0B017B CD 79 10 0B         A   365    	CALL	__stoiu
0B017F 3E08                A   366    	LD	A,%8
0B0181 CD E9 0E 0B         A   367    	CALL	__ishrs_b
0B0185 7D                  A   368    	LD	A,L
0B0186 B7ED62              A   369    	UEXT	HL
0B0189 6F                  A   370    	LD	L,A
0B018A E5                  A   371    	PUSH	HL
0B018B CD E5 00 0B         A   372    	CALL	_putch
0B018F C1                  A   373    	POP	BC
                           A   374    ;   55		delayms(20);
                           A   375    .LINE 55
                           A   376    
0B0190 01140000            A   377    	LD	BC,20
0B0194 C5                  A   378    	PUSH	BC
0B0195 CD 48 0C 0B         A   379    	CALL	_delayms
0B0199 C1                  A   380    	POP	BC
                           A   381    ;   56		return getsysvar_scrchar();
                           A   382    .LINE 56
                           A   383    
0B019A CD 94 0A 0B         A   384    	CALL	_getsysvar_scrchar
                           A   385    ;   57	}
                           A   386    .LINE 57
                           A   387    
0B019E DDF9                A   388    	LD	SP,IX
0B01A0 DDE1                A   389    	POP	IX
0B01A2 C9                  A   390    	RET	
                           A   391    
                           A   392    
                           A   393    ;**************************** _getCharAt ******
                           A   394    ;Name                         Addr/Register   S
                           A   395    ;_getsysvar_scrchar                  IMPORT  --
                           A   396    ;_putch                              IMPORT  --
                           A   397    ;_delayms                            IMPORT  --
                           A   398    ;y                                     IX+9    
                           A   399    ;x                                     IX+6    
                           A   400    
                           A   401    
                           A   402    ; Stack Frame Size: 12 (bytes)
                           A   403    ;       Spill Code: 0 (instruction)
                           A   404    
                           A   405    
                           A   406    .ENDFUNC "getCharAt",57,"_getCharAt"
                           A   407    ;   58	
                           A   408    ;   59	bool vdp_ota_present(void) {
0B01A3                     A   409    _vdp_ota_present:
                           A   410    .DEFINE "_vdp_ota_present"
                           A   411    
                           A   412    .VALUE _vdp_ota_present
                           A   413    
                           A   414    .CLASS 2
                           A   415    
                           A   416    .TYPE 76
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .BEGFUNC "vdp_ota_present",59,"_vdp_ota_present
                           A   421    
                           A   422    .LINE 59
                           A   423    
                           A   424    .DEFINE "n"
                           A   425    
                           A   426    .CLASS 65
                           A   427    
                           A   428    .VALUE -2
                           A   429    
                           A   430    .TYPE 13
                           A   431    
                           A   432    .ENDEF
                           A   433    
                           A   434    .DEFINE "test"
                           A   435    
                           A   436    .CLASS 65
                           A   437    
                           A   438    .VALUE -11
                           A   439    
                           A   440    .DIM 9
                           A   441    
                           A   442    .TYPE 98
                           A   443    
                           A   444    .ENDEF
                           A   445    
0B01A3 DDE5                A   446    	PUSH	IX
0B01A5 DD210000 00         A   447    	LD	IX,0
0B01AA DD39                A   448    	ADD	IX,SP
0B01AC ED22F5              A   449    	LEA	HL,IX+%FFFFFFF5
0B01AF F9                  A   450    	LD	SP,HL
                           A   451    ;   60		char test[UNLOCKMATCHLENGTH];
                           A   452    ;   61		uint16_t n;
                           A   453    ;   62	
                           A   454    ;   63		putch(23);
                           A   455    .LINE 63
                           A   456    
0B01B0 01170000            A   457    	LD	BC,23
0B01B4 C5                  A   458    	PUSH	BC
0B01B5 CD E5 00 0B         A   459    	CALL	_putch
0B01B9 C1                  A   460    	POP	BC
                           A   461    ;   64		putch(29);
                           A   462    .LINE 64
                           A   463    
0B01BA 011D0000            A   464    	LD	BC,29
0B01BE C5                  A   465    	PUSH	BC
0B01BF CD E5 00 0B         A   466    	CALL	_putch
0B01C3 C1                  A   467    	POP	BC
                           A   468    ;   65		putch(0);
                           A   469    .LINE 65
                           A   470    
0B01C4 01000000            A   471    	LD	BC,0
0B01C8 C5                  A   472    	PUSH	BC
0B01C9 CD E5 00 0B         A   473    	CALL	_putch
0B01CD C1                  A   474    	POP	BC
                           A   475    ;   66		printf("unlock");
                           A   476    .LINE 66
                           A   477    
0B01CE 01 7F 10 0B         A   478    	LD	BC,___print_uputch
0B01D2 ED43 00 20 0B       A   479    	LD	(___print_xputch),BC
0B01D7 01 83 20 0B         A   480    	LD	BC,L__3
0B01DB C5                  A   481    	PUSH	BC
0B01DC CD 0E 0F 0B         A   482    	CALL	___print_sendstring
0B01E0 C1                  A   483    	POP	BC
                           A   484    ;   67	
                           A   485    ;   68		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   486    .LINE 68
                           A   487    
0B01E1 DD36FE00            A   488    	LD	(IX+%FFFFFFFE),%0
0B01E5 DD36FF00            A   489    	LD	(IX+%FFFFFFFF),%0
0B01E9 18 2A               A   490    	JR	L_8
0B01EB                     A   491    L_6:
0B01EB 01030000            A   492    	LD	BC,3
0B01EF C5                  A   493    	PUSH	BC
0B01F0 DD31FE              A   494    	LD	IY,(IX+%FFFFFFFE)
0B01F3 ED0308              A   495    	LEA	BC,IY+%8
0B01F6 C5                  A   496    	PUSH	BC
0B01F7 CD 0B 01 0B         A   497    	CALL	_getCharAt
0B01FB C1                  A   498    	POP	BC
0B01FC C1                  A   499    	POP	BC
0B01FD DD07FE              A   500    	LD	BC,(IX+%FFFFFFFE)
0B0200 CD 79 10 0B         A   501    	CALL	__stoiu
0B0204 E5C1                A   502    	LD	BC,HL
0B0206 ED22F5              A   503    	LEA	HL,IX+%FFFFFFF5
0B0209 09                  A   504    	ADD	HL,BC
0B020A 77                  A   505    	LD	(HL),A
0B020B DD27FE              A   506    	LD	HL,(IX+%FFFFFFFE)
0B020E 23                  A   507    	INC	HL
0B020F DD75FE              A   508    	LD	(IX+%FFFFFFFE),L
0B0212 DD74FF              A   509    	LD	(IX+%FFFFFFFF),H
0B0215                     A   510    L_8:
0B0215 49010A00            A   511    	LD.LIS	BC,10
0B0219 DD27FE              A   512    	LD	HL,(IX+%FFFFFFFE)
0B021C B7                  A   513    	OR	A,A
0B021D 40ED42              A   514    	SBC.SIS	HL,BC
0B0220 38 C9               A   515    	JR	C,L_6
                           A   516    ;   69		// 3 - line on-screen
                           A   517    ;   70		if(memcmp(test, "unlocked!",UNLOCKM
                           A   518    .LINE 70
                           A   519    
0B0222 01090000            A   520    	LD	BC,9
0B0226 C5                  A   521    	PUSH	BC
0B0227 01 8A 20 0B         A   522    	LD	BC,L__5
0B022B C5                  A   523    	PUSH	BC
0B022C ED65F5              A   524    	PEA	IX+%FFFFFFF5
0B022F CD 12 14 0B         A   525    	CALL	_memcmp
0B0233 C1                  A   526    	POP	BC
0B0234 C1                  A   527    	POP	BC
0B0235 C1                  A   528    	POP	BC
0B0236 CD 3C 14 0B         A   529    	CALL	__icmpzero
0B023A 20 04               A   530    	JR	NZ,L_10
0B023C 3E01                A   531    	LD	A,%1
0B023E 18 01               A   532    	JR	L_12
                           A   533    ;   71		else return false;
0B0240                     A   534    L_10:
                           A   535    .LINE 71
                           A   536    
0B0240 AF                  A   537    	XOR	A,A
                           A   538    ;   72	}
0B0241                     A   539    L_12:
                           A   540    .LINE 72
                           A   541    
0B0241 DDF9                A   542    	LD	SP,IX
0B0243 DDE1                A   543    	POP	IX
0B0245 C9                  A   544    	RET	
                           A   545    
                           A   546    
                           A   547    ;**************************** _vdp_ota_present 
                           A   548    ;Name                         Addr/Register   S
                           A   549    ;_memcmp                             IMPORT  --
                           A   550    ;___print_sendstring                 IMPORT  --
                           A   551    ;___print_xputch                     IMPORT    
                           A   552    ;___print_uputch                     IMPORT  --
                           A   553    ;_putch                              IMPORT  --
                           A   554    ;test                                 IX-11    
                           A   555    ;n                                     IX-2    
                           A   556    
                           A   557    
                           A   558    ; Stack Frame Size: 17 (bytes)
                           A   559    ;       Spill Code: 0 (instruction)
                           A   560    
                           A   561    
                           A   562    .ENDFUNC "vdp_ota_present",72,"_vdp_ota_present
                           A   563    	SEGMENT STRSECT
0B2083                     A   564    L__3:
0B2083 756E6C6F 636B       A   565    	DB	"unlock"
0B2089 00                  A   566    	DB	0
0B208A                     A   567    L__5:
0B208A 756E6C6F 636B6564   A   568    	DB	"unlocked!"
0B2092 21 
0B2093 00                  A   569    	DB	0
                           A   570    	SEGMENT DATA
0B1A0E                     A   571    _mos_magicnumbers:
0B1A0E F3                  A   572    	DB	243
0B1A0F ED                  A   573    	DB	237
0B1A10 7D                  A   574    	DB	125
0B1A11 5B                  A   575    	DB	91
0B1A12 C3                  A   576    	DB	195
                           A   577    .DEFINE "mos_magicnumbers"
                           A   578    .ALIAS "_mos_magicnumbers"
                           A   579    .CLASS 69
                           A   580    .VALUE _mos_magicnumbers
                           A   581    .DIM 5
                           A   582    .TYPE 108
                           A   583    .ENDEF
                           A   584    ;   73	
                           A   585    ;   74	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   586    	SEGMENT CODE
                           A   587    ;   75	#define MOS_MAGICLENGTH 5
                           A   588    ;   76	bool containsMosHeader(uint8_t *filesta
0B0246                     A   589    _containsMosHeader:
                           A   590    .DEFINE "_containsMosHeader"
                           A   591    
                           A   592    .VALUE _containsMosHeader
                           A   593    
                           A   594    .CLASS 2
                           A   595    
                           A   596    .TYPE 76
                           A   597    
                           A   598    .ENDEF
                           A   599    
                           A   600    .BEGFUNC "containsMosHeader",76,"_containsMosHe
                           A   601    
                           A   602    .LINE 76
                           A   603    
                           A   604    .DEFINE "filestart"
                           A   605    
                           A   606    .CLASS 65
                           A   607    
                           A   608    .VALUE 6
                           A   609    
                           A   610    .TYPE 44
                           A   611    
                           A   612    .ENDEF
                           A   613    
                           A   614    .DEFINE "n"
                           A   615    
                           A   616    .CLASS 65
                           A   617    
                           A   618    .VALUE -1
                           A   619    
                           A   620    .TYPE 12
                           A   621    
                           A   622    .ENDEF
                           A   623    
                           A   624    .DEFINE "match"
                           A   625    
                           A   626    .CLASS 65
                           A   627    
                           A   628    .VALUE -2
                           A   629    
                           A   630    .TYPE 12
                           A   631    
                           A   632    .ENDEF
                           A   633    
0B0246 DDE5                A   634    	PUSH	IX
0B0248 DD210000 00         A   635    	LD	IX,0
0B024D DD39                A   636    	ADD	IX,SP
0B024F 3B                  A   637    	DEC	SP
0B0250 3B                  A   638    	DEC	SP
                           A   639    ;   77		uint8_t n;
                           A   640    ;   78		bool match = true;
                           A   641    .LINE 78
                           A   642    
0B0251 DD36FE01            A   643    	LD	(IX+%FFFFFFFE),%1
                           A   644    ;   79	
                           A   645    ;   80		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A   646    .LINE 80
                           A   647    
0B0255 DD36FF00            A   648    	LD	(IX+%FFFFFFFF),%0
0B0259 18 27               A   649    	JR	L_17
0B025B                     A   650    L_15:
0B025B DD7EFF              A   651    	LD	A,(IX+%FFFFFFFF)
0B025E B7ED62              A   652    	UEXT	HL
0B0261 6F                  A   653    	LD	L,A
0B0262 01 0E 1A 0B         A   654    	LD	BC,_mos_magicnumbers
0B0266 09                  A   655    	ADD	HL,BC
0B0267 E5FDE1              A   656    	LD	IY,HL
0B026A DD7EFF              A   657    	LD	A,(IX+%FFFFFFFF)
0B026D B7ED62              A   658    	UEXT	HL
0B0270 6F                  A   659    	LD	L,A
0B0271 DD0706              A   660    	LD	BC,(IX+%6)
0B0274 09                  A   661    	ADD	HL,BC
0B0275 FD7E00              A   662    	LD	A,(IY)
0B0278 BE                  A   663    	CP	A,(HL)
0B0279 28 04               A   664    	JR	Z,L_16
0B027B DD36FE00            A   665    	LD	(IX+%FFFFFFFE),%0
0B027F                     A   666    L_16:
0B027F DD34FF              A   667    	INC	(IX+%FFFFFFFF)
0B0282                     A   668    L_17:
0B0282 DD7EFF              A   669    	LD	A,(IX+%FFFFFFFF)
0B0285 FE05                A   670    	CP	A,%5
0B0287 38 D2               A   671    	JR	C,L_15
                           A   672    ;   81		return match;
                           A   673    .LINE 81
                           A   674    
0B0289 DD7EFE              A   675    	LD	A,(IX+%FFFFFFFE)
                           A   676    ;   82	}
                           A   677    .LINE 82
                           A   678    
0B028C DDF9                A   679    	LD	SP,IX
0B028E DDE1                A   680    	POP	IX
0B0290 C9                  A   681    	RET	
                           A   682    
                           A   683    
                           A   684    ;**************************** _containsMosHeade
                           A   685    ;Name                         Addr/Register   S
                           A   686    ;_mos_magicnumbers                   STATIC    
                           A   687    ;match                                 IX-2    
                           A   688    ;n                                     IX-1    
                           A   689    ;filestart                             IX+6    
                           A   690    
                           A   691    
                           A   692    ; Stack Frame Size: 11 (bytes)
                           A   693    ;       Spill Code: 0 (instruction)
                           A   694    
                           A   695    
                           A   696    .ENDFUNC "containsMosHeader",82,"_containsMosHe
                           A   697    	SEGMENT DATA
0B1A13                     A   698    _esp32_magicnumbers:
0B1A13 32                  A   699    	DB	50
0B1A14 54                  A   700    	DB	84
0B1A15 CD                  A   701    	DB	205
0B1A16 AB                  A   702    	DB	171
                           A   703    .DEFINE "esp32_magicnumbers"
                           A   704    .ALIAS "_esp32_magicnumbers"
                           A   705    .CLASS 69
                           A   706    .VALUE _esp32_magicnumbers
                           A   707    .DIM 4
                           A   708    .TYPE 108
                           A   709    .ENDEF
                           A   710    ;   83	
                           A   711    ;   84	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A   712    	SEGMENT CODE
                           A   713    ;   85	#define ESP32_MAGICLENGTH 4
                           A   714    ;   86	#define ESP32_MAGICSTART 0x20
                           A   715    ;   87	bool containsESP32Header(uint8_t *files
0B0291                     A   716    _containsESP32Header:
                           A   717    .DEFINE "_containsESP32Header"
                           A   718    
                           A   719    .VALUE _containsESP32Header
                           A   720    
                           A   721    .CLASS 2
                           A   722    
                           A   723    .TYPE 76
                           A   724    
                           A   725    .ENDEF
                           A   726    
                           A   727    .BEGFUNC "containsESP32Header",87,"_containsESP
                           A   728    
                           A   729    .LINE 87
                           A   730    
                           A   731    .DEFINE "filestart"
                           A   732    
                           A   733    .CLASS 65
                           A   734    
                           A   735    .VALUE 6
                           A   736    
                           A   737    .TYPE 44
                           A   738    
                           A   739    .ENDEF
                           A   740    
                           A   741    .DEFINE "n"
                           A   742    
                           A   743    .CLASS 65
                           A   744    
                           A   745    .VALUE -1
                           A   746    
                           A   747    .TYPE 12
                           A   748    
                           A   749    .ENDEF
                           A   750    
                           A   751    .DEFINE "match"
                           A   752    
                           A   753    .CLASS 65
                           A   754    
                           A   755    .VALUE -2
                           A   756    
                           A   757    .TYPE 12
                           A   758    
                           A   759    .ENDEF
                           A   760    
0B0291 DDE5                A   761    	PUSH	IX
0B0293 DD210000 00         A   762    	LD	IX,0
0B0298 DD39                A   763    	ADD	IX,SP
0B029A 3B                  A   764    	DEC	SP
0B029B 3B                  A   765    	DEC	SP
                           A   766    ;   88		uint8_t n;
                           A   767    ;   89		bool match = true;
                           A   768    .LINE 89
                           A   769    
0B029C DD36FE01            A   770    	LD	(IX+%FFFFFFFE),%1
                           A   771    ;   90	
                           A   772    ;   91		filestart += ESP32_MAGICSTART; // s
                           A   773    .LINE 91
                           A   774    
0B02A0 DD3106              A   775    	LD	IY,(IX+%6)
0B02A3 ED3320              A   776    	LEA	IY,IY+%20
0B02A6 DD3E06              A   777    	LD	(IX+%6),IY
                           A   778    ;   92		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A   779    .LINE 92
                           A   780    
0B02A9 DD36FF00            A   781    	LD	(IX+%FFFFFFFF),%0
0B02AD 18 27               A   782    	JR	L_24
0B02AF                     A   783    L_22:
                           A   784    ;   93			if(esp32_magicnumbers[n] != fil
                           A   785    .LINE 93
                           A   786    
0B02AF DD7EFF              A   787    	LD	A,(IX+%FFFFFFFF)
0B02B2 B7ED62              A   788    	UEXT	HL
0B02B5 6F                  A   789    	LD	L,A
0B02B6 01 13 1A 0B         A   790    	LD	BC,_esp32_magicnumbers
0B02BA 09                  A   791    	ADD	HL,BC
0B02BB E5FDE1              A   792    	LD	IY,HL
0B02BE DD7EFF              A   793    	LD	A,(IX+%FFFFFFFF)
0B02C1 B7ED62              A   794    	UEXT	HL
0B02C4 6F                  A   795    	LD	L,A
0B02C5 DD0706              A   796    	LD	BC,(IX+%6)
0B02C8 09                  A   797    	ADD	HL,BC
0B02C9 FD7E00              A   798    	LD	A,(IY)
0B02CC BE                  A   799    	CP	A,(HL)
0B02CD 28 04               A   800    	JR	Z,L_23
0B02CF DD36FE00            A   801    	LD	(IX+%FFFFFFFE),%0
                           A   802    ;   94		}
0B02D3                     A   803    L_23:
                           A   804    .LINE 94
                           A   805    
0B02D3 DD34FF              A   806    	INC	(IX+%FFFFFFFF)
0B02D6                     A   807    L_24:
0B02D6 DD7EFF              A   808    	LD	A,(IX+%FFFFFFFF)
0B02D9 FE04                A   809    	CP	A,%4
0B02DB 38 D2               A   810    	JR	C,L_22
                           A   811    ;   95		return match;
                           A   812    .LINE 95
                           A   813    
0B02DD DD7EFE              A   814    	LD	A,(IX+%FFFFFFFE)
                           A   815    ;   96	}
                           A   816    .LINE 96
                           A   817    
0B02E0 DDF9                A   818    	LD	SP,IX
0B02E2 DDE1                A   819    	POP	IX
0B02E4 C9                  A   820    	RET	
                           A   821    
                           A   822    
                           A   823    ;**************************** _containsESP32Hea
                           A   824    ;Name                         Addr/Register   S
                           A   825    ;_esp32_magicnumbers                 STATIC    
                           A   826    ;match                                 IX-2    
                           A   827    ;n                                     IX-1    
                           A   828    ;filestart                             IX+6    
                           A   829    
                           A   830    
                           A   831    ; Stack Frame Size: 11 (bytes)
                           A   832    ;       Spill Code: 0 (instruction)
                           A   833    
                           A   834    
                           A   835    .ENDFUNC "containsESP32Header",96,"_containsESP
                           A   836    ;   97	
                           A   837    ;   98	void print_version(void) {
0B02E5                     A   838    _print_version:
                           A   839    .DEFINE "_print_version"
                           A   840    
                           A   841    .VALUE _print_version
                           A   842    
                           A   843    .CLASS 2
                           A   844    
                           A   845    .TYPE 65
                           A   846    
                           A   847    .ENDEF
                           A   848    
                           A   849    .BEGFUNC "print_version",98,"_print_version"
                           A   850    
0B02E5 DDE5                A   851    	PUSH	IX
0B02E7 DD210000 00         A   852    	LD	IX,0
0B02EC DD39                A   853    	ADD	IX,SP
                           A   854    ;   99		printf("Agon firmware upgrade utili
                           A   855    .LINE 99
                           A   856    
0B02EE 01 7F 10 0B         A   857    	LD	BC,___print_uputch
0B02F2 ED43 00 20 0B       A   858    	LD	(___print_xputch),BC
0B02F7 01 94 20 0B         A   859    	LD	BC,L__14
0B02FB C5                  A   860    	PUSH	BC
0B02FC CD 0E 0F 0B         A   861    	CALL	___print_sendstring
0B0300 C1                  A   862    	POP	BC
                           A   863    ;  100	}
                           A   864    .LINE 100
                           A   865    
0B0301 DDF9                A   866    	LD	SP,IX
0B0303 DDE1                A   867    	POP	IX
0B0305 C9                  A   868    	RET	
                           A   869    
                           A   870    
                           A   871    ;**************************** _print_version **
                           A   872    ;Name                         Addr/Register   S
                           A   873    ;___print_sendstring                 IMPORT  --
                           A   874    ;___print_xputch                     IMPORT    
                           A   875    ;___print_uputch                     IMPORT  --
                           A   876    
                           A   877    
                           A   878    ; Stack Frame Size: 6 (bytes)
                           A   879    ;       Spill Code: 0 (instruction)
                           A   880    
                           A   881    
                           A   882    .ENDFUNC "print_version",100,"_print_version"
                           A   883    	SEGMENT STRSECT
0B2094                     A   884    L__14:
0B2094 41676F6E 20666972   A   885    	DB	"Agon firmware upgrade utility v1.4"
0B209C 6D776172 65207570 
0B20A4 67726164 65207574 
0B20AC 696C6974 79207631 
0B20B4 2E34 
0B20B6 0A0D0A0D 00         A   886    	DB	10,13,10,13,0
                           A   887    	SEGMENT CODE
                           A   888    ;  101	
                           A   889    ;  102	void usage(void) {
0B0306                     A   890    _usage:
                           A   891    .DEFINE "_usage"
                           A   892    
                           A   893    .VALUE _usage
                           A   894    
                           A   895    .CLASS 2
                           A   896    
                           A   897    .TYPE 65
                           A   898    
                           A   899    .ENDEF
                           A   900    
                           A   901    .BEGFUNC "usage",102,"_usage"
                           A   902    
0B0306 DDE5                A   903    	PUSH	IX
0B0308 DD210000 00         A   904    	LD	IX,0
0B030D DD39                A   905    	ADD	IX,SP
                           A   906    ;  103		print_version();
                           A   907    .LINE 103
                           A   908    
0B030F CD E5 02 0B         A   909    	CALL	_print_version
                           A   910    ;  104		printf("Usage: FLASH <mos|vdp> <fil
                           A   911    .LINE 104
                           A   912    
0B0313 01 7F 10 0B         A   913    	LD	BC,___print_uputch
0B0317 ED43 00 20 0B       A   914    	LD	(___print_xputch),BC
0B031C 01 BB 20 0B         A   915    	LD	BC,L__16
0B0320 C5                  A   916    	PUSH	BC
0B0321 CD 0E 0F 0B         A   917    	CALL	___print_sendstring
0B0325 C1                  A   918    	POP	BC
                           A   919    ;  105	}
                           A   920    .LINE 105
                           A   921    
0B0326 DDF9                A   922    	LD	SP,IX
0B0328 DDE1                A   923    	POP	IX
0B032A C9                  A   924    	RET	
                           A   925    
                           A   926    
                           A   927    ;**************************** _usage **********
                           A   928    ;Name                         Addr/Register   S
                           A   929    ;___print_sendstring                 IMPORT  --
                           A   930    ;___print_xputch                     IMPORT    
                           A   931    ;___print_uputch                     IMPORT  --
                           A   932    
                           A   933    
                           A   934    ; Stack Frame Size: 6 (bytes)
                           A   935    ;       Spill Code: 0 (instruction)
                           A   936    
                           A   937    
                           A   938    .ENDFUNC "usage",105,"_usage"
                           A   939    	SEGMENT STRSECT
0B20BB                     A   940    L__16:
0B20BB 55736167 653A2046   A   941    	DB	"Usage: FLASH <mos|vdp> <filename>"
0B20C3 4C415348 203C6D6F 
0B20CB 737C7664 703E203C 
0B20D3 66696C65 6E616D65 
0B20DB 3E 
0B20DC 0A0D00              A   942    	DB	10,13,0
                           A   943    	SEGMENT CODE
                           A   944    ;  106	
                           A   945    ;  107	uint8_t update_vdp(char *filename) {
0B032B                     A   946    _update_vdp:
                           A   947    .DEFINE "_update_vdp"
                           A   948    
                           A   949    .VALUE _update_vdp
                           A   950    
                           A   951    .CLASS 2
                           A   952    
                           A   953    .TYPE 76
                           A   954    
                           A   955    .ENDEF
                           A   956    
                           A   957    .BEGFUNC "update_vdp",107,"_update_vdp"
                           A   958    
                           A   959    .LINE 107
                           A   960    
                           A   961    .DEFINE "filename"
                           A   962    
                           A   963    .CLASS 65
                           A   964    
                           A   965    .VALUE 6
                           A   966    
                           A   967    .TYPE 34
                           A   968    
                           A   969    .ENDEF
                           A   970    
                           A   971    .DEFINE "file"
                           A   972    
                           A   973    .CLASS 65
                           A   974    
                           A   975    .VALUE -1
                           A   976    
                           A   977    .TYPE 12
                           A   978    
                           A   979    .ENDEF
                           A   980    
                           A   981    .DEFINE "filesize"
                           A   982    
                           A   983    .CLASS 65
                           A   984    
                           A   985    .VALUE -4
                           A   986    
                           A   987    .TYPE 14
                           A   988    
                           A   989    .ENDEF
                           A   990    
                           A   991    .DEFINE "buffer"
                           A   992    
                           A   993    .CLASS 65
                           A   994    
                           A   995    .VALUE -40
                           A   996    
                           A   997    .DIM 36
                           A   998    
                           A   999    .TYPE 108
                           A  1000    
                           A  1001    .ENDEF
                           A  1002    
0B032B DDE5                A  1003    	PUSH	IX
0B032D DD210000 00         A  1004    	LD	IX,0
0B0332 DD39                A  1005    	ADD	IX,SP
0B0334 ED22D8              A  1006    	LEA	HL,IX+%FFFFFFD8
0B0337 F9                  A  1007    	LD	SP,HL
                           A  1008    ;  108		uint8_t file;
                           A  1009    ;  109		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1010    ;  110		uint24_t filesize;
                           A  1011    ;  111	
                           A  1012    ;  112		putch(12); // cls
                           A  1013    .LINE 112
                           A  1014    
0B0338 010C0000            A  1015    	LD	BC,12
0B033C C5                  A  1016    	PUSH	BC
0B033D CD E5 00 0B         A  1017    	CALL	_putch
0B0341 C1                  A  1018    	POP	BC
                           A  1019    ;  113		print_version();	
                           A  1020    .LINE 113
                           A  1021    
0B0342 CD E5 02 0B         A  1022    	CALL	_print_version
                           A  1023    ;  114		printf("Unlocking VDP updater...\r\
                           A  1024    .LINE 114
                           A  1025    
0B0346 01 7F 10 0B         A  1026    	LD	BC,___print_uputch
0B034A ED43 00 20 0B       A  1027    	LD	(___print_xputch),BC
0B034F 01 DF 20 0B         A  1028    	LD	BC,L__18
0B0353 C5                  A  1029    	PUSH	BC
0B0354 CD 0E 0F 0B         A  1030    	CALL	___print_sendstring
0B0358 C1                  A  1031    	POP	BC
                           A  1032    ;  115		
                           A  1033    ;  116		if(!vdp_ota_present()) {
                           A  1034    .LINE 116
                           A  1035    
0B0359 CD A3 01 0B         A  1036    	CALL	_vdp_ota_present
0B035D B7                  A  1037    	OR	A,A
0B035E 20 18               A  1038    	JR	NZ,L_30
                           A  1039    ;  117			printf(" failed - incompatible 
                           A  1040    .LINE 117
                           A  1041    
0B0360 01 7F 10 0B         A  1042    	LD	BC,___print_uputch
0B0364 ED43 00 20 0B       A  1043    	LD	(___print_xputch),BC
0B0369 01 FA 20 0B         A  1044    	LD	BC,L__20
0B036D C5                  A  1045    	PUSH	BC
0B036E CD 0E 0F 0B         A  1046    	CALL	___print_sendstring
0B0372 C1                  A  1047    	POP	BC
                           A  1048    ;  118			return 0;
                           A  1049    .LINE 118
                           A  1050    
0B0373 AF                  A  1051    	XOR	A,A
0B0374 C3 43 04 0B         A  1052    	JR	L_35
                           A  1053    ;  119		}
0B0378                     A  1054    L_30:
                           A  1055    .LINE 119
                           A  1056    
                           A  1057    ;  120	
                           A  1058    ;  121		file = mos_fopen(filename, fa_read)
                           A  1059    .LINE 121
                           A  1060    
0B0378 01010000            A  1061    	LD	BC,1
0B037C C5                  A  1062    	PUSH	BC
0B037D DD0706              A  1063    	LD	BC,(IX+%6)
0B0380 C5                  A  1064    	PUSH	BC
0B0381 CD A0 0A 0B         A  1065    	CALL	_mos_fopen
0B0385 C1                  A  1066    	POP	BC
0B0386 C1                  A  1067    	POP	BC
0B0387 DD77FF              A  1068    	LD	(IX+%FFFFFFFF),A
                           A  1069    ;  122		if(!file) {
                           A  1070    .LINE 122
                           A  1071    
0B038A B7                  A  1072    	OR	A,A
0B038B 20 2C               A  1073    	JR	NZ,L_32
                           A  1074    ;  123			printf("Error opening \"%s\"\n\
                           A  1075    .LINE 123
                           A  1076    
0B038D 01 7F 10 0B         A  1077    	LD	BC,___print_uputch
0B0391 ED43 00 20 0B       A  1078    	LD	(___print_xputch),BC
0B0396 01 17 21 0B         A  1079    	LD	BC,L__22
0B039A C5                  A  1080    	PUSH	BC
0B039B CD 0E 0F 0B         A  1081    	CALL	___print_sendstring
0B039F C1                  A  1082    	POP	BC
0B03A0 DD0706              A  1083    	LD	BC,(IX+%6)
0B03A3 C5                  A  1084    	PUSH	BC
0B03A4 CD 0E 0F 0B         A  1085    	CALL	___print_sendstring
0B03A8 C1                  A  1086    	POP	BC
0B03A9 01 27 21 0B         A  1087    	LD	BC,L__23
0B03AD C5                  A  1088    	PUSH	BC
0B03AE CD 0E 0F 0B         A  1089    	CALL	___print_sendstring
0B03B2 C1                  A  1090    	POP	BC
                           A  1091    ;  124			return EXIT_FILENOTFOUND;
                           A  1092    .LINE 124
                           A  1093    
0B03B3 3E04                A  1094    	LD	A,%4
0B03B5 C3 43 04 0B         A  1095    	JR	L_35
                           A  1096    ;  125		}
0B03B9                     A  1097    L_32:
                           A  1098    .LINE 125
                           A  1099    
                           A  1100    ;  126	
                           A  1101    ;  127		mos_fread(file, (char *)buffer, ESP
                           A  1102    .LINE 127
                           A  1103    
0B03B9 01240000            A  1104    	LD	BC,36
0B03BD C5                  A  1105    	PUSH	BC
0B03BE ED65D8              A  1106    	PEA	IX+%FFFFFFD8
0B03C1 DD4EFF              A  1107    	LD	C,(IX+%FFFFFFFF)
0B03C4 0600                A  1108    	LD	B,%0
0B03C6 C5                  A  1109    	PUSH	BC
0B03C7 CD E2 0A 0B         A  1110    	CALL	_mos_fread
0B03CB C1                  A  1111    	POP	BC
0B03CC C1                  A  1112    	POP	BC
0B03CD C1                  A  1113    	POP	BC
                           A  1114    ;  128		if(!containsESP32Header(buffer)) {
                           A  1115    .LINE 128
                           A  1116    
0B03CE ED65D8              A  1117    	PEA	IX+%FFFFFFD8
0B03D1 CD 91 02 0B         A  1118    	CALL	_containsESP32Header
0B03D5 C1                  A  1119    	POP	BC
0B03D6 B7                  A  1120    	OR	A,A
0B03D7 20 17               A  1121    	JR	NZ,L_34
                           A  1122    ;  129			printf("File does not contain v
                           A  1123    .LINE 129
                           A  1124    
0B03D9 01 7F 10 0B         A  1125    	LD	BC,___print_uputch
0B03DD ED43 00 20 0B       A  1126    	LD	(___print_xputch),BC
0B03E2 01 2B 21 0B         A  1127    	LD	BC,L__25
0B03E6 C5                  A  1128    	PUSH	BC
0B03E7 CD 0E 0F 0B         A  1129    	CALL	___print_sendstring
0B03EB C1                  A  1130    	POP	BC
                           A  1131    ;  130			return EXIT_INVALIDPARAMETER;
                           A  1132    .LINE 130
                           A  1133    
0B03EC 3E13                A  1134    	LD	A,%13
0B03EE 18 53               A  1135    	JR	L_35
                           A  1136    ;  131		}
0B03F0                     A  1137    L_34:
                           A  1138    .LINE 131
                           A  1139    
                           A  1140    ;  132	
                           A  1141    ;  133		mos_flseek(file, 0); // reset to ze
                           A  1142    .LINE 133
                           A  1143    
0B03F0 01000000            A  1144    	LD	BC,0
0B03F4 C5                  A  1145    	PUSH	BC
0B03F5 C5                  A  1146    	PUSH	BC
0B03F6 DD4EFF              A  1147    	LD	C,(IX+%FFFFFFFF)
0B03F9 0600                A  1148    	LD	B,%0
0B03FB C5                  A  1149    	PUSH	BC
0B03FC CD 5C 0B 0B         A  1150    	CALL	_mos_flseek
0B0400 C1                  A  1151    	POP	BC
0B0401 C1                  A  1152    	POP	BC
0B0402 C1                  A  1153    	POP	BC
                           A  1154    ;  134	
                           A  1155    ;  135		// Do actual work here
                           A  1156    ;  136		printf("Updating VDP firmware\r\n")
                           A  1157    .LINE 136
                           A  1158    
0B0403 01 7F 10 0B         A  1159    	LD	BC,___print_uputch
0B0407 ED43 00 20 0B       A  1160    	LD	(___print_xputch),BC
0B040C 01 54 21 0B         A  1161    	LD	BC,L__26
0B0410 C5                  A  1162    	PUSH	BC
0B0411 CD 0E 0F 0B         A  1163    	CALL	___print_sendstring
0B0415 C1                  A  1164    	POP	BC
                           A  1165    ;  137		filesize = getFileSize(file);	
                           A  1166    .LINE 137
                           A  1167    
0B0416 DD4EFF              A  1168    	LD	C,(IX+%FFFFFFFF)
0B0419 0600                A  1169    	LD	B,%0
0B041B C5                  A  1170    	PUSH	BC
0B041C CD 7E 0E 0B         A  1171    	CALL	_getFileSize
0B0420 C1                  A  1172    	POP	BC
0B0421 DD2FFC              A  1173    	LD	(IX+%FFFFFFFC),HL
                           A  1174    ;  138		startVDPupdate(file, filesize);
                           A  1175    .LINE 138
                           A  1176    
0B0424 E5C1                A  1177    	LD	BC,HL
0B0426 C5                  A  1178    	PUSH	BC
0B0427 DD4EFF              A  1179    	LD	C,(IX+%FFFFFFFF)
0B042A 0600                A  1180    	LD	B,%0
0B042C C5                  A  1181    	PUSH	BC
0B042D CD C7 0B 0B         A  1182    	CALL	_startVDPupdate
0B0431 C1                  A  1183    	POP	BC
0B0432 C1                  A  1184    	POP	BC
                           A  1185    ;  139		mos_fclose(file);
                           A  1186    .LINE 139
                           A  1187    
0B0433 DD4EFF              A  1188    	LD	C,(IX+%FFFFFFFF)
0B0436 0600                A  1189    	LD	B,%0
0B0438 C5                  A  1190    	PUSH	BC
0B0439 CD B8 0A 0B         A  1191    	CALL	_mos_fclose
0B043D C1                  A  1192    	POP	BC
                           A  1193    ;  140		reset();
                           A  1194    .LINE 140
                           A  1195    
0B043E CD A6 0B 0B         A  1196    	CALL	_reset
                           A  1197    ;  141		return 0; // will never return, but
                           A  1198    .LINE 141
                           A  1199    
0B0442 AF                  A  1200    	XOR	A,A
                           A  1201    ;  142	}
0B0443                     A  1202    L_35:
                           A  1203    .LINE 142
                           A  1204    
0B0443 DDF9                A  1205    	LD	SP,IX
0B0445 DDE1                A  1206    	POP	IX
0B0447 C9                  A  1207    	RET	
                           A  1208    
                           A  1209    
                           A  1210    ;**************************** _update_vdp *****
                           A  1211    ;Name                         Addr/Register   S
                           A  1212    ;_reset                              IMPORT  --
                           A  1213    ;_mos_fclose                         IMPORT  --
                           A  1214    ;_startVDPupdate                     IMPORT  --
                           A  1215    ;_getFileSize                        IMPORT  --
                           A  1216    ;_mos_flseek                         IMPORT  --
                           A  1217    ;_mos_fread                          IMPORT  --
                           A  1218    ;_mos_fopen                          IMPORT  --
                           A  1219    ;___print_sendstring                 IMPORT  --
                           A  1220    ;___print_xputch                     IMPORT    
                           A  1221    ;___print_uputch                     IMPORT  --
                           A  1222    ;_putch                              IMPORT  --
                           A  1223    ;buffer                               IX-40    
                           A  1224    ;filesize                              IX-4    
                           A  1225    ;file                                  IX-1    
                           A  1226    ;filename                              IX+6    
                           A  1227    
                           A  1228    
                           A  1229    ; Stack Frame Size: 49 (bytes)
                           A  1230    ;       Spill Code: 0 (instruction)
                           A  1231    
                           A  1232    
                           A  1233    .ENDFUNC "update_vdp",142,"_update_vdp"
                           A  1234    	SEGMENT STRSECT
0B20DF                     A  1235    L__18:
0B20DF 556E6C6F 636B696E   A  1236    	DB	"Unlocking VDP updater..."
0B20E7 67205644 50207570 
0B20EF 64617465 722E2E2E 
0B20F7 0D0A00              A  1237    	DB	13,10,0
0B20FA                     A  1238    L__20:
0B20FA 20666169 6C656420   A  1239    	DB	" failed - incompatible VDP"
0B2102 2D20696E 636F6D70 
0B210A 61746962 6C652056 
0B2112 4450 
0B2114 0D0A00              A  1240    	DB	13,10,0
0B2117                     A  1241    L__22:
0B2117 4572726F 72206F70   A  1242    	DB	"Error opening \""
0B211F 656E696E 672022 
0B2126 00                  A  1243    	DB	0
0B2127                     A  1244    L__23:
0B2127 22                  A  1245    	DB	"\""
0B2128 0A0D00              A  1246    	DB	10,13,0
0B212B                     A  1247    L__25:
0B212B 46696C65 20646F65   A  1248    	DB	"File does not contain valid ESP32 code
0B2133 73206E6F 7420636F 
0B213B 6E746169 6E207661 
0B2143 6C696420 45535033 
0B214B 3220636F 6465 
0B2151 0D0A00              A  1249    	DB	13,10,0
0B2154                     A  1250    L__26:
0B2154 55706461 74696E67   A  1251    	DB	"Updating VDP firmware"
0B215C 20564450 20666972 
0B2164 6D776172 65 
0B2169 0D0A00              A  1252    	DB	13,10,0
                           A  1253    	SEGMENT CODE
                           A  1254    ;  143	
                           A  1255    ;  144	uint8_t update_mos(char *filename) {
0B0448                     A  1256    _update_mos:
                           A  1257    .DEFINE "_update_mos"
                           A  1258    
                           A  1259    .VALUE _update_mos
                           A  1260    
                           A  1261    .CLASS 2
                           A  1262    
                           A  1263    .TYPE 76
                           A  1264    
                           A  1265    .ENDEF
                           A  1266    
                           A  1267    .BEGFUNC "update_mos",144,"_update_mos"
                           A  1268    
                           A  1269    .LINE 144
                           A  1270    
                           A  1271    .DEFINE "filename"
                           A  1272    
                           A  1273    .CLASS 65
                           A  1274    
                           A  1275    .VALUE 6
                           A  1276    
                           A  1277    .TYPE 34
                           A  1278    
                           A  1279    .ENDEF
                           A  1280    
                           A  1281    .DEFINE "counter"
                           A  1282    
                           A  1283    .CLASS 65
                           A  1284    
                           A  1285    .VALUE -3
                           A  1286    
                           A  1287    .TYPE 14
                           A  1288    
                           A  1289    .ENDEF
                           A  1290    
                           A  1291    .DEFINE "size"
                           A  1292    
                           A  1293    .CLASS 65
                           A  1294    
                           A  1295    .VALUE -6
                           A  1296    
                           A  1297    .TYPE 14
                           A  1298    
                           A  1299    .ENDEF
                           A  1300    
                           A  1301    .DEFINE "response"
                           A  1302    
                           A  1303    .CLASS 65
                           A  1304    
                           A  1305    .VALUE -7
                           A  1306    
                           A  1307    .TYPE 12
                           A  1308    
                           A  1309    .ENDEF
                           A  1310    
                           A  1311    .DEFINE "addressfrom"
                           A  1312    
                           A  1313    .CLASS 65
                           A  1314    
                           A  1315    .VALUE -10
                           A  1316    
                           A  1317    .TYPE 14
                           A  1318    
                           A  1319    .ENDEF
                           A  1320    
                           A  1321    .DEFINE "state"
                           A  1322    
                           A  1323    .CLASS 65
                           A  1324    
                           A  1325    .VALUE -13
                           A  1326    
                           A  1327    .TYPE 4
                           A  1328    
                           A  1329    .ENDEF
                           A  1330    
                           A  1331    .DEFINE "pagemax"
                           A  1332    
                           A  1333    .CLASS 65
                           A  1334    
                           A  1335    .VALUE -16
                           A  1336    
                           A  1337    .TYPE 14
                           A  1338    
                           A  1339    .ENDEF
                           A  1340    
                           A  1341    .DEFINE "ptr"
                           A  1342    
                           A  1343    .CLASS 65
                           A  1344    
                           A  1345    .VALUE -19
                           A  1346    
                           A  1347    .TYPE 34
                           A  1348    
                           A  1349    .ENDEF
                           A  1350    
                           A  1351    .DEFINE "addressto"
                           A  1352    
                           A  1353    .CLASS 65
                           A  1354    
                           A  1355    .VALUE -22
                           A  1356    
                           A  1357    .TYPE 14
                           A  1358    
                           A  1359    .ENDEF
                           A  1360    
                           A  1361    .DEFINE "crcresult"
                           A  1362    
                           A  1363    .CLASS 65
                           A  1364    
                           A  1365    .VALUE -26
                           A  1366    
                           A  1367    .TYPE 15
                           A  1368    
                           A  1369    .ENDEF
                           A  1370    
                           A  1371    .DEFINE "got"
                           A  1372    
                           A  1373    .CLASS 65
                           A  1374    
                           A  1375    .VALUE -29
                           A  1376    
                           A  1377    .TYPE 14
                           A  1378    
                           A  1379    .ENDEF
                           A  1380    
                           A  1381    .DEFINE "value"
                           A  1382    
                           A  1383    .CLASS 65
                           A  1384    
                           A  1385    .VALUE -30
                           A  1386    
                           A  1387    .TYPE 12
                           A  1388    
                           A  1389    .ENDEF
                           A  1390    
                           A  1391    .DEFINE "file"
                           A  1392    
                           A  1393    .CLASS 65
                           A  1394    
                           A  1395    .VALUE -31
                           A  1396    
                           A  1397    .TYPE 12
                           A  1398    
                           A  1399    .ENDEF
                           A  1400    
                           A  1401    .DEFINE "lastpagebytes"
                           A  1402    
                           A  1403    .CLASS 65
                           A  1404    
                           A  1405    .VALUE -34
                           A  1406    
                           A  1407    .TYPE 14
                           A  1408    
                           A  1409    .ENDEF
                           A  1410    
                           A  1411    .DEFINE "crcexpected"
                           A  1412    
                           A  1413    .CLASS 65
                           A  1414    
                           A  1415    .VALUE -38
                           A  1416    
                           A  1417    .TYPE 15
                           A  1418    
                           A  1419    .ENDEF
                           A  1420    
                           A  1421    .DEFINE "crcbackup"
                           A  1422    
                           A  1423    .CLASS 65
                           A  1424    
                           A  1425    .VALUE -45
                           A  1426    
                           A  1427    .TYPE 15
                           A  1428    
                           A  1429    .ENDEF
                           A  1430    
0B0448 DDE5                A  1431    	PUSH	IX
0B044A DD210000 00         A  1432    	LD	IX,0
0B044F DD39                A  1433    	ADD	IX,SP
0B0451 ED22D3              A  1434    	LEA	HL,IX+%FFFFFFD3
0B0454 F9                  A  1435    	LD	SP,HL
                           A  1436    ;  145		UINT32 crcexpected,crcresult,crcbac
                           A  1437    ;  146		UINT24 size = 0;
                           A  1438    .LINE 146
                           A  1439    
0B0455 01000000            A  1440    	LD	BC,0
0B0459 DD0FFA              A  1441    	LD	(IX+%FFFFFFFA),BC
                           A  1442    ;  147		UINT24 got;
                           A  1443    ;  148		UINT8 file;
                           A  1444    ;  149		char* ptr = (char*)BUFFER1;
                           A  1445    .LINE 149
                           A  1446    
0B045C 01000005            A  1447    	LD	BC,327680
0B0460 DD0FED              A  1448    	LD	(IX+%FFFFFFED),BC
                           A  1449    ;  150		UINT8 response;
                           A  1450    ;  151		UINT8 value;
                           A  1451    ;  152		UINT24 counter,pagemax, lastpagebyt
                           A  1452    ;  153		UINT24 addressto,addressfrom;
                           A  1453    ;  154		enum states state;
                           A  1454    ;  155		
                           A  1455    ;  156		printf("Agon MOS firmware upgrade u
                           A  1456    .LINE 156
                           A  1457    
0B0463 01 7F 10 0B         A  1458    	LD	BC,___print_uputch
0B0467 ED43 00 20 0B       A  1459    	LD	(___print_xputch),BC
0B046C 01 6C 21 0B         A  1460    	LD	BC,L__28
0B0470 C5                  A  1461    	PUSH	BC
0B0471 CD 0E 0F 0B         A  1462    	CALL	___print_sendstring
0B0475 C1                  A  1463    	POP	BC
                           A  1464    ;  157		
                           A  1465    ;  158		return 0; // DISABLE FOR NOW
                           A  1466    .LINE 158
                           A  1467    
0B0476 AF                  A  1468    	XOR	A,A
0B0477 C3 C3 09 0B         A  1469    	JR	L_93
                           A  1470    ;  159	
                           A  1471    ;  160		file = mos_fopen(filename, fa_read)
                           A  1472    ;  161		if(!file)
                           A  1473    ;  162		{
                           A  1474    ;  163			printf("Error opening \"%s\"\n\
                           A  1475    ;  164			return EXIT_FILENOTFOUND;
                           A  1476    ;  165		}
                           A  1477    ;  166		
                           A  1478    ;  167		printf("Loading file : %s\n\r",file
                           A  1479    ;  168		printf("File size    : %d byte(s)",
                           A  1480    ;  169	
                           A  1481    ;  170		// Read file to memory
                           A  1482    ;  171		while((got = mos_fread(file, ptr, B
0B047B                     A  1483    L_39:
                           A  1484    .LINE 171
                           A  1485    
                           A  1486    ;  172		{
                           A  1487    ;  173			ptr += got;
                           A  1488    .LINE 173
                           A  1489    
0B047B DD07E3              A  1490    	LD	BC,(IX+%FFFFFFE3)
0B047E DD27ED              A  1491    	LD	HL,(IX+%FFFFFFED)
0B0481 09                  A  1492    	ADD	HL,BC
0B0482 DD2FED              A  1493    	LD	(IX+%FFFFFFED),HL
                           A  1494    ;  174			size += got;
                           A  1495    .LINE 174
                           A  1496    
0B0485 DD07E3              A  1497    	LD	BC,(IX+%FFFFFFE3)
0B0488 DD27FA              A  1498    	LD	HL,(IX+%FFFFFFFA)
0B048B 09                  A  1499    	ADD	HL,BC
0B048C DD2FFA              A  1500    	LD	(IX+%FFFFFFFA),HL
                           A  1501    ;  175			printf("\rFile size    : %d byt
                           A  1502    .LINE 175
                           A  1503    
0B048F 01 7F 10 0B         A  1504    	LD	BC,___print_uputch
0B0493 ED43 00 20 0B       A  1505    	LD	(___print_xputch),BC
0B0498 01 97 21 0B         A  1506    	LD	BC,L__29
0B049C C5                  A  1507    	PUSH	BC
0B049D CD 0E 0F 0B         A  1508    	CALL	___print_sendstring
0B04A1 C1                  A  1509    	POP	BC
0B04A2 DD07FA              A  1510    	LD	BC,(IX+%FFFFFFFA)
0B04A5 AF                  A  1511    	XOR	A,A
0B04A6 C5D1                A  1512    	LD	DE,BC
0B04A8 4F                  A  1513    	LD	C,A
0B04A9 0600                A  1514    	LD	B,%0
0B04AB C5                  A  1515    	PUSH	BC
0B04AC D5                  A  1516    	PUSH	DE
0B04AD CD 05 11 0B         A  1517    	CALL	__u_itoa
0B04B1 C1                  A  1518    	POP	BC
0B04B2 C1                  A  1519    	POP	BC
0B04B3 01 A8 21 0B         A  1520    	LD	BC,L__30
0B04B7 C5                  A  1521    	PUSH	BC
0B04B8 CD 0E 0F 0B         A  1522    	CALL	___print_sendstring
0B04BC C1                  A  1523    	POP	BC
0B04BD 01004000            A  1524    	LD	BC,16384
0B04C1 C5                  A  1525    	PUSH	BC
0B04C2 DD07ED              A  1526    	LD	BC,(IX+%FFFFFFED)
0B04C5 C5                  A  1527    	PUSH	BC
0B04C6 DD4EE1              A  1528    	LD	C,(IX+%FFFFFFE1)
0B04C9 0600                A  1529    	LD	B,%0
0B04CB C5                  A  1530    	PUSH	BC
0B04CC CD E2 0A 0B         A  1531    	CALL	_mos_fread
0B04D0 C1                  A  1532    	POP	BC
0B04D1 C1                  A  1533    	POP	BC
0B04D2 C1                  A  1534    	POP	BC
0B04D3 DD2FE3              A  1535    	LD	(IX+%FFFFFFE3),HL
0B04D6 E5C1                A  1536    	LD	BC,HL
0B04D8 B7                  A  1537    	OR	A,A
0B04D9 ED62                A  1538    	SBC	HL,HL
0B04DB B7                  A  1539    	OR	A,A
0B04DC ED42                A  1540    	SBC	HL,BC
0B04DE 38 9B               A  1541    	JR	C,L_39
                           A  1542    ;  176		}		
                           A  1543    ;  177		mos_fclose(file);	
                           A  1544    .LINE 177
                           A  1545    
0B04E0 DD4EE1              A  1546    	LD	C,(IX+%FFFFFFE1)
0B04E3 0600                A  1547    	LD	B,%0
0B04E5 C5                  A  1548    	PUSH	BC
0B04E6 CD B8 0A 0B         A  1549    	CALL	_mos_fclose
0B04EA C1                  A  1550    	POP	BC
                           A  1551    ;  178		printf("\rFile size    : %d byte(s)
                           A  1552    .LINE 178
                           A  1553    
0B04EB 01 7F 10 0B         A  1554    	LD	BC,___print_uputch
0B04EF ED43 00 20 0B       A  1555    	LD	(___print_xputch),BC
0B04F4 01 B1 21 0B         A  1556    	LD	BC,L__32
0B04F8 C5                  A  1557    	PUSH	BC
0B04F9 CD 0E 0F 0B         A  1558    	CALL	___print_sendstring
0B04FD C1                  A  1559    	POP	BC
0B04FE DD07FA              A  1560    	LD	BC,(IX+%FFFFFFFA)
0B0501 AF                  A  1561    	XOR	A,A
0B0502 C5D1                A  1562    	LD	DE,BC
0B0504 4F                  A  1563    	LD	C,A
0B0505 0600                A  1564    	LD	B,%0
0B0507 C5                  A  1565    	PUSH	BC
0B0508 D5                  A  1566    	PUSH	DE
0B0509 CD 05 11 0B         A  1567    	CALL	__u_itoa
0B050D C1                  A  1568    	POP	BC
0B050E C1                  A  1569    	POP	BC
0B050F 01 C2 21 0B         A  1570    	LD	BC,L__33
0B0513 C5                  A  1571    	PUSH	BC
0B0514 CD 0E 0F 0B         A  1572    	CALL	___print_sendstring
0B0518 C1                  A  1573    	POP	BC
                           A  1574    ;  179		if(size > FLASHSIZE)
                           A  1575    .LINE 179
                           A  1576    
0B0519 DD07FA              A  1577    	LD	BC,(IX+%FFFFFFFA)
0B051C 21000002            A  1578    	LD	HL,131072
0B0520 B7                  A  1579    	OR	A,A
0B0521 ED42                A  1580    	SBC	HL,BC
0B0523 30 18               A  1581    	JR	NC,L_43
                           A  1582    ;  180		{
                           A  1583    ;  181			printf("Too large for 128KB fla
                           A  1584    .LINE 181
                           A  1585    
0B0525 01 7F 10 0B         A  1586    	LD	BC,___print_uputch
0B0529 ED43 00 20 0B       A  1587    	LD	(___print_xputch),BC
0B052E 01 CD 21 0B         A  1588    	LD	BC,L__35
0B0532 C5                  A  1589    	PUSH	BC
0B0533 CD 0E 0F 0B         A  1590    	CALL	___print_sendstring
0B0537 C1                  A  1591    	POP	BC
                           A  1592    ;  182			return 0;
                           A  1593    .LINE 182
                           A  1594    
0B0538 AF                  A  1595    	XOR	A,A
0B0539 C3 C3 09 0B         A  1596    	JR	L_93
                           A  1597    ;  183		}
0B053D                     A  1598    L_43:
                           A  1599    .LINE 183
                           A  1600    
                           A  1601    ;  184	
                           A  1602    ;  185		if(!containsMosHeader((uint8_t *)pt
                           A  1603    .LINE 185
                           A  1604    
0B053D DD07ED              A  1605    	LD	BC,(IX+%FFFFFFED)
0B0540 C5                  A  1606    	PUSH	BC
0B0541 CD 46 02 0B         A  1607    	CALL	_containsMosHeader
0B0545 C1                  A  1608    	POP	BC
0B0546 B7                  A  1609    	OR	A,A
0B0547 20 19               A  1610    	JR	NZ,L_44
                           A  1611    ;  186			printf("File does not contain v
                           A  1612    .LINE 186
                           A  1613    
0B0549 01 7F 10 0B         A  1614    	LD	BC,___print_uputch
0B054D ED43 00 20 0B       A  1615    	LD	(___print_xputch),BC
0B0552 01 F4 21 0B         A  1616    	LD	BC,L__37
0B0556 C5                  A  1617    	PUSH	BC
0B0557 CD 0E 0F 0B         A  1618    	CALL	___print_sendstring
0B055B C1                  A  1619    	POP	BC
                           A  1620    ;  187			return EXIT_INVALIDPARAMETER;
                           A  1621    .LINE 187
                           A  1622    
0B055C 3E13                A  1623    	LD	A,%13
0B055E C3 C3 09 0B         A  1624    	JR	L_93
                           A  1625    ;  188		}
0B0562                     A  1626    L_44:
                           A  1627    .LINE 188
                           A  1628    
                           A  1629    ;  189	
                           A  1630    ;  190		crcexpected = 0;
                           A  1631    .LINE 190
                           A  1632    
0B0562 01000000            A  1633    	LD	BC,0
0B0566 AF                  A  1634    	XOR	A,A
0B0567 DD0FDA              A  1635    	LD	(IX+%FFFFFFDA),BC
0B056A DD77DD              A  1636    	LD	(IX+%FFFFFFDD),A
                           A  1637    ;  191		printf("Testing CRC32: 0x%08lx\n\r"
                           A  1638    .LINE 191
                           A  1639    
0B056D 01 7F 10 0B         A  1640    	LD	BC,___print_uputch
0B0571 ED43 00 20 0B       A  1641    	LD	(___print_xputch),BC
0B0576 01 28 22 0B         A  1642    	LD	BC,L__38
0B057A C5                  A  1643    	PUSH	BC
0B057B CD 0E 0F 0B         A  1644    	CALL	___print_sendstring
0B057F C1                  A  1645    	POP	BC
0B0580 3E08                A  1646    	LD	A,%8
0B0582 32 2D 1A 0B         A  1647    	LD	(___print_fmt+5),A
0B0586 3E40                A  1648    	LD	A,%40
0B0588 32 29 1A 0B         A  1649    	LD	(___print_fmt+1),A
0B058C 3E78                A  1650    	LD	A,%78
0B058E 32 2C 1A 0B         A  1651    	LD	(___print_fmt+4),A
0B0592 01000000            A  1652    	LD	BC,0
0B0596 C5                  A  1653    	PUSH	BC
0B0597 C5                  A  1654    	PUSH	BC
0B0598 CD D8 17 0B         A  1655    	CALL	__u_ultoa
0B059C C1                  A  1656    	POP	BC
0B059D C1                  A  1657    	POP	BC
0B059E 01 3A 22 0B         A  1658    	LD	BC,L__39
0B05A2 C5                  A  1659    	PUSH	BC
0B05A3 CD 0E 0F 0B         A  1660    	CALL	___print_sendstring
0B05A7 C1                  A  1661    	POP	BC
                           A  1662    ;  192		crcresult = crc32((char*)BUFFER1, s
                           A  1663    .LINE 192
                           A  1664    
0B05A8 DD07FA              A  1665    	LD	BC,(IX+%FFFFFFFA)
0B05AB C5                  A  1666    	PUSH	BC
0B05AC 01000005            A  1667    	LD	BC,327680
0B05B0 C5                  A  1668    	PUSH	BC
0B05B1 CD 2E 0E 0B         A  1669    	CALL	_crc32
0B05B5 C1                  A  1670    	POP	BC
0B05B6 C1                  A  1671    	POP	BC
0B05B7 DD2FE6              A  1672    	LD	(IX+%FFFFFFE6),HL
0B05BA DD73E9              A  1673    	LD	(IX+%FFFFFFE9),E
                           A  1674    ;  193		printf("CRC32 result : 0x%08lx\n\r"
                           A  1675    .LINE 193
                           A  1676    
0B05BD 01 7F 10 0B         A  1677    	LD	BC,___print_uputch
0B05C1 ED43 00 20 0B       A  1678    	LD	(___print_xputch),BC
0B05C6 01 3D 22 0B         A  1679    	LD	BC,L__40
0B05CA C5                  A  1680    	PUSH	BC
0B05CB CD 0E 0F 0B         A  1681    	CALL	___print_sendstring
0B05CF C1                  A  1682    	POP	BC
0B05D0 3E08                A  1683    	LD	A,%8
0B05D2 32 2D 1A 0B         A  1684    	LD	(___print_fmt+5),A
0B05D6 3E40                A  1685    	LD	A,%40
0B05D8 32 29 1A 0B         A  1686    	LD	(___print_fmt+1),A
0B05DC 3E78                A  1687    	LD	A,%78
0B05DE 32 2C 1A 0B         A  1688    	LD	(___print_fmt+4),A
0B05E2 DD4EE9              A  1689    	LD	C,(IX+%FFFFFFE9)
0B05E5 0600                A  1690    	LD	B,%0
0B05E7 C5                  A  1691    	PUSH	BC
0B05E8 DD07E6              A  1692    	LD	BC,(IX+%FFFFFFE6)
0B05EB C5                  A  1693    	PUSH	BC
0B05EC CD D8 17 0B         A  1694    	CALL	__u_ultoa
0B05F0 C1                  A  1695    	POP	BC
0B05F1 C1                  A  1696    	POP	BC
0B05F2 01 4F 22 0B         A  1697    	LD	BC,L__41
0B05F6 C5                  A  1698    	PUSH	BC
0B05F7 CD 0E 0F 0B         A  1699    	CALL	___print_sendstring
0B05FB C1                  A  1700    	POP	BC
                           A  1701    ;  194	
                           A  1702    ;  195		if(crcexpected != crcresult)
                           A  1703    .LINE 195
                           A  1704    
0B05FC DD27DA              A  1705    	LD	HL,(IX+%FFFFFFDA)
0B05FF DD5EDD              A  1706    	LD	E,(IX+%FFFFFFDD)
0B0602 DD07E6              A  1707    	LD	BC,(IX+%FFFFFFE6)
0B0605 DD7EE9              A  1708    	LD	A,(IX+%FFFFFFE9)
0B0608 CD 61 17 0B         A  1709    	CALL	__lcmpu
0B060C 28 18               A  1710    	JR	Z,L_46
                           A  1711    ;  196		{
                           A  1712    ;  197			printf("\n\rMismatch - aborting
                           A  1713    .LINE 197
                           A  1714    
0B060E 01 7F 10 0B         A  1715    	LD	BC,___print_uputch
0B0612 ED43 00 20 0B       A  1716    	LD	(___print_xputch),BC
0B0617 01 52 22 0B         A  1717    	LD	BC,L__43
0B061B C5                  A  1718    	PUSH	BC
0B061C CD 0E 0F 0B         A  1719    	CALL	___print_sendstring
0B0620 C1                  A  1720    	POP	BC
                           A  1721    ;  198			return 0;
                           A  1722    .LINE 198
                           A  1723    
0B0621 AF                  A  1724    	XOR	A,A
0B0622 C3 C3 09 0B         A  1725    	JR	L_93
                           A  1726    ;  199		}
0B0626                     A  1727    L_46:
                           A  1728    .LINE 199
                           A  1729    
                           A  1730    ;  200		printf("\n\rOK\n\r\n\r");
                           A  1731    .LINE 200
                           A  1732    
0B0626 01 7F 10 0B         A  1733    	LD	BC,___print_uputch
0B062A ED43 00 20 0B       A  1734    	LD	(___print_xputch),BC
0B062F 01 6A 22 0B         A  1735    	LD	BC,L__44
0B0633 C5                  A  1736    	PUSH	BC
0B0634 CD 0E 0F 0B         A  1737    	CALL	___print_sendstring
0B0638 C1                  A  1738    	POP	BC
                           A  1739    ;  201	
                           A  1740    ;  202		// Ask user to continue
                           A  1741    ;  203		printf("Erase and program flash (y/
                           A  1742    .LINE 203
                           A  1743    
0B0639 01 7F 10 0B         A  1744    	LD	BC,___print_uputch
0B063D ED43 00 20 0B       A  1745    	LD	(___print_xputch),BC
0B0642 01 73 22 0B         A  1746    	LD	BC,L__45
0B0646 C5                  A  1747    	PUSH	BC
0B0647 CD 0E 0F 0B         A  1748    	CALL	___print_sendstring
0B064B C1                  A  1749    	POP	BC
                           A  1750    ;  204		response = 0;
                           A  1751    .LINE 204
                           A  1752    
0B064C DD36F900            A  1753    	LD	(IX+%FFFFFFF9),%0
                           A  1754    ;  205		while((response != 'y') && (respons
                           A  1755    .LINE 205
                           A  1756    
0B0650 18 07               A  1757    	JR	L_48
0B0652                     A  1758    L_49:
0B0652 CD 56 0A 0B         A  1759    	CALL	_getch
0B0656 DD77F9              A  1760    	LD	(IX+%FFFFFFF9),A
0B0659                     A  1761    L_48:
0B0659 DD7EF9              A  1762    	LD	A,(IX+%FFFFFFF9)
0B065C FE79                A  1763    	CP	A,%79
0B065E 28 07               A  1764    	JR	Z,L_91
0B0660 DD7EF9              A  1765    	LD	A,(IX+%FFFFFFF9)
0B0663 FE6E                A  1766    	CP	A,%6E
0B0665 20 EB               A  1767    	JR	NZ,L_49
0B0667                     A  1768    L_91:
                           A  1769    ;  206		if(response == 'y')
                           A  1770    .LINE 206
                           A  1771    
0B0667 DD7EF9              A  1772    	LD	A,(IX+%FFFFFFF9)
0B066A FE79                A  1773    	CP	A,%79
0B066C C2 AF 09 0B         A  1774    	JR	NZ,L_90
                           A  1775    ;  207		{
                           A  1776    ;  208			printf("\r\nBacking up existing
                           A  1777    .LINE 208
                           A  1778    
0B0670 01 7F 10 0B         A  1779    	LD	BC,___print_uputch
0B0674 ED43 00 20 0B       A  1780    	LD	(___print_xputch),BC
0B0679 01 93 22 0B         A  1781    	LD	BC,L__49
0B067D C5                  A  1782    	PUSH	BC
0B067E CD 0E 0F 0B         A  1783    	CALL	___print_sendstring
0B0682 C1                  A  1784    	POP	BC
                           A  1785    ;  209			fastmemcpy(BUFFER2, 0x0, FLASHS
                           A  1786    .LINE 209
                           A  1787    
0B0683 01000002            A  1788    	LD	BC,131072
0B0687 C5                  A  1789    	PUSH	BC
0B0688 01000000            A  1790    	LD	BC,0
0B068C C5                  A  1791    	PUSH	BC
0B068D 01000007            A  1792    	LD	BC,458752
0B0691 C5                  A  1793    	PUSH	BC
0B0692 CD A8 0B 0B         A  1794    	CALL	_fastmemcpy
0B0696 C1                  A  1795    	POP	BC
0B0697 C1                  A  1796    	POP	BC
0B0698 C1                  A  1797    	POP	BC
                           A  1798    ;  210			crcbackup = crc32((char*)0x0, F
                           A  1799    .LINE 210
                           A  1800    
0B0699 01000002            A  1801    	LD	BC,131072
0B069D C5                  A  1802    	PUSH	BC
0B069E 01000000            A  1803    	LD	BC,0
0B06A2 C5                  A  1804    	PUSH	BC
0B06A3 CD 2E 0E 0B         A  1805    	CALL	_crc32
0B06A7 C1                  A  1806    	POP	BC
0B06A8 C1                  A  1807    	POP	BC
0B06A9 DD2FD3              A  1808    	LD	(IX+%FFFFFFD3),HL
0B06AC DD73D6              A  1809    	LD	(IX+%FFFFFFD6),E
                           A  1810    ;  211			
                           A  1811    ;  212			di();							
                           A  1812    .LINE 212
                           A  1813    
0B06AF F3                  A  1814    	di
                           A  1815    ;  213	
                           A  1816    ;  214			// start address in flash
                           A  1817    ;  215			addressto = FLASHSTART;
                           A  1818    .LINE 215
                           A  1819    
0B06B0 01000000            A  1820    	LD	BC,0
0B06B4 DD0FEA              A  1821    	LD	(IX+%FFFFFFEA),BC
                           A  1822    ;  216			addressfrom = BUFFER1;
                           A  1823    .LINE 216
                           A  1824    
0B06B7 01000005            A  1825    	LD	BC,327680
0B06BB DD0FF6              A  1826    	LD	(IX+%FFFFFFF6),BC
                           A  1827    ;  217			
                           A  1828    ;  218			state = firmware;		
                           A  1829    .LINE 218
                           A  1830    
0B06BE 01000000            A  1831    	LD	BC,0
0B06C2 DD0FF3              A  1832    	LD	(IX+%FFFFFFF3),BC
                           A  1833    ;  219			while(1)
0B06C5                     A  1834    L_88:
                           A  1835    .LINE 219
                           A  1836    
                           A  1837    ;  220			{
                           A  1838    ;  221				switch(state)
                           A  1839    .LINE 221
                           A  1840    
0B06C5 DD27F3              A  1841    	LD	HL,(IX+%FFFFFFF3)
0B06C8 CD 1E 17 0B         A  1842    	CALL	__case8D
0B06CC E9                  A  1843    	JP	(HL)
0B06CD                     A  1844    L__50:
0B06CD 0200                A  1845    	DW	2
0B06CF 00                  A  1846    	DB	0
0B06D0 DA060B              A  1847    	DW24	L_50	
                           A  1848    
0B06D3 01                  A  1849    	DB	1
0B06D4 E5060B              A  1850    	DW24	L_51	
                           A  1851    
0B06D7 F7060B              A  1852    	DW24	L_52	
                           A  1853    
                           A  1854    ;  222				{
                           A  1855    ;  223					case firmware:
0B06DA                     A  1856    L_50:
                           A  1857    .LINE 223
                           A  1858    
                           A  1859    ;  224						// start address in
                           A  1860    ;  225						addressfrom = BUFFE
                           A  1861    .LINE 225
                           A  1862    
0B06DA 01000005            A  1863    	LD	BC,327680
0B06DE DD0FF6              A  1864    	LD	(IX+%FFFFFFF6),BC
                           A  1865    ;  226						break;
                           A  1866    .LINE 226
                           A  1867    
0B06E1 C3 77 07 0B         A  1868    	JR	L_58
                           A  1869    ;  227					case recover:
0B06E5                     A  1870    L_51:
                           A  1871    .LINE 227
                           A  1872    
                           A  1873    ;  228						// start address in
                           A  1874    ;  229						addressfrom = BUFFE
                           A  1875    .LINE 229
                           A  1876    
0B06E5 01000007            A  1877    	LD	BC,458752
0B06E9 DD0FF6              A  1878    	LD	(IX+%FFFFFFF6),BC
                           A  1879    ;  230						size = FLASHSIZE;	
                           A  1880    .LINE 230
                           A  1881    
0B06EC 01000002            A  1882    	LD	BC,131072
0B06F0 DD0FFA              A  1883    	LD	(IX+%FFFFFFFA),BC
                           A  1884    ;  231						break;
                           A  1885    .LINE 231
                           A  1886    
0B06F3 C3 77 07 0B         A  1887    	JR	L_58
                           A  1888    ;  232					default:
0B06F7                     A  1889    L_52:
                           A  1890    .LINE 232
                           A  1891    
                           A  1892    ;  233						// RESET SYSTEM
                           A  1893    ;  234						printf("\r\n");
                           A  1894    .LINE 234
                           A  1895    
0B06F7 01 7F 10 0B         A  1896    	LD	BC,___print_uputch
0B06FB ED43 00 20 0B       A  1897    	LD	(___print_xputch),BC
0B0700 01 B6 22 0B         A  1898    	LD	BC,L__51
0B0704 C5                  A  1899    	PUSH	BC
0B0705 CD 0E 0F 0B         A  1900    	CALL	___print_sendstring
0B0709 C1                  A  1901    	POP	BC
                           A  1902    ;  235						for(counter = 5; co
                           A  1903    .LINE 235
                           A  1904    
0B070A 01050000            A  1905    	LD	BC,5
0B070E DD0FFD              A  1906    	LD	(IX+%FFFFFFFD),BC
0B0711 18 41               A  1907    	JR	L_56
0B0713                     A  1908    L_54:
                           A  1909    ;  236						{
                           A  1910    ;  237							printf("\rReset
                           A  1911    .LINE 237
                           A  1912    
0B0713 01 7F 10 0B         A  1913    	LD	BC,___print_uputch
0B0717 ED43 00 20 0B       A  1914    	LD	(___print_xputch),BC
0B071C 01 B9 22 0B         A  1915    	LD	BC,L__52
0B0720 C5                  A  1916    	PUSH	BC
0B0721 CD 0E 0F 0B         A  1917    	CALL	___print_sendstring
0B0725 C1                  A  1918    	POP	BC
0B0726 DD07FD              A  1919    	LD	BC,(IX+%FFFFFFFD)
0B0729 AF                  A  1920    	XOR	A,A
0B072A C5D1                A  1921    	LD	DE,BC
0B072C 4F                  A  1922    	LD	C,A
0B072D 0600                A  1923    	LD	B,%0
0B072F C5                  A  1924    	PUSH	BC
0B0730 D5                  A  1925    	PUSH	DE
0B0731 CD 05 11 0B         A  1926    	CALL	__u_itoa
0B0735 C1                  A  1927    	POP	BC
0B0736 C1                  A  1928    	POP	BC
0B0737 01730000            A  1929    	LD	BC,115
0B073B C5                  A  1930    	PUSH	BC
0B073C CD 7F 10 0B         A  1931    	CALL	___print_uputch
0B0740 C1                  A  1932    	POP	BC
                           A  1933    ;  238							delayms(1000);
                           A  1934    .LINE 238
                           A  1935    
0B0741 01E80300            A  1936    	LD	BC,1000
0B0745 C5                  A  1937    	PUSH	BC
0B0746 CD 48 0C 0B         A  1938    	CALL	_delayms
0B074A C1                  A  1939    	POP	BC
0B074B DD31FD              A  1940    	LD	IY,(IX+%FFFFFFFD)
0B074E ED33FF              A  1941    	LEA	IY,IY+%FFFFFFFF
0B0751 DD3EFD              A  1942    	LD	(IX+%FFFFFFFD),IY
                           A  1943    ;  239						}
0B0754                     A  1944    L_56:
                           A  1945    .LINE 239
                           A  1946    
0B0754 DD07FD              A  1947    	LD	BC,(IX+%FFFFFFFD)
0B0757 B7                  A  1948    	OR	A,A
0B0758 ED62                A  1949    	SBC	HL,HL
0B075A B7                  A  1950    	OR	A,A
0B075B ED42                A  1951    	SBC	HL,BC
0B075D 38 B4               A  1952    	JR	C,L_54
                           A  1953    ;  240						putch(12);
                           A  1954    .LINE 240
                           A  1955    
0B075F 010C0000            A  1956    	LD	BC,12
0B0763 C5                  A  1957    	PUSH	BC
0B0764 CD E5 00 0B         A  1958    	CALL	_putch
0B0768 C1                  A  1959    	POP	BC
                           A  1960    ;  241						delayms(500);
                           A  1961    .LINE 241
                           A  1962    
0B0769 01F40100            A  1963    	LD	BC,500
0B076D C5                  A  1964    	PUSH	BC
0B076E CD 48 0C 0B         A  1965    	CALL	_delayms
0B0772 C1                  A  1966    	POP	BC
                           A  1967    ;  242						reset();
                           A  1968    .LINE 242
                           A  1969    
0B0773 CD A6 0B 0B         A  1970    	CALL	_reset
                           A  1971    ;  243				}
0B0777                     A  1972    L_58:
                           A  1973    .LINE 243
                           A  1974    
                           A  1975    ;  244		
                           A  1976    ;  245				// Unprotect and erase flas
                           A  1977    ;  246				printf("\r\nErasing flash..
                           A  1978    .LINE 246
                           A  1979    
0B0777 01 7F 10 0B         A  1980    	LD	BC,___print_uputch
0B077B ED43 00 20 0B       A  1981    	LD	(___print_xputch),BC
0B0780 01 C4 22 0B         A  1982    	LD	BC,L__54
0B0784 C5                  A  1983    	PUSH	BC
0B0785 CD 0E 0F 0B         A  1984    	CALL	___print_sendstring
0B0789 C1                  A  1985    	POP	BC
                           A  1986    ;  247				enableFlashKeyRegister();	
                           A  1987    .LINE 247
                           A  1988    
0B078A CD 7B 0B 0B         A  1989    	CALL	_enableFlashKeyRegister
                           A  1990    ;  248				FLASH_PROT = 0;				
                           A  1991    .LINE 248
                           A  1992    
0B078E AF                  A  1993    	XOR	A,A
0B078F ED39FA              A  1994    	OUT0	(250),A
                           A  1995    ;  249				enableFlashKeyRegister();	
                           A  1996    .LINE 249
                           A  1997    
0B0792 CD 7B 0B 0B         A  1998    	CALL	_enableFlashKeyRegister
                           A  1999    ;  250				FLASH_FDIV = 0x5F;			
                           A  2000    .LINE 250
                           A  2001    
0B0796 3E5F                A  2002    	LD	A,%5F
0B0798 ED39F9              A  2003    	OUT0	(249),A
                           A  2004    ;  251				
                           A  2005    ;  252				for(counter = 0; counter < 
                           A  2006    .LINE 252
                           A  2007    
0B079B 01000000            A  2008    	LD	BC,0
0B079F DD0FFD              A  2009    	LD	(IX+%FFFFFFFD),BC
0B07A2 18 1C               A  2010    	JR	L_64
0B07A4                     A  2011    L_62:
                           A  2012    ;  253				{
                           A  2013    ;  254					FLASH_PAGE = counter;
                           A  2014    .LINE 254
                           A  2015    
0B07A4 DD7EFD              A  2016    	LD	A,(IX+%FFFFFFFD)
0B07A7 ED39FC              A  2017    	OUT0	(252),A
                           A  2018    ;  255					FLASH_PGCTL = 0x02;		
                           A  2019    .LINE 255
                           A  2020    
0B07AA 3E02                A  2021    	LD	A,%2
0B07AC ED39FF              A  2022    	OUT0	(255),A
                           A  2023    ;  256	
                           A  2024    ;  257					do
0B07AF                     A  2025    L_60:
                           A  2026    .LINE 257
                           A  2027    
                           A  2028    ;  258					{
                           A  2029    ;  259						value = FLASH_PGCTL
                           A  2030    .LINE 259
                           A  2031    
0B07AF ED38FF              A  2032    	IN0	A,(255)
0B07B2 DD77E2              A  2033    	LD	(IX+%FFFFFFE2),A
                           A  2034    ;  260					}
                           A  2035    ;  261					while(value & 0x02);// 
                           A  2036    .LINE 261
                           A  2037    
0B07B5 E602                A  2038    	AND	A,%2
0B07B7 20 F6               A  2039    	JR	NZ,L_60
0B07B9 DD07FD              A  2040    	LD	BC,(IX+%FFFFFFFD)
0B07BC 03                  A  2041    	INC	BC
0B07BD DD0FFD              A  2042    	LD	(IX+%FFFFFFFD),BC
                           A  2043    ;  262				}
0B07C0                     A  2044    L_64:
                           A  2045    .LINE 262
                           A  2046    
0B07C0 01800000            A  2047    	LD	BC,128
0B07C4 DD27FD              A  2048    	LD	HL,(IX+%FFFFFFFD)
0B07C7 B7                  A  2049    	OR	A,A
0B07C8 ED42                A  2050    	SBC	HL,BC
0B07CA 38 D8               A  2051    	JR	C,L_62
                           A  2052    ;  263				
                           A  2053    ;  264				printf("\r\nWriting new fir
                           A  2054    .LINE 264
                           A  2055    
0B07CC 01 7F 10 0B         A  2056    	LD	BC,___print_uputch
0B07D0 ED43 00 20 0B       A  2057    	LD	(___print_xputch),BC
0B07D5 01 D8 22 0B         A  2058    	LD	BC,L__57
0B07D9 C5                  A  2059    	PUSH	BC
0B07DA CD 0E 0F 0B         A  2060    	CALL	___print_sendstring
0B07DE C1                  A  2061    	POP	BC
                           A  2062    ;  265				
                           A  2063    ;  266				// determine number of page
                           A  2064    ;  267				pagemax = size/PAGESIZE;
                           A  2065    .LINE 267
                           A  2066    
0B07DF DD27FA              A  2067    	LD	HL,(IX+%FFFFFFFA)
0B07E2 3E0A                A  2068    	LD	A,%A
0B07E4 CD F2 16 0B         A  2069    	CALL	__ishru_b
0B07E8 DD2FF0              A  2070    	LD	(IX+%FFFFFFF0),HL
                           A  2071    ;  268				if(size%PAGESIZE) // last p
                           A  2072    .LINE 268
                           A  2073    
0B07EB 01FF0300            A  2074    	LD	BC,1023
0B07EF DD27FA              A  2075    	LD	HL,(IX+%FFFFFFFA)
0B07F2 CD 84 17 0B         A  2076    	CALL	__iand
0B07F6 DD2FD7              A  2077    	LD	(IX+%FFFFFFD7),HL
0B07F9 CD 3C 14 0B         A  2078    	CALL	__icmpzero
0B07FD 28 0F               A  2079    	JR	Z,L_67
                           A  2080    ;  269				{
                           A  2081    ;  270					pagemax += 1;
                           A  2082    .LINE 270
                           A  2083    
0B07FF DD07F0              A  2084    	LD	BC,(IX+%FFFFFFF0)
0B0802 03                  A  2085    	INC	BC
0B0803 DD0FF0              A  2086    	LD	(IX+%FFFFFFF0),BC
                           A  2087    ;  271					lastpagebytes = size%PA
                           A  2088    .LINE 271
                           A  2089    
0B0806 DD07D7              A  2090    	LD	BC,(IX+%FFFFFFD7)
0B0809 DD0FDE              A  2091    	LD	(IX+%FFFFFFDE),BC
                           A  2092    ;  272				}
                           A  2093    ;  273				else lastpagebytes = PAGESI
                           A  2094    .LINE 273
                           A  2095    
0B080C 18 07               A  2096    	JR	L_75
0B080E                     A  2097    L_67:
0B080E 01000400            A  2098    	LD	BC,1024
0B0812 DD0FDE              A  2099    	LD	(IX+%FFFFFFDE),BC
0B0815                     A  2100    L_75:
                           A  2101    ;  274				
                           A  2102    ;  275				// write out each page to f
                           A  2103    ;  276				for(counter = 0; counter < 
                           A  2104    .LINE 276
                           A  2105    
0B0815 01000000            A  2106    	LD	BC,0
0B0819 DD0FFD              A  2107    	LD	(IX+%FFFFFFFD),BC
0B081C C3 C8 08 0B         A  2108    	JR	L_74
0B0820                     A  2109    L_72:
                           A  2110    ;  277				{
                           A  2111    ;  278					printf("\rWriting flash
                           A  2112    .LINE 278
                           A  2113    
0B0820 01 7F 10 0B         A  2114    	LD	BC,___print_uputch
0B0824 ED43 00 20 0B       A  2115    	LD	(___print_xputch),BC
0B0829 01 F4 22 0B         A  2116    	LD	BC,L__59
0B082D C5                  A  2117    	PUSH	BC
0B082E CD 0E 0F 0B         A  2118    	CALL	___print_sendstring
0B0832 C1                  A  2119    	POP	BC
0B0833 3E03                A  2120    	LD	A,%3
0B0835 32 2D 1A 0B         A  2121    	LD	(___print_fmt+5),A
0B0839 3E40                A  2122    	LD	A,%40
0B083B 32 29 1A 0B         A  2123    	LD	(___print_fmt+1),A
0B083F DD07FD              A  2124    	LD	BC,(IX+%FFFFFFFD)
0B0842 03                  A  2125    	INC	BC
0B0843 AF                  A  2126    	XOR	A,A
0B0844 C5D1                A  2127    	LD	DE,BC
0B0846 4F                  A  2128    	LD	C,A
0B0847 0600                A  2129    	LD	B,%0
0B0849 C5                  A  2130    	PUSH	BC
0B084A D5                  A  2131    	PUSH	DE
0B084B CD 05 11 0B         A  2132    	CALL	__u_itoa
0B084F C1                  A  2133    	POP	BC
0B0850 C1                  A  2134    	POP	BC
0B0851 012F0000            A  2135    	LD	BC,47
0B0855 C5                  A  2136    	PUSH	BC
0B0856 CD 7F 10 0B         A  2137    	CALL	___print_uputch
0B085A C1                  A  2138    	POP	BC
0B085B 3E03                A  2139    	LD	A,%3
0B085D 32 2D 1A 0B         A  2140    	LD	(___print_fmt+5),A
0B0861 3E40                A  2141    	LD	A,%40
0B0863 32 29 1A 0B         A  2142    	LD	(___print_fmt+1),A
0B0867 DD07F0              A  2143    	LD	BC,(IX+%FFFFFFF0)
0B086A AF                  A  2144    	XOR	A,A
0B086B C5D1                A  2145    	LD	DE,BC
0B086D 4F                  A  2146    	LD	C,A
0B086E 0600                A  2147    	LD	B,%0
0B0870 C5                  A  2148    	PUSH	BC
0B0871 D5                  A  2149    	PUSH	DE
0B0872 CD 05 11 0B         A  2150    	CALL	__u_itoa
0B0876 C1                  A  2151    	POP	BC
0B0877 C1                  A  2152    	POP	BC
                           A  2153    ;  279					
                           A  2154    ;  280					if(counter == (pagemax 
                           A  2155    .LINE 280
                           A  2156    
0B0878 DD31F0              A  2157    	LD	IY,(IX+%FFFFFFF0)
0B087B ED23FF              A  2158    	LEA	HL,IY+%FFFFFFFF
0B087E DD07FD              A  2159    	LD	BC,(IX+%FFFFFFFD)
0B0881 B7                  A  2160    	OR	A,A
0B0882 ED42                A  2161    	SBC	HL,BC
0B0884 20 15               A  2162    	JR	NZ,L_70
                           A  2163    ;  281						fastmemcpy(addresst
                           A  2164    .LINE 281
                           A  2165    
0B0886 DD07DE              A  2166    	LD	BC,(IX+%FFFFFFDE)
0B0889 C5                  A  2167    	PUSH	BC
0B088A DD07F6              A  2168    	LD	BC,(IX+%FFFFFFF6)
0B088D C5                  A  2169    	PUSH	BC
0B088E DD07EA              A  2170    	LD	BC,(IX+%FFFFFFEA)
0B0891 C5                  A  2171    	PUSH	BC
0B0892 CD A8 0B 0B         A  2172    	CALL	_fastmemcpy
0B0896 C1                  A  2173    	POP	BC
0B0897 C1                  A  2174    	POP	BC
0B0898 C1                  A  2175    	POP	BC
                           A  2176    ;  282						//printf("Fake copy
                           A  2177    ;  283					else 
                           A  2178    .LINE 283
                           A  2179    
0B0899 18 14               A  2180    	JR	L_71
0B089B                     A  2181    L_70:
                           A  2182    ;  284						fastmemcpy(addresst
                           A  2183    .LINE 284
                           A  2184    
0B089B 01000400            A  2185    	LD	BC,1024
0B089F C5                  A  2186    	PUSH	BC
0B08A0 DD07F6              A  2187    	LD	BC,(IX+%FFFFFFF6)
0B08A3 C5                  A  2188    	PUSH	BC
0B08A4 DD07EA              A  2189    	LD	BC,(IX+%FFFFFFEA)
0B08A7 C5                  A  2190    	PUSH	BC
0B08A8 CD A8 0B 0B         A  2191    	CALL	_fastmemcpy
0B08AC C1                  A  2192    	POP	BC
0B08AD C1                  A  2193    	POP	BC
0B08AE C1                  A  2194    	POP	BC
0B08AF                     A  2195    L_71:
                           A  2196    ;  285						//printf("Fake copy
                           A  2197    ;  286				
                           A  2198    ;  287					addressto += PAGESIZE;
                           A  2199    .LINE 287
                           A  2200    
0B08AF 01000400            A  2201    	LD	BC,1024
0B08B3 DD27EA              A  2202    	LD	HL,(IX+%FFFFFFEA)
0B08B6 09                  A  2203    	ADD	HL,BC
0B08B7 DD2FEA              A  2204    	LD	(IX+%FFFFFFEA),HL
                           A  2205    ;  288					addressfrom += PAGESIZE
                           A  2206    .LINE 288
                           A  2207    
0B08BA DD27F6              A  2208    	LD	HL,(IX+%FFFFFFF6)
0B08BD 09                  A  2209    	ADD	HL,BC
0B08BE DD2FF6              A  2210    	LD	(IX+%FFFFFFF6),HL
0B08C1 DD07FD              A  2211    	LD	BC,(IX+%FFFFFFFD)
0B08C4 03                  A  2212    	INC	BC
0B08C5 DD0FFD              A  2213    	LD	(IX+%FFFFFFFD),BC
                           A  2214    ;  289				}
0B08C8                     A  2215    L_74:
                           A  2216    .LINE 289
                           A  2217    
0B08C8 DD07F0              A  2218    	LD	BC,(IX+%FFFFFFF0)
0B08CB DD27FD              A  2219    	LD	HL,(IX+%FFFFFFFD)
0B08CE B7                  A  2220    	OR	A,A
0B08CF ED42                A  2221    	SBC	HL,BC
0B08D1 DA 20 08 0B         A  2222    	JR	C,L_72
                           A  2223    ;  290				lockFlashKeyRegister();	// 
                           A  2224    .LINE 290
                           A  2225    
0B08D5 CD 93 0B 0B         A  2226    	CALL	_lockFlashKeyRegister
                           A  2227    ;  291				printf("\r\n");
                           A  2228    .LINE 291
                           A  2229    
0B08D9 01 7F 10 0B         A  2230    	LD	BC,___print_uputch
0B08DD ED43 00 20 0B       A  2231    	LD	(___print_xputch),BC
0B08E2 01 09 23 0B         A  2232    	LD	BC,L__62
0B08E6 C5                  A  2233    	PUSH	BC
0B08E7 CD 0E 0F 0B         A  2234    	CALL	___print_sendstring
0B08EB C1                  A  2235    	POP	BC
                           A  2236    ;  292				
                           A  2237    ;  293				//Verify correct CRC in fla
                           A  2238    ;  294				printf("Verifying flash che
                           A  2239    .LINE 294
                           A  2240    
0B08EC 01 7F 10 0B         A  2241    	LD	BC,___print_uputch
0B08F0 ED43 00 20 0B       A  2242    	LD	(___print_xputch),BC
0B08F5 01 0C 23 0B         A  2243    	LD	BC,L__63
0B08F9 C5                  A  2244    	PUSH	BC
0B08FA CD 0E 0F 0B         A  2245    	CALL	___print_sendstring
0B08FE C1                  A  2246    	POP	BC
                           A  2247    ;  295				crcresult = crc32((char*)FL
                           A  2248    .LINE 295
                           A  2249    
0B08FF DD07FA              A  2250    	LD	BC,(IX+%FFFFFFFA)
0B0902 C5                  A  2251    	PUSH	BC
0B0903 01000000            A  2252    	LD	BC,0
0B0907 C5                  A  2253    	PUSH	BC
0B0908 CD 2E 0E 0B         A  2254    	CALL	_crc32
0B090C C1                  A  2255    	POP	BC
0B090D C1                  A  2256    	POP	BC
0B090E DD2FE6              A  2257    	LD	(IX+%FFFFFFE6),HL
0B0911 DD73E9              A  2258    	LD	(IX+%FFFFFFE9),E
                           A  2259    ;  296	
                           A  2260    ;  297				if(state == recover) crcexp
                           A  2261    .LINE 297
                           A  2262    
0B0914 01010000            A  2263    	LD	BC,1
0B0918 DD27F3              A  2264    	LD	HL,(IX+%FFFFFFF3)
0B091B B7                  A  2265    	OR	A,A
0B091C ED42                A  2266    	SBC	HL,BC
0B091E 20 0C               A  2267    	JR	NZ,L_86
0B0920 DD07D3              A  2268    	LD	BC,(IX+%FFFFFFD3)
0B0923 DD7ED6              A  2269    	LD	A,(IX+%FFFFFFD6)
0B0926 DD0FDA              A  2270    	LD	(IX+%FFFFFFDA),BC
0B0929 DD77DD              A  2271    	LD	(IX+%FFFFFFDD),A
0B092C                     A  2272    L_86:
                           A  2273    ;  298				
                           A  2274    ;  299				if(crcresult == crcexpected
                           A  2275    .LINE 299
                           A  2276    
0B092C DD27E6              A  2277    	LD	HL,(IX+%FFFFFFE6)
0B092F DD5EE9              A  2278    	LD	E,(IX+%FFFFFFE9)
0B0932 DD07DA              A  2279    	LD	BC,(IX+%FFFFFFDA)
0B0935 DD7EDD              A  2280    	LD	A,(IX+%FFFFFFDD)
0B0938 CD 61 17 0B         A  2281    	CALL	__lcmpu
0B093C 20 1E               A  2282    	JR	NZ,L_85
                           A  2283    ;  300				{
                           A  2284    ;  301					printf("- OK\r\n");
                           A  2285    .LINE 301
                           A  2286    
0B093E 01 7F 10 0B         A  2287    	LD	BC,___print_uputch
0B0942 ED43 00 20 0B       A  2288    	LD	(___print_xputch),BC
0B0947 01 29 23 0B         A  2289    	LD	BC,L__66
0B094B C5                  A  2290    	PUSH	BC
0B094C CD 0E 0F 0B         A  2291    	CALL	___print_sendstring
0B0950 C1                  A  2292    	POP	BC
                           A  2293    ;  302					state = systemreset;
                           A  2294    .LINE 302
                           A  2295    
0B0951 01020000            A  2296    	LD	BC,2
0B0955 DD0FF3              A  2297    	LD	(IX+%FFFFFFF3),BC
                           A  2298    ;  303				}
                           A  2299    ;  304				else // CRC Failure - next 
                           A  2300    .LINE 304
                           A  2301    
0B0958 C3 C5 06 0B         A  2302    	JR	L_88
0B095C                     A  2303    L_85:
                           A  2304    ;  305				{	 // User interaction no
                           A  2305    ;  306					switch(state)
                           A  2306    .LINE 306
                           A  2307    
0B095C DD27F3              A  2308    	LD	HL,(IX+%FFFFFFF3)
0B095F CD 1E 17 0B         A  2309    	CALL	__case8D
0B0963 E9                  A  2310    	JP	(HL)
0B0964                     A  2311    L__67:
0B0964 0200                A  2312    	DW	2
0B0966 00                  A  2313    	DB	0
0B0967 71090B              A  2314    	DW24	L_78	
                           A  2315    
0B096A 01                  A  2316    	DB	1
0B096B 8F090B              A  2317    	DW24	L_79	
                           A  2318    
0B096E A4090B              A  2319    	DW24	L_82	
                           A  2320    
                           A  2321    ;  307					{
                           A  2322    ;  308						case firmware:
0B0971                     A  2323    L_78:
                           A  2324    .LINE 308
                           A  2325    
                           A  2326    ;  309							printf("\r\nErr
                           A  2327    .LINE 309
                           A  2328    
0B0971 01 7F 10 0B         A  2329    	LD	BC,___print_uputch
0B0975 ED43 00 20 0B       A  2330    	LD	(___print_xputch),BC
0B097A 01 30 23 0B         A  2331    	LD	BC,L__68
0B097E C5                  A  2332    	PUSH	BC
0B097F CD 0E 0F 0B         A  2333    	CALL	___print_sendstring
0B0983 C1                  A  2334    	POP	BC
                           A  2335    ;  310							state = recover
                           A  2336    .LINE 310
                           A  2337    
0B0984 01010000            A  2338    	LD	BC,1
0B0988 DD0FF3              A  2339    	LD	(IX+%FFFFFFF3),BC
                           A  2340    ;  311							break;
                           A  2341    .LINE 311
                           A  2342    
0B098B C3 C5 06 0B         A  2343    	JR	L_88
                           A  2344    ;  312						case recover:
0B098F                     A  2345    L_79:
                           A  2346    .LINE 312
                           A  2347    
                           A  2348    ;  313							printf("\r\nErr
                           A  2349    .LINE 313
                           A  2350    
0B098F 01 7F 10 0B         A  2351    	LD	BC,___print_uputch
0B0993 ED43 00 20 0B       A  2352    	LD	(___print_xputch),BC
0B0998 01 7D 23 0B         A  2353    	LD	BC,L__69
0B099C C5                  A  2354    	PUSH	BC
0B099D CD 0E 0F 0B         A  2355    	CALL	___print_sendstring
0B09A1 C1                  A  2356    	POP	BC
                           A  2357    ;  314							while(1); // no
0B09A2                     A  2358    L_81:
                           A  2359    .LINE 314
                           A  2360    
0B09A2 18 FE               A  2361    	JR	L_81
                           A  2362    ;  315						default:
0B09A4                     A  2363    L_82:
                           A  2364    .LINE 315
                           A  2365    
                           A  2366    ;  316							state = recover
                           A  2367    .LINE 316
                           A  2368    
0B09A4 01010000            A  2369    	LD	BC,1
0B09A8 DD0FF3              A  2370    	LD	(IX+%FFFFFFF3),BC
0B09AB C3 C5 06 0B         A  2371    	JR	L_88
                           A  2372    ;  317					}
                           A  2373    ;  318				}
                           A  2374    ;  319			}		
                           A  2375    ;  320		}
                           A  2376    ;  321		else printf("\n\rUser abort\n\r");
0B09AF                     A  2377    L_90:
                           A  2378    .LINE 321
                           A  2379    
0B09AF 01 7F 10 0B         A  2380    	LD	BC,___print_uputch
0B09B3 ED43 00 20 0B       A  2381    	LD	(___print_xputch),BC
0B09B8 01 BA 23 0B         A  2382    	LD	BC,L__70
0B09BC C5                  A  2383    	PUSH	BC
0B09BD CD 0E 0F 0B         A  2384    	CALL	___print_sendstring
0B09C1 C1                  A  2385    	POP	BC
                           A  2386    ;  322		
                           A  2387    ;  323		return 0;
                           A  2388    .LINE 323
                           A  2389    
0B09C2 AF                  A  2390    	XOR	A,A
                           A  2391    ;  324	}
0B09C3                     A  2392    L_93:
                           A  2393    .LINE 324
                           A  2394    
0B09C3 DDF9                A  2395    	LD	SP,IX
0B09C5 DDE1                A  2396    	POP	IX
0B09C7 C9                  A  2397    	RET	
                           A  2398    
                           A  2399    
                           A  2400    ;**************************** _update_mos *****
                           A  2401    ;Name                         Addr/Register   S
                           A  2402    ;_lockFlashKeyRegister               IMPORT  --
                           A  2403    ;_enableFlashKeyRegister             IMPORT  --
                           A  2404    ;_reset                              IMPORT  --
                           A  2405    ;_putch                              IMPORT  --
                           A  2406    ;_delayms                            IMPORT  --
                           A  2407    ;_fastmemcpy                         IMPORT  --
                           A  2408    ;_getch                              IMPORT  --
                           A  2409    ;_crc32                              IMPORT  --
                           A  2410    ;__u_ultoa                           IMPORT  --
                           A  2411    ;___print_fmt                        IMPORT    
                           A  2412    ;_mos_fclose                         IMPORT  --
                           A  2413    ;_mos_fread                          IMPORT  --
                           A  2414    ;__u_itoa                            IMPORT  --
                           A  2415    ;___print_sendstring                 IMPORT  --
                           A  2416    ;___print_xputch                     IMPORT    
                           A  2417    ;___print_uputch                     IMPORT  --
                           A  2418    ;crcbackup                            IX-45    
                           A  2419    ;G_0                                  IX-41    
                           A  2420    ;crcexpected                          IX-38    
                           A  2421    ;lastpagebytes                        IX-34    
                           A  2422    ;file                                 IX-31    
                           A  2423    ;value                                IX-30    
                           A  2424    ;got                                  IX-29    
                           A  2425    ;crcresult                            IX-26    
                           A  2426    ;addressto                            IX-22    
                           A  2427    ;ptr                                  IX-19    
                           A  2428    ;pagemax                              IX-16    
                           A  2429    ;state                                IX-13    
                           A  2430    ;addressfrom                          IX-10    
                           A  2431    ;response                              IX-7    
                           A  2432    ;size                                  IX-6    
                           A  2433    ;counter                               IX-3    
                           A  2434    ;filename                              IX+6    
                           A  2435    
                           A  2436    
                           A  2437    ; Stack Frame Size: 54 (bytes)
                           A  2438    ;       Spill Code: 0 (instruction)
                           A  2439    
                           A  2440    
                           A  2441    .ENDFUNC "update_mos",324,"_update_mos"
                           A  2442    	SEGMENT STRSECT
0B216C                     A  2443    L__28:
0B216C 41676F6E 204D4F53   A  2444    	DB	"Agon MOS firmware upgrade utility v1.4
0B2174 20666972 6D776172 
0B217C 65207570 67726164 
0B2184 65207574 696C6974 
0B218C 79207631 2E34 
0B2192 0A0D0A0D 00         A  2445    	DB	10,13,10,13,0
0B2197                     A  2446    L__29:
0B2197 0D                  A  2447    	DB	13
0B2198 46696C65 2073697A   A  2448    	DB	"File size    : "
0B21A0 65202020 203A20 
0B21A7 00                  A  2449    	DB	0
0B21A8                     A  2450    L__30:
0B21A8 20627974 65287329   A  2451    	DB	" byte(s)"
0B21B0 00                  A  2452    	DB	0
0B21B1                     A  2453    L__32:
0B21B1 0D                  A  2454    	DB	13
0B21B2 46696C65 2073697A   A  2455    	DB	"File size    : "
0B21BA 65202020 203A20 
0B21C1 00                  A  2456    	DB	0
0B21C2                     A  2457    L__33:
0B21C2 20627974 65287329   A  2458    	DB	" byte(s)"
0B21CA 0A0D00              A  2459    	DB	10,13,0
0B21CD                     A  2460    L__35:
0B21CD 546F6F20 6C617267   A  2461    	DB	"Too large for 128KB flash - aborting"
0B21D5 6520666F 72203132 
0B21DD 384B4220 666C6173 
0B21E5 68202D20 61626F72 
0B21ED 74696E67 
0B21F1 0D0A00              A  2462    	DB	13,10,0
0B21F4                     A  2463    L__37:
0B21F4 46696C65 20646F65   A  2464    	DB	"File does not contain valid MOS ez80 s
0B21FC 73206E6F 7420636F 
0B2204 6E746169 6E207661 
0B220C 6C696420 4D4F5320 
0B2214 657A3830 20737461 
0B221C 72747570 20636F64 
0B2224 65 
0B2225 0D0A00              A  2465    	DB	13,10,0
0B2228                     A  2466    L__38:
0B2228 54657374 696E6720   A  2467    	DB	"Testing CRC32: 0x"
0B2230 43524333 323A2030 
0B2238 78 
0B2239 00                  A  2468    	DB	0
0B223A                     A  2469    L__39:
0B223A 0A0D00              A  2470    	DB	10,13,0
0B223D                     A  2471    L__40:
0B223D 43524333 32207265   A  2472    	DB	"CRC32 result : 0x"
0B2245 73756C74 203A2030 
0B224D 78 
0B224E 00                  A  2473    	DB	0
0B224F                     A  2474    L__41:
0B224F 0A0D00              A  2475    	DB	10,13,0
0B2252                     A  2476    L__43:
0B2252 0A0D                A  2477    	DB	10,13
0B2254 4D69736D 61746368   A  2478    	DB	"Mismatch - aborting"
0B225C 202D2061 626F7274 
0B2264 696E67 
0B2267 0A0D00              A  2479    	DB	10,13,0
0B226A                     A  2480    L__44:
0B226A 0A0D                A  2481    	DB	10,13
0B226C 4F4B                A  2482    	DB	"OK"
0B226E 0A0D0A0D 00         A  2483    	DB	10,13,10,13,0
0B2273                     A  2484    L__45:
0B2273 45726173 6520616E   A  2485    	DB	"Erase and program flash (y/n)? "
0B227B 64207072 6F677261 
0B2283 6D20666C 61736820 
0B228B 28792F6E 293F20 
0B2292 00                  A  2486    	DB	0
0B2293                     A  2487    L__49:
0B2293 0D0A                A  2488    	DB	13,10
0B2295 4261636B 696E6720   A  2489    	DB	"Backing up existing firmware... "
0B229D 75702065 78697374 
0B22A5 696E6720 6669726D 
0B22AD 77617265 2E2E2E20 
0B22B5 00                  A  2490    	DB	0
0B22B6                     A  2491    L__51:
0B22B6 0D0A00              A  2492    	DB	13,10,0
0B22B9                     A  2493    L__52:
0B22B9 0D                  A  2494    	DB	13
0B22BA 52657365 7420696E   A  2495    	DB	"Reset in "
0B22C2 20 
0B22C3 00                  A  2496    	DB	0
0B22C4                     A  2497    L__54:
0B22C4 0D0A                A  2498    	DB	13,10
0B22C6 45726173 696E6720   A  2499    	DB	"Erasing flash... "
0B22CE 666C6173 682E2E2E 
0B22D6 20 
0B22D7 00                  A  2500    	DB	0
0B22D8                     A  2501    L__57:
0B22D8 0D0A                A  2502    	DB	13,10
0B22DA 57726974 696E6720   A  2503    	DB	"Writing new firmware..."
0B22E2 6E657720 6669726D 
0B22EA 77617265 2E2E2E 
0B22F1 0D0A00              A  2504    	DB	13,10,0
0B22F4                     A  2505    L__59:
0B22F4 0D                  A  2506    	DB	13
0B22F5 57726974 696E6720   A  2507    	DB	"Writing flash page "
0B22FD 666C6173 68207061 
0B2305 676520 
0B2308 00                  A  2508    	DB	0
0B2309                     A  2509    L__62:
0B2309 0D0A00              A  2510    	DB	13,10,0
0B230C                     A  2511    L__63:
0B230C 56657269 6679696E   A  2512    	DB	"Verifying flash checksum... "
0B2314 6720666C 61736820 
0B231C 63686563 6B73756D 
0B2324 2E2E2E20 
0B2328 00                  A  2513    	DB	0
0B2329                     A  2514    L__66:
0B2329 2D204F4B            A  2515    	DB	"- OK"
0B232D 0D0A00              A  2516    	DB	13,10,0
0B2330                     A  2517    L__68:
0B2330 0D0A                A  2518    	DB	13,10
0B2332 4572726F 72206F63   A  2519    	DB	"Error occured during flash write"
0B233A 63757265 64206475 
0B2342 72696E67 20666C61 
0B234A 73682077 72697465 
0B2352 0D0A                A  2520    	DB	13,10
0B2354 41747465 6D707469   A  2521    	DB	"Attempting to flash backup firmware...
0B235C 6E672074 6F20666C 
0B2364 61736820 6261636B 
0B236C 75702066 69726D77 
0B2374 6172652E 2E2E 
0B237A 0D0A00              A  2522    	DB	13,10,0
0B237D                     A  2523    L__69:
0B237D 0D0A                A  2524    	DB	13,10
0B237F 4572726F 72206F63   A  2525    	DB	"Error occured during flash write"
0B2387 63757265 64206475 
0B238F 72696E67 20666C61 
0B2397 73682077 72697465 
0B239F 0D0A                A  2526    	DB	13,10
0B23A1 4261636B 75702072   A  2527    	DB	"Backup recovery failed"
0B23A9 65636F76 65727920 
0B23B1 6661696C 6564 
0B23B7 0D0A00              A  2528    	DB	13,10,0
0B23BA                     A  2529    L__70:
0B23BA 0A0D                A  2530    	DB	10,13
0B23BC 55736572 2061626F   A  2531    	DB	"User abort"
0B23C4 7274 
0B23C6 0A0D00              A  2532    	DB	10,13,0
                           A  2533    	SEGMENT CODE
                           A  2534    ;  325	
                           A  2535    ;  326	int main(int argc, char * argv[]) {
0B09C8                     A  2536    _main:
                           A  2537    .DEFINE "_main"
                           A  2538    
                           A  2539    .VALUE _main
                           A  2540    
                           A  2541    .CLASS 2
                           A  2542    
                           A  2543    .TYPE 68
                           A  2544    
                           A  2545    .ENDEF
                           A  2546    
                           A  2547    .BEGFUNC "main",326,"_main"
                           A  2548    
                           A  2549    .LINE 326
                           A  2550    
                           A  2551    .DEFINE "argc"
                           A  2552    
                           A  2553    .CLASS 65
                           A  2554    
                           A  2555    .VALUE 6
                           A  2556    
                           A  2557    .TYPE 4
                           A  2558    
                           A  2559    .ENDEF
                           A  2560    
                           A  2561    .DEFINE "argv"
                           A  2562    
                           A  2563    .CLASS 65
                           A  2564    
                           A  2565    .VALUE 9
                           A  2566    
                           A  2567    .TYPE 290
                           A  2568    
                           A  2569    .ENDEF
                           A  2570    
0B09C8 DDE5                A  2571    	PUSH	IX
0B09CA DD210000 00         A  2572    	LD	IX,0
0B09CF DD39                A  2573    	ADD	IX,SP
                           A  2574    ;  327	
                           A  2575    ;  328		if(argc != 3) {
                           A  2576    .LINE 328
                           A  2577    
0B09D1 01030000            A  2578    	LD	BC,3
0B09D5 DD2706              A  2579    	LD	HL,(IX+%6)
0B09D8 B7                  A  2580    	OR	A,A
0B09D9 ED42                A  2581    	SBC	HL,BC
0B09DB 28 09               A  2582    	JR	Z,L_99
                           A  2583    ;  329			usage();
                           A  2584    .LINE 329
                           A  2585    
0B09DD CD 06 03 0B         A  2586    	CALL	_usage
                           A  2587    ;  330			return 0;
                           A  2588    .LINE 330
                           A  2589    
0B09E1 B7                  A  2590    	OR	A,A
0B09E2 ED62                A  2591    	SBC	HL,HL
0B09E4 18 6B               A  2592    	JR	L_100
                           A  2593    ;  331		}
0B09E6                     A  2594    L_99:
                           A  2595    .LINE 331
                           A  2596    
                           A  2597    ;  332	
                           A  2598    ;  333		if(memcmp(argv[1], "mos", 3) == 0) 
                           A  2599    .LINE 333
                           A  2600    
0B09E6 C5                  A  2601    	PUSH	BC
0B09E7 01 C9 23 0B         A  2602    	LD	BC,L__73
0B09EB C5                  A  2603    	PUSH	BC
0B09EC DD3109              A  2604    	LD	IY,(IX+%9)
0B09EF ED2303              A  2605    	LEA	HL,IY+%3
0B09F2 ED07                A  2606    	LD	BC,(HL)
0B09F4 C5                  A  2607    	PUSH	BC
0B09F5 CD 12 14 0B         A  2608    	CALL	_memcmp
0B09F9 C1                  A  2609    	POP	BC
0B09FA C1                  A  2610    	POP	BC
0B09FB C1                  A  2611    	POP	BC
0B09FC CD 3C 14 0B         A  2612    	CALL	__icmpzero
0B0A00 20 14               A  2613    	JR	NZ,L_98
                           A  2614    ;  334			return update_mos(argv[2]);
                           A  2615    .LINE 334
                           A  2616    
0B0A02 DD3109              A  2617    	LD	IY,(IX+%9)
0B0A05 ED2306              A  2618    	LEA	HL,IY+%6
0B0A08 ED07                A  2619    	LD	BC,(HL)
0B0A0A C5                  A  2620    	PUSH	BC
0B0A0B CD 48 04 0B         A  2621    	CALL	_update_mos
0B0A0F C1                  A  2622    	POP	BC
0B0A10 B7ED62              A  2623    	UEXT	HL
0B0A13 6F                  A  2624    	LD	L,A
0B0A14 18 3B               A  2625    	JR	L_100
                           A  2626    ;  335		}
                           A  2627    ;  336		else {
0B0A16                     A  2628    L_98:
                           A  2629    .LINE 336
                           A  2630    
                           A  2631    ;  337			if(memcmp(argv[1], "vdp", 3) ==
                           A  2632    .LINE 337
                           A  2633    
0B0A16 01030000            A  2634    	LD	BC,3
0B0A1A C5                  A  2635    	PUSH	BC
0B0A1B 01 CD 23 0B         A  2636    	LD	BC,L__75
0B0A1F C5                  A  2637    	PUSH	BC
0B0A20 DD3109              A  2638    	LD	IY,(IX+%9)
0B0A23 ED2303              A  2639    	LEA	HL,IY+%3
0B0A26 ED07                A  2640    	LD	BC,(HL)
0B0A28 C5                  A  2641    	PUSH	BC
0B0A29 CD 12 14 0B         A  2642    	CALL	_memcmp
0B0A2D C1                  A  2643    	POP	BC
0B0A2E C1                  A  2644    	POP	BC
0B0A2F C1                  A  2645    	POP	BC
0B0A30 CD 3C 14 0B         A  2646    	CALL	__icmpzero
0B0A34 20 14               A  2647    	JR	NZ,L_96
                           A  2648    ;  338				return update_vdp(argv[2]);
                           A  2649    .LINE 338
                           A  2650    
0B0A36 DD3109              A  2651    	LD	IY,(IX+%9)
0B0A39 ED2306              A  2652    	LEA	HL,IY+%6
0B0A3C ED07                A  2653    	LD	BC,(HL)
0B0A3E C5                  A  2654    	PUSH	BC
0B0A3F CD 2B 03 0B         A  2655    	CALL	_update_vdp
0B0A43 C1                  A  2656    	POP	BC
0B0A44 B7ED62              A  2657    	UEXT	HL
0B0A47 6F                  A  2658    	LD	L,A
0B0A48 18 07               A  2659    	JR	L_100
                           A  2660    ;  339			}
                           A  2661    ;  340			else {
0B0A4A                     A  2662    L_96:
                           A  2663    .LINE 340
                           A  2664    
                           A  2665    ;  341				usage();
                           A  2666    .LINE 341
                           A  2667    
0B0A4A CD 06 03 0B         A  2668    	CALL	_usage
                           A  2669    ;  342				return 0;
                           A  2670    .LINE 342
                           A  2671    
0B0A4E B7                  A  2672    	OR	A,A
0B0A4F ED62                A  2673    	SBC	HL,HL
                           A  2674    ;  343			}
                           A  2675    ;  344		}
                           A  2676    ;  345	}
0B0A51                     A  2677    L_100:
                           A  2678    .LINE 345
                           A  2679    
0B0A51 DDF9                A  2680    	LD	SP,IX
0B0A53 DDE1                A  2681    	POP	IX
0B0A55 C9                  A  2682    	RET	
                           A  2683    
                           A  2684    
                           A  2685    ;**************************** _main ***********
                           A  2686    ;Name                         Addr/Register   S
                           A  2687    ;_memcmp                             IMPORT  --
                           A  2688    ;argv                                  IX+9    
                           A  2689    ;argc                                  IX+6    
                           A  2690    
                           A  2691    
                           A  2692    ; Stack Frame Size: 12 (bytes)
                           A  2693    ;       Spill Code: 0 (instruction)
                           A  2694    
                           A  2695    
                           A  2696    .ENDFUNC "main",345,"_main"
                           A  2697    	SEGMENT STRSECT
0B23C9                     A  2698    L__73:
0B23C9 6D6F73              A  2699    	DB	"mos"
0B23CC 00                  A  2700    	DB	0
0B23CD                     A  2701    L__75:
0B23CD 766470              A  2702    	DB	"vdp"
0B23D0 00                  A  2703    	DB	0
                           A  2704    	XREF _memcmp:ROM
                           A  2705    	XREF _getFileSize:ROM
                           A  2706    	XREF _crc32:ROM
                           A  2707    	XREF _delayms:ROM
                           A  2708    	XREF _startVDPupdate:ROM
                           A  2709    	XREF _reset:ROM
                           A  2710    	XREF _fastmemcpy:ROM
                           A  2711    	XREF _lockFlashKeyRegister:ROM
                           A  2712    	XREF _enableFlashKeyRegister:ROM
                           A  2713    	XREF _mos_flseek:ROM
                           A  2714    	XREF _mos_fread:ROM
                           A  2715    	XREF _mos_fclose:ROM
                           A  2716    	XREF _mos_fopen:ROM
                           A  2717    	XREF _getsysvar_scrchar:ROM
                           A  2718    	XREF _getch:ROM
                           A  2719    	XREF __u_ultoa:ROM
                           A  2720    	XREF __u_itoa:ROM
                           A  2721    	XREF ___print_sendstring:ROM
                           A  2722    	XREF ___print_xputch:ROM
                           A  2723    	XREF ___print_uputch:ROM
                           A  2724    	XREF ___print_fmt:ROM
                           A  2725    	XREF __lcmpu:ROM
                           A  2726    	XREF __iand:ROM
                           A  2727    	XREF __stoiu:ROM
                           A  2728    	XREF __icmpzero:ROM
                           A  2729    	XREF __case8D:ROM
                           A  2730    	XREF __ishru_b:ROM
                           A  2731    	XREF __ishrs_b:ROM
                           A  2732    	XDEF _main
                           A  2733    	XDEF _update_mos
                           A  2734    	XDEF _update_vdp
                           A  2735    	XDEF _usage
                           A  2736    	XDEF _print_version
                           A  2737    	XDEF _containsESP32Header
                           A  2738    	XDEF _esp32_magicnumbers
                           A  2739    	XDEF _containsMosHeader
                           A  2740    	XDEF _mos_magicnumbers
                           A  2741    	XDEF _vdp_ota_present
                           A  2742    	XDEF _getCharAt
                           A  2743    	XDEF _putch
                           A  2744    	XDEF _errno
                           A  2745    	END


Errors: 0
Warnings: 0
Lines Assembled: 2746
