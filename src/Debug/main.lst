Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     14:25:20     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
0B1AE4                     A   144    _errno:
0B1AE4                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   161    ;   10	 *                  Sends cls just befo
                           A   162    ;   11	 * 07/06/2023:		Included faster crc
                           A   163    ;   12	 */
                           A   164    ;   13	
                           A   165    ;   14	#include <ez80.h>
                           A   166    ;   15	#include <stdio.h>
                           A   167    ;   16	#include <stdlib.h>
                           A   168    ;   17	#include <ERRNO.H>
                           A   169    ;   18	#include "mos-interface.h"
                           A   170    ;   19	#include "flash.h"
                           A   171    ;   20	#include "agontimer.h"
                           A   172    ;   21	#include "crc32.h"
                           A   173    ;   22	#include "filesize.h"
                           A   174    ;   23	#include "./stdint.h"
                           A   175    ;   24	#include <string.h>
                           A   176    ;   25	
                           A   177    ;   26	#define UNLOCKMATCHLENGTH 9
                           A   178    ;   27	
                           A   179    ;   28	#define EXIT_FILENOTFOUND	4
                           A   180    ;   29	#define EXIT_INVALIDPARAMETER	19
                           A   181    ;   30	
                           A   182    ;   31	int errno; // needed by standard librar
                           A   183    	SEGMENT CODE
                           A   184    ;   32	enum states{firmware,retry,systemreset}
                           A   185    ;   33	
                           A   186    ;   34	// separate putch function that doesn't
                           A   187    ;   35	// UART0 initialization done by MOS fir
                           A   188    ;   36	// This utility doesn't run without MOS
                           A   189    ;   37	int putch(int c)
                           A   190    ;   38	{
0B00E5                     A   191    _putch:
                           A   192    .DEFINE "_putch"
                           A   193    
                           A   194    .VALUE _putch
                           A   195    
                           A   196    .CLASS 2
                           A   197    
                           A   198    .TYPE 68
                           A   199    
                           A   200    .ENDEF
                           A   201    
                           A   202    .BEGFUNC "putch",38,"_putch"
                           A   203    
                           A   204    .LINE 38
                           A   205    
                           A   206    .DEFINE "c"
                           A   207    
                           A   208    .CLASS 65
                           A   209    
                           A   210    .VALUE 6
                           A   211    
                           A   212    .TYPE 4
                           A   213    
0B00E5 DDE5                A   214    	PUSH	IX
0B00E7 DD210000 00         A   215    	LD	IX,0
0B00EC DD39                A   216    	ADD	IX,SP
                           A   217    .ENDEF
                           A   218    
                           A   219    ;   39		UINT8 lsr,temt;
                           A   220    ;   40		
                           A   221    ;   41		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   222    L_1:
                           A   223    .LINE 41
                           A   224    
0B00EE ED38C5              A   225    	IN0	A,(197)
0B00F1 E640                A   226    	AND	A,%40
0B00F3 B7ED62              A   227    	UEXT	HL
0B00F6 6F                  A   228    	LD	L,A
0B00F7 CD 09 15 0B         A   229    	CALL	__icmpzero
0B00FB 28 F1               A   230    	JR	Z,L_1
                           A   231    ;   42		UART0_THR = c;
                           A   232    .LINE 42
                           A   233    
0B00FD DD7E06              A   234    	LD	A,(IX+%6)
0B0100 ED39C0              A   235    	OUT0	(192),A
                           A   236    ;   43		return c;
                           A   237    .LINE 43
                           A   238    
0B0103 DD2706              A   239    	LD	HL,(IX+%6)
                           A   240    ;   44	}
                           A   241    .LINE 44
                           A   242    
0B0106 DDF9                A   243    	LD	SP,IX
0B0108 DDE1                A   244    	POP	IX
0B010A C9                  A   245    	RET	
                           A   246    
                           A   247    
                           A   248    ;**************************** _putch **********
                           A   249    ;Name                         Addr/Register   S
                           A   250    ;c                                     IX+6    
                           A   251    
                           A   252    
                           A   253    ; Stack Frame Size: 9 (bytes)
                           A   254    ;       Spill Code: 0 (instruction)
                           A   255    
                           A   256    
                           A   257    .ENDFUNC "putch",44,"_putch"
                           A   258    ;   45	
                           A   259    ;   46	uint8_t getCharAt(uint16_t x, uint16_t 
0B010B                     A   260    _getCharAt:
                           A   261    .DEFINE "_getCharAt"
                           A   262    
                           A   263    .VALUE _getCharAt
                           A   264    
                           A   265    .CLASS 2
                           A   266    
                           A   267    .TYPE 76
                           A   268    
                           A   269    .ENDEF
                           A   270    
                           A   271    .BEGFUNC "getCharAt",46,"_getCharAt"
                           A   272    
                           A   273    .LINE 46
                           A   274    
                           A   275    .DEFINE "x"
                           A   276    
                           A   277    .CLASS 65
                           A   278    
                           A   279    .VALUE 6
                           A   280    
                           A   281    .TYPE 13
                           A   282    
                           A   283    .ENDEF
                           A   284    
                           A   285    .DEFINE "y"
                           A   286    
                           A   287    .CLASS 65
                           A   288    
                           A   289    .VALUE 9
                           A   290    
                           A   291    .TYPE 13
                           A   292    
                           A   293    .ENDEF
                           A   294    
0B010B DDE5                A   295    	PUSH	IX
0B010D DD210000 00         A   296    	LD	IX,0
0B0112 DD39                A   297    	ADD	IX,SP
                           A   298    ;   47		delayms(20);
                           A   299    .LINE 47
                           A   300    
0B0114 01140000            A   301    	LD	BC,20
0B0118 C5                  A   302    	PUSH	BC
0B0119 CD B3 0C 0B         A   303    	CALL	_delayms
0B011D C1                  A   304    	POP	BC
                           A   305    ;   48		putch(23);
                           A   306    .LINE 48
                           A   307    
0B011E 01170000            A   308    	LD	BC,23
0B0122 C5                  A   309    	PUSH	BC
0B0123 CD E5 00 0B         A   310    	CALL	_putch
0B0127 C1                  A   311    	POP	BC
                           A   312    ;   49		putch(0);
                           A   313    .LINE 49
                           A   314    
0B0128 01000000            A   315    	LD	BC,0
0B012C C5                  A   316    	PUSH	BC
0B012D CD E5 00 0B         A   317    	CALL	_putch
0B0131 C1                  A   318    	POP	BC
                           A   319    ;   50		putch(131);
                           A   320    .LINE 50
                           A   321    
0B0132 01830000            A   322    	LD	BC,131
0B0136 C5                  A   323    	PUSH	BC
0B0137 CD E5 00 0B         A   324    	CALL	_putch
0B013B C1                  A   325    	POP	BC
                           A   326    ;   51		putch(x & 0xFF);
                           A   327    .LINE 51
                           A   328    
0B013C DD0706              A   329    	LD	BC,(IX+%6)
0B013F CD 46 11 0B         A   330    	CALL	__stoiu
0B0143 7D                  A   331    	LD	A,L
0B0144 B7ED62              A   332    	UEXT	HL
0B0147 6F                  A   333    	LD	L,A
0B0148 E5                  A   334    	PUSH	HL
0B0149 CD E5 00 0B         A   335    	CALL	_putch
0B014D C1                  A   336    	POP	BC
                           A   337    ;   52		putch((x >> 8) & 0xFF);
                           A   338    .LINE 52
                           A   339    
0B014E DD0706              A   340    	LD	BC,(IX+%6)
0B0151 CD 46 11 0B         A   341    	CALL	__stoiu
0B0155 3E08                A   342    	LD	A,%8
0B0157 CD B6 0F 0B         A   343    	CALL	__ishrs_b
0B015B 7D                  A   344    	LD	A,L
0B015C B7ED62              A   345    	UEXT	HL
0B015F 6F                  A   346    	LD	L,A
0B0160 E5                  A   347    	PUSH	HL
0B0161 CD E5 00 0B         A   348    	CALL	_putch
0B0165 C1                  A   349    	POP	BC
                           A   350    ;   53		putch(y & 0xFF);
                           A   351    .LINE 53
                           A   352    
0B0166 DD0709              A   353    	LD	BC,(IX+%9)
0B0169 CD 46 11 0B         A   354    	CALL	__stoiu
0B016D 7D                  A   355    	LD	A,L
0B016E B7ED62              A   356    	UEXT	HL
0B0171 6F                  A   357    	LD	L,A
0B0172 E5                  A   358    	PUSH	HL
0B0173 CD E5 00 0B         A   359    	CALL	_putch
0B0177 C1                  A   360    	POP	BC
                           A   361    ;   54		putch((y >> 8) & 0xFF);
                           A   362    .LINE 54
                           A   363    
0B0178 DD0709              A   364    	LD	BC,(IX+%9)
0B017B CD 46 11 0B         A   365    	CALL	__stoiu
0B017F 3E08                A   366    	LD	A,%8
0B0181 CD B6 0F 0B         A   367    	CALL	__ishrs_b
0B0185 7D                  A   368    	LD	A,L
0B0186 B7ED62              A   369    	UEXT	HL
0B0189 6F                  A   370    	LD	L,A
0B018A E5                  A   371    	PUSH	HL
0B018B CD E5 00 0B         A   372    	CALL	_putch
0B018F C1                  A   373    	POP	BC
                           A   374    ;   55		delayms(20);
                           A   375    .LINE 55
                           A   376    
0B0190 01140000            A   377    	LD	BC,20
0B0194 C5                  A   378    	PUSH	BC
0B0195 CD B3 0C 0B         A   379    	CALL	_delayms
0B0199 C1                  A   380    	POP	BC
                           A   381    ;   56		return getsysvar_scrchar();
                           A   382    .LINE 56
                           A   383    
0B019A CD FF 0A 0B         A   384    	CALL	_getsysvar_scrchar
                           A   385    ;   57	}
                           A   386    .LINE 57
                           A   387    
0B019E DDF9                A   388    	LD	SP,IX
0B01A0 DDE1                A   389    	POP	IX
0B01A2 C9                  A   390    	RET	
                           A   391    
                           A   392    
                           A   393    ;**************************** _getCharAt ******
                           A   394    ;Name                         Addr/Register   S
                           A   395    ;_getsysvar_scrchar                  IMPORT  --
                           A   396    ;_putch                              IMPORT  --
                           A   397    ;_delayms                            IMPORT  --
                           A   398    ;y                                     IX+9    
                           A   399    ;x                                     IX+6    
                           A   400    
                           A   401    
                           A   402    ; Stack Frame Size: 12 (bytes)
                           A   403    ;       Spill Code: 0 (instruction)
                           A   404    
                           A   405    
                           A   406    .ENDFUNC "getCharAt",57,"_getCharAt"
                           A   407    ;   58	
                           A   408    ;   59	bool vdp_ota_present(void) {
0B01A3                     A   409    _vdp_ota_present:
                           A   410    .DEFINE "_vdp_ota_present"
                           A   411    
                           A   412    .VALUE _vdp_ota_present
                           A   413    
                           A   414    .CLASS 2
                           A   415    
                           A   416    .TYPE 76
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .BEGFUNC "vdp_ota_present",59,"_vdp_ota_present
                           A   421    
                           A   422    .LINE 59
                           A   423    
                           A   424    .DEFINE "n"
                           A   425    
                           A   426    .CLASS 65
                           A   427    
                           A   428    .VALUE -2
                           A   429    
                           A   430    .TYPE 13
                           A   431    
                           A   432    .ENDEF
                           A   433    
                           A   434    .DEFINE "test"
                           A   435    
                           A   436    .CLASS 65
                           A   437    
                           A   438    .VALUE -11
                           A   439    
                           A   440    .DIM 9
                           A   441    
                           A   442    .TYPE 98
                           A   443    
                           A   444    .ENDEF
                           A   445    
0B01A3 DDE5                A   446    	PUSH	IX
0B01A5 DD210000 00         A   447    	LD	IX,0
0B01AA DD39                A   448    	ADD	IX,SP
0B01AC ED22F5              A   449    	LEA	HL,IX+%FFFFFFF5
0B01AF F9                  A   450    	LD	SP,HL
                           A   451    ;   60		char test[UNLOCKMATCHLENGTH];
                           A   452    ;   61		uint16_t n;
                           A   453    ;   62	
                           A   454    ;   63		putch(23);
                           A   455    .LINE 63
                           A   456    
0B01B0 01170000            A   457    	LD	BC,23
0B01B4 C5                  A   458    	PUSH	BC
0B01B5 CD E5 00 0B         A   459    	CALL	_putch
0B01B9 C1                  A   460    	POP	BC
                           A   461    ;   64		putch(29);
                           A   462    .LINE 64
                           A   463    
0B01BA 011D0000            A   464    	LD	BC,29
0B01BE C5                  A   465    	PUSH	BC
0B01BF CD E5 00 0B         A   466    	CALL	_putch
0B01C3 C1                  A   467    	POP	BC
                           A   468    ;   65		putch(0);
                           A   469    .LINE 65
                           A   470    
0B01C4 01000000            A   471    	LD	BC,0
0B01C8 C5                  A   472    	PUSH	BC
0B01C9 CD E5 00 0B         A   473    	CALL	_putch
0B01CD C1                  A   474    	POP	BC
                           A   475    ;   66		printf("unlock");
                           A   476    .LINE 66
                           A   477    
0B01CE 01 4C 11 0B         A   478    	LD	BC,___print_uputch
0B01D2 ED43 04 20 0B       A   479    	LD	(___print_xputch),BC
0B01D7 01 87 20 0B         A   480    	LD	BC,L__3
0B01DB C5                  A   481    	PUSH	BC
0B01DC CD DB 0F 0B         A   482    	CALL	___print_sendstring
0B01E0 C1                  A   483    	POP	BC
                           A   484    ;   67	
                           A   485    ;   68		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   486    .LINE 68
                           A   487    
0B01E1 DD36FE00            A   488    	LD	(IX+%FFFFFFFE),%0
0B01E5 DD36FF00            A   489    	LD	(IX+%FFFFFFFF),%0
0B01E9 18 2A               A   490    	JR	L_8
0B01EB                     A   491    L_6:
0B01EB 01030000            A   492    	LD	BC,3
0B01EF C5                  A   493    	PUSH	BC
0B01F0 DD31FE              A   494    	LD	IY,(IX+%FFFFFFFE)
0B01F3 ED0308              A   495    	LEA	BC,IY+%8
0B01F6 C5                  A   496    	PUSH	BC
0B01F7 CD 0B 01 0B         A   497    	CALL	_getCharAt
0B01FB C1                  A   498    	POP	BC
0B01FC C1                  A   499    	POP	BC
0B01FD DD07FE              A   500    	LD	BC,(IX+%FFFFFFFE)
0B0200 CD 46 11 0B         A   501    	CALL	__stoiu
0B0204 E5C1                A   502    	LD	BC,HL
0B0206 ED22F5              A   503    	LEA	HL,IX+%FFFFFFF5
0B0209 09                  A   504    	ADD	HL,BC
0B020A 77                  A   505    	LD	(HL),A
0B020B DD27FE              A   506    	LD	HL,(IX+%FFFFFFFE)
0B020E 23                  A   507    	INC	HL
0B020F DD75FE              A   508    	LD	(IX+%FFFFFFFE),L
0B0212 DD74FF              A   509    	LD	(IX+%FFFFFFFF),H
0B0215                     A   510    L_8:
0B0215 49010A00            A   511    	LD.LIS	BC,10
0B0219 DD27FE              A   512    	LD	HL,(IX+%FFFFFFFE)
0B021C B7                  A   513    	OR	A,A
0B021D 40ED42              A   514    	SBC.SIS	HL,BC
0B0220 38 C9               A   515    	JR	C,L_6
                           A   516    ;   69		// 3 - line on-screen
                           A   517    ;   70		if(memcmp(test, "unlocked!",UNLOCKM
                           A   518    .LINE 70
                           A   519    
0B0222 01090000            A   520    	LD	BC,9
0B0226 C5                  A   521    	PUSH	BC
0B0227 01 8E 20 0B         A   522    	LD	BC,L__5
0B022B C5                  A   523    	PUSH	BC
0B022C ED65F5              A   524    	PEA	IX+%FFFFFFF5
0B022F CD DF 14 0B         A   525    	CALL	_memcmp
0B0233 C1                  A   526    	POP	BC
0B0234 C1                  A   527    	POP	BC
0B0235 C1                  A   528    	POP	BC
0B0236 CD 09 15 0B         A   529    	CALL	__icmpzero
0B023A 20 04               A   530    	JR	NZ,L_10
0B023C 3E01                A   531    	LD	A,%1
0B023E 18 01               A   532    	JR	L_12
                           A   533    ;   71		else return false;
0B0240                     A   534    L_10:
                           A   535    .LINE 71
                           A   536    
0B0240 AF                  A   537    	XOR	A,A
                           A   538    ;   72	}
0B0241                     A   539    L_12:
                           A   540    .LINE 72
                           A   541    
0B0241 DDF9                A   542    	LD	SP,IX
0B0243 DDE1                A   543    	POP	IX
0B0245 C9                  A   544    	RET	
                           A   545    
                           A   546    
                           A   547    ;**************************** _vdp_ota_present 
                           A   548    ;Name                         Addr/Register   S
                           A   549    ;_memcmp                             IMPORT  --
                           A   550    ;___print_sendstring                 IMPORT  --
                           A   551    ;___print_xputch                     IMPORT    
                           A   552    ;___print_uputch                     IMPORT  --
                           A   553    ;_putch                              IMPORT  --
                           A   554    ;test                                 IX-11    
                           A   555    ;n                                     IX-2    
                           A   556    
                           A   557    
                           A   558    ; Stack Frame Size: 17 (bytes)
                           A   559    ;       Spill Code: 0 (instruction)
                           A   560    
                           A   561    
                           A   562    .ENDFUNC "vdp_ota_present",72,"_vdp_ota_present
                           A   563    	SEGMENT STRSECT
0B2087                     A   564    L__3:
0B2087 756E6C6F 636B       A   565    	DB	"unlock"
0B208D 00                  A   566    	DB	0
0B208E                     A   567    L__5:
0B208E 756E6C6F 636B6564   A   568    	DB	"unlocked!"
0B2096 21 
0B2097 00                  A   569    	DB	0
                           A   570    	SEGMENT DATA
0B1ADB                     A   571    _mos_magicnumbers:
0B1ADB F3                  A   572    	DB	243
0B1ADC ED                  A   573    	DB	237
0B1ADD 7D                  A   574    	DB	125
0B1ADE 5B                  A   575    	DB	91
0B1ADF C3                  A   576    	DB	195
                           A   577    .DEFINE "mos_magicnumbers"
                           A   578    .ALIAS "_mos_magicnumbers"
                           A   579    .CLASS 69
                           A   580    .VALUE _mos_magicnumbers
                           A   581    .DIM 5
                           A   582    .TYPE 108
                           A   583    .ENDEF
                           A   584    ;   73	
                           A   585    ;   74	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   586    	SEGMENT CODE
                           A   587    ;   75	#define MOS_MAGICLENGTH 5
                           A   588    ;   76	bool containsMosHeader(uint8_t *filesta
0B0246                     A   589    _containsMosHeader:
                           A   590    .DEFINE "_containsMosHeader"
                           A   591    
                           A   592    .VALUE _containsMosHeader
                           A   593    
                           A   594    .CLASS 2
                           A   595    
                           A   596    .TYPE 76
                           A   597    
                           A   598    .ENDEF
                           A   599    
                           A   600    .BEGFUNC "containsMosHeader",76,"_containsMosHe
                           A   601    
                           A   602    .LINE 76
                           A   603    
                           A   604    .DEFINE "filestart"
                           A   605    
                           A   606    .CLASS 65
                           A   607    
                           A   608    .VALUE 6
                           A   609    
                           A   610    .TYPE 44
                           A   611    
                           A   612    .ENDEF
                           A   613    
                           A   614    .DEFINE "n"
                           A   615    
                           A   616    .CLASS 65
                           A   617    
                           A   618    .VALUE -1
                           A   619    
                           A   620    .TYPE 12
                           A   621    
                           A   622    .ENDEF
                           A   623    
                           A   624    .DEFINE "match"
                           A   625    
                           A   626    .CLASS 65
                           A   627    
                           A   628    .VALUE -2
                           A   629    
                           A   630    .TYPE 12
                           A   631    
                           A   632    .ENDEF
                           A   633    
0B0246 DDE5                A   634    	PUSH	IX
0B0248 DD210000 00         A   635    	LD	IX,0
0B024D DD39                A   636    	ADD	IX,SP
0B024F 3B                  A   637    	DEC	SP
0B0250 3B                  A   638    	DEC	SP
                           A   639    ;   77		uint8_t n;
                           A   640    ;   78		bool match = true;
                           A   641    .LINE 78
                           A   642    
0B0251 DD36FE01            A   643    	LD	(IX+%FFFFFFFE),%1
                           A   644    ;   79	
                           A   645    ;   80		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A   646    .LINE 80
                           A   647    
0B0255 DD36FF00            A   648    	LD	(IX+%FFFFFFFF),%0
0B0259 18 27               A   649    	JR	L_17
0B025B                     A   650    L_15:
0B025B DD7EFF              A   651    	LD	A,(IX+%FFFFFFFF)
0B025E B7ED62              A   652    	UEXT	HL
0B0261 6F                  A   653    	LD	L,A
0B0262 01 DB 1A 0B         A   654    	LD	BC,_mos_magicnumbers
0B0266 09                  A   655    	ADD	HL,BC
0B0267 E5FDE1              A   656    	LD	IY,HL
0B026A DD7EFF              A   657    	LD	A,(IX+%FFFFFFFF)
0B026D B7ED62              A   658    	UEXT	HL
0B0270 6F                  A   659    	LD	L,A
0B0271 DD0706              A   660    	LD	BC,(IX+%6)
0B0274 09                  A   661    	ADD	HL,BC
0B0275 FD7E00              A   662    	LD	A,(IY)
0B0278 BE                  A   663    	CP	A,(HL)
0B0279 28 04               A   664    	JR	Z,L_16
0B027B DD36FE00            A   665    	LD	(IX+%FFFFFFFE),%0
0B027F                     A   666    L_16:
0B027F DD34FF              A   667    	INC	(IX+%FFFFFFFF)
0B0282                     A   668    L_17:
0B0282 DD7EFF              A   669    	LD	A,(IX+%FFFFFFFF)
0B0285 FE05                A   670    	CP	A,%5
0B0287 38 D2               A   671    	JR	C,L_15
                           A   672    ;   81		return match;
                           A   673    .LINE 81
                           A   674    
0B0289 DD7EFE              A   675    	LD	A,(IX+%FFFFFFFE)
                           A   676    ;   82	}
                           A   677    .LINE 82
                           A   678    
0B028C DDF9                A   679    	LD	SP,IX
0B028E DDE1                A   680    	POP	IX
0B0290 C9                  A   681    	RET	
                           A   682    
                           A   683    
                           A   684    ;**************************** _containsMosHeade
                           A   685    ;Name                         Addr/Register   S
                           A   686    ;_mos_magicnumbers                   STATIC    
                           A   687    ;match                                 IX-2    
                           A   688    ;n                                     IX-1    
                           A   689    ;filestart                             IX+6    
                           A   690    
                           A   691    
                           A   692    ; Stack Frame Size: 11 (bytes)
                           A   693    ;       Spill Code: 0 (instruction)
                           A   694    
                           A   695    
                           A   696    .ENDFUNC "containsMosHeader",82,"_containsMosHe
                           A   697    	SEGMENT DATA
0B1AE0                     A   698    _esp32_magicnumbers:
0B1AE0 32                  A   699    	DB	50
0B1AE1 54                  A   700    	DB	84
0B1AE2 CD                  A   701    	DB	205
0B1AE3 AB                  A   702    	DB	171
                           A   703    .DEFINE "esp32_magicnumbers"
                           A   704    .ALIAS "_esp32_magicnumbers"
                           A   705    .CLASS 69
                           A   706    .VALUE _esp32_magicnumbers
                           A   707    .DIM 4
                           A   708    .TYPE 108
                           A   709    .ENDEF
                           A   710    ;   83	
                           A   711    ;   84	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A   712    	SEGMENT CODE
                           A   713    ;   85	#define ESP32_MAGICLENGTH 4
                           A   714    ;   86	#define ESP32_MAGICSTART 0x20
                           A   715    ;   87	bool containsESP32Header(uint8_t *files
0B0291                     A   716    _containsESP32Header:
                           A   717    .DEFINE "_containsESP32Header"
                           A   718    
                           A   719    .VALUE _containsESP32Header
                           A   720    
                           A   721    .CLASS 2
                           A   722    
                           A   723    .TYPE 76
                           A   724    
                           A   725    .ENDEF
                           A   726    
                           A   727    .BEGFUNC "containsESP32Header",87,"_containsESP
                           A   728    
                           A   729    .LINE 87
                           A   730    
                           A   731    .DEFINE "filestart"
                           A   732    
                           A   733    .CLASS 65
                           A   734    
                           A   735    .VALUE 6
                           A   736    
                           A   737    .TYPE 44
                           A   738    
                           A   739    .ENDEF
                           A   740    
                           A   741    .DEFINE "n"
                           A   742    
                           A   743    .CLASS 65
                           A   744    
                           A   745    .VALUE -1
                           A   746    
                           A   747    .TYPE 12
                           A   748    
                           A   749    .ENDEF
                           A   750    
                           A   751    .DEFINE "match"
                           A   752    
                           A   753    .CLASS 65
                           A   754    
                           A   755    .VALUE -2
                           A   756    
                           A   757    .TYPE 12
                           A   758    
                           A   759    .ENDEF
                           A   760    
0B0291 DDE5                A   761    	PUSH	IX
0B0293 DD210000 00         A   762    	LD	IX,0
0B0298 DD39                A   763    	ADD	IX,SP
0B029A 3B                  A   764    	DEC	SP
0B029B 3B                  A   765    	DEC	SP
                           A   766    ;   88		uint8_t n;
                           A   767    ;   89		bool match = true;
                           A   768    .LINE 89
                           A   769    
0B029C DD36FE01            A   770    	LD	(IX+%FFFFFFFE),%1
                           A   771    ;   90	
                           A   772    ;   91		filestart += ESP32_MAGICSTART; // s
                           A   773    .LINE 91
                           A   774    
0B02A0 DD3106              A   775    	LD	IY,(IX+%6)
0B02A3 ED3320              A   776    	LEA	IY,IY+%20
0B02A6 DD3E06              A   777    	LD	(IX+%6),IY
                           A   778    ;   92		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A   779    .LINE 92
                           A   780    
0B02A9 DD36FF00            A   781    	LD	(IX+%FFFFFFFF),%0
0B02AD 18 27               A   782    	JR	L_24
0B02AF                     A   783    L_22:
                           A   784    ;   93			if(esp32_magicnumbers[n] != fil
                           A   785    .LINE 93
                           A   786    
0B02AF DD7EFF              A   787    	LD	A,(IX+%FFFFFFFF)
0B02B2 B7ED62              A   788    	UEXT	HL
0B02B5 6F                  A   789    	LD	L,A
0B02B6 01 E0 1A 0B         A   790    	LD	BC,_esp32_magicnumbers
0B02BA 09                  A   791    	ADD	HL,BC
0B02BB E5FDE1              A   792    	LD	IY,HL
0B02BE DD7EFF              A   793    	LD	A,(IX+%FFFFFFFF)
0B02C1 B7ED62              A   794    	UEXT	HL
0B02C4 6F                  A   795    	LD	L,A
0B02C5 DD0706              A   796    	LD	BC,(IX+%6)
0B02C8 09                  A   797    	ADD	HL,BC
0B02C9 FD7E00              A   798    	LD	A,(IY)
0B02CC BE                  A   799    	CP	A,(HL)
0B02CD 28 04               A   800    	JR	Z,L_23
0B02CF DD36FE00            A   801    	LD	(IX+%FFFFFFFE),%0
                           A   802    ;   94		}
0B02D3                     A   803    L_23:
                           A   804    .LINE 94
                           A   805    
0B02D3 DD34FF              A   806    	INC	(IX+%FFFFFFFF)
0B02D6                     A   807    L_24:
0B02D6 DD7EFF              A   808    	LD	A,(IX+%FFFFFFFF)
0B02D9 FE04                A   809    	CP	A,%4
0B02DB 38 D2               A   810    	JR	C,L_22
                           A   811    ;   95		return match;
                           A   812    .LINE 95
                           A   813    
0B02DD DD7EFE              A   814    	LD	A,(IX+%FFFFFFFE)
                           A   815    ;   96	}
                           A   816    .LINE 96
                           A   817    
0B02E0 DDF9                A   818    	LD	SP,IX
0B02E2 DDE1                A   819    	POP	IX
0B02E4 C9                  A   820    	RET	
                           A   821    
                           A   822    
                           A   823    ;**************************** _containsESP32Hea
                           A   824    ;Name                         Addr/Register   S
                           A   825    ;_esp32_magicnumbers                 STATIC    
                           A   826    ;match                                 IX-2    
                           A   827    ;n                                     IX-1    
                           A   828    ;filestart                             IX+6    
                           A   829    
                           A   830    
                           A   831    ; Stack Frame Size: 11 (bytes)
                           A   832    ;       Spill Code: 0 (instruction)
                           A   833    
                           A   834    
                           A   835    .ENDFUNC "containsESP32Header",96,"_containsESP
                           A   836    ;   97	
                           A   837    ;   98	void print_version(void) {
0B02E5                     A   838    _print_version:
                           A   839    .DEFINE "_print_version"
                           A   840    
                           A   841    .VALUE _print_version
                           A   842    
                           A   843    .CLASS 2
                           A   844    
                           A   845    .TYPE 65
                           A   846    
                           A   847    .ENDEF
                           A   848    
                           A   849    .BEGFUNC "print_version",98,"_print_version"
                           A   850    
0B02E5 DDE5                A   851    	PUSH	IX
0B02E7 DD210000 00         A   852    	LD	IX,0
0B02EC DD39                A   853    	ADD	IX,SP
                           A   854    ;   99		printf("Agon firmware upgrade utili
                           A   855    .LINE 99
                           A   856    
0B02EE 01 4C 11 0B         A   857    	LD	BC,___print_uputch
0B02F2 ED43 04 20 0B       A   858    	LD	(___print_xputch),BC
0B02F7 01 98 20 0B         A   859    	LD	BC,L__14
0B02FB C5                  A   860    	PUSH	BC
0B02FC CD DB 0F 0B         A   861    	CALL	___print_sendstring
0B0300 C1                  A   862    	POP	BC
                           A   863    ;  100	}
                           A   864    .LINE 100
                           A   865    
0B0301 DDF9                A   866    	LD	SP,IX
0B0303 DDE1                A   867    	POP	IX
0B0305 C9                  A   868    	RET	
                           A   869    
                           A   870    
                           A   871    ;**************************** _print_version **
                           A   872    ;Name                         Addr/Register   S
                           A   873    ;___print_sendstring                 IMPORT  --
                           A   874    ;___print_xputch                     IMPORT    
                           A   875    ;___print_uputch                     IMPORT  --
                           A   876    
                           A   877    
                           A   878    ; Stack Frame Size: 6 (bytes)
                           A   879    ;       Spill Code: 0 (instruction)
                           A   880    
                           A   881    
                           A   882    .ENDFUNC "print_version",100,"_print_version"
                           A   883    	SEGMENT STRSECT
0B2098                     A   884    L__14:
0B2098 41676F6E 20666972   A   885    	DB	"Agon firmware upgrade utility v1.4"
0B20A0 6D776172 65207570 
0B20A8 67726164 65207574 
0B20B0 696C6974 79207631 
0B20B8 2E34 
0B20BA 0A0D0A0D 00         A   886    	DB	10,13,10,13,0
                           A   887    	SEGMENT CODE
                           A   888    ;  101	
                           A   889    ;  102	void usage(void) {
0B0306                     A   890    _usage:
                           A   891    .DEFINE "_usage"
                           A   892    
                           A   893    .VALUE _usage
                           A   894    
                           A   895    .CLASS 2
                           A   896    
                           A   897    .TYPE 65
                           A   898    
                           A   899    .ENDEF
                           A   900    
                           A   901    .BEGFUNC "usage",102,"_usage"
                           A   902    
0B0306 DDE5                A   903    	PUSH	IX
0B0308 DD210000 00         A   904    	LD	IX,0
0B030D DD39                A   905    	ADD	IX,SP
                           A   906    ;  103		print_version();
                           A   907    .LINE 103
                           A   908    
0B030F CD E5 02 0B         A   909    	CALL	_print_version
                           A   910    ;  104		printf("Usage: FLASH <mos|vdp> <fil
                           A   911    .LINE 104
                           A   912    
0B0313 01 4C 11 0B         A   913    	LD	BC,___print_uputch
0B0317 ED43 04 20 0B       A   914    	LD	(___print_xputch),BC
0B031C 01 BF 20 0B         A   915    	LD	BC,L__16
0B0320 C5                  A   916    	PUSH	BC
0B0321 CD DB 0F 0B         A   917    	CALL	___print_sendstring
0B0325 C1                  A   918    	POP	BC
                           A   919    ;  105	}
                           A   920    .LINE 105
                           A   921    
0B0326 DDF9                A   922    	LD	SP,IX
0B0328 DDE1                A   923    	POP	IX
0B032A C9                  A   924    	RET	
                           A   925    
                           A   926    
                           A   927    ;**************************** _usage **********
                           A   928    ;Name                         Addr/Register   S
                           A   929    ;___print_sendstring                 IMPORT  --
                           A   930    ;___print_xputch                     IMPORT    
                           A   931    ;___print_uputch                     IMPORT  --
                           A   932    
                           A   933    
                           A   934    ; Stack Frame Size: 6 (bytes)
                           A   935    ;       Spill Code: 0 (instruction)
                           A   936    
                           A   937    
                           A   938    .ENDFUNC "usage",105,"_usage"
                           A   939    	SEGMENT STRSECT
0B20BF                     A   940    L__16:
0B20BF 55736167 653A2046   A   941    	DB	"Usage: FLASH <mos|vdp> <filename>"
0B20C7 4C415348 203C6D6F 
0B20CF 737C7664 703E203C 
0B20D7 66696C65 6E616D65 
0B20DF 3E 
0B20E0 0A0D00              A   942    	DB	10,13,0
                           A   943    	SEGMENT CODE
                           A   944    ;  106	
                           A   945    ;  107	typedef enum {
                           A   946    ;  108		MOS,
                           A   947    ;  109		VDP
                           A   948    ;  110	} flashtype;
                           A   949    ;  111	
                           A   950    ;  112	bool getResponse(flashtype t, uint32_t 
0B032B                     A   951    _getResponse:
                           A   952    .DEFINE "_getResponse"
                           A   953    
                           A   954    .VALUE _getResponse
                           A   955    
                           A   956    .CLASS 2
                           A   957    
                           A   958    .TYPE 76
                           A   959    
                           A   960    .ENDEF
                           A   961    
                           A   962    .BEGFUNC "getResponse",112,"_getResponse"
                           A   963    
                           A   964    .LINE 112
                           A   965    
                           A   966    .DEFINE "t"
                           A   967    
                           A   968    .CLASS 65
                           A   969    
                           A   970    .VALUE 6
                           A   971    
                           A   972    .TYPE 4
                           A   973    
                           A   974    .ENDEF
                           A   975    
                           A   976    .DEFINE "crc"
                           A   977    
                           A   978    .CLASS 65
                           A   979    
                           A   980    .VALUE 9
                           A   981    
                           A   982    .TYPE 15
                           A   983    
                           A   984    .ENDEF
                           A   985    
                           A   986    .DEFINE "response"
                           A   987    
                           A   988    .CLASS 65
                           A   989    
                           A   990    .VALUE -1
                           A   991    
                           A   992    .TYPE 12
                           A   993    
                           A   994    .ENDEF
                           A   995    
0B032B DDE5                A   996    	PUSH	IX
0B032D DD210000 00         A   997    	LD	IX,0
0B0332 DD39                A   998    	ADD	IX,SP
0B0334 3B                  A   999    	DEC	SP
                           A  1000    ;  113		uint8_t response = 0;
                           A  1001    .LINE 113
                           A  1002    
0B0335 DD36FF00            A  1003    	LD	(IX+%FFFFFFFF),%0
                           A  1004    ;  114	
                           A  1005    ;  115		switch(t) {
                           A  1006    .LINE 115
                           A  1007    
0B0339 DD2706              A  1008    	LD	HL,(IX+%6)
0B033C CD EB 17 0B         A  1009    	CALL	__case8D
0B0340 E9                  A  1010    	JP	(HL)
0B0341                     A  1011    L__18:
0B0341 0200                A  1012    	DW	2
0B0343 00                  A  1013    	DB	0
0B0344 4E030B              A  1014    	DW24	L_29	
                           A  1015    
0B0347 01                  A  1016    	DB	1
0B0348 8F030B              A  1017    	DW24	L_30	
                           A  1018    
0B034B D7030B              A  1019    	DW24	L_32	
                           A  1020    
                           A  1021    ;  116			case MOS:
0B034E                     A  1022    L_29:
                           A  1023    .LINE 116
                           A  1024    
                           A  1025    ;  117				printf("\r\n\r\n0x%04lX - f
                           A  1026    .LINE 117
                           A  1027    
0B034E 01 4C 11 0B         A  1028    	LD	BC,___print_uputch
0B0352 ED43 04 20 0B       A  1029    	LD	(___print_xputch),BC
0B0357 01 E3 20 0B         A  1030    	LD	BC,L__19
0B035B C5                  A  1031    	PUSH	BC
0B035C CD DB 0F 0B         A  1032    	CALL	___print_sendstring
0B0360 C1                  A  1033    	POP	BC
0B0361 3E04                A  1034    	LD	A,%4
0B0363 32 FA 1A 0B         A  1035    	LD	(___print_fmt+5),A
0B0367 3E60                A  1036    	LD	A,%60
0B0369 32 F6 1A 0B         A  1037    	LD	(___print_fmt+1),A
0B036D 3E78                A  1038    	LD	A,%78
0B036F 32 F9 1A 0B         A  1039    	LD	(___print_fmt+4),A
0B0373 DD4E0C              A  1040    	LD	C,(IX+%C)
0B0376 0600                A  1041    	LD	B,%0
0B0378 C5                  A  1042    	PUSH	BC
0B0379 DD0709              A  1043    	LD	BC,(IX+%9)
0B037C C5                  A  1044    	PUSH	BC
0B037D CD A5 18 0B         A  1045    	CALL	__u_ultoa
0B0381 C1                  A  1046    	POP	BC
0B0382 C1                  A  1047    	POP	BC
0B0383 01 EA 20 0B         A  1048    	LD	BC,L__20
0B0387 C5                  A  1049    	PUSH	BC
0B0388 CD DB 0F 0B         A  1050    	CALL	___print_sendstring
0B038C C1                  A  1051    	POP	BC
                           A  1052    ;  118				break;
                           A  1053    .LINE 118
                           A  1054    
0B038D 18 48               A  1055    	JR	L_32
                           A  1056    ;  119			case VDP:
0B038F                     A  1057    L_30:
                           A  1058    .LINE 119
                           A  1059    
                           A  1060    ;  120				printf("\r\n\r\n0x%04lX - f
                           A  1061    .LINE 120
                           A  1062    
0B038F 01 4C 11 0B         A  1063    	LD	BC,___print_uputch
0B0393 ED43 04 20 0B       A  1064    	LD	(___print_xputch),BC
0B0398 01 01 21 0B         A  1065    	LD	BC,L__21
0B039C C5                  A  1066    	PUSH	BC
0B039D CD DB 0F 0B         A  1067    	CALL	___print_sendstring
0B03A1 C1                  A  1068    	POP	BC
0B03A2 3E04                A  1069    	LD	A,%4
0B03A4 32 FA 1A 0B         A  1070    	LD	(___print_fmt+5),A
0B03A8 3E60                A  1071    	LD	A,%60
0B03AA 32 F6 1A 0B         A  1072    	LD	(___print_fmt+1),A
0B03AE 3E78                A  1073    	LD	A,%78
0B03B0 32 F9 1A 0B         A  1074    	LD	(___print_fmt+4),A
0B03B4 DD4E0C              A  1075    	LD	C,(IX+%C)
0B03B7 0600                A  1076    	LD	B,%0
0B03B9 C5                  A  1077    	PUSH	BC
0B03BA DD0709              A  1078    	LD	BC,(IX+%9)
0B03BD C5                  A  1079    	PUSH	BC
0B03BE CD A5 18 0B         A  1080    	CALL	__u_ultoa
0B03C2 C1                  A  1081    	POP	BC
0B03C3 C1                  A  1082    	POP	BC
0B03C4 01 08 21 0B         A  1083    	LD	BC,L__22
0B03C8 C5                  A  1084    	PUSH	BC
0B03C9 CD DB 0F 0B         A  1085    	CALL	___print_sendstring
0B03CD C1                  A  1086    	POP	BC
                           A  1087    ;  121				break;
                           A  1088    .LINE 121
                           A  1089    
0B03CE 18 07               A  1090    	JR	L_32
                           A  1091    ;  122		}
                           A  1092    ;  123	
                           A  1093    ;  124		while((response != 'y') && (respons
0B03D0                     A  1094    L_33:
                           A  1095    .LINE 124
                           A  1096    
0B03D0 CD C1 0A 0B         A  1097    	CALL	_getch
0B03D4 DD77FF              A  1098    	LD	(IX+%FFFFFFFF),A
0B03D7                     A  1099    L_32:
0B03D7 DD7EFF              A  1100    	LD	A,(IX+%FFFFFFFF)
0B03DA FE79                A  1101    	CP	A,%79
0B03DC 28 07               A  1102    	JR	Z,L_37
0B03DE DD7EFF              A  1103    	LD	A,(IX+%FFFFFFFF)
0B03E1 FE6E                A  1104    	CP	A,%6E
0B03E3 20 EB               A  1105    	JR	NZ,L_33
0B03E5                     A  1106    L_37:
                           A  1107    ;  125		if(response == 'n') printf("\r\nUse
                           A  1108    .LINE 125
                           A  1109    
0B03E5 DD7EFF              A  1110    	LD	A,(IX+%FFFFFFFF)
0B03E8 FE6E                A  1111    	CP	A,%6E
0B03EA 20 15               A  1112    	JR	NZ,L_36
0B03EC 01 4C 11 0B         A  1113    	LD	BC,___print_uputch
0B03F0 ED43 04 20 0B       A  1114    	LD	(___print_xputch),BC
0B03F5 01 1F 21 0B         A  1115    	LD	BC,L__26
0B03F9 C5                  A  1116    	PUSH	BC
0B03FA CD DB 0F 0B         A  1117    	CALL	___print_sendstring
0B03FE C1                  A  1118    	POP	BC
                           A  1119    ;  126		else printf("\r\n\r\n");
                           A  1120    .LINE 126
                           A  1121    
0B03FF 18 13               A  1122    	JR	L_38
0B0401                     A  1123    L_36:
0B0401 01 4C 11 0B         A  1124    	LD	BC,___print_uputch
0B0405 ED43 04 20 0B       A  1125    	LD	(___print_xputch),BC
0B040A 01 30 21 0B         A  1126    	LD	BC,L__27
0B040E C5                  A  1127    	PUSH	BC
0B040F CD DB 0F 0B         A  1128    	CALL	___print_sendstring
0B0413 C1                  A  1129    	POP	BC
0B0414                     A  1130    L_38:
                           A  1131    ;  127		return response == 'y';
                           A  1132    .LINE 127
                           A  1133    
0B0414 DD7EFF              A  1134    	LD	A,(IX+%FFFFFFFF)
0B0417 FE79                A  1135    	CP	A,%79
0B0419 20 04               A  1136    	JR	NZ,L__29
0B041B 3E01                A  1137    	LD	A,%1
0B041D 18 01               A  1138    	JR	L__30
0B041F                     A  1139    L__29:
0B041F AF                  A  1140    	XOR	A,A
0B0420                     A  1141    L__30:
                           A  1142    ;  128	}
                           A  1143    .LINE 128
                           A  1144    
0B0420 DDF9                A  1145    	LD	SP,IX
0B0422 DDE1                A  1146    	POP	IX
0B0424 C9                  A  1147    	RET	
                           A  1148    
                           A  1149    
                           A  1150    ;**************************** _getResponse ****
                           A  1151    ;Name                         Addr/Register   S
                           A  1152    ;_getch                              IMPORT  --
                           A  1153    ;__u_ultoa                           IMPORT  --
                           A  1154    ;___print_fmt                        IMPORT    
                           A  1155    ;___print_sendstring                 IMPORT  --
                           A  1156    ;___print_xputch                     IMPORT    
                           A  1157    ;___print_uputch                     IMPORT  --
                           A  1158    ;response                              IX-1    
                           A  1159    ;crc                                   IX+9    
                           A  1160    ;t                                     IX+6    
                           A  1161    
                           A  1162    
                           A  1163    ; Stack Frame Size: 16 (bytes)
                           A  1164    ;       Spill Code: 0 (instruction)
                           A  1165    
                           A  1166    
                           A  1167    .ENDFUNC "getResponse",128,"_getResponse"
                           A  1168    	SEGMENT STRSECT
0B20E3                     A  1169    L__19:
0B20E3 0D0A0D0A            A  1170    	DB	13,10,13,10
0B20E7 3078                A  1171    	DB	"0x"
0B20E9 00                  A  1172    	DB	0
0B20EA                     A  1173    L__20:
0B20EA 202D2066 6C617368   A  1174    	DB	" - flash to MOS (y/n)?"
0B20F2 20746F20 4D4F5320 
0B20FA 28792F6E 293F 
0B2100 00                  A  1175    	DB	0
0B2101                     A  1176    L__21:
0B2101 0D0A0D0A            A  1177    	DB	13,10,13,10
0B2105 3078                A  1178    	DB	"0x"
0B2107 00                  A  1179    	DB	0
0B2108                     A  1180    L__22:
0B2108 202D2066 6C617368   A  1181    	DB	" - flash to VDP (y/n)?"
0B2110 20746F20 56445020 
0B2118 28792F6E 293F 
0B211E 00                  A  1182    	DB	0
0B211F                     A  1183    L__26:
0B211F 0D0A                A  1184    	DB	13,10
0B2121 55736572 2061626F   A  1185    	DB	"User abort"
0B2129 7274 
0B212B 0A0D0A0D 00         A  1186    	DB	10,13,10,13,0
0B2130                     A  1187    L__27:
0B2130 0D0A0D0A 00         A  1188    	DB	13,10,13,10,0
                           A  1189    	SEGMENT CODE
                           A  1190    ;  129	
                           A  1191    ;  130	uint8_t update_vdp(char *filename) {
0B0425                     A  1192    _update_vdp:
                           A  1193    .DEFINE "_update_vdp"
                           A  1194    
                           A  1195    .VALUE _update_vdp
                           A  1196    
                           A  1197    .CLASS 2
                           A  1198    
                           A  1199    .TYPE 76
                           A  1200    
                           A  1201    .ENDEF
                           A  1202    
                           A  1203    .BEGFUNC "update_vdp",130,"_update_vdp"
                           A  1204    
                           A  1205    .LINE 130
                           A  1206    
                           A  1207    .DEFINE "filename"
                           A  1208    
                           A  1209    .CLASS 65
                           A  1210    
                           A  1211    .VALUE 6
                           A  1212    
                           A  1213    .TYPE 34
                           A  1214    
                           A  1215    .ENDEF
                           A  1216    
                           A  1217    .DEFINE "file"
                           A  1218    
                           A  1219    .CLASS 65
                           A  1220    
                           A  1221    .VALUE -1
                           A  1222    
                           A  1223    .TYPE 12
                           A  1224    
                           A  1225    .ENDEF
                           A  1226    
                           A  1227    .DEFINE "size"
                           A  1228    
                           A  1229    .CLASS 65
                           A  1230    
                           A  1231    .VALUE -4
                           A  1232    
                           A  1233    .TYPE 14
                           A  1234    
                           A  1235    .ENDEF
                           A  1236    
                           A  1237    .DEFINE "filesize"
                           A  1238    
                           A  1239    .CLASS 65
                           A  1240    
                           A  1241    .VALUE -7
                           A  1242    
                           A  1243    .TYPE 14
                           A  1244    
                           A  1245    .ENDEF
                           A  1246    
                           A  1247    .DEFINE "crcresult"
                           A  1248    
                           A  1249    .CLASS 65
                           A  1250    
                           A  1251    .VALUE -11
                           A  1252    
                           A  1253    .TYPE 15
                           A  1254    
                           A  1255    .ENDEF
                           A  1256    
                           A  1257    .DEFINE "buffer"
                           A  1258    
                           A  1259    .CLASS 65
                           A  1260    
                           A  1261    .VALUE -47
                           A  1262    
                           A  1263    .DIM 36
                           A  1264    
                           A  1265    .TYPE 108
                           A  1266    
                           A  1267    .ENDEF
                           A  1268    
0B0425 DDE5                A  1269    	PUSH	IX
0B0427 DD210000 00         A  1270    	LD	IX,0
0B042C DD39                A  1271    	ADD	IX,SP
0B042E ED22D1              A  1272    	LEA	HL,IX+%FFFFFFD1
0B0431 F9                  A  1273    	LD	SP,HL
                           A  1274    ;  131		uint8_t file;
                           A  1275    ;  132		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1276    ;  133		uint24_t filesize;
                           A  1277    ;  134		uint32_t crcresult;
                           A  1278    ;  135		uint24_t size, n;
                           A  1279    ;  136		uint8_t response;
                           A  1280    ;  137	
                           A  1281    ;  138		putch(12); // cls
                           A  1282    .LINE 138
                           A  1283    
0B0432 010C0000            A  1284    	LD	BC,12
0B0436 C5                  A  1285    	PUSH	BC
0B0437 CD E5 00 0B         A  1286    	CALL	_putch
0B043B C1                  A  1287    	POP	BC
                           A  1288    ;  139		print_version();	
                           A  1289    .LINE 139
                           A  1290    
0B043C CD E5 02 0B         A  1291    	CALL	_print_version
                           A  1292    ;  140		printf("Unlocking VDP updater...\r\
                           A  1293    .LINE 140
                           A  1294    
0B0440 01 4C 11 0B         A  1295    	LD	BC,___print_uputch
0B0444 ED43 04 20 0B       A  1296    	LD	(___print_xputch),BC
0B0449 01 35 21 0B         A  1297    	LD	BC,L__32
0B044D C5                  A  1298    	PUSH	BC
0B044E CD DB 0F 0B         A  1299    	CALL	___print_sendstring
0B0452 C1                  A  1300    	POP	BC
                           A  1301    ;  141		
                           A  1302    ;  142		if(!vdp_ota_present()) {
                           A  1303    .LINE 142
                           A  1304    
0B0453 CD A3 01 0B         A  1305    	CALL	_vdp_ota_present
0B0457 B7                  A  1306    	OR	A,A
0B0458 20 18               A  1307    	JR	NZ,L_41
                           A  1308    ;  143			printf(" failed - incompatible 
                           A  1309    .LINE 143
                           A  1310    
0B045A 01 4C 11 0B         A  1311    	LD	BC,___print_uputch
0B045E ED43 04 20 0B       A  1312    	LD	(___print_xputch),BC
0B0463 01 50 21 0B         A  1313    	LD	BC,L__34
0B0467 C5                  A  1314    	PUSH	BC
0B0468 CD DB 0F 0B         A  1315    	CALL	___print_sendstring
0B046C C1                  A  1316    	POP	BC
                           A  1317    ;  144			return 0;
                           A  1318    .LINE 144
                           A  1319    
0B046D AF                  A  1320    	XOR	A,A
0B046E C3 E0 05 0B         A  1321    	JR	L_53
                           A  1322    ;  145		}
0B0472                     A  1323    L_41:
                           A  1324    .LINE 145
                           A  1325    
                           A  1326    ;  146	
                           A  1327    ;  147		file = mos_fopen(filename, fa_read)
                           A  1328    .LINE 147
                           A  1329    
0B0472 01010000            A  1330    	LD	BC,1
0B0476 C5                  A  1331    	PUSH	BC
0B0477 DD0706              A  1332    	LD	BC,(IX+%6)
0B047A C5                  A  1333    	PUSH	BC
0B047B CD 0B 0B 0B         A  1334    	CALL	_mos_fopen
0B047F C1                  A  1335    	POP	BC
0B0480 C1                  A  1336    	POP	BC
0B0481 DD77FF              A  1337    	LD	(IX+%FFFFFFFF),A
                           A  1338    ;  148		if(!file) {
                           A  1339    .LINE 148
                           A  1340    
0B0484 B7                  A  1341    	OR	A,A
0B0485 20 2C               A  1342    	JR	NZ,L_43
                           A  1343    ;  149			printf("Error opening \"%s\"\n\
                           A  1344    .LINE 149
                           A  1345    
0B0487 01 4C 11 0B         A  1346    	LD	BC,___print_uputch
0B048B ED43 04 20 0B       A  1347    	LD	(___print_xputch),BC
0B0490 01 6D 21 0B         A  1348    	LD	BC,L__36
0B0494 C5                  A  1349    	PUSH	BC
0B0495 CD DB 0F 0B         A  1350    	CALL	___print_sendstring
0B0499 C1                  A  1351    	POP	BC
0B049A DD0706              A  1352    	LD	BC,(IX+%6)
0B049D C5                  A  1353    	PUSH	BC
0B049E CD DB 0F 0B         A  1354    	CALL	___print_sendstring
0B04A2 C1                  A  1355    	POP	BC
0B04A3 01 7D 21 0B         A  1356    	LD	BC,L__37
0B04A7 C5                  A  1357    	PUSH	BC
0B04A8 CD DB 0F 0B         A  1358    	CALL	___print_sendstring
0B04AC C1                  A  1359    	POP	BC
                           A  1360    ;  150			return EXIT_FILENOTFOUND;
                           A  1361    .LINE 150
                           A  1362    
0B04AD 3E04                A  1363    	LD	A,%4
0B04AF C3 E0 05 0B         A  1364    	JR	L_53
                           A  1365    ;  151		}
0B04B3                     A  1366    L_43:
                           A  1367    .LINE 151
                           A  1368    
                           A  1369    ;  152	
                           A  1370    ;  153		mos_fread(file, (char *)buffer, ESP
                           A  1371    .LINE 153
                           A  1372    
0B04B3 01240000            A  1373    	LD	BC,36
0B04B7 C5                  A  1374    	PUSH	BC
0B04B8 ED65D1              A  1375    	PEA	IX+%FFFFFFD1
0B04BB DD4EFF              A  1376    	LD	C,(IX+%FFFFFFFF)
0B04BE 0600                A  1377    	LD	B,%0
0B04C0 C5                  A  1378    	PUSH	BC
0B04C1 CD 4D 0B 0B         A  1379    	CALL	_mos_fread
0B04C5 C1                  A  1380    	POP	BC
0B04C6 C1                  A  1381    	POP	BC
0B04C7 C1                  A  1382    	POP	BC
                           A  1383    ;  154		if(!containsESP32Header(buffer)) {
                           A  1384    .LINE 154
                           A  1385    
0B04C8 ED65D1              A  1386    	PEA	IX+%FFFFFFD1
0B04CB CD 91 02 0B         A  1387    	CALL	_containsESP32Header
0B04CF C1                  A  1388    	POP	BC
0B04D0 B7                  A  1389    	OR	A,A
0B04D1 20 24               A  1390    	JR	NZ,L_45
                           A  1391    ;  155			printf("File does not contain v
                           A  1392    .LINE 155
                           A  1393    
0B04D3 01 4C 11 0B         A  1394    	LD	BC,___print_uputch
0B04D7 ED43 04 20 0B       A  1395    	LD	(___print_xputch),BC
0B04DC 01 81 21 0B         A  1396    	LD	BC,L__39
0B04E0 C5                  A  1397    	PUSH	BC
0B04E1 CD DB 0F 0B         A  1398    	CALL	___print_sendstring
0B04E5 C1                  A  1399    	POP	BC
                           A  1400    ;  156			mos_fclose(file);
                           A  1401    .LINE 156
                           A  1402    
0B04E6 DD4EFF              A  1403    	LD	C,(IX+%FFFFFFFF)
0B04E9 0600                A  1404    	LD	B,%0
0B04EB C5                  A  1405    	PUSH	BC
0B04EC CD 23 0B 0B         A  1406    	CALL	_mos_fclose
0B04F0 C1                  A  1407    	POP	BC
                           A  1408    ;  157			return EXIT_INVALIDPARAMETER;
                           A  1409    .LINE 157
                           A  1410    
0B04F1 3E13                A  1411    	LD	A,%13
0B04F3 C3 E0 05 0B         A  1412    	JR	L_53
                           A  1413    ;  158		}
0B04F7                     A  1414    L_45:
                           A  1415    .LINE 158
                           A  1416    
                           A  1417    ;  159		printf("\r\nValid ESP32 code\r\nCal
                           A  1418    .LINE 159
                           A  1419    
0B04F7 01 4C 11 0B         A  1420    	LD	BC,___print_uputch
0B04FB ED43 04 20 0B       A  1421    	LD	(___print_xputch),BC
0B0500 01 AA 21 0B         A  1422    	LD	BC,L__40
0B0504 C5                  A  1423    	PUSH	BC
0B0505 CD DB 0F 0B         A  1424    	CALL	___print_sendstring
0B0509 C1                  A  1425    	POP	BC
                           A  1426    ;  160		crc32_initialize();
                           A  1427    .LINE 160
                           A  1428    
0B050A CD 99 0E 0B         A  1429    	CALL	_crc32_initialize
                           A  1430    ;  161		mos_flseek(file, 0);
                           A  1431    .LINE 161
                           A  1432    
0B050E 01000000            A  1433    	LD	BC,0
0B0512 C5                  A  1434    	PUSH	BC
0B0513 C5                  A  1435    	PUSH	BC
0B0514 DD4EFF              A  1436    	LD	C,(IX+%FFFFFFFF)
0B0517 0600                A  1437    	LD	B,%0
0B0519 C5                  A  1438    	PUSH	BC
0B051A CD C7 0B 0B         A  1439    	CALL	_mos_flseek
0B051E C1                  A  1440    	POP	BC
0B051F C1                  A  1441    	POP	BC
0B0520 C1                  A  1442    	POP	BC
                           A  1443    ;  162		while(1) {
0B0521                     A  1444    L_49:
                           A  1445    .LINE 162
                           A  1446    
                           A  1447    ;  163			size = mos_fread(file, (char *)
                           A  1448    .LINE 163
                           A  1449    
0B0521 01004000            A  1450    	LD	BC,16384
0B0525 C5                  A  1451    	PUSH	BC
0B0526 01000005            A  1452    	LD	BC,327680
0B052A C5                  A  1453    	PUSH	BC
0B052B DD4EFF              A  1454    	LD	C,(IX+%FFFFFFFF)
0B052E 0600                A  1455    	LD	B,%0
0B0530 C5                  A  1456    	PUSH	BC
0B0531 CD 4D 0B 0B         A  1457    	CALL	_mos_fread
0B0535 C1                  A  1458    	POP	BC
0B0536 C1                  A  1459    	POP	BC
0B0537 C1                  A  1460    	POP	BC
0B0538 DD2FFC              A  1461    	LD	(IX+%FFFFFFFC),HL
                           A  1462    ;  164			if(size == 0) break;
                           A  1463    .LINE 164
                           A  1464    
0B053B CD 09 15 0B         A  1465    	CALL	__icmpzero
0B053F 28 1B               A  1466    	JR	Z,L_50
                           A  1467    ;  165			putch('.');
                           A  1468    .LINE 165
                           A  1469    
0B0541 012E0000            A  1470    	LD	BC,46
0B0545 C5                  A  1471    	PUSH	BC
0B0546 CD E5 00 0B         A  1472    	CALL	_putch
0B054A C1                  A  1473    	POP	BC
                           A  1474    ;  166			crc32((char *)BUFFER1, size);
                           A  1475    .LINE 166
                           A  1476    
0B054B DD07FC              A  1477    	LD	BC,(IX+%FFFFFFFC)
0B054E C5                  A  1478    	PUSH	BC
0B054F 01000005            A  1479    	LD	BC,327680
0B0553 C5                  A  1480    	PUSH	BC
0B0554 CD EB 0E 0B         A  1481    	CALL	_crc32
0B0558 C1                  A  1482    	POP	BC
0B0559 C1                  A  1483    	POP	BC
0B055A 18 C5               A  1484    	JR	L_49
                           A  1485    ;  167		}
0B055C                     A  1486    L_50:
                           A  1487    .LINE 167
                           A  1488    
                           A  1489    ;  168		crcresult = crc32_finalize();
                           A  1490    .LINE 168
                           A  1491    
0B055C CD AE 0E 0B         A  1492    	CALL	_crc32_finalize
0B0560 DD2FF5              A  1493    	LD	(IX+%FFFFFFF5),HL
0B0563 DD73F8              A  1494    	LD	(IX+%FFFFFFF8),E
                           A  1495    ;  169		if(!getResponse(VDP, crcresult)) {
                           A  1496    .LINE 169
                           A  1497    
0B0566 DD4EF8              A  1498    	LD	C,(IX+%FFFFFFF8)
0B0569 0600                A  1499    	LD	B,%0
0B056B C5                  A  1500    	PUSH	BC
0B056C DD07F5              A  1501    	LD	BC,(IX+%FFFFFFF5)
0B056F C5                  A  1502    	PUSH	BC
0B0570 01010000            A  1503    	LD	BC,1
0B0574 C5                  A  1504    	PUSH	BC
0B0575 CD 2B 03 0B         A  1505    	CALL	_getResponse
0B0579 C1                  A  1506    	POP	BC
0B057A C1                  A  1507    	POP	BC
0B057B C1                  A  1508    	POP	BC
0B057C B7                  A  1509    	OR	A,A
0B057D 20 0E               A  1510    	JR	NZ,L_52
                           A  1511    ;  170			mos_fclose(file);
                           A  1512    .LINE 170
                           A  1513    
0B057F DD4EFF              A  1514    	LD	C,(IX+%FFFFFFFF)
0B0582 0600                A  1515    	LD	B,%0
0B0584 C5                  A  1516    	PUSH	BC
0B0585 CD 23 0B 0B         A  1517    	CALL	_mos_fclose
0B0589 C1                  A  1518    	POP	BC
                           A  1519    ;  171			return 0;
                           A  1520    .LINE 171
                           A  1521    
0B058A AF                  A  1522    	XOR	A,A
0B058B 18 53               A  1523    	JR	L_53
                           A  1524    ;  172		}
0B058D                     A  1525    L_52:
                           A  1526    .LINE 172
                           A  1527    
                           A  1528    ;  173		// Do actual work here
                           A  1529    ;  174		mos_flseek(file, 0); // reset to ze
                           A  1530    .LINE 174
                           A  1531    
0B058D 01000000            A  1532    	LD	BC,0
0B0591 C5                  A  1533    	PUSH	BC
0B0592 C5                  A  1534    	PUSH	BC
0B0593 DD4EFF              A  1535    	LD	C,(IX+%FFFFFFFF)
0B0596 0600                A  1536    	LD	B,%0
0B0598 C5                  A  1537    	PUSH	BC
0B0599 CD C7 0B 0B         A  1538    	CALL	_mos_flseek
0B059D C1                  A  1539    	POP	BC
0B059E C1                  A  1540    	POP	BC
0B059F C1                  A  1541    	POP	BC
                           A  1542    ;  175		printf("Updating VDP firmware\r\n")
                           A  1543    .LINE 175
                           A  1544    
0B05A0 01 4C 11 0B         A  1545    	LD	BC,___print_uputch
0B05A4 ED43 04 20 0B       A  1546    	LD	(___print_xputch),BC
0B05A9 01 D0 21 0B         A  1547    	LD	BC,L__43
0B05AD C5                  A  1548    	PUSH	BC
0B05AE CD DB 0F 0B         A  1549    	CALL	___print_sendstring
0B05B2 C1                  A  1550    	POP	BC
                           A  1551    ;  176		filesize = getFileSize(file);	
                           A  1552    .LINE 176
                           A  1553    
0B05B3 DD4EFF              A  1554    	LD	C,(IX+%FFFFFFFF)
0B05B6 0600                A  1555    	LD	B,%0
0B05B8 C5                  A  1556    	PUSH	BC
0B05B9 CD 4B 0F 0B         A  1557    	CALL	_getFileSize
0B05BD C1                  A  1558    	POP	BC
0B05BE DD2FF9              A  1559    	LD	(IX+%FFFFFFF9),HL
                           A  1560    ;  177		startVDPupdate(file, filesize);
                           A  1561    .LINE 177
                           A  1562    
0B05C1 E5C1                A  1563    	LD	BC,HL
0B05C3 C5                  A  1564    	PUSH	BC
0B05C4 DD4EFF              A  1565    	LD	C,(IX+%FFFFFFFF)
0B05C7 0600                A  1566    	LD	B,%0
0B05C9 C5                  A  1567    	PUSH	BC
0B05CA CD 32 0C 0B         A  1568    	CALL	_startVDPupdate
0B05CE C1                  A  1569    	POP	BC
0B05CF C1                  A  1570    	POP	BC
                           A  1571    ;  178		mos_fclose(file);
                           A  1572    .LINE 178
                           A  1573    
0B05D0 DD4EFF              A  1574    	LD	C,(IX+%FFFFFFFF)
0B05D3 0600                A  1575    	LD	B,%0
0B05D5 C5                  A  1576    	PUSH	BC
0B05D6 CD 23 0B 0B         A  1577    	CALL	_mos_fclose
0B05DA C1                  A  1578    	POP	BC
                           A  1579    ;  179		reset();
                           A  1580    .LINE 179
                           A  1581    
0B05DB CD 11 0C 0B         A  1582    	CALL	_reset
                           A  1583    ;  180		return 0; // will never return, but
                           A  1584    .LINE 180
                           A  1585    
0B05DF AF                  A  1586    	XOR	A,A
                           A  1587    ;  181	}
0B05E0                     A  1588    L_53:
                           A  1589    .LINE 181
                           A  1590    
0B05E0 DDF9                A  1591    	LD	SP,IX
0B05E2 DDE1                A  1592    	POP	IX
0B05E4 C9                  A  1593    	RET	
                           A  1594    
                           A  1595    
                           A  1596    ;**************************** _update_vdp *****
                           A  1597    ;Name                         Addr/Register   S
                           A  1598    ;_reset                              IMPORT  --
                           A  1599    ;_startVDPupdate                     IMPORT  --
                           A  1600    ;_getFileSize                        IMPORT  --
                           A  1601    ;_crc32_finalize                     IMPORT  --
                           A  1602    ;_crc32                              IMPORT  --
                           A  1603    ;_mos_flseek                         IMPORT  --
                           A  1604    ;_crc32_initialize                   IMPORT  --
                           A  1605    ;_mos_fclose                         IMPORT  --
                           A  1606    ;_mos_fread                          IMPORT  --
                           A  1607    ;_mos_fopen                          IMPORT  --
                           A  1608    ;___print_sendstring                 IMPORT  --
                           A  1609    ;___print_xputch                     IMPORT    
                           A  1610    ;___print_uputch                     IMPORT  --
                           A  1611    ;_putch                              IMPORT  --
                           A  1612    ;buffer                               IX-47    
                           A  1613    ;crcresult                            IX-11    
                           A  1614    ;filesize                              IX-7    
                           A  1615    ;size                                  IX-4    
                           A  1616    ;file                                  IX-1    
                           A  1617    ;filename                              IX+6    
                           A  1618    
                           A  1619    
                           A  1620    ; Stack Frame Size: 56 (bytes)
                           A  1621    ;       Spill Code: 0 (instruction)
                           A  1622    
                           A  1623    
                           A  1624    .ENDFUNC "update_vdp",181,"_update_vdp"
                           A  1625    	SEGMENT STRSECT
0B2135                     A  1626    L__32:
0B2135 556E6C6F 636B696E   A  1627    	DB	"Unlocking VDP updater..."
0B213D 67205644 50207570 
0B2145 64617465 722E2E2E 
0B214D 0D0A00              A  1628    	DB	13,10,0
0B2150                     A  1629    L__34:
0B2150 20666169 6C656420   A  1630    	DB	" failed - incompatible VDP"
0B2158 2D20696E 636F6D70 
0B2160 61746962 6C652056 
0B2168 4450 
0B216A 0D0A00              A  1631    	DB	13,10,0
0B216D                     A  1632    L__36:
0B216D 4572726F 72206F70   A  1633    	DB	"Error opening \""
0B2175 656E696E 672022 
0B217C 00                  A  1634    	DB	0
0B217D                     A  1635    L__37:
0B217D 22                  A  1636    	DB	"\""
0B217E 0A0D00              A  1637    	DB	10,13,0
0B2181                     A  1638    L__39:
0B2181 46696C65 20646F65   A  1639    	DB	"File does not contain valid ESP32 code
0B2189 73206E6F 7420636F 
0B2191 6E746169 6E207661 
0B2199 6C696420 45535033 
0B21A1 3220636F 6465 
0B21A7 0D0A00              A  1640    	DB	13,10,0
0B21AA                     A  1641    L__40:
0B21AA 0D0A                A  1642    	DB	13,10
0B21AC 56616C69 64204553   A  1643    	DB	"Valid ESP32 code"
0B21B4 50333220 636F6465 
0B21BC 0D0A                A  1644    	DB	13,10
0B21BE 43616C63 756C6174   A  1645    	DB	"Calculating CRC32"
0B21C6 696E6720 43524333 
0B21CE 32 
0B21CF 00                  A  1646    	DB	0
0B21D0                     A  1647    L__43:
0B21D0 55706461 74696E67   A  1648    	DB	"Updating VDP firmware"
0B21D8 20564450 20666972 
0B21E0 6D776172 65 
0B21E5 0D0A00              A  1649    	DB	13,10,0
                           A  1650    	SEGMENT CODE
                           A  1651    ;  182	
                           A  1652    ;  183	uint8_t update_mos(char *filename) {
0B05E5                     A  1653    _update_mos:
                           A  1654    .DEFINE "_update_mos"
                           A  1655    
                           A  1656    .VALUE _update_mos
                           A  1657    
                           A  1658    .CLASS 2
                           A  1659    
                           A  1660    .TYPE 76
                           A  1661    
                           A  1662    .ENDEF
                           A  1663    
                           A  1664    .BEGFUNC "update_mos",183,"_update_mos"
                           A  1665    
                           A  1666    .LINE 183
                           A  1667    
                           A  1668    .DEFINE "filename"
                           A  1669    
                           A  1670    .CLASS 65
                           A  1671    
                           A  1672    .VALUE 6
                           A  1673    
                           A  1674    .TYPE 34
                           A  1675    
                           A  1676    .ENDEF
                           A  1677    
                           A  1678    .DEFINE "counter"
                           A  1679    
                           A  1680    .CLASS 65
                           A  1681    
                           A  1682    .VALUE -3
                           A  1683    
                           A  1684    .TYPE 14
                           A  1685    
                           A  1686    .ENDEF
                           A  1687    
                           A  1688    .DEFINE "file"
                           A  1689    
                           A  1690    .CLASS 65
                           A  1691    
                           A  1692    .VALUE -4
                           A  1693    
                           A  1694    .TYPE 12
                           A  1695    
                           A  1696    .ENDEF
                           A  1697    
                           A  1698    .DEFINE "addressfrom"
                           A  1699    
                           A  1700    .CLASS 65
                           A  1701    
                           A  1702    .VALUE -7
                           A  1703    
                           A  1704    .TYPE 14
                           A  1705    
                           A  1706    .ENDEF
                           A  1707    
                           A  1708    .DEFINE "pagemax"
                           A  1709    
                           A  1710    .CLASS 65
                           A  1711    
                           A  1712    .VALUE -10
                           A  1713    
                           A  1714    .TYPE 14
                           A  1715    
                           A  1716    .ENDEF
                           A  1717    
                           A  1718    .DEFINE "state"
                           A  1719    
                           A  1720    .CLASS 65
                           A  1721    
                           A  1722    .VALUE -13
                           A  1723    
                           A  1724    .TYPE 4
                           A  1725    
                           A  1726    .ENDEF
                           A  1727    
                           A  1728    .DEFINE "filesize"
                           A  1729    
                           A  1730    .CLASS 65
                           A  1731    
                           A  1732    .VALUE -16
                           A  1733    
                           A  1734    .TYPE 14
                           A  1735    
                           A  1736    .ENDEF
                           A  1737    
                           A  1738    .DEFINE "addressto"
                           A  1739    
                           A  1740    .CLASS 65
                           A  1741    
                           A  1742    .VALUE -19
                           A  1743    
                           A  1744    .TYPE 14
                           A  1745    
                           A  1746    .ENDEF
                           A  1747    
                           A  1748    .DEFINE "ptr"
                           A  1749    
                           A  1750    .CLASS 65
                           A  1751    
                           A  1752    .VALUE -22
                           A  1753    
                           A  1754    .TYPE 34
                           A  1755    
                           A  1756    .ENDEF
                           A  1757    
                           A  1758    .DEFINE "crcresult"
                           A  1759    
                           A  1760    .CLASS 65
                           A  1761    
                           A  1762    .VALUE -26
                           A  1763    
                           A  1764    .TYPE 15
                           A  1765    
                           A  1766    .ENDEF
                           A  1767    
                           A  1768    .DEFINE "got"
                           A  1769    
                           A  1770    .CLASS 65
                           A  1771    
                           A  1772    .VALUE -29
                           A  1773    
                           A  1774    .TYPE 14
                           A  1775    
                           A  1776    .ENDEF
                           A  1777    
                           A  1778    .DEFINE "value"
                           A  1779    
                           A  1780    .CLASS 65
                           A  1781    
                           A  1782    .VALUE -30
                           A  1783    
                           A  1784    .TYPE 12
                           A  1785    
                           A  1786    .ENDEF
                           A  1787    
                           A  1788    .DEFINE "lastpagebytes"
                           A  1789    
                           A  1790    .CLASS 65
                           A  1791    
                           A  1792    .VALUE -33
                           A  1793    
                           A  1794    .TYPE 14
                           A  1795    
                           A  1796    .ENDEF
                           A  1797    
                           A  1798    .DEFINE "size"
                           A  1799    
                           A  1800    .CLASS 65
                           A  1801    
                           A  1802    .VALUE -39
                           A  1803    
                           A  1804    .TYPE 14
                           A  1805    
                           A  1806    .ENDEF
                           A  1807    
                           A  1808    .DEFINE "crcexpected"
                           A  1809    
                           A  1810    .CLASS 65
                           A  1811    
                           A  1812    .VALUE -43
                           A  1813    
                           A  1814    .TYPE 15
                           A  1815    
                           A  1816    .ENDEF
                           A  1817    
0B05E5 DDE5                A  1818    	PUSH	IX
0B05E7 DD210000 00         A  1819    	LD	IX,0
0B05EC DD39                A  1820    	ADD	IX,SP
0B05EE ED22D5              A  1821    	LEA	HL,IX+%FFFFFFD5
0B05F1 F9                  A  1822    	LD	SP,HL
                           A  1823    ;  184		uint32_t crcexpected,crcresult;
                           A  1824    ;  185		uint24_t size = 0;
                           A  1825    .LINE 185
                           A  1826    
0B05F2 01000000            A  1827    	LD	BC,0
0B05F6 DD0FD9              A  1828    	LD	(IX+%FFFFFFD9),BC
                           A  1829    ;  186		uint24_t got;
                           A  1830    ;  187		uint8_t file;
                           A  1831    ;  188		char* ptr = (char*)BUFFER1;
                           A  1832    .LINE 188
                           A  1833    
0B05F9 01000005            A  1834    	LD	BC,327680
0B05FD DD0FEA              A  1835    	LD	(IX+%FFFFFFEA),BC
                           A  1836    ;  189		uint8_t value;
                           A  1837    ;  190		uint24_t counter,pagemax, lastpageb
                           A  1838    ;  191		uint24_t addressto,addressfrom;
                           A  1839    ;  192		enum states state;
                           A  1840    ;  193		uint24_t filesize;
                           A  1841    ;  194	
                           A  1842    ;  195		putch(12); // cls
                           A  1843    .LINE 195
                           A  1844    
0B0600 010C0000            A  1845    	LD	BC,12
0B0604 C5                  A  1846    	PUSH	BC
0B0605 CD E5 00 0B         A  1847    	CALL	_putch
0B0609 C1                  A  1848    	POP	BC
                           A  1849    ;  196		print_version();	
                           A  1850    .LINE 196
                           A  1851    
0B060A CD E5 02 0B         A  1852    	CALL	_print_version
                           A  1853    ;  197		
                           A  1854    ;  198		file = mos_fopen(filename, fa_read)
                           A  1855    .LINE 198
                           A  1856    
0B060E 01010000            A  1857    	LD	BC,1
0B0612 C5                  A  1858    	PUSH	BC
0B0613 DD0706              A  1859    	LD	BC,(IX+%6)
0B0616 C5                  A  1860    	PUSH	BC
0B0617 CD 0B 0B 0B         A  1861    	CALL	_mos_fopen
0B061B C1                  A  1862    	POP	BC
0B061C C1                  A  1863    	POP	BC
0B061D DD77FC              A  1864    	LD	(IX+%FFFFFFFC),A
                           A  1865    ;  199		if(!file)
                           A  1866    .LINE 199
                           A  1867    
0B0620 B7                  A  1868    	OR	A,A
0B0621 20 2C               A  1869    	JR	NZ,L_55
                           A  1870    ;  200		{
                           A  1871    ;  201			printf("Error opening \"%s\"\n\
                           A  1872    .LINE 201
                           A  1873    
0B0623 01 4C 11 0B         A  1874    	LD	BC,___print_uputch
0B0627 ED43 04 20 0B       A  1875    	LD	(___print_xputch),BC
0B062C 01 E8 21 0B         A  1876    	LD	BC,L__46
0B0630 C5                  A  1877    	PUSH	BC
0B0631 CD DB 0F 0B         A  1878    	CALL	___print_sendstring
0B0635 C1                  A  1879    	POP	BC
0B0636 DD0706              A  1880    	LD	BC,(IX+%6)
0B0639 C5                  A  1881    	PUSH	BC
0B063A CD DB 0F 0B         A  1882    	CALL	___print_sendstring
0B063E C1                  A  1883    	POP	BC
0B063F 01 F8 21 0B         A  1884    	LD	BC,L__47
0B0643 C5                  A  1885    	PUSH	BC
0B0644 CD DB 0F 0B         A  1886    	CALL	___print_sendstring
0B0648 C1                  A  1887    	POP	BC
                           A  1888    ;  202			return EXIT_FILENOTFOUND;
                           A  1889    .LINE 202
                           A  1890    
0B0649 3E04                A  1891    	LD	A,%4
0B064B C3 2E 0A 0B         A  1892    	JR	L_100
                           A  1893    ;  203		}
0B064F                     A  1894    L_55:
                           A  1895    .LINE 203
                           A  1896    
                           A  1897    ;  204	
                           A  1898    ;  205		mos_fread(file, (char *)BUFFER1, MO
                           A  1899    .LINE 205
                           A  1900    
0B064F 01050000            A  1901    	LD	BC,5
0B0653 C5                  A  1902    	PUSH	BC
0B0654 01000005            A  1903    	LD	BC,327680
0B0658 C5                  A  1904    	PUSH	BC
0B0659 DD4EFC              A  1905    	LD	C,(IX+%FFFFFFFC)
0B065C 0600                A  1906    	LD	B,%0
0B065E C5                  A  1907    	PUSH	BC
0B065F CD 4D 0B 0B         A  1908    	CALL	_mos_fread
0B0663 C1                  A  1909    	POP	BC
0B0664 C1                  A  1910    	POP	BC
0B0665 C1                  A  1911    	POP	BC
                           A  1912    ;  206		if(!containsMosHeader((uint8_t *)BU
                           A  1913    .LINE 206
                           A  1914    
0B0666 01000005            A  1915    	LD	BC,327680
0B066A C5                  A  1916    	PUSH	BC
0B066B CD 46 02 0B         A  1917    	CALL	_containsMosHeader
0B066F C1                  A  1918    	POP	BC
0B0670 B7                  A  1919    	OR	A,A
0B0671 20 24               A  1920    	JR	NZ,L_57
                           A  1921    ;  207			printf("File does not contain v
                           A  1922    .LINE 207
                           A  1923    
0B0673 01 4C 11 0B         A  1924    	LD	BC,___print_uputch
0B0677 ED43 04 20 0B       A  1925    	LD	(___print_xputch),BC
0B067C 01 FC 21 0B         A  1926    	LD	BC,L__49
0B0680 C5                  A  1927    	PUSH	BC
0B0681 CD DB 0F 0B         A  1928    	CALL	___print_sendstring
0B0685 C1                  A  1929    	POP	BC
                           A  1930    ;  208			mos_fclose(file);
                           A  1931    .LINE 208
                           A  1932    
0B0686 DD4EFC              A  1933    	LD	C,(IX+%FFFFFFFC)
0B0689 0600                A  1934    	LD	B,%0
0B068B C5                  A  1935    	PUSH	BC
0B068C CD 23 0B 0B         A  1936    	CALL	_mos_fclose
0B0690 C1                  A  1937    	POP	BC
                           A  1938    ;  209			return EXIT_INVALIDPARAMETER;
                           A  1939    .LINE 209
                           A  1940    
0B0691 3E13                A  1941    	LD	A,%13
0B0693 C3 2E 0A 0B         A  1942    	JR	L_100
                           A  1943    ;  210		}
0B0697                     A  1944    L_57:
                           A  1945    .LINE 210
                           A  1946    
                           A  1947    ;  211	
                           A  1948    ;  212		filesize = getFileSize(file);
                           A  1949    .LINE 212
                           A  1950    
0B0697 DD4EFC              A  1951    	LD	C,(IX+%FFFFFFFC)
0B069A 0600                A  1952    	LD	B,%0
0B069C C5                  A  1953    	PUSH	BC
0B069D CD 4B 0F 0B         A  1954    	CALL	_getFileSize
0B06A1 C1                  A  1955    	POP	BC
0B06A2 DD2FF0              A  1956    	LD	(IX+%FFFFFFF0),HL
                           A  1957    ;  213		if(filesize > FLASHSIZE) {
                           A  1958    .LINE 213
                           A  1959    
0B06A5 E5C1                A  1960    	LD	BC,HL
0B06A7 21000002            A  1961    	LD	HL,131072
0B06AB B7                  A  1962    	OR	A,A
0B06AC ED42                A  1963    	SBC	HL,BC
0B06AE 30 24               A  1964    	JR	NC,L_59
                           A  1965    ;  214			printf("File too large for 128K
                           A  1966    .LINE 214
                           A  1967    
0B06B0 01 4C 11 0B         A  1968    	LD	BC,___print_uputch
0B06B4 ED43 04 20 0B       A  1969    	LD	(___print_xputch),BC
0B06B9 01 30 22 0B         A  1970    	LD	BC,L__51
0B06BD C5                  A  1971    	PUSH	BC
0B06BE CD DB 0F 0B         A  1972    	CALL	___print_sendstring
0B06C2 C1                  A  1973    	POP	BC
                           A  1974    ;  215			mos_fclose(file);
                           A  1975    .LINE 215
                           A  1976    
0B06C3 DD4EFC              A  1977    	LD	C,(IX+%FFFFFFFC)
0B06C6 0600                A  1978    	LD	B,%0
0B06C8 C5                  A  1979    	PUSH	BC
0B06C9 CD 23 0B 0B         A  1980    	CALL	_mos_fclose
0B06CD C1                  A  1981    	POP	BC
                           A  1982    ;  216			return EXIT_INVALIDPARAMETER;
                           A  1983    .LINE 216
                           A  1984    
0B06CE 3E13                A  1985    	LD	A,%13
0B06D0 C3 2E 0A 0B         A  1986    	JR	L_100
                           A  1987    ;  217		}
0B06D4                     A  1988    L_59:
                           A  1989    .LINE 217
                           A  1990    
                           A  1991    ;  218	
                           A  1992    ;  219		printf("\r\nValid ez80 code\r\nCalc
                           A  1993    .LINE 219
                           A  1994    
0B06D4 01 4C 11 0B         A  1995    	LD	BC,___print_uputch
0B06D8 ED43 04 20 0B       A  1996    	LD	(___print_xputch),BC
0B06DD 01 5A 22 0B         A  1997    	LD	BC,L__52
0B06E1 C5                  A  1998    	PUSH	BC
0B06E2 CD DB 0F 0B         A  1999    	CALL	___print_sendstring
0B06E6 C1                  A  2000    	POP	BC
                           A  2001    ;  220	
                           A  2002    ;  221		crc32_initialize();
                           A  2003    .LINE 221
                           A  2004    
0B06E7 CD 99 0E 0B         A  2005    	CALL	_crc32_initialize
                           A  2006    ;  222		mos_flseek(file, 0);
                           A  2007    .LINE 222
                           A  2008    
0B06EB 01000000            A  2009    	LD	BC,0
0B06EF C5                  A  2010    	PUSH	BC
0B06F0 C5                  A  2011    	PUSH	BC
0B06F1 DD4EFC              A  2012    	LD	C,(IX+%FFFFFFFC)
0B06F4 0600                A  2013    	LD	B,%0
0B06F6 C5                  A  2014    	PUSH	BC
0B06F7 CD C7 0B 0B         A  2015    	CALL	_mos_flseek
0B06FB C1                  A  2016    	POP	BC
0B06FC C1                  A  2017    	POP	BC
0B06FD C1                  A  2018    	POP	BC
                           A  2019    ;  223		
                           A  2020    ;  224		// Read file to memory
                           A  2021    ;  225		while((got = mos_fread(file, ptr, B
                           A  2022    .LINE 225
                           A  2023    
0B06FE 18 22               A  2024    	JR	L_60
0B0700                     A  2025    L_61:
                           A  2026    ;  226			crc32(ptr, got);
                           A  2027    .LINE 226
                           A  2028    
0B0700 DD07E3              A  2029    	LD	BC,(IX+%FFFFFFE3)
0B0703 C5                  A  2030    	PUSH	BC
0B0704 DD07EA              A  2031    	LD	BC,(IX+%FFFFFFEA)
0B0707 C5                  A  2032    	PUSH	BC
0B0708 CD EB 0E 0B         A  2033    	CALL	_crc32
0B070C C1                  A  2034    	POP	BC
0B070D C1                  A  2035    	POP	BC
                           A  2036    ;  227			ptr += got;
                           A  2037    .LINE 227
                           A  2038    
0B070E DD07E3              A  2039    	LD	BC,(IX+%FFFFFFE3)
0B0711 DD27EA              A  2040    	LD	HL,(IX+%FFFFFFEA)
0B0714 09                  A  2041    	ADD	HL,BC
0B0715 DD2FEA              A  2042    	LD	(IX+%FFFFFFEA),HL
                           A  2043    ;  228			putch('.');
                           A  2044    .LINE 228
                           A  2045    
0B0718 012E0000            A  2046    	LD	BC,46
0B071C C5                  A  2047    	PUSH	BC
0B071D CD E5 00 0B         A  2048    	CALL	_putch
0B0721 C1                  A  2049    	POP	BC
                           A  2050    ;  229		}		
0B0722                     A  2051    L_60:
                           A  2052    .LINE 229
                           A  2053    
0B0722 01004000            A  2054    	LD	BC,16384
0B0726 C5                  A  2055    	PUSH	BC
0B0727 DD07EA              A  2056    	LD	BC,(IX+%FFFFFFEA)
0B072A C5                  A  2057    	PUSH	BC
0B072B DD4EFC              A  2058    	LD	C,(IX+%FFFFFFFC)
0B072E 0600                A  2059    	LD	B,%0
0B0730 C5                  A  2060    	PUSH	BC
0B0731 CD 4D 0B 0B         A  2061    	CALL	_mos_fread
0B0735 C1                  A  2062    	POP	BC
0B0736 C1                  A  2063    	POP	BC
0B0737 C1                  A  2064    	POP	BC
0B0738 DD2FE3              A  2065    	LD	(IX+%FFFFFFE3),HL
0B073B E5C1                A  2066    	LD	BC,HL
0B073D B7                  A  2067    	OR	A,A
0B073E ED62                A  2068    	SBC	HL,HL
0B0740 B7                  A  2069    	OR	A,A
0B0741 ED42                A  2070    	SBC	HL,BC
0B0743 38 BB               A  2071    	JR	C,L_61
                           A  2072    ;  230		crcresult = crc32_finalize();
                           A  2073    .LINE 230
                           A  2074    
0B0745 CD AE 0E 0B         A  2075    	CALL	_crc32_finalize
0B0749 DD2FE6              A  2076    	LD	(IX+%FFFFFFE6),HL
0B074C DD73E9              A  2077    	LD	(IX+%FFFFFFE9),E
                           A  2078    ;  231		if(!getResponse(MOS, crcresult)) {
                           A  2079    .LINE 231
                           A  2080    
0B074F DD4EE9              A  2081    	LD	C,(IX+%FFFFFFE9)
0B0752 0600                A  2082    	LD	B,%0
0B0754 C5                  A  2083    	PUSH	BC
0B0755 DD07E6              A  2084    	LD	BC,(IX+%FFFFFFE6)
0B0758 C5                  A  2085    	PUSH	BC
0B0759 01000000            A  2086    	LD	BC,0
0B075D C5                  A  2087    	PUSH	BC
0B075E CD 2B 03 0B         A  2088    	CALL	_getResponse
0B0762 C1                  A  2089    	POP	BC
0B0763 C1                  A  2090    	POP	BC
0B0764 C1                  A  2091    	POP	BC
0B0765 B7                  A  2092    	OR	A,A
0B0766 20 10               A  2093    	JR	NZ,L_64
                           A  2094    ;  232			mos_fclose(file);
                           A  2095    .LINE 232
                           A  2096    
0B0768 DD4EFC              A  2097    	LD	C,(IX+%FFFFFFFC)
0B076B 0600                A  2098    	LD	B,%0
0B076D C5                  A  2099    	PUSH	BC
0B076E CD 23 0B 0B         A  2100    	CALL	_mos_fclose
0B0772 C1                  A  2101    	POP	BC
                           A  2102    ;  233			return 0;
                           A  2103    .LINE 233
                           A  2104    
0B0773 AF                  A  2105    	XOR	A,A
0B0774 C3 2E 0A 0B         A  2106    	JR	L_100
                           A  2107    ;  234		}
0B0778                     A  2108    L_64:
                           A  2109    .LINE 234
                           A  2110    
                           A  2111    ;  235	
                           A  2112    ;  236		// Actual work here	
                           A  2113    ;  237		di();								
                           A  2114    .LINE 237
                           A  2115    
0B0778 F3                  A  2116    	di
                           A  2117    ;  238	
                           A  2118    ;  239		// start address in flash
                           A  2119    ;  240		addressto = FLASHSTART;
                           A  2120    .LINE 240
                           A  2121    
0B0779 01000000            A  2122    	LD	BC,0
0B077D DD0FED              A  2123    	LD	(IX+%FFFFFFED),BC
                           A  2124    ;  241		addressfrom = BUFFER1;
                           A  2125    .LINE 241
                           A  2126    
0B0780 01000005            A  2127    	LD	BC,327680
0B0784 DD0FF9              A  2128    	LD	(IX+%FFFFFFF9),BC
                           A  2129    ;  242		
                           A  2130    ;  243		crcexpected = crcresult;
                           A  2131    .LINE 243
                           A  2132    
0B0787 DD07E6              A  2133    	LD	BC,(IX+%FFFFFFE6)
0B078A DD7EE9              A  2134    	LD	A,(IX+%FFFFFFE9)
0B078D DD0FD5              A  2135    	LD	(IX+%FFFFFFD5),BC
0B0790 DD77D8              A  2136    	LD	(IX+%FFFFFFD8),A
                           A  2137    ;  244		state = firmware;
                           A  2138    .LINE 244
                           A  2139    
0B0793 01000000            A  2140    	LD	BC,0
0B0797 DD0FF3              A  2141    	LD	(IX+%FFFFFFF3),BC
                           A  2142    ;  245		size = filesize;	
                           A  2143    .LINE 245
                           A  2144    
0B079A DD07F0              A  2145    	LD	BC,(IX+%FFFFFFF0)
0B079D DD0FD9              A  2146    	LD	(IX+%FFFFFFD9),BC
                           A  2147    ;  246		while(1)
0B07A0                     A  2148    L_98:
                           A  2149    .LINE 246
                           A  2150    
                           A  2151    ;  247		{
                           A  2152    ;  248			switch(state)
                           A  2153    .LINE 248
                           A  2154    
0B07A0 DD27F3              A  2155    	LD	HL,(IX+%FFFFFFF3)
0B07A3 CD EB 17 0B         A  2156    	CALL	__case8D
0B07A7 E9                  A  2157    	JP	(HL)
0B07A8                     A  2158    L__55:
0B07A8 0200                A  2159    	DW	2
0B07AA 00                  A  2160    	DB	0
0B07AB B5070B              A  2161    	DW24	L_65	
                           A  2162    
0B07AE 01                  A  2163    	DB	1
0B07AF C2070B              A  2164    	DW24	L_66	
                           A  2165    
0B07B2 CF070B              A  2166    	DW24	L_67	
                           A  2167    
                           A  2168    ;  249			{
                           A  2169    ;  250				case firmware:
0B07B5                     A  2170    L_65:
                           A  2171    .LINE 250
                           A  2172    
                           A  2173    ;  251					// start address in fla
                           A  2174    ;  252					addressfrom = BUFFER1;
                           A  2175    .LINE 252
                           A  2176    
0B07B5 01000005            A  2177    	LD	BC,327680
0B07B9 DD0FF9              A  2178    	LD	(IX+%FFFFFFF9),BC
                           A  2179    ;  253					crc32_initialize();
                           A  2180    .LINE 253
                           A  2181    
0B07BC CD 99 0E 0B         A  2182    	CALL	_crc32_initialize
                           A  2183    ;  254					break;
                           A  2184    .LINE 254
                           A  2185    
0B07C0 18 48               A  2186    	JR	L_70
                           A  2187    ;  255				case retry:
0B07C2                     A  2188    L_66:
                           A  2189    .LINE 255
                           A  2190    
                           A  2191    ;  256					// start address in fla
                           A  2192    ;  257					addressfrom = BUFFER1;
                           A  2193    .LINE 257
                           A  2194    
0B07C2 01000005            A  2195    	LD	BC,327680
0B07C6 DD0FF9              A  2196    	LD	(IX+%FFFFFFF9),BC
                           A  2197    ;  258					crc32_initialize();
                           A  2198    .LINE 258
                           A  2199    
0B07C9 CD 99 0E 0B         A  2200    	CALL	_crc32_initialize
                           A  2201    ;  259					break;
                           A  2202    .LINE 259
                           A  2203    
0B07CD 18 3B               A  2204    	JR	L_70
                           A  2205    ;  260				default:
0B07CF                     A  2206    L_67:
                           A  2207    .LINE 260
                           A  2208    
                           A  2209    ;  261					// RESET SYSTEM
                           A  2210    ;  262					printf("\r\n");
                           A  2211    .LINE 262
                           A  2212    
0B07CF 01 4C 11 0B         A  2213    	LD	BC,___print_uputch
0B07D3 ED43 04 20 0B       A  2214    	LD	(___print_xputch),BC
0B07D8 01 7F 22 0B         A  2215    	LD	BC,L__56
0B07DC C5                  A  2216    	PUSH	BC
0B07DD CD DB 0F 0B         A  2217    	CALL	___print_sendstring
0B07E1 C1                  A  2218    	POP	BC
                           A  2219    ;  263					printf("Done\r\n");
                           A  2220    .LINE 263
                           A  2221    
0B07E2 01 4C 11 0B         A  2222    	LD	BC,___print_uputch
0B07E6 ED43 04 20 0B       A  2223    	LD	(___print_xputch),BC
0B07EB 01 82 22 0B         A  2224    	LD	BC,L__57
0B07EF C5                  A  2225    	PUSH	BC
0B07F0 CD DB 0F 0B         A  2226    	CALL	___print_sendstring
0B07F4 C1                  A  2227    	POP	BC
                           A  2228    ;  264					printf("Press reset but
                           A  2229    .LINE 264
                           A  2230    
0B07F5 01 4C 11 0B         A  2231    	LD	BC,___print_uputch
0B07F9 ED43 04 20 0B       A  2232    	LD	(___print_xputch),BC
0B07FE 01 89 22 0B         A  2233    	LD	BC,L__58
0B0802 C5                  A  2234    	PUSH	BC
0B0803 CD DB 0F 0B         A  2235    	CALL	___print_sendstring
0B0807 C1                  A  2236    	POP	BC
                           A  2237    ;  265					while(1); // force cold
0B0808                     A  2238    L_69:
                           A  2239    .LINE 265
                           A  2240    
0B0808 18 FE               A  2241    	JR	L_69
                           A  2242    ;  266			}
0B080A                     A  2243    L_70:
                           A  2244    .LINE 266
                           A  2245    
                           A  2246    ;  267	
                           A  2247    ;  268			// Unprotect and erase flash
                           A  2248    ;  269			printf("Erasing flash... ");
                           A  2249    .LINE 269
                           A  2250    
0B080A 01 4C 11 0B         A  2251    	LD	BC,___print_uputch
0B080E ED43 04 20 0B       A  2252    	LD	(___print_xputch),BC
0B0813 01 9C 22 0B         A  2253    	LD	BC,L__59
0B0817 C5                  A  2254    	PUSH	BC
0B0818 CD DB 0F 0B         A  2255    	CALL	___print_sendstring
0B081C C1                  A  2256    	POP	BC
                           A  2257    ;  270			enableFlashKeyRegister();	// 
                           A  2258    .LINE 270
                           A  2259    
0B081D CD E6 0B 0B         A  2260    	CALL	_enableFlashKeyRegister
                           A  2261    ;  271			FLASH_PROT = 0;				// 
                           A  2262    .LINE 271
                           A  2263    
0B0821 AF                  A  2264    	XOR	A,A
0B0822 ED39FA              A  2265    	OUT0	(250),A
                           A  2266    ;  272			enableFlashKeyRegister();	// 
                           A  2267    .LINE 272
                           A  2268    
0B0825 CD E6 0B 0B         A  2269    	CALL	_enableFlashKeyRegister
                           A  2270    ;  273			FLASH_FDIV = 0x5F;			// 
                           A  2271    .LINE 273
                           A  2272    
0B0829 3E5F                A  2273    	LD	A,%5F
0B082B ED39F9              A  2274    	OUT0	(249),A
                           A  2275    ;  274			
                           A  2276    ;  275			for(counter = 0; counter < FLAS
                           A  2277    .LINE 275
                           A  2278    
0B082E 01000000            A  2279    	LD	BC,0
0B0832 DD0FFD              A  2280    	LD	(IX+%FFFFFFFD),BC
0B0835 18 1C               A  2281    	JR	L_76
0B0837                     A  2282    L_74:
                           A  2283    ;  276			{
                           A  2284    ;  277				FLASH_PAGE = counter;
                           A  2285    .LINE 277
                           A  2286    
0B0837 DD7EFD              A  2287    	LD	A,(IX+%FFFFFFFD)
0B083A ED39FC              A  2288    	OUT0	(252),A
                           A  2289    ;  278				FLASH_PGCTL = 0x02;			
                           A  2290    .LINE 278
                           A  2291    
0B083D 3E02                A  2292    	LD	A,%2
0B083F ED39FF              A  2293    	OUT0	(255),A
                           A  2294    ;  279	
                           A  2295    ;  280				do
0B0842                     A  2296    L_72:
                           A  2297    .LINE 280
                           A  2298    
                           A  2299    ;  281				{
                           A  2300    ;  282					value = FLASH_PGCTL;
                           A  2301    .LINE 282
                           A  2302    
0B0842 ED38FF              A  2303    	IN0	A,(255)
0B0845 DD77E2              A  2304    	LD	(IX+%FFFFFFE2),A
                           A  2305    ;  283				}
                           A  2306    ;  284				while(value & 0x02);// wait
                           A  2307    .LINE 284
                           A  2308    
0B0848 E602                A  2309    	AND	A,%2
0B084A 20 F6               A  2310    	JR	NZ,L_72
0B084C DD07FD              A  2311    	LD	BC,(IX+%FFFFFFFD)
0B084F 03                  A  2312    	INC	BC
0B0850 DD0FFD              A  2313    	LD	(IX+%FFFFFFFD),BC
                           A  2314    ;  285			}
0B0853                     A  2315    L_76:
                           A  2316    .LINE 285
                           A  2317    
0B0853 01800000            A  2318    	LD	BC,128
0B0857 DD27FD              A  2319    	LD	HL,(IX+%FFFFFFFD)
0B085A B7                  A  2320    	OR	A,A
0B085B ED42                A  2321    	SBC	HL,BC
0B085D 38 D8               A  2322    	JR	C,L_74
                           A  2323    ;  286			
                           A  2324    ;  287			printf("\r\nWriting new firmwar
                           A  2325    .LINE 287
                           A  2326    
0B085F 01 4C 11 0B         A  2327    	LD	BC,___print_uputch
0B0863 ED43 04 20 0B       A  2328    	LD	(___print_xputch),BC
0B0868 01 AE 22 0B         A  2329    	LD	BC,L__62
0B086C C5                  A  2330    	PUSH	BC
0B086D CD DB 0F 0B         A  2331    	CALL	___print_sendstring
0B0871 C1                  A  2332    	POP	BC
                           A  2333    ;  288			
                           A  2334    ;  289			// determine number of pages to
                           A  2335    ;  290			pagemax = size/PAGESIZE;
                           A  2336    .LINE 290
                           A  2337    
0B0872 DD27F0              A  2338    	LD	HL,(IX+%FFFFFFF0)
0B0875 3E0A                A  2339    	LD	A,%A
0B0877 CD BF 17 0B         A  2340    	CALL	__ishru_b
0B087B DD2FF6              A  2341    	LD	(IX+%FFFFFFF6),HL
                           A  2342    ;  291			if(size%PAGESIZE) // last page 
                           A  2343    .LINE 291
                           A  2344    
0B087E 01FF0300            A  2345    	LD	BC,1023
0B0882 DD27F0              A  2346    	LD	HL,(IX+%FFFFFFF0)
0B0885 CD 51 18 0B         A  2347    	CALL	__iand
0B0889 DD2FDC              A  2348    	LD	(IX+%FFFFFFDC),HL
0B088C CD 09 15 0B         A  2349    	CALL	__icmpzero
0B0890 28 0F               A  2350    	JR	Z,L_79
                           A  2351    ;  292			{
                           A  2352    ;  293				pagemax += 1;
                           A  2353    .LINE 293
                           A  2354    
0B0892 DD07F6              A  2355    	LD	BC,(IX+%FFFFFFF6)
0B0895 03                  A  2356    	INC	BC
0B0896 DD0FF6              A  2357    	LD	(IX+%FFFFFFF6),BC
                           A  2358    ;  294				lastpagebytes = size%PAGESI
                           A  2359    .LINE 294
                           A  2360    
0B0899 DD07DC              A  2361    	LD	BC,(IX+%FFFFFFDC)
0B089C DD0FDF              A  2362    	LD	(IX+%FFFFFFDF),BC
                           A  2363    ;  295			}
                           A  2364    ;  296			else lastpagebytes = PAGESIZE; 
                           A  2365    .LINE 296
                           A  2366    
0B089F 18 07               A  2367    	JR	L_87
0B08A1                     A  2368    L_79:
0B08A1 01000400            A  2369    	LD	BC,1024
0B08A5 DD0FDF              A  2370    	LD	(IX+%FFFFFFDF),BC
0B08A8                     A  2371    L_87:
                           A  2372    ;  297			
                           A  2373    ;  298			// write out each page to flash
                           A  2374    ;  299			for(counter = 0; counter < page
                           A  2375    .LINE 299
                           A  2376    
0B08A8 01000000            A  2377    	LD	BC,0
0B08AC DD0FFD              A  2378    	LD	(IX+%FFFFFFFD),BC
0B08AF C3 5B 09 0B         A  2379    	JR	L_86
0B08B3                     A  2380    L_84:
                           A  2381    ;  300			{
                           A  2382    ;  301				printf("\rWriting flash pag
                           A  2383    .LINE 301
                           A  2384    
0B08B3 01 4C 11 0B         A  2385    	LD	BC,___print_uputch
0B08B7 ED43 04 20 0B       A  2386    	LD	(___print_xputch),BC
0B08BC 01 CA 22 0B         A  2387    	LD	BC,L__64
0B08C0 C5                  A  2388    	PUSH	BC
0B08C1 CD DB 0F 0B         A  2389    	CALL	___print_sendstring
0B08C5 C1                  A  2390    	POP	BC
0B08C6 3E03                A  2391    	LD	A,%3
0B08C8 32 FA 1A 0B         A  2392    	LD	(___print_fmt+5),A
0B08CC 3E40                A  2393    	LD	A,%40
0B08CE 32 F6 1A 0B         A  2394    	LD	(___print_fmt+1),A
0B08D2 DD07FD              A  2395    	LD	BC,(IX+%FFFFFFFD)
0B08D5 03                  A  2396    	INC	BC
0B08D6 AF                  A  2397    	XOR	A,A
0B08D7 C5D1                A  2398    	LD	DE,BC
0B08D9 4F                  A  2399    	LD	C,A
0B08DA 0600                A  2400    	LD	B,%0
0B08DC C5                  A  2401    	PUSH	BC
0B08DD D5                  A  2402    	PUSH	DE
0B08DE CD D2 11 0B         A  2403    	CALL	__u_itoa
0B08E2 C1                  A  2404    	POP	BC
0B08E3 C1                  A  2405    	POP	BC
0B08E4 012F0000            A  2406    	LD	BC,47
0B08E8 C5                  A  2407    	PUSH	BC
0B08E9 CD 4C 11 0B         A  2408    	CALL	___print_uputch
0B08ED C1                  A  2409    	POP	BC
0B08EE 3E03                A  2410    	LD	A,%3
0B08F0 32 FA 1A 0B         A  2411    	LD	(___print_fmt+5),A
0B08F4 3E40                A  2412    	LD	A,%40
0B08F6 32 F6 1A 0B         A  2413    	LD	(___print_fmt+1),A
0B08FA DD07F6              A  2414    	LD	BC,(IX+%FFFFFFF6)
0B08FD AF                  A  2415    	XOR	A,A
0B08FE C5D1                A  2416    	LD	DE,BC
0B0900 4F                  A  2417    	LD	C,A
0B0901 0600                A  2418    	LD	B,%0
0B0903 C5                  A  2419    	PUSH	BC
0B0904 D5                  A  2420    	PUSH	DE
0B0905 CD D2 11 0B         A  2421    	CALL	__u_itoa
0B0909 C1                  A  2422    	POP	BC
0B090A C1                  A  2423    	POP	BC
                           A  2424    ;  302				
                           A  2425    ;  303				if(counter == (pagemax - 1)
                           A  2426    .LINE 303
                           A  2427    
0B090B DD31F6              A  2428    	LD	IY,(IX+%FFFFFFF6)
0B090E ED23FF              A  2429    	LEA	HL,IY+%FFFFFFFF
0B0911 DD07FD              A  2430    	LD	BC,(IX+%FFFFFFFD)
0B0914 B7                  A  2431    	OR	A,A
0B0915 ED42                A  2432    	SBC	HL,BC
0B0917 20 15               A  2433    	JR	NZ,L_82
                           A  2434    ;  304					fastmemcpy(addressto,ad
                           A  2435    .LINE 304
                           A  2436    
0B0919 DD07DF              A  2437    	LD	BC,(IX+%FFFFFFDF)
0B091C C5                  A  2438    	PUSH	BC
0B091D DD07F9              A  2439    	LD	BC,(IX+%FFFFFFF9)
0B0920 C5                  A  2440    	PUSH	BC
0B0921 DD07ED              A  2441    	LD	BC,(IX+%FFFFFFED)
0B0924 C5                  A  2442    	PUSH	BC
0B0925 CD 13 0C 0B         A  2443    	CALL	_fastmemcpy
0B0929 C1                  A  2444    	POP	BC
0B092A C1                  A  2445    	POP	BC
0B092B C1                  A  2446    	POP	BC
                           A  2447    ;  305					//printf("Fake copy to 
                           A  2448    ;  306				else 
                           A  2449    .LINE 306
                           A  2450    
0B092C 18 14               A  2451    	JR	L_83
0B092E                     A  2452    L_82:
                           A  2453    ;  307					fastmemcpy(addressto,ad
                           A  2454    .LINE 307
                           A  2455    
0B092E 01000400            A  2456    	LD	BC,1024
0B0932 C5                  A  2457    	PUSH	BC
0B0933 DD07F9              A  2458    	LD	BC,(IX+%FFFFFFF9)
0B0936 C5                  A  2459    	PUSH	BC
0B0937 DD07ED              A  2460    	LD	BC,(IX+%FFFFFFED)
0B093A C5                  A  2461    	PUSH	BC
0B093B CD 13 0C 0B         A  2462    	CALL	_fastmemcpy
0B093F C1                  A  2463    	POP	BC
0B0940 C1                  A  2464    	POP	BC
0B0941 C1                  A  2465    	POP	BC
0B0942                     A  2466    L_83:
                           A  2467    ;  308					//printf("Fake copy to 
                           A  2468    ;  309			
                           A  2469    ;  310				addressto += PAGESIZE;
                           A  2470    .LINE 310
                           A  2471    
0B0942 01000400            A  2472    	LD	BC,1024
0B0946 DD27ED              A  2473    	LD	HL,(IX+%FFFFFFED)
0B0949 09                  A  2474    	ADD	HL,BC
0B094A DD2FED              A  2475    	LD	(IX+%FFFFFFED),HL
                           A  2476    ;  311				addressfrom += PAGESIZE;
                           A  2477    .LINE 311
                           A  2478    
0B094D DD27F9              A  2479    	LD	HL,(IX+%FFFFFFF9)
0B0950 09                  A  2480    	ADD	HL,BC
0B0951 DD2FF9              A  2481    	LD	(IX+%FFFFFFF9),HL
0B0954 DD07FD              A  2482    	LD	BC,(IX+%FFFFFFFD)
0B0957 03                  A  2483    	INC	BC
0B0958 DD0FFD              A  2484    	LD	(IX+%FFFFFFFD),BC
                           A  2485    ;  312			}
0B095B                     A  2486    L_86:
                           A  2487    .LINE 312
                           A  2488    
0B095B DD07F6              A  2489    	LD	BC,(IX+%FFFFFFF6)
0B095E DD27FD              A  2490    	LD	HL,(IX+%FFFFFFFD)
0B0961 B7                  A  2491    	OR	A,A
0B0962 ED42                A  2492    	SBC	HL,BC
0B0964 DA B3 08 0B         A  2493    	JR	C,L_84
                           A  2494    ;  313			lockFlashKeyRegister();	// lock
                           A  2495    .LINE 313
                           A  2496    
0B0968 CD FE 0B 0B         A  2497    	CALL	_lockFlashKeyRegister
                           A  2498    ;  314			printf("\r\n");
                           A  2499    .LINE 314
                           A  2500    
0B096C 01 4C 11 0B         A  2501    	LD	BC,___print_uputch
0B0970 ED43 04 20 0B       A  2502    	LD	(___print_xputch),BC
0B0975 01 DF 22 0B         A  2503    	LD	BC,L__67
0B0979 C5                  A  2504    	PUSH	BC
0B097A CD DB 0F 0B         A  2505    	CALL	___print_sendstring
0B097E C1                  A  2506    	POP	BC
                           A  2507    ;  315			
                           A  2508    ;  316			//Verify correct CRC in flash
                           A  2509    ;  317			printf("Verifying flash checksu
                           A  2510    .LINE 317
                           A  2511    
0B097F 01 4C 11 0B         A  2512    	LD	BC,___print_uputch
0B0983 ED43 04 20 0B       A  2513    	LD	(___print_xputch),BC
0B0988 01 E2 22 0B         A  2514    	LD	BC,L__68
0B098C C5                  A  2515    	PUSH	BC
0B098D CD DB 0F 0B         A  2516    	CALL	___print_sendstring
0B0991 C1                  A  2517    	POP	BC
                           A  2518    ;  318			crc32((char*)FLASHSTART, size);
                           A  2519    .LINE 318
                           A  2520    
0B0992 DD07F0              A  2521    	LD	BC,(IX+%FFFFFFF0)
0B0995 C5                  A  2522    	PUSH	BC
0B0996 01000000            A  2523    	LD	BC,0
0B099A C5                  A  2524    	PUSH	BC
0B099B CD EB 0E 0B         A  2525    	CALL	_crc32
0B099F C1                  A  2526    	POP	BC
0B09A0 C1                  A  2527    	POP	BC
                           A  2528    ;  319			crcresult = crc32_finalize();
                           A  2529    .LINE 319
                           A  2530    
0B09A1 CD AE 0E 0B         A  2531    	CALL	_crc32_finalize
0B09A5 DD2FE6              A  2532    	LD	(IX+%FFFFFFE6),HL
0B09A8 DD73E9              A  2533    	LD	(IX+%FFFFFFE9),E
                           A  2534    ;  320	
                           A  2535    ;  321			if(crcresult == crcexpected)
                           A  2536    .LINE 321
                           A  2537    
0B09AB DD27E6              A  2538    	LD	HL,(IX+%FFFFFFE6)
0B09AE DD5EE9              A  2539    	LD	E,(IX+%FFFFFFE9)
0B09B1 DD07D5              A  2540    	LD	BC,(IX+%FFFFFFD5)
0B09B4 DD7ED8              A  2541    	LD	A,(IX+%FFFFFFD8)
0B09B7 CD 2E 18 0B         A  2542    	CALL	__lcmpu
0B09BB 20 1E               A  2543    	JR	NZ,L_96
                           A  2544    ;  322			{
                           A  2545    ;  323				printf("- OK\r\n");
                           A  2546    .LINE 323
                           A  2547    
0B09BD 01 4C 11 0B         A  2548    	LD	BC,___print_uputch
0B09C1 ED43 04 20 0B       A  2549    	LD	(___print_xputch),BC
0B09C6 01 FF 22 0B         A  2550    	LD	BC,L__70
0B09CA C5                  A  2551    	PUSH	BC
0B09CB CD DB 0F 0B         A  2552    	CALL	___print_sendstring
0B09CF C1                  A  2553    	POP	BC
                           A  2554    ;  324				state = systemreset;
                           A  2555    .LINE 324
                           A  2556    
0B09D0 01020000            A  2557    	LD	BC,2
0B09D4 DD0FF3              A  2558    	LD	(IX+%FFFFFFF3),BC
                           A  2559    ;  325			}
                           A  2560    ;  326			else // CRC Failure - next acti
                           A  2561    .LINE 326
                           A  2562    
0B09D7 C3 A0 07 0B         A  2563    	JR	L_98
0B09DB                     A  2564    L_96:
                           A  2565    ;  327			{	 // User interaction not po
                           A  2566    ;  328				switch(state)
                           A  2567    .LINE 328
                           A  2568    
0B09DB DD27F3              A  2569    	LD	HL,(IX+%FFFFFFF3)
0B09DE CD EB 17 0B         A  2570    	CALL	__case8D
0B09E2 E9                  A  2571    	JP	(HL)
0B09E3                     A  2572    L__71:
0B09E3 0200                A  2573    	DW	2
0B09E5 00                  A  2574    	DB	0
0B09E6 F0090B              A  2575    	DW24	L_89	
                           A  2576    
0B09E9 01                  A  2577    	DB	1
0B09EA 0E0A0B              A  2578    	DW24	L_90	
                           A  2579    
0B09ED 230A0B              A  2580    	DW24	L_93	
                           A  2581    
                           A  2582    ;  329				{
                           A  2583    ;  330					case firmware:
0B09F0                     A  2584    L_89:
                           A  2585    .LINE 330
                           A  2586    
                           A  2587    ;  331						printf("\r\nError o
                           A  2588    .LINE 331
                           A  2589    
0B09F0 01 4C 11 0B         A  2590    	LD	BC,___print_uputch
0B09F4 ED43 04 20 0B       A  2591    	LD	(___print_xputch),BC
0B09F9 01 06 23 0B         A  2592    	LD	BC,L__72
0B09FD C5                  A  2593    	PUSH	BC
0B09FE CD DB 0F 0B         A  2594    	CALL	___print_sendstring
0B0A02 C1                  A  2595    	POP	BC
                           A  2596    ;  332						state = retry;
                           A  2597    .LINE 332
                           A  2598    
0B0A03 01010000            A  2599    	LD	BC,1
0B0A07 DD0FF3              A  2600    	LD	(IX+%FFFFFFF3),BC
                           A  2601    ;  333						break;
                           A  2602    .LINE 333
                           A  2603    
0B0A0A C3 A0 07 0B         A  2604    	JR	L_98
                           A  2605    ;  334					case retry:
0B0A0E                     A  2606    L_90:
                           A  2607    .LINE 334
                           A  2608    
                           A  2609    ;  335						printf("\r\nRetry f
                           A  2610    .LINE 335
                           A  2611    
0B0A0E 01 4C 11 0B         A  2612    	LD	BC,___print_uputch
0B0A12 ED43 04 20 0B       A  2613    	LD	(___print_xputch),BC
0B0A17 01 35 23 0B         A  2614    	LD	BC,L__73
0B0A1B C5                  A  2615    	PUSH	BC
0B0A1C CD DB 0F 0B         A  2616    	CALL	___print_sendstring
0B0A20 C1                  A  2617    	POP	BC
                           A  2618    ;  336						while(1); // no mor
0B0A21                     A  2619    L_92:
                           A  2620    .LINE 336
                           A  2621    
0B0A21 18 FE               A  2622    	JR	L_92
                           A  2623    ;  337					default:
0B0A23                     A  2624    L_93:
                           A  2625    .LINE 337
                           A  2626    
                           A  2627    ;  338						state = retry;
                           A  2628    .LINE 338
                           A  2629    
0B0A23 01010000            A  2630    	LD	BC,1
0B0A27 DD0FF3              A  2631    	LD	(IX+%FFFFFFF3),BC
0B0A2A C3 A0 07 0B         A  2632    	JR	L_98
                           A  2633    ;  339				}
                           A  2634    ;  340			}
                           A  2635    ;  341		}		
                           A  2636    ;  342		return 0;
                           A  2637    ;  343	}
0B0A2E                     A  2638    L_100:
                           A  2639    .LINE 343
                           A  2640    
0B0A2E DDF9                A  2641    	LD	SP,IX
0B0A30 DDE1                A  2642    	POP	IX
0B0A32 C9                  A  2643    	RET	
                           A  2644    
                           A  2645    
                           A  2646    ;**************************** _update_mos *****
                           A  2647    ;Name                         Addr/Register   S
                           A  2648    ;_lockFlashKeyRegister               IMPORT  --
                           A  2649    ;_fastmemcpy                         IMPORT  --
                           A  2650    ;__u_itoa                            IMPORT  --
                           A  2651    ;___print_fmt                        IMPORT    
                           A  2652    ;_enableFlashKeyRegister             IMPORT  --
                           A  2653    ;_crc32_finalize                     IMPORT  --
                           A  2654    ;_crc32                              IMPORT  --
                           A  2655    ;_mos_flseek                         IMPORT  --
                           A  2656    ;_crc32_initialize                   IMPORT  --
                           A  2657    ;_getFileSize                        IMPORT  --
                           A  2658    ;_mos_fclose                         IMPORT  --
                           A  2659    ;_mos_fread                          IMPORT  --
                           A  2660    ;___print_sendstring                 IMPORT  --
                           A  2661    ;___print_xputch                     IMPORT    
                           A  2662    ;___print_uputch                     IMPORT  --
                           A  2663    ;_mos_fopen                          IMPORT  --
                           A  2664    ;_putch                              IMPORT  --
                           A  2665    ;crcexpected                          IX-43    
                           A  2666    ;size                                 IX-39    
                           A  2667    ;G_0                                  IX-36    
                           A  2668    ;lastpagebytes                        IX-33    
                           A  2669    ;value                                IX-30    
                           A  2670    ;got                                  IX-29    
                           A  2671    ;crcresult                            IX-26    
                           A  2672    ;ptr                                  IX-22    
                           A  2673    ;addressto                            IX-19    
                           A  2674    ;filesize                             IX-16    
                           A  2675    ;state                                IX-13    
                           A  2676    ;pagemax                              IX-10    
                           A  2677    ;addressfrom                           IX-7    
                           A  2678    ;file                                  IX-4    
                           A  2679    ;counter                               IX-3    
                           A  2680    ;filename                              IX+6    
                           A  2681    
                           A  2682    
                           A  2683    ; Stack Frame Size: 52 (bytes)
                           A  2684    ;       Spill Code: 0 (instruction)
                           A  2685    
                           A  2686    
                           A  2687    .ENDFUNC "update_mos",343,"_update_mos"
                           A  2688    	SEGMENT STRSECT
0B21E8                     A  2689    L__46:
0B21E8 4572726F 72206F70   A  2690    	DB	"Error opening \""
0B21F0 656E696E 672022 
0B21F7 00                  A  2691    	DB	0
0B21F8                     A  2692    L__47:
0B21F8 22                  A  2693    	DB	"\""
0B21F9 0A0D00              A  2694    	DB	10,13,0
0B21FC                     A  2695    L__49:
0B21FC 46696C65 20646F65   A  2696    	DB	"File does not contain valid MOS ez80 s
0B2204 73206E6F 7420636F 
0B220C 6E746169 6E207661 
0B2214 6C696420 4D4F5320 
0B221C 657A3830 20737461 
0B2224 72747570 20636F64 
0B222C 65 
0B222D 0D0A00              A  2697    	DB	13,10,0
0B2230                     A  2698    L__51:
0B2230 46696C65 20746F6F   A  2699    	DB	"File too large for 128KB embedded flas
0B2238 206C6172 67652066 
0B2240 6F722031 32384B42 
0B2248 20656D62 65646465 
0B2250 6420666C 617368 
0B2257 0D0A00              A  2700    	DB	13,10,0
0B225A                     A  2701    L__52:
0B225A 0D0A                A  2702    	DB	13,10
0B225C 56616C69 6420657A   A  2703    	DB	"Valid ez80 code"
0B2264 38302063 6F6465 
0B226B 0D0A                A  2704    	DB	13,10
0B226D 43616C63 756C6174   A  2705    	DB	"Calculating CRC32"
0B2275 696E6720 43524333 
0B227D 32 
0B227E 00                  A  2706    	DB	0
0B227F                     A  2707    L__56:
0B227F 0D0A00              A  2708    	DB	13,10,0
0B2282                     A  2709    L__57:
0B2282 446F6E65            A  2710    	DB	"Done"
0B2286 0D0A00              A  2711    	DB	13,10,0
0B2289                     A  2712    L__58:
0B2289 50726573 73207265   A  2713    	DB	"Press reset button"
0B2291 73657420 62757474 
0B2299 6F6E 
0B229B 00                  A  2714    	DB	0
0B229C                     A  2715    L__59:
0B229C 45726173 696E6720   A  2716    	DB	"Erasing flash... "
0B22A4 666C6173 682E2E2E 
0B22AC 20 
0B22AD 00                  A  2717    	DB	0
0B22AE                     A  2718    L__62:
0B22AE 0D0A                A  2719    	DB	13,10
0B22B0 57726974 696E6720   A  2720    	DB	"Writing new firmware..."
0B22B8 6E657720 6669726D 
0B22C0 77617265 2E2E2E 
0B22C7 0D0A00              A  2721    	DB	13,10,0
0B22CA                     A  2722    L__64:
0B22CA 0D                  A  2723    	DB	13
0B22CB 57726974 696E6720   A  2724    	DB	"Writing flash page "
0B22D3 666C6173 68207061 
0B22DB 676520 
0B22DE 00                  A  2725    	DB	0
0B22DF                     A  2726    L__67:
0B22DF 0D0A00              A  2727    	DB	13,10,0
0B22E2                     A  2728    L__68:
0B22E2 56657269 6679696E   A  2729    	DB	"Verifying flash checksum... "
0B22EA 6720666C 61736820 
0B22F2 63686563 6B73756D 
0B22FA 2E2E2E20 
0B22FE 00                  A  2730    	DB	0
0B22FF                     A  2731    L__70:
0B22FF 2D204F4B            A  2732    	DB	"- OK"
0B2303 0D0A00              A  2733    	DB	13,10,0
0B2306                     A  2734    L__72:
0B2306 0D0A                A  2735    	DB	13,10
0B2308 4572726F 72206F63   A  2736    	DB	"Error occured during flash write"
0B2310 63757265 64206475 
0B2318 72696E67 20666C61 
0B2320 73682077 72697465 
0B2328 0D0A                A  2737    	DB	13,10
0B232A 52657472 792E2E2E   A  2738    	DB	"Retry..."
0B2332 0D0A00              A  2739    	DB	13,10,0
0B2335                     A  2740    L__73:
0B2335 0D0A                A  2741    	DB	13,10
0B2337 52657472 79206661   A  2742    	DB	"Retry failed"
0B233F 696C6564 
0B2343 0D0A00              A  2743    	DB	13,10,0
                           A  2744    	SEGMENT CODE
                           A  2745    ;  344	
                           A  2746    ;  345	int main(int argc, char * argv[]) {
0B0A33                     A  2747    _main:
                           A  2748    .DEFINE "_main"
                           A  2749    
                           A  2750    .VALUE _main
                           A  2751    
                           A  2752    .CLASS 2
                           A  2753    
                           A  2754    .TYPE 68
                           A  2755    
                           A  2756    .ENDEF
                           A  2757    
                           A  2758    .BEGFUNC "main",345,"_main"
                           A  2759    
                           A  2760    .LINE 345
                           A  2761    
                           A  2762    .DEFINE "argc"
                           A  2763    
                           A  2764    .CLASS 65
                           A  2765    
                           A  2766    .VALUE 6
                           A  2767    
                           A  2768    .TYPE 4
                           A  2769    
                           A  2770    .ENDEF
                           A  2771    
                           A  2772    .DEFINE "argv"
                           A  2773    
                           A  2774    .CLASS 65
                           A  2775    
                           A  2776    .VALUE 9
                           A  2777    
                           A  2778    .TYPE 290
                           A  2779    
                           A  2780    .ENDEF
                           A  2781    
0B0A33 DDE5                A  2782    	PUSH	IX
0B0A35 DD210000 00         A  2783    	LD	IX,0
0B0A3A DD39                A  2784    	ADD	IX,SP
                           A  2785    ;  346	
                           A  2786    ;  347		if(argc != 3) {
                           A  2787    .LINE 347
                           A  2788    
0B0A3C 01030000            A  2789    	LD	BC,3
0B0A40 DD2706              A  2790    	LD	HL,(IX+%6)
0B0A43 B7                  A  2791    	OR	A,A
0B0A44 ED42                A  2792    	SBC	HL,BC
0B0A46 28 09               A  2793    	JR	Z,L_106
                           A  2794    ;  348			usage();
                           A  2795    .LINE 348
                           A  2796    
0B0A48 CD 06 03 0B         A  2797    	CALL	_usage
                           A  2798    ;  349			return 0;
                           A  2799    .LINE 349
                           A  2800    
0B0A4C B7                  A  2801    	OR	A,A
0B0A4D ED62                A  2802    	SBC	HL,HL
0B0A4F 18 6B               A  2803    	JR	L_107
                           A  2804    ;  350		}
0B0A51                     A  2805    L_106:
                           A  2806    .LINE 350
                           A  2807    
                           A  2808    ;  351	
                           A  2809    ;  352		if(memcmp(argv[1], "mos", 3) == 0) 
                           A  2810    .LINE 352
                           A  2811    
0B0A51 C5                  A  2812    	PUSH	BC
0B0A52 01 46 23 0B         A  2813    	LD	BC,L__76
0B0A56 C5                  A  2814    	PUSH	BC
0B0A57 DD3109              A  2815    	LD	IY,(IX+%9)
0B0A5A ED2303              A  2816    	LEA	HL,IY+%3
0B0A5D ED07                A  2817    	LD	BC,(HL)
0B0A5F C5                  A  2818    	PUSH	BC
0B0A60 CD DF 14 0B         A  2819    	CALL	_memcmp
0B0A64 C1                  A  2820    	POP	BC
0B0A65 C1                  A  2821    	POP	BC
0B0A66 C1                  A  2822    	POP	BC
0B0A67 CD 09 15 0B         A  2823    	CALL	__icmpzero
0B0A6B 20 14               A  2824    	JR	NZ,L_105
                           A  2825    ;  353			return update_mos(argv[2]);
                           A  2826    .LINE 353
                           A  2827    
0B0A6D DD3109              A  2828    	LD	IY,(IX+%9)
0B0A70 ED2306              A  2829    	LEA	HL,IY+%6
0B0A73 ED07                A  2830    	LD	BC,(HL)
0B0A75 C5                  A  2831    	PUSH	BC
0B0A76 CD E5 05 0B         A  2832    	CALL	_update_mos
0B0A7A C1                  A  2833    	POP	BC
0B0A7B B7ED62              A  2834    	UEXT	HL
0B0A7E 6F                  A  2835    	LD	L,A
0B0A7F 18 3B               A  2836    	JR	L_107
                           A  2837    ;  354		}
                           A  2838    ;  355		else {
0B0A81                     A  2839    L_105:
                           A  2840    .LINE 355
                           A  2841    
                           A  2842    ;  356			if(memcmp(argv[1], "vdp", 3) ==
                           A  2843    .LINE 356
                           A  2844    
0B0A81 01030000            A  2845    	LD	BC,3
0B0A85 C5                  A  2846    	PUSH	BC
0B0A86 01 4A 23 0B         A  2847    	LD	BC,L__78
0B0A8A C5                  A  2848    	PUSH	BC
0B0A8B DD3109              A  2849    	LD	IY,(IX+%9)
0B0A8E ED2303              A  2850    	LEA	HL,IY+%3
0B0A91 ED07                A  2851    	LD	BC,(HL)
0B0A93 C5                  A  2852    	PUSH	BC
0B0A94 CD DF 14 0B         A  2853    	CALL	_memcmp
0B0A98 C1                  A  2854    	POP	BC
0B0A99 C1                  A  2855    	POP	BC
0B0A9A C1                  A  2856    	POP	BC
0B0A9B CD 09 15 0B         A  2857    	CALL	__icmpzero
0B0A9F 20 14               A  2858    	JR	NZ,L_103
                           A  2859    ;  357				return update_vdp(argv[2]);
                           A  2860    .LINE 357
                           A  2861    
0B0AA1 DD3109              A  2862    	LD	IY,(IX+%9)
0B0AA4 ED2306              A  2863    	LEA	HL,IY+%6
0B0AA7 ED07                A  2864    	LD	BC,(HL)
0B0AA9 C5                  A  2865    	PUSH	BC
0B0AAA CD 25 04 0B         A  2866    	CALL	_update_vdp
0B0AAE C1                  A  2867    	POP	BC
0B0AAF B7ED62              A  2868    	UEXT	HL
0B0AB2 6F                  A  2869    	LD	L,A
0B0AB3 18 07               A  2870    	JR	L_107
                           A  2871    ;  358			}
                           A  2872    ;  359			else {
0B0AB5                     A  2873    L_103:
                           A  2874    .LINE 359
                           A  2875    
                           A  2876    ;  360				usage();
                           A  2877    .LINE 360
                           A  2878    
0B0AB5 CD 06 03 0B         A  2879    	CALL	_usage
                           A  2880    ;  361				return 0;
                           A  2881    .LINE 361
                           A  2882    
0B0AB9 B7                  A  2883    	OR	A,A
0B0ABA ED62                A  2884    	SBC	HL,HL
                           A  2885    ;  362			}
                           A  2886    ;  363		}
                           A  2887    ;  364	}
0B0ABC                     A  2888    L_107:
                           A  2889    .LINE 364
                           A  2890    
0B0ABC DDF9                A  2891    	LD	SP,IX
0B0ABE DDE1                A  2892    	POP	IX
0B0AC0 C9                  A  2893    	RET	
                           A  2894    
                           A  2895    
                           A  2896    ;**************************** _main ***********
                           A  2897    ;Name                         Addr/Register   S
                           A  2898    ;_memcmp                             IMPORT  --
                           A  2899    ;argv                                  IX+9    
                           A  2900    ;argc                                  IX+6    
                           A  2901    
                           A  2902    
                           A  2903    ; Stack Frame Size: 12 (bytes)
                           A  2904    ;       Spill Code: 0 (instruction)
                           A  2905    
                           A  2906    
                           A  2907    .ENDFUNC "main",364,"_main"
                           A  2908    	SEGMENT STRSECT
0B2346                     A  2909    L__76:
0B2346 6D6F73              A  2910    	DB	"mos"
0B2349 00                  A  2911    	DB	0
0B234A                     A  2912    L__78:
0B234A 766470              A  2913    	DB	"vdp"
0B234D 00                  A  2914    	DB	0
                           A  2915    	XREF _memcmp:ROM
                           A  2916    	XREF _getFileSize:ROM
                           A  2917    	XREF _crc32_finalize:ROM
                           A  2918    	XREF _crc32_initialize:ROM
                           A  2919    	XREF _crc32:ROM
                           A  2920    	XREF _delayms:ROM
                           A  2921    	XREF _startVDPupdate:ROM
                           A  2922    	XREF _reset:ROM
                           A  2923    	XREF _fastmemcpy:ROM
                           A  2924    	XREF _lockFlashKeyRegister:ROM
                           A  2925    	XREF _enableFlashKeyRegister:ROM
                           A  2926    	XREF _mos_flseek:ROM
                           A  2927    	XREF _mos_fread:ROM
                           A  2928    	XREF _mos_fclose:ROM
                           A  2929    	XREF _mos_fopen:ROM
                           A  2930    	XREF _getsysvar_scrchar:ROM
                           A  2931    	XREF _getch:ROM
                           A  2932    	XREF __u_ultoa:ROM
                           A  2933    	XREF __u_itoa:ROM
                           A  2934    	XREF ___print_sendstring:ROM
                           A  2935    	XREF ___print_xputch:ROM
                           A  2936    	XREF ___print_uputch:ROM
                           A  2937    	XREF ___print_fmt:ROM
                           A  2938    	XREF __lcmpu:ROM
                           A  2939    	XREF __iand:ROM
                           A  2940    	XREF __stoiu:ROM
                           A  2941    	XREF __icmpzero:ROM
                           A  2942    	XREF __case8D:ROM
                           A  2943    	XREF __ishru_b:ROM
                           A  2944    	XREF __ishrs_b:ROM
                           A  2945    	XDEF _main
                           A  2946    	XDEF _update_mos
                           A  2947    	XDEF _update_vdp
                           A  2948    	XDEF _getResponse
                           A  2949    	XDEF _usage
                           A  2950    	XDEF _print_version
                           A  2951    	XDEF _containsESP32Header
                           A  2952    	XDEF _esp32_magicnumbers
                           A  2953    	XDEF _containsMosHeader
                           A  2954    	XDEF _mos_magicnumbers
                           A  2955    	XDEF _vdp_ota_present
                           A  2956    	XDEF _getCharAt
                           A  2957    	XDEF _putch
                           A  2958    	XDEF _errno
                           A  2959    	END


Errors: 0
Warnings: 0
Lines Assembled: 2960
