Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     15:06:03     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
0B1AE4                     A   144    _errno:
0B1AE4                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon firmware upgra
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	14/10/2023
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   161    ;   10	 *                  Sends cls just befo
                           A   162    ;   11	 * 07/06/2023:		Included faster crc
                           A   163    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   164    ;   13	 */
                           A   165    ;   14	
                           A   166    ;   15	#include <ez80.h>
                           A   167    ;   16	#include <stdio.h>
                           A   168    ;   17	#include <stdlib.h>
                           A   169    ;   18	#include <ERRNO.H>
                           A   170    ;   19	#include "mos-interface.h"
                           A   171    ;   20	#include "flash.h"
                           A   172    ;   21	#include "agontimer.h"
                           A   173    ;   22	#include "crc32.h"
                           A   174    ;   23	#include "filesize.h"
                           A   175    ;   24	#include "./stdint.h"
                           A   176    ;   25	#include <string.h>
                           A   177    ;   26	
                           A   178    ;   27	#define UNLOCKMATCHLENGTH 9
                           A   179    ;   28	
                           A   180    ;   29	#define EXIT_FILENOTFOUND	4
                           A   181    ;   30	#define EXIT_INVALIDPARAMETER	19
                           A   182    ;   31	
                           A   183    ;   32	int errno; // needed by standard librar
                           A   184    	SEGMENT CODE
                           A   185    ;   33	enum states{firmware,retry,systemreset}
                           A   186    ;   34	
                           A   187    ;   35	// separate putch function that doesn't
                           A   188    ;   36	// UART0 initialization done by MOS fir
                           A   189    ;   37	// This utility doesn't run without MOS
                           A   190    ;   38	int putch(int c)
                           A   191    ;   39	{
0B00E5                     A   192    _putch:
                           A   193    .DEFINE "_putch"
                           A   194    
                           A   195    .VALUE _putch
                           A   196    
                           A   197    .CLASS 2
                           A   198    
                           A   199    .TYPE 68
                           A   200    
                           A   201    .ENDEF
                           A   202    
                           A   203    .BEGFUNC "putch",39,"_putch"
                           A   204    
                           A   205    .LINE 39
                           A   206    
                           A   207    .DEFINE "c"
                           A   208    
                           A   209    .CLASS 65
                           A   210    
                           A   211    .VALUE 6
                           A   212    
                           A   213    .TYPE 4
                           A   214    
0B00E5 DDE5                A   215    	PUSH	IX
0B00E7 DD210000 00         A   216    	LD	IX,0
0B00EC DD39                A   217    	ADD	IX,SP
                           A   218    .ENDEF
                           A   219    
                           A   220    ;   40		UINT8 lsr,temt;
                           A   221    ;   41		
                           A   222    ;   42		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   223    L_1:
                           A   224    .LINE 42
                           A   225    
0B00EE ED38C5              A   226    	IN0	A,(197)
0B00F1 E640                A   227    	AND	A,%40
0B00F3 B7ED62              A   228    	UEXT	HL
0B00F6 6F                  A   229    	LD	L,A
0B00F7 CD 09 15 0B         A   230    	CALL	__icmpzero
0B00FB 28 F1               A   231    	JR	Z,L_1
                           A   232    ;   43		UART0_THR = c;
                           A   233    .LINE 43
                           A   234    
0B00FD DD7E06              A   235    	LD	A,(IX+%6)
0B0100 ED39C0              A   236    	OUT0	(192),A
                           A   237    ;   44		return c;
                           A   238    .LINE 44
                           A   239    
0B0103 DD2706              A   240    	LD	HL,(IX+%6)
                           A   241    ;   45	}
                           A   242    .LINE 45
                           A   243    
0B0106 DDF9                A   244    	LD	SP,IX
0B0108 DDE1                A   245    	POP	IX
0B010A C9                  A   246    	RET	
                           A   247    
                           A   248    
                           A   249    ;**************************** _putch **********
                           A   250    ;Name                         Addr/Register   S
                           A   251    ;c                                     IX+6    
                           A   252    
                           A   253    
                           A   254    ; Stack Frame Size: 9 (bytes)
                           A   255    ;       Spill Code: 0 (instruction)
                           A   256    
                           A   257    
                           A   258    .ENDFUNC "putch",45,"_putch"
                           A   259    ;   46	
                           A   260    ;   47	uint8_t getCharAt(uint16_t x, uint16_t 
0B010B                     A   261    _getCharAt:
                           A   262    .DEFINE "_getCharAt"
                           A   263    
                           A   264    .VALUE _getCharAt
                           A   265    
                           A   266    .CLASS 2
                           A   267    
                           A   268    .TYPE 76
                           A   269    
                           A   270    .ENDEF
                           A   271    
                           A   272    .BEGFUNC "getCharAt",47,"_getCharAt"
                           A   273    
                           A   274    .LINE 47
                           A   275    
                           A   276    .DEFINE "x"
                           A   277    
                           A   278    .CLASS 65
                           A   279    
                           A   280    .VALUE 6
                           A   281    
                           A   282    .TYPE 13
                           A   283    
                           A   284    .ENDEF
                           A   285    
                           A   286    .DEFINE "y"
                           A   287    
                           A   288    .CLASS 65
                           A   289    
                           A   290    .VALUE 9
                           A   291    
                           A   292    .TYPE 13
                           A   293    
                           A   294    .ENDEF
                           A   295    
0B010B DDE5                A   296    	PUSH	IX
0B010D DD210000 00         A   297    	LD	IX,0
0B0112 DD39                A   298    	ADD	IX,SP
                           A   299    ;   48		delayms(20);
                           A   300    .LINE 48
                           A   301    
0B0114 01140000            A   302    	LD	BC,20
0B0118 C5                  A   303    	PUSH	BC
0B0119 CD B3 0C 0B         A   304    	CALL	_delayms
0B011D C1                  A   305    	POP	BC
                           A   306    ;   49		putch(23);
                           A   307    .LINE 49
                           A   308    
0B011E 01170000            A   309    	LD	BC,23
0B0122 C5                  A   310    	PUSH	BC
0B0123 CD E5 00 0B         A   311    	CALL	_putch
0B0127 C1                  A   312    	POP	BC
                           A   313    ;   50		putch(0);
                           A   314    .LINE 50
                           A   315    
0B0128 01000000            A   316    	LD	BC,0
0B012C C5                  A   317    	PUSH	BC
0B012D CD E5 00 0B         A   318    	CALL	_putch
0B0131 C1                  A   319    	POP	BC
                           A   320    ;   51		putch(131);
                           A   321    .LINE 51
                           A   322    
0B0132 01830000            A   323    	LD	BC,131
0B0136 C5                  A   324    	PUSH	BC
0B0137 CD E5 00 0B         A   325    	CALL	_putch
0B013B C1                  A   326    	POP	BC
                           A   327    ;   52		putch(x & 0xFF);
                           A   328    .LINE 52
                           A   329    
0B013C DD0706              A   330    	LD	BC,(IX+%6)
0B013F CD 46 11 0B         A   331    	CALL	__stoiu
0B0143 7D                  A   332    	LD	A,L
0B0144 B7ED62              A   333    	UEXT	HL
0B0147 6F                  A   334    	LD	L,A
0B0148 E5                  A   335    	PUSH	HL
0B0149 CD E5 00 0B         A   336    	CALL	_putch
0B014D C1                  A   337    	POP	BC
                           A   338    ;   53		putch((x >> 8) & 0xFF);
                           A   339    .LINE 53
                           A   340    
0B014E DD0706              A   341    	LD	BC,(IX+%6)
0B0151 CD 46 11 0B         A   342    	CALL	__stoiu
0B0155 3E08                A   343    	LD	A,%8
0B0157 CD B6 0F 0B         A   344    	CALL	__ishrs_b
0B015B 7D                  A   345    	LD	A,L
0B015C B7ED62              A   346    	UEXT	HL
0B015F 6F                  A   347    	LD	L,A
0B0160 E5                  A   348    	PUSH	HL
0B0161 CD E5 00 0B         A   349    	CALL	_putch
0B0165 C1                  A   350    	POP	BC
                           A   351    ;   54		putch(y & 0xFF);
                           A   352    .LINE 54
                           A   353    
0B0166 DD0709              A   354    	LD	BC,(IX+%9)
0B0169 CD 46 11 0B         A   355    	CALL	__stoiu
0B016D 7D                  A   356    	LD	A,L
0B016E B7ED62              A   357    	UEXT	HL
0B0171 6F                  A   358    	LD	L,A
0B0172 E5                  A   359    	PUSH	HL
0B0173 CD E5 00 0B         A   360    	CALL	_putch
0B0177 C1                  A   361    	POP	BC
                           A   362    ;   55		putch((y >> 8) & 0xFF);
                           A   363    .LINE 55
                           A   364    
0B0178 DD0709              A   365    	LD	BC,(IX+%9)
0B017B CD 46 11 0B         A   366    	CALL	__stoiu
0B017F 3E08                A   367    	LD	A,%8
0B0181 CD B6 0F 0B         A   368    	CALL	__ishrs_b
0B0185 7D                  A   369    	LD	A,L
0B0186 B7ED62              A   370    	UEXT	HL
0B0189 6F                  A   371    	LD	L,A
0B018A E5                  A   372    	PUSH	HL
0B018B CD E5 00 0B         A   373    	CALL	_putch
0B018F C1                  A   374    	POP	BC
                           A   375    ;   56		delayms(20);
                           A   376    .LINE 56
                           A   377    
0B0190 01140000            A   378    	LD	BC,20
0B0194 C5                  A   379    	PUSH	BC
0B0195 CD B3 0C 0B         A   380    	CALL	_delayms
0B0199 C1                  A   381    	POP	BC
                           A   382    ;   57		return getsysvar_scrchar();
                           A   383    .LINE 57
                           A   384    
0B019A CD FF 0A 0B         A   385    	CALL	_getsysvar_scrchar
                           A   386    ;   58	}
                           A   387    .LINE 58
                           A   388    
0B019E DDF9                A   389    	LD	SP,IX
0B01A0 DDE1                A   390    	POP	IX
0B01A2 C9                  A   391    	RET	
                           A   392    
                           A   393    
                           A   394    ;**************************** _getCharAt ******
                           A   395    ;Name                         Addr/Register   S
                           A   396    ;_getsysvar_scrchar                  IMPORT  --
                           A   397    ;_putch                              IMPORT  --
                           A   398    ;_delayms                            IMPORT  --
                           A   399    ;y                                     IX+9    
                           A   400    ;x                                     IX+6    
                           A   401    
                           A   402    
                           A   403    ; Stack Frame Size: 12 (bytes)
                           A   404    ;       Spill Code: 0 (instruction)
                           A   405    
                           A   406    
                           A   407    .ENDFUNC "getCharAt",58,"_getCharAt"
                           A   408    ;   59	
                           A   409    ;   60	bool vdp_ota_present(void) {
0B01A3                     A   410    _vdp_ota_present:
                           A   411    .DEFINE "_vdp_ota_present"
                           A   412    
                           A   413    .VALUE _vdp_ota_present
                           A   414    
                           A   415    .CLASS 2
                           A   416    
                           A   417    .TYPE 76
                           A   418    
                           A   419    .ENDEF
                           A   420    
                           A   421    .BEGFUNC "vdp_ota_present",60,"_vdp_ota_present
                           A   422    
                           A   423    .LINE 60
                           A   424    
                           A   425    .DEFINE "n"
                           A   426    
                           A   427    .CLASS 65
                           A   428    
                           A   429    .VALUE -2
                           A   430    
                           A   431    .TYPE 13
                           A   432    
                           A   433    .ENDEF
                           A   434    
                           A   435    .DEFINE "test"
                           A   436    
                           A   437    .CLASS 65
                           A   438    
                           A   439    .VALUE -11
                           A   440    
                           A   441    .DIM 9
                           A   442    
                           A   443    .TYPE 98
                           A   444    
                           A   445    .ENDEF
                           A   446    
0B01A3 DDE5                A   447    	PUSH	IX
0B01A5 DD210000 00         A   448    	LD	IX,0
0B01AA DD39                A   449    	ADD	IX,SP
0B01AC ED22F5              A   450    	LEA	HL,IX+%FFFFFFF5
0B01AF F9                  A   451    	LD	SP,HL
                           A   452    ;   61		char test[UNLOCKMATCHLENGTH];
                           A   453    ;   62		uint16_t n;
                           A   454    ;   63	
                           A   455    ;   64		putch(23);
                           A   456    .LINE 64
                           A   457    
0B01B0 01170000            A   458    	LD	BC,23
0B01B4 C5                  A   459    	PUSH	BC
0B01B5 CD E5 00 0B         A   460    	CALL	_putch
0B01B9 C1                  A   461    	POP	BC
                           A   462    ;   65		putch(29);
                           A   463    .LINE 65
                           A   464    
0B01BA 011D0000            A   465    	LD	BC,29
0B01BE C5                  A   466    	PUSH	BC
0B01BF CD E5 00 0B         A   467    	CALL	_putch
0B01C3 C1                  A   468    	POP	BC
                           A   469    ;   66		putch(0);
                           A   470    .LINE 66
                           A   471    
0B01C4 01000000            A   472    	LD	BC,0
0B01C8 C5                  A   473    	PUSH	BC
0B01C9 CD E5 00 0B         A   474    	CALL	_putch
0B01CD C1                  A   475    	POP	BC
                           A   476    ;   67		printf("unlock");
                           A   477    .LINE 67
                           A   478    
0B01CE 01 4C 11 0B         A   479    	LD	BC,___print_uputch
0B01D2 ED43 04 20 0B       A   480    	LD	(___print_xputch),BC
0B01D7 01 87 20 0B         A   481    	LD	BC,L__3
0B01DB C5                  A   482    	PUSH	BC
0B01DC CD DB 0F 0B         A   483    	CALL	___print_sendstring
0B01E0 C1                  A   484    	POP	BC
                           A   485    ;   68	
                           A   486    ;   69		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   487    .LINE 69
                           A   488    
0B01E1 DD36FE00            A   489    	LD	(IX+%FFFFFFFE),%0
0B01E5 DD36FF00            A   490    	LD	(IX+%FFFFFFFF),%0
0B01E9 18 2A               A   491    	JR	L_8
0B01EB                     A   492    L_6:
0B01EB 01030000            A   493    	LD	BC,3
0B01EF C5                  A   494    	PUSH	BC
0B01F0 DD31FE              A   495    	LD	IY,(IX+%FFFFFFFE)
0B01F3 ED0308              A   496    	LEA	BC,IY+%8
0B01F6 C5                  A   497    	PUSH	BC
0B01F7 CD 0B 01 0B         A   498    	CALL	_getCharAt
0B01FB C1                  A   499    	POP	BC
0B01FC C1                  A   500    	POP	BC
0B01FD DD07FE              A   501    	LD	BC,(IX+%FFFFFFFE)
0B0200 CD 46 11 0B         A   502    	CALL	__stoiu
0B0204 E5C1                A   503    	LD	BC,HL
0B0206 ED22F5              A   504    	LEA	HL,IX+%FFFFFFF5
0B0209 09                  A   505    	ADD	HL,BC
0B020A 77                  A   506    	LD	(HL),A
0B020B DD27FE              A   507    	LD	HL,(IX+%FFFFFFFE)
0B020E 23                  A   508    	INC	HL
0B020F DD75FE              A   509    	LD	(IX+%FFFFFFFE),L
0B0212 DD74FF              A   510    	LD	(IX+%FFFFFFFF),H
0B0215                     A   511    L_8:
0B0215 49010A00            A   512    	LD.LIS	BC,10
0B0219 DD27FE              A   513    	LD	HL,(IX+%FFFFFFFE)
0B021C B7                  A   514    	OR	A,A
0B021D 40ED42              A   515    	SBC.SIS	HL,BC
0B0220 38 C9               A   516    	JR	C,L_6
                           A   517    ;   70		// 3 - line on-screen
                           A   518    ;   71		if(memcmp(test, "unlocked!",UNLOCKM
                           A   519    .LINE 71
                           A   520    
0B0222 01090000            A   521    	LD	BC,9
0B0226 C5                  A   522    	PUSH	BC
0B0227 01 8E 20 0B         A   523    	LD	BC,L__5
0B022B C5                  A   524    	PUSH	BC
0B022C ED65F5              A   525    	PEA	IX+%FFFFFFF5
0B022F CD DF 14 0B         A   526    	CALL	_memcmp
0B0233 C1                  A   527    	POP	BC
0B0234 C1                  A   528    	POP	BC
0B0235 C1                  A   529    	POP	BC
0B0236 CD 09 15 0B         A   530    	CALL	__icmpzero
0B023A 20 04               A   531    	JR	NZ,L_10
0B023C 3E01                A   532    	LD	A,%1
0B023E 18 01               A   533    	JR	L_12
                           A   534    ;   72		else return false;
0B0240                     A   535    L_10:
                           A   536    .LINE 72
                           A   537    
0B0240 AF                  A   538    	XOR	A,A
                           A   539    ;   73	}
0B0241                     A   540    L_12:
                           A   541    .LINE 73
                           A   542    
0B0241 DDF9                A   543    	LD	SP,IX
0B0243 DDE1                A   544    	POP	IX
0B0245 C9                  A   545    	RET	
                           A   546    
                           A   547    
                           A   548    ;**************************** _vdp_ota_present 
                           A   549    ;Name                         Addr/Register   S
                           A   550    ;_memcmp                             IMPORT  --
                           A   551    ;___print_sendstring                 IMPORT  --
                           A   552    ;___print_xputch                     IMPORT    
                           A   553    ;___print_uputch                     IMPORT  --
                           A   554    ;_putch                              IMPORT  --
                           A   555    ;test                                 IX-11    
                           A   556    ;n                                     IX-2    
                           A   557    
                           A   558    
                           A   559    ; Stack Frame Size: 17 (bytes)
                           A   560    ;       Spill Code: 0 (instruction)
                           A   561    
                           A   562    
                           A   563    .ENDFUNC "vdp_ota_present",73,"_vdp_ota_present
                           A   564    	SEGMENT STRSECT
0B2087                     A   565    L__3:
0B2087 756E6C6F 636B       A   566    	DB	"unlock"
0B208D 00                  A   567    	DB	0
0B208E                     A   568    L__5:
0B208E 756E6C6F 636B6564   A   569    	DB	"unlocked!"
0B2096 21 
0B2097 00                  A   570    	DB	0
                           A   571    	SEGMENT DATA
0B1ADB                     A   572    _mos_magicnumbers:
0B1ADB F3                  A   573    	DB	243
0B1ADC ED                  A   574    	DB	237
0B1ADD 7D                  A   575    	DB	125
0B1ADE 5B                  A   576    	DB	91
0B1ADF C3                  A   577    	DB	195
                           A   578    .DEFINE "mos_magicnumbers"
                           A   579    .ALIAS "_mos_magicnumbers"
                           A   580    .CLASS 69
                           A   581    .VALUE _mos_magicnumbers
                           A   582    .DIM 5
                           A   583    .TYPE 108
                           A   584    .ENDEF
                           A   585    ;   74	
                           A   586    ;   75	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   587    	SEGMENT CODE
                           A   588    ;   76	#define MOS_MAGICLENGTH 5
                           A   589    ;   77	bool containsMosHeader(uint8_t *filesta
0B0246                     A   590    _containsMosHeader:
                           A   591    .DEFINE "_containsMosHeader"
                           A   592    
                           A   593    .VALUE _containsMosHeader
                           A   594    
                           A   595    .CLASS 2
                           A   596    
                           A   597    .TYPE 76
                           A   598    
                           A   599    .ENDEF
                           A   600    
                           A   601    .BEGFUNC "containsMosHeader",77,"_containsMosHe
                           A   602    
                           A   603    .LINE 77
                           A   604    
                           A   605    .DEFINE "filestart"
                           A   606    
                           A   607    .CLASS 65
                           A   608    
                           A   609    .VALUE 6
                           A   610    
                           A   611    .TYPE 44
                           A   612    
                           A   613    .ENDEF
                           A   614    
                           A   615    .DEFINE "n"
                           A   616    
                           A   617    .CLASS 65
                           A   618    
                           A   619    .VALUE -1
                           A   620    
                           A   621    .TYPE 12
                           A   622    
                           A   623    .ENDEF
                           A   624    
                           A   625    .DEFINE "match"
                           A   626    
                           A   627    .CLASS 65
                           A   628    
                           A   629    .VALUE -2
                           A   630    
                           A   631    .TYPE 12
                           A   632    
                           A   633    .ENDEF
                           A   634    
0B0246 DDE5                A   635    	PUSH	IX
0B0248 DD210000 00         A   636    	LD	IX,0
0B024D DD39                A   637    	ADD	IX,SP
0B024F 3B                  A   638    	DEC	SP
0B0250 3B                  A   639    	DEC	SP
                           A   640    ;   78		uint8_t n;
                           A   641    ;   79		bool match = true;
                           A   642    .LINE 79
                           A   643    
0B0251 DD36FE01            A   644    	LD	(IX+%FFFFFFFE),%1
                           A   645    ;   80	
                           A   646    ;   81		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A   647    .LINE 81
                           A   648    
0B0255 DD36FF00            A   649    	LD	(IX+%FFFFFFFF),%0
0B0259 18 27               A   650    	JR	L_17
0B025B                     A   651    L_15:
0B025B DD7EFF              A   652    	LD	A,(IX+%FFFFFFFF)
0B025E B7ED62              A   653    	UEXT	HL
0B0261 6F                  A   654    	LD	L,A
0B0262 01 DB 1A 0B         A   655    	LD	BC,_mos_magicnumbers
0B0266 09                  A   656    	ADD	HL,BC
0B0267 E5FDE1              A   657    	LD	IY,HL
0B026A DD7EFF              A   658    	LD	A,(IX+%FFFFFFFF)
0B026D B7ED62              A   659    	UEXT	HL
0B0270 6F                  A   660    	LD	L,A
0B0271 DD0706              A   661    	LD	BC,(IX+%6)
0B0274 09                  A   662    	ADD	HL,BC
0B0275 FD7E00              A   663    	LD	A,(IY)
0B0278 BE                  A   664    	CP	A,(HL)
0B0279 28 04               A   665    	JR	Z,L_16
0B027B DD36FE00            A   666    	LD	(IX+%FFFFFFFE),%0
0B027F                     A   667    L_16:
0B027F DD34FF              A   668    	INC	(IX+%FFFFFFFF)
0B0282                     A   669    L_17:
0B0282 DD7EFF              A   670    	LD	A,(IX+%FFFFFFFF)
0B0285 FE05                A   671    	CP	A,%5
0B0287 38 D2               A   672    	JR	C,L_15
                           A   673    ;   82		return match;
                           A   674    .LINE 82
                           A   675    
0B0289 DD7EFE              A   676    	LD	A,(IX+%FFFFFFFE)
                           A   677    ;   83	}
                           A   678    .LINE 83
                           A   679    
0B028C DDF9                A   680    	LD	SP,IX
0B028E DDE1                A   681    	POP	IX
0B0290 C9                  A   682    	RET	
                           A   683    
                           A   684    
                           A   685    ;**************************** _containsMosHeade
                           A   686    ;Name                         Addr/Register   S
                           A   687    ;_mos_magicnumbers                   STATIC    
                           A   688    ;match                                 IX-2    
                           A   689    ;n                                     IX-1    
                           A   690    ;filestart                             IX+6    
                           A   691    
                           A   692    
                           A   693    ; Stack Frame Size: 11 (bytes)
                           A   694    ;       Spill Code: 0 (instruction)
                           A   695    
                           A   696    
                           A   697    .ENDFUNC "containsMosHeader",83,"_containsMosHe
                           A   698    	SEGMENT DATA
0B1AE0                     A   699    _esp32_magicnumbers:
0B1AE0 32                  A   700    	DB	50
0B1AE1 54                  A   701    	DB	84
0B1AE2 CD                  A   702    	DB	205
0B1AE3 AB                  A   703    	DB	171
                           A   704    .DEFINE "esp32_magicnumbers"
                           A   705    .ALIAS "_esp32_magicnumbers"
                           A   706    .CLASS 69
                           A   707    .VALUE _esp32_magicnumbers
                           A   708    .DIM 4
                           A   709    .TYPE 108
                           A   710    .ENDEF
                           A   711    ;   84	
                           A   712    ;   85	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A   713    	SEGMENT CODE
                           A   714    ;   86	#define ESP32_MAGICLENGTH 4
                           A   715    ;   87	#define ESP32_MAGICSTART 0x20
                           A   716    ;   88	bool containsESP32Header(uint8_t *files
0B0291                     A   717    _containsESP32Header:
                           A   718    .DEFINE "_containsESP32Header"
                           A   719    
                           A   720    .VALUE _containsESP32Header
                           A   721    
                           A   722    .CLASS 2
                           A   723    
                           A   724    .TYPE 76
                           A   725    
                           A   726    .ENDEF
                           A   727    
                           A   728    .BEGFUNC "containsESP32Header",88,"_containsESP
                           A   729    
                           A   730    .LINE 88
                           A   731    
                           A   732    .DEFINE "filestart"
                           A   733    
                           A   734    .CLASS 65
                           A   735    
                           A   736    .VALUE 6
                           A   737    
                           A   738    .TYPE 44
                           A   739    
                           A   740    .ENDEF
                           A   741    
                           A   742    .DEFINE "n"
                           A   743    
                           A   744    .CLASS 65
                           A   745    
                           A   746    .VALUE -1
                           A   747    
                           A   748    .TYPE 12
                           A   749    
                           A   750    .ENDEF
                           A   751    
                           A   752    .DEFINE "match"
                           A   753    
                           A   754    .CLASS 65
                           A   755    
                           A   756    .VALUE -2
                           A   757    
                           A   758    .TYPE 12
                           A   759    
                           A   760    .ENDEF
                           A   761    
0B0291 DDE5                A   762    	PUSH	IX
0B0293 DD210000 00         A   763    	LD	IX,0
0B0298 DD39                A   764    	ADD	IX,SP
0B029A 3B                  A   765    	DEC	SP
0B029B 3B                  A   766    	DEC	SP
                           A   767    ;   89		uint8_t n;
                           A   768    ;   90		bool match = true;
                           A   769    .LINE 90
                           A   770    
0B029C DD36FE01            A   771    	LD	(IX+%FFFFFFFE),%1
                           A   772    ;   91	
                           A   773    ;   92		filestart += ESP32_MAGICSTART; // s
                           A   774    .LINE 92
                           A   775    
0B02A0 DD3106              A   776    	LD	IY,(IX+%6)
0B02A3 ED3320              A   777    	LEA	IY,IY+%20
0B02A6 DD3E06              A   778    	LD	(IX+%6),IY
                           A   779    ;   93		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A   780    .LINE 93
                           A   781    
0B02A9 DD36FF00            A   782    	LD	(IX+%FFFFFFFF),%0
0B02AD 18 27               A   783    	JR	L_24
0B02AF                     A   784    L_22:
                           A   785    ;   94			if(esp32_magicnumbers[n] != fil
                           A   786    .LINE 94
                           A   787    
0B02AF DD7EFF              A   788    	LD	A,(IX+%FFFFFFFF)
0B02B2 B7ED62              A   789    	UEXT	HL
0B02B5 6F                  A   790    	LD	L,A
0B02B6 01 E0 1A 0B         A   791    	LD	BC,_esp32_magicnumbers
0B02BA 09                  A   792    	ADD	HL,BC
0B02BB E5FDE1              A   793    	LD	IY,HL
0B02BE DD7EFF              A   794    	LD	A,(IX+%FFFFFFFF)
0B02C1 B7ED62              A   795    	UEXT	HL
0B02C4 6F                  A   796    	LD	L,A
0B02C5 DD0706              A   797    	LD	BC,(IX+%6)
0B02C8 09                  A   798    	ADD	HL,BC
0B02C9 FD7E00              A   799    	LD	A,(IY)
0B02CC BE                  A   800    	CP	A,(HL)
0B02CD 28 04               A   801    	JR	Z,L_23
0B02CF DD36FE00            A   802    	LD	(IX+%FFFFFFFE),%0
                           A   803    ;   95		}
0B02D3                     A   804    L_23:
                           A   805    .LINE 95
                           A   806    
0B02D3 DD34FF              A   807    	INC	(IX+%FFFFFFFF)
0B02D6                     A   808    L_24:
0B02D6 DD7EFF              A   809    	LD	A,(IX+%FFFFFFFF)
0B02D9 FE04                A   810    	CP	A,%4
0B02DB 38 D2               A   811    	JR	C,L_22
                           A   812    ;   96		return match;
                           A   813    .LINE 96
                           A   814    
0B02DD DD7EFE              A   815    	LD	A,(IX+%FFFFFFFE)
                           A   816    ;   97	}
                           A   817    .LINE 97
                           A   818    
0B02E0 DDF9                A   819    	LD	SP,IX
0B02E2 DDE1                A   820    	POP	IX
0B02E4 C9                  A   821    	RET	
                           A   822    
                           A   823    
                           A   824    ;**************************** _containsESP32Hea
                           A   825    ;Name                         Addr/Register   S
                           A   826    ;_esp32_magicnumbers                 STATIC    
                           A   827    ;match                                 IX-2    
                           A   828    ;n                                     IX-1    
                           A   829    ;filestart                             IX+6    
                           A   830    
                           A   831    
                           A   832    ; Stack Frame Size: 11 (bytes)
                           A   833    ;       Spill Code: 0 (instruction)
                           A   834    
                           A   835    
                           A   836    .ENDFUNC "containsESP32Header",97,"_containsESP
                           A   837    ;   98	
                           A   838    ;   99	void print_version(void) {
0B02E5                     A   839    _print_version:
                           A   840    .DEFINE "_print_version"
                           A   841    
                           A   842    .VALUE _print_version
                           A   843    
                           A   844    .CLASS 2
                           A   845    
                           A   846    .TYPE 65
                           A   847    
                           A   848    .ENDEF
                           A   849    
                           A   850    .BEGFUNC "print_version",99,"_print_version"
                           A   851    
0B02E5 DDE5                A   852    	PUSH	IX
0B02E7 DD210000 00         A   853    	LD	IX,0
0B02EC DD39                A   854    	ADD	IX,SP
                           A   855    ;  100		printf("Agon firmware upgrade utili
                           A   856    .LINE 100
                           A   857    
0B02EE 01 4C 11 0B         A   858    	LD	BC,___print_uputch
0B02F2 ED43 04 20 0B       A   859    	LD	(___print_xputch),BC
0B02F7 01 98 20 0B         A   860    	LD	BC,L__14
0B02FB C5                  A   861    	PUSH	BC
0B02FC CD DB 0F 0B         A   862    	CALL	___print_sendstring
0B0300 C1                  A   863    	POP	BC
                           A   864    ;  101	}
                           A   865    .LINE 101
                           A   866    
0B0301 DDF9                A   867    	LD	SP,IX
0B0303 DDE1                A   868    	POP	IX
0B0305 C9                  A   869    	RET	
                           A   870    
                           A   871    
                           A   872    ;**************************** _print_version **
                           A   873    ;Name                         Addr/Register   S
                           A   874    ;___print_sendstring                 IMPORT  --
                           A   875    ;___print_xputch                     IMPORT    
                           A   876    ;___print_uputch                     IMPORT  --
                           A   877    
                           A   878    
                           A   879    ; Stack Frame Size: 6 (bytes)
                           A   880    ;       Spill Code: 0 (instruction)
                           A   881    
                           A   882    
                           A   883    .ENDFUNC "print_version",101,"_print_version"
                           A   884    	SEGMENT STRSECT
0B2098                     A   885    L__14:
0B2098 41676F6E 20666972   A   886    	DB	"Agon firmware upgrade utility v1.4"
0B20A0 6D776172 65207570 
0B20A8 67726164 65207574 
0B20B0 696C6974 79207631 
0B20B8 2E34 
0B20BA 0A0D0A0D 00         A   887    	DB	10,13,10,13,0
                           A   888    	SEGMENT CODE
                           A   889    ;  102	
                           A   890    ;  103	void usage(void) {
0B0306                     A   891    _usage:
                           A   892    .DEFINE "_usage"
                           A   893    
                           A   894    .VALUE _usage
                           A   895    
                           A   896    .CLASS 2
                           A   897    
                           A   898    .TYPE 65
                           A   899    
                           A   900    .ENDEF
                           A   901    
                           A   902    .BEGFUNC "usage",103,"_usage"
                           A   903    
0B0306 DDE5                A   904    	PUSH	IX
0B0308 DD210000 00         A   905    	LD	IX,0
0B030D DD39                A   906    	ADD	IX,SP
                           A   907    ;  104		print_version();
                           A   908    .LINE 104
                           A   909    
0B030F CD E5 02 0B         A   910    	CALL	_print_version
                           A   911    ;  105		printf("Usage: FLASH <mos|vdp> <fil
                           A   912    .LINE 105
                           A   913    
0B0313 01 4C 11 0B         A   914    	LD	BC,___print_uputch
0B0317 ED43 04 20 0B       A   915    	LD	(___print_xputch),BC
0B031C 01 BF 20 0B         A   916    	LD	BC,L__16
0B0320 C5                  A   917    	PUSH	BC
0B0321 CD DB 0F 0B         A   918    	CALL	___print_sendstring
0B0325 C1                  A   919    	POP	BC
                           A   920    ;  106	}
                           A   921    .LINE 106
                           A   922    
0B0326 DDF9                A   923    	LD	SP,IX
0B0328 DDE1                A   924    	POP	IX
0B032A C9                  A   925    	RET	
                           A   926    
                           A   927    
                           A   928    ;**************************** _usage **********
                           A   929    ;Name                         Addr/Register   S
                           A   930    ;___print_sendstring                 IMPORT  --
                           A   931    ;___print_xputch                     IMPORT    
                           A   932    ;___print_uputch                     IMPORT  --
                           A   933    
                           A   934    
                           A   935    ; Stack Frame Size: 6 (bytes)
                           A   936    ;       Spill Code: 0 (instruction)
                           A   937    
                           A   938    
                           A   939    .ENDFUNC "usage",106,"_usage"
                           A   940    	SEGMENT STRSECT
0B20BF                     A   941    L__16:
0B20BF 55736167 653A2046   A   942    	DB	"Usage: FLASH <mos|vdp> <filename>"
0B20C7 4C415348 203C6D6F 
0B20CF 737C7664 703E203C 
0B20D7 66696C65 6E616D65 
0B20DF 3E 
0B20E0 0A0D00              A   943    	DB	10,13,0
                           A   944    	SEGMENT CODE
                           A   945    ;  107	
                           A   946    ;  108	typedef enum {
                           A   947    ;  109		MOS,
                           A   948    ;  110		VDP
                           A   949    ;  111	} flashtype;
                           A   950    ;  112	
                           A   951    ;  113	bool getResponse(flashtype t, uint32_t 
0B032B                     A   952    _getResponse:
                           A   953    .DEFINE "_getResponse"
                           A   954    
                           A   955    .VALUE _getResponse
                           A   956    
                           A   957    .CLASS 2
                           A   958    
                           A   959    .TYPE 76
                           A   960    
                           A   961    .ENDEF
                           A   962    
                           A   963    .BEGFUNC "getResponse",113,"_getResponse"
                           A   964    
                           A   965    .LINE 113
                           A   966    
                           A   967    .DEFINE "t"
                           A   968    
                           A   969    .CLASS 65
                           A   970    
                           A   971    .VALUE 6
                           A   972    
                           A   973    .TYPE 4
                           A   974    
                           A   975    .ENDEF
                           A   976    
                           A   977    .DEFINE "crc"
                           A   978    
                           A   979    .CLASS 65
                           A   980    
                           A   981    .VALUE 9
                           A   982    
                           A   983    .TYPE 15
                           A   984    
                           A   985    .ENDEF
                           A   986    
                           A   987    .DEFINE "response"
                           A   988    
                           A   989    .CLASS 65
                           A   990    
                           A   991    .VALUE -1
                           A   992    
                           A   993    .TYPE 12
                           A   994    
                           A   995    .ENDEF
                           A   996    
0B032B DDE5                A   997    	PUSH	IX
0B032D DD210000 00         A   998    	LD	IX,0
0B0332 DD39                A   999    	ADD	IX,SP
0B0334 3B                  A  1000    	DEC	SP
                           A  1001    ;  114		uint8_t response = 0;
                           A  1002    .LINE 114
                           A  1003    
0B0335 DD36FF00            A  1004    	LD	(IX+%FFFFFFFF),%0
                           A  1005    ;  115	
                           A  1006    ;  116		switch(t) {
                           A  1007    .LINE 116
                           A  1008    
0B0339 DD2706              A  1009    	LD	HL,(IX+%6)
0B033C CD EB 17 0B         A  1010    	CALL	__case8D
0B0340 E9                  A  1011    	JP	(HL)
0B0341                     A  1012    L__18:
0B0341 0200                A  1013    	DW	2
0B0343 00                  A  1014    	DB	0
0B0344 4E030B              A  1015    	DW24	L_29	
                           A  1016    
0B0347 01                  A  1017    	DB	1
0B0348 8F030B              A  1018    	DW24	L_30	
                           A  1019    
0B034B D7030B              A  1020    	DW24	L_32	
                           A  1021    
                           A  1022    ;  117			case MOS:
0B034E                     A  1023    L_29:
                           A  1024    .LINE 117
                           A  1025    
                           A  1026    ;  118				printf("\r\n\r\n0x%04lX - f
                           A  1027    .LINE 118
                           A  1028    
0B034E 01 4C 11 0B         A  1029    	LD	BC,___print_uputch
0B0352 ED43 04 20 0B       A  1030    	LD	(___print_xputch),BC
0B0357 01 E3 20 0B         A  1031    	LD	BC,L__19
0B035B C5                  A  1032    	PUSH	BC
0B035C CD DB 0F 0B         A  1033    	CALL	___print_sendstring
0B0360 C1                  A  1034    	POP	BC
0B0361 3E04                A  1035    	LD	A,%4
0B0363 32 FA 1A 0B         A  1036    	LD	(___print_fmt+5),A
0B0367 3E60                A  1037    	LD	A,%60
0B0369 32 F6 1A 0B         A  1038    	LD	(___print_fmt+1),A
0B036D 3E78                A  1039    	LD	A,%78
0B036F 32 F9 1A 0B         A  1040    	LD	(___print_fmt+4),A
0B0373 DD4E0C              A  1041    	LD	C,(IX+%C)
0B0376 0600                A  1042    	LD	B,%0
0B0378 C5                  A  1043    	PUSH	BC
0B0379 DD0709              A  1044    	LD	BC,(IX+%9)
0B037C C5                  A  1045    	PUSH	BC
0B037D CD A5 18 0B         A  1046    	CALL	__u_ultoa
0B0381 C1                  A  1047    	POP	BC
0B0382 C1                  A  1048    	POP	BC
0B0383 01 EA 20 0B         A  1049    	LD	BC,L__20
0B0387 C5                  A  1050    	PUSH	BC
0B0388 CD DB 0F 0B         A  1051    	CALL	___print_sendstring
0B038C C1                  A  1052    	POP	BC
                           A  1053    ;  119				break;
                           A  1054    .LINE 119
                           A  1055    
0B038D 18 48               A  1056    	JR	L_32
                           A  1057    ;  120			case VDP:
0B038F                     A  1058    L_30:
                           A  1059    .LINE 120
                           A  1060    
                           A  1061    ;  121				printf("\r\n\r\n0x%04lX - f
                           A  1062    .LINE 121
                           A  1063    
0B038F 01 4C 11 0B         A  1064    	LD	BC,___print_uputch
0B0393 ED43 04 20 0B       A  1065    	LD	(___print_xputch),BC
0B0398 01 01 21 0B         A  1066    	LD	BC,L__21
0B039C C5                  A  1067    	PUSH	BC
0B039D CD DB 0F 0B         A  1068    	CALL	___print_sendstring
0B03A1 C1                  A  1069    	POP	BC
0B03A2 3E04                A  1070    	LD	A,%4
0B03A4 32 FA 1A 0B         A  1071    	LD	(___print_fmt+5),A
0B03A8 3E60                A  1072    	LD	A,%60
0B03AA 32 F6 1A 0B         A  1073    	LD	(___print_fmt+1),A
0B03AE 3E78                A  1074    	LD	A,%78
0B03B0 32 F9 1A 0B         A  1075    	LD	(___print_fmt+4),A
0B03B4 DD4E0C              A  1076    	LD	C,(IX+%C)
0B03B7 0600                A  1077    	LD	B,%0
0B03B9 C5                  A  1078    	PUSH	BC
0B03BA DD0709              A  1079    	LD	BC,(IX+%9)
0B03BD C5                  A  1080    	PUSH	BC
0B03BE CD A5 18 0B         A  1081    	CALL	__u_ultoa
0B03C2 C1                  A  1082    	POP	BC
0B03C3 C1                  A  1083    	POP	BC
0B03C4 01 08 21 0B         A  1084    	LD	BC,L__22
0B03C8 C5                  A  1085    	PUSH	BC
0B03C9 CD DB 0F 0B         A  1086    	CALL	___print_sendstring
0B03CD C1                  A  1087    	POP	BC
                           A  1088    ;  122				break;
                           A  1089    .LINE 122
                           A  1090    
0B03CE 18 07               A  1091    	JR	L_32
                           A  1092    ;  123		}
                           A  1093    ;  124	
                           A  1094    ;  125		while((response != 'y') && (respons
0B03D0                     A  1095    L_33:
                           A  1096    .LINE 125
                           A  1097    
0B03D0 CD C1 0A 0B         A  1098    	CALL	_getch
0B03D4 DD77FF              A  1099    	LD	(IX+%FFFFFFFF),A
0B03D7                     A  1100    L_32:
0B03D7 DD7EFF              A  1101    	LD	A,(IX+%FFFFFFFF)
0B03DA FE79                A  1102    	CP	A,%79
0B03DC 28 07               A  1103    	JR	Z,L_37
0B03DE DD7EFF              A  1104    	LD	A,(IX+%FFFFFFFF)
0B03E1 FE6E                A  1105    	CP	A,%6E
0B03E3 20 EB               A  1106    	JR	NZ,L_33
0B03E5                     A  1107    L_37:
                           A  1108    ;  126		if(response == 'n') printf("\r\nUse
                           A  1109    .LINE 126
                           A  1110    
0B03E5 DD7EFF              A  1111    	LD	A,(IX+%FFFFFFFF)
0B03E8 FE6E                A  1112    	CP	A,%6E
0B03EA 20 15               A  1113    	JR	NZ,L_36
0B03EC 01 4C 11 0B         A  1114    	LD	BC,___print_uputch
0B03F0 ED43 04 20 0B       A  1115    	LD	(___print_xputch),BC
0B03F5 01 1F 21 0B         A  1116    	LD	BC,L__26
0B03F9 C5                  A  1117    	PUSH	BC
0B03FA CD DB 0F 0B         A  1118    	CALL	___print_sendstring
0B03FE C1                  A  1119    	POP	BC
                           A  1120    ;  127		else printf("\r\n\r\n");
                           A  1121    .LINE 127
                           A  1122    
0B03FF 18 13               A  1123    	JR	L_38
0B0401                     A  1124    L_36:
0B0401 01 4C 11 0B         A  1125    	LD	BC,___print_uputch
0B0405 ED43 04 20 0B       A  1126    	LD	(___print_xputch),BC
0B040A 01 30 21 0B         A  1127    	LD	BC,L__27
0B040E C5                  A  1128    	PUSH	BC
0B040F CD DB 0F 0B         A  1129    	CALL	___print_sendstring
0B0413 C1                  A  1130    	POP	BC
0B0414                     A  1131    L_38:
                           A  1132    ;  128		return response == 'y';
                           A  1133    .LINE 128
                           A  1134    
0B0414 DD7EFF              A  1135    	LD	A,(IX+%FFFFFFFF)
0B0417 FE79                A  1136    	CP	A,%79
0B0419 20 04               A  1137    	JR	NZ,L__29
0B041B 3E01                A  1138    	LD	A,%1
0B041D 18 01               A  1139    	JR	L__30
0B041F                     A  1140    L__29:
0B041F AF                  A  1141    	XOR	A,A
0B0420                     A  1142    L__30:
                           A  1143    ;  129	}
                           A  1144    .LINE 129
                           A  1145    
0B0420 DDF9                A  1146    	LD	SP,IX
0B0422 DDE1                A  1147    	POP	IX
0B0424 C9                  A  1148    	RET	
                           A  1149    
                           A  1150    
                           A  1151    ;**************************** _getResponse ****
                           A  1152    ;Name                         Addr/Register   S
                           A  1153    ;_getch                              IMPORT  --
                           A  1154    ;__u_ultoa                           IMPORT  --
                           A  1155    ;___print_fmt                        IMPORT    
                           A  1156    ;___print_sendstring                 IMPORT  --
                           A  1157    ;___print_xputch                     IMPORT    
                           A  1158    ;___print_uputch                     IMPORT  --
                           A  1159    ;response                              IX-1    
                           A  1160    ;crc                                   IX+9    
                           A  1161    ;t                                     IX+6    
                           A  1162    
                           A  1163    
                           A  1164    ; Stack Frame Size: 16 (bytes)
                           A  1165    ;       Spill Code: 0 (instruction)
                           A  1166    
                           A  1167    
                           A  1168    .ENDFUNC "getResponse",129,"_getResponse"
                           A  1169    	SEGMENT STRSECT
0B20E3                     A  1170    L__19:
0B20E3 0D0A0D0A            A  1171    	DB	13,10,13,10
0B20E7 3078                A  1172    	DB	"0x"
0B20E9 00                  A  1173    	DB	0
0B20EA                     A  1174    L__20:
0B20EA 202D2066 6C617368   A  1175    	DB	" - flash to MOS (y/n)?"
0B20F2 20746F20 4D4F5320 
0B20FA 28792F6E 293F 
0B2100 00                  A  1176    	DB	0
0B2101                     A  1177    L__21:
0B2101 0D0A0D0A            A  1178    	DB	13,10,13,10
0B2105 3078                A  1179    	DB	"0x"
0B2107 00                  A  1180    	DB	0
0B2108                     A  1181    L__22:
0B2108 202D2066 6C617368   A  1182    	DB	" - flash to VDP (y/n)?"
0B2110 20746F20 56445020 
0B2118 28792F6E 293F 
0B211E 00                  A  1183    	DB	0
0B211F                     A  1184    L__26:
0B211F 0D0A                A  1185    	DB	13,10
0B2121 55736572 2061626F   A  1186    	DB	"User abort"
0B2129 7274 
0B212B 0A0D0A0D 00         A  1187    	DB	10,13,10,13,0
0B2130                     A  1188    L__27:
0B2130 0D0A0D0A 00         A  1189    	DB	13,10,13,10,0
                           A  1190    	SEGMENT CODE
                           A  1191    ;  130	
                           A  1192    ;  131	uint8_t update_vdp(char *filename) {
0B0425                     A  1193    _update_vdp:
                           A  1194    .DEFINE "_update_vdp"
                           A  1195    
                           A  1196    .VALUE _update_vdp
                           A  1197    
                           A  1198    .CLASS 2
                           A  1199    
                           A  1200    .TYPE 76
                           A  1201    
                           A  1202    .ENDEF
                           A  1203    
                           A  1204    .BEGFUNC "update_vdp",131,"_update_vdp"
                           A  1205    
                           A  1206    .LINE 131
                           A  1207    
                           A  1208    .DEFINE "filename"
                           A  1209    
                           A  1210    .CLASS 65
                           A  1211    
                           A  1212    .VALUE 6
                           A  1213    
                           A  1214    .TYPE 34
                           A  1215    
                           A  1216    .ENDEF
                           A  1217    
                           A  1218    .DEFINE "file"
                           A  1219    
                           A  1220    .CLASS 65
                           A  1221    
                           A  1222    .VALUE -1
                           A  1223    
                           A  1224    .TYPE 12
                           A  1225    
                           A  1226    .ENDEF
                           A  1227    
                           A  1228    .DEFINE "size"
                           A  1229    
                           A  1230    .CLASS 65
                           A  1231    
                           A  1232    .VALUE -4
                           A  1233    
                           A  1234    .TYPE 14
                           A  1235    
                           A  1236    .ENDEF
                           A  1237    
                           A  1238    .DEFINE "filesize"
                           A  1239    
                           A  1240    .CLASS 65
                           A  1241    
                           A  1242    .VALUE -7
                           A  1243    
                           A  1244    .TYPE 14
                           A  1245    
                           A  1246    .ENDEF
                           A  1247    
                           A  1248    .DEFINE "crcresult"
                           A  1249    
                           A  1250    .CLASS 65
                           A  1251    
                           A  1252    .VALUE -11
                           A  1253    
                           A  1254    .TYPE 15
                           A  1255    
                           A  1256    .ENDEF
                           A  1257    
                           A  1258    .DEFINE "buffer"
                           A  1259    
                           A  1260    .CLASS 65
                           A  1261    
                           A  1262    .VALUE -47
                           A  1263    
                           A  1264    .DIM 36
                           A  1265    
                           A  1266    .TYPE 108
                           A  1267    
                           A  1268    .ENDEF
                           A  1269    
0B0425 DDE5                A  1270    	PUSH	IX
0B0427 DD210000 00         A  1271    	LD	IX,0
0B042C DD39                A  1272    	ADD	IX,SP
0B042E ED22D1              A  1273    	LEA	HL,IX+%FFFFFFD1
0B0431 F9                  A  1274    	LD	SP,HL
                           A  1275    ;  132		uint8_t file;
                           A  1276    ;  133		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1277    ;  134		uint24_t filesize;
                           A  1278    ;  135		uint32_t crcresult;
                           A  1279    ;  136		uint24_t size, n;
                           A  1280    ;  137		uint8_t response;
                           A  1281    ;  138	
                           A  1282    ;  139		putch(12); // cls
                           A  1283    .LINE 139
                           A  1284    
0B0432 010C0000            A  1285    	LD	BC,12
0B0436 C5                  A  1286    	PUSH	BC
0B0437 CD E5 00 0B         A  1287    	CALL	_putch
0B043B C1                  A  1288    	POP	BC
                           A  1289    ;  140		print_version();	
                           A  1290    .LINE 140
                           A  1291    
0B043C CD E5 02 0B         A  1292    	CALL	_print_version
                           A  1293    ;  141		printf("Unlocking VDP updater...\r\
                           A  1294    .LINE 141
                           A  1295    
0B0440 01 4C 11 0B         A  1296    	LD	BC,___print_uputch
0B0444 ED43 04 20 0B       A  1297    	LD	(___print_xputch),BC
0B0449 01 35 21 0B         A  1298    	LD	BC,L__32
0B044D C5                  A  1299    	PUSH	BC
0B044E CD DB 0F 0B         A  1300    	CALL	___print_sendstring
0B0452 C1                  A  1301    	POP	BC
                           A  1302    ;  142		
                           A  1303    ;  143		if(!vdp_ota_present()) {
                           A  1304    .LINE 143
                           A  1305    
0B0453 CD A3 01 0B         A  1306    	CALL	_vdp_ota_present
0B0457 B7                  A  1307    	OR	A,A
0B0458 20 18               A  1308    	JR	NZ,L_41
                           A  1309    ;  144			printf(" failed - incompatible 
                           A  1310    .LINE 144
                           A  1311    
0B045A 01 4C 11 0B         A  1312    	LD	BC,___print_uputch
0B045E ED43 04 20 0B       A  1313    	LD	(___print_xputch),BC
0B0463 01 50 21 0B         A  1314    	LD	BC,L__34
0B0467 C5                  A  1315    	PUSH	BC
0B0468 CD DB 0F 0B         A  1316    	CALL	___print_sendstring
0B046C C1                  A  1317    	POP	BC
                           A  1318    ;  145			return 0;
                           A  1319    .LINE 145
                           A  1320    
0B046D AF                  A  1321    	XOR	A,A
0B046E C3 E0 05 0B         A  1322    	JR	L_53
                           A  1323    ;  146		}
0B0472                     A  1324    L_41:
                           A  1325    .LINE 146
                           A  1326    
                           A  1327    ;  147	
                           A  1328    ;  148		file = mos_fopen(filename, fa_read)
                           A  1329    .LINE 148
                           A  1330    
0B0472 01010000            A  1331    	LD	BC,1
0B0476 C5                  A  1332    	PUSH	BC
0B0477 DD0706              A  1333    	LD	BC,(IX+%6)
0B047A C5                  A  1334    	PUSH	BC
0B047B CD 0B 0B 0B         A  1335    	CALL	_mos_fopen
0B047F C1                  A  1336    	POP	BC
0B0480 C1                  A  1337    	POP	BC
0B0481 DD77FF              A  1338    	LD	(IX+%FFFFFFFF),A
                           A  1339    ;  149		if(!file) {
                           A  1340    .LINE 149
                           A  1341    
0B0484 B7                  A  1342    	OR	A,A
0B0485 20 2C               A  1343    	JR	NZ,L_43
                           A  1344    ;  150			printf("Error opening \"%s\"\n\
                           A  1345    .LINE 150
                           A  1346    
0B0487 01 4C 11 0B         A  1347    	LD	BC,___print_uputch
0B048B ED43 04 20 0B       A  1348    	LD	(___print_xputch),BC
0B0490 01 6D 21 0B         A  1349    	LD	BC,L__36
0B0494 C5                  A  1350    	PUSH	BC
0B0495 CD DB 0F 0B         A  1351    	CALL	___print_sendstring
0B0499 C1                  A  1352    	POP	BC
0B049A DD0706              A  1353    	LD	BC,(IX+%6)
0B049D C5                  A  1354    	PUSH	BC
0B049E CD DB 0F 0B         A  1355    	CALL	___print_sendstring
0B04A2 C1                  A  1356    	POP	BC
0B04A3 01 7D 21 0B         A  1357    	LD	BC,L__37
0B04A7 C5                  A  1358    	PUSH	BC
0B04A8 CD DB 0F 0B         A  1359    	CALL	___print_sendstring
0B04AC C1                  A  1360    	POP	BC
                           A  1361    ;  151			return EXIT_FILENOTFOUND;
                           A  1362    .LINE 151
                           A  1363    
0B04AD 3E04                A  1364    	LD	A,%4
0B04AF C3 E0 05 0B         A  1365    	JR	L_53
                           A  1366    ;  152		}
0B04B3                     A  1367    L_43:
                           A  1368    .LINE 152
                           A  1369    
                           A  1370    ;  153	
                           A  1371    ;  154		mos_fread(file, (char *)buffer, ESP
                           A  1372    .LINE 154
                           A  1373    
0B04B3 01240000            A  1374    	LD	BC,36
0B04B7 C5                  A  1375    	PUSH	BC
0B04B8 ED65D1              A  1376    	PEA	IX+%FFFFFFD1
0B04BB DD4EFF              A  1377    	LD	C,(IX+%FFFFFFFF)
0B04BE 0600                A  1378    	LD	B,%0
0B04C0 C5                  A  1379    	PUSH	BC
0B04C1 CD 4D 0B 0B         A  1380    	CALL	_mos_fread
0B04C5 C1                  A  1381    	POP	BC
0B04C6 C1                  A  1382    	POP	BC
0B04C7 C1                  A  1383    	POP	BC
                           A  1384    ;  155		if(!containsESP32Header(buffer)) {
                           A  1385    .LINE 155
                           A  1386    
0B04C8 ED65D1              A  1387    	PEA	IX+%FFFFFFD1
0B04CB CD 91 02 0B         A  1388    	CALL	_containsESP32Header
0B04CF C1                  A  1389    	POP	BC
0B04D0 B7                  A  1390    	OR	A,A
0B04D1 20 24               A  1391    	JR	NZ,L_45
                           A  1392    ;  156			printf("File does not contain v
                           A  1393    .LINE 156
                           A  1394    
0B04D3 01 4C 11 0B         A  1395    	LD	BC,___print_uputch
0B04D7 ED43 04 20 0B       A  1396    	LD	(___print_xputch),BC
0B04DC 01 81 21 0B         A  1397    	LD	BC,L__39
0B04E0 C5                  A  1398    	PUSH	BC
0B04E1 CD DB 0F 0B         A  1399    	CALL	___print_sendstring
0B04E5 C1                  A  1400    	POP	BC
                           A  1401    ;  157			mos_fclose(file);
                           A  1402    .LINE 157
                           A  1403    
0B04E6 DD4EFF              A  1404    	LD	C,(IX+%FFFFFFFF)
0B04E9 0600                A  1405    	LD	B,%0
0B04EB C5                  A  1406    	PUSH	BC
0B04EC CD 23 0B 0B         A  1407    	CALL	_mos_fclose
0B04F0 C1                  A  1408    	POP	BC
                           A  1409    ;  158			return EXIT_INVALIDPARAMETER;
                           A  1410    .LINE 158
                           A  1411    
0B04F1 3E13                A  1412    	LD	A,%13
0B04F3 C3 E0 05 0B         A  1413    	JR	L_53
                           A  1414    ;  159		}
0B04F7                     A  1415    L_45:
                           A  1416    .LINE 159
                           A  1417    
                           A  1418    ;  160		printf("\r\nValid ESP32 code\r\nCal
                           A  1419    .LINE 160
                           A  1420    
0B04F7 01 4C 11 0B         A  1421    	LD	BC,___print_uputch
0B04FB ED43 04 20 0B       A  1422    	LD	(___print_xputch),BC
0B0500 01 AA 21 0B         A  1423    	LD	BC,L__40
0B0504 C5                  A  1424    	PUSH	BC
0B0505 CD DB 0F 0B         A  1425    	CALL	___print_sendstring
0B0509 C1                  A  1426    	POP	BC
                           A  1427    ;  161		crc32_initialize();
                           A  1428    .LINE 161
                           A  1429    
0B050A CD 99 0E 0B         A  1430    	CALL	_crc32_initialize
                           A  1431    ;  162		mos_flseek(file, 0);
                           A  1432    .LINE 162
                           A  1433    
0B050E 01000000            A  1434    	LD	BC,0
0B0512 C5                  A  1435    	PUSH	BC
0B0513 C5                  A  1436    	PUSH	BC
0B0514 DD4EFF              A  1437    	LD	C,(IX+%FFFFFFFF)
0B0517 0600                A  1438    	LD	B,%0
0B0519 C5                  A  1439    	PUSH	BC
0B051A CD C7 0B 0B         A  1440    	CALL	_mos_flseek
0B051E C1                  A  1441    	POP	BC
0B051F C1                  A  1442    	POP	BC
0B0520 C1                  A  1443    	POP	BC
                           A  1444    ;  163		while(1) {
0B0521                     A  1445    L_49:
                           A  1446    .LINE 163
                           A  1447    
                           A  1448    ;  164			size = mos_fread(file, (char *)
                           A  1449    .LINE 164
                           A  1450    
0B0521 01004000            A  1451    	LD	BC,16384
0B0525 C5                  A  1452    	PUSH	BC
0B0526 01000005            A  1453    	LD	BC,327680
0B052A C5                  A  1454    	PUSH	BC
0B052B DD4EFF              A  1455    	LD	C,(IX+%FFFFFFFF)
0B052E 0600                A  1456    	LD	B,%0
0B0530 C5                  A  1457    	PUSH	BC
0B0531 CD 4D 0B 0B         A  1458    	CALL	_mos_fread
0B0535 C1                  A  1459    	POP	BC
0B0536 C1                  A  1460    	POP	BC
0B0537 C1                  A  1461    	POP	BC
0B0538 DD2FFC              A  1462    	LD	(IX+%FFFFFFFC),HL
                           A  1463    ;  165			if(size == 0) break;
                           A  1464    .LINE 165
                           A  1465    
0B053B CD 09 15 0B         A  1466    	CALL	__icmpzero
0B053F 28 1B               A  1467    	JR	Z,L_50
                           A  1468    ;  166			putch('.');
                           A  1469    .LINE 166
                           A  1470    
0B0541 012E0000            A  1471    	LD	BC,46
0B0545 C5                  A  1472    	PUSH	BC
0B0546 CD E5 00 0B         A  1473    	CALL	_putch
0B054A C1                  A  1474    	POP	BC
                           A  1475    ;  167			crc32((char *)BUFFER1, size);
                           A  1476    .LINE 167
                           A  1477    
0B054B DD07FC              A  1478    	LD	BC,(IX+%FFFFFFFC)
0B054E C5                  A  1479    	PUSH	BC
0B054F 01000005            A  1480    	LD	BC,327680
0B0553 C5                  A  1481    	PUSH	BC
0B0554 CD EB 0E 0B         A  1482    	CALL	_crc32
0B0558 C1                  A  1483    	POP	BC
0B0559 C1                  A  1484    	POP	BC
0B055A 18 C5               A  1485    	JR	L_49
                           A  1486    ;  168		}
0B055C                     A  1487    L_50:
                           A  1488    .LINE 168
                           A  1489    
                           A  1490    ;  169		crcresult = crc32_finalize();
                           A  1491    .LINE 169
                           A  1492    
0B055C CD AE 0E 0B         A  1493    	CALL	_crc32_finalize
0B0560 DD2FF5              A  1494    	LD	(IX+%FFFFFFF5),HL
0B0563 DD73F8              A  1495    	LD	(IX+%FFFFFFF8),E
                           A  1496    ;  170		if(!getResponse(VDP, crcresult)) {
                           A  1497    .LINE 170
                           A  1498    
0B0566 DD4EF8              A  1499    	LD	C,(IX+%FFFFFFF8)
0B0569 0600                A  1500    	LD	B,%0
0B056B C5                  A  1501    	PUSH	BC
0B056C DD07F5              A  1502    	LD	BC,(IX+%FFFFFFF5)
0B056F C5                  A  1503    	PUSH	BC
0B0570 01010000            A  1504    	LD	BC,1
0B0574 C5                  A  1505    	PUSH	BC
0B0575 CD 2B 03 0B         A  1506    	CALL	_getResponse
0B0579 C1                  A  1507    	POP	BC
0B057A C1                  A  1508    	POP	BC
0B057B C1                  A  1509    	POP	BC
0B057C B7                  A  1510    	OR	A,A
0B057D 20 0E               A  1511    	JR	NZ,L_52
                           A  1512    ;  171			mos_fclose(file);
                           A  1513    .LINE 171
                           A  1514    
0B057F DD4EFF              A  1515    	LD	C,(IX+%FFFFFFFF)
0B0582 0600                A  1516    	LD	B,%0
0B0584 C5                  A  1517    	PUSH	BC
0B0585 CD 23 0B 0B         A  1518    	CALL	_mos_fclose
0B0589 C1                  A  1519    	POP	BC
                           A  1520    ;  172			return 0;
                           A  1521    .LINE 172
                           A  1522    
0B058A AF                  A  1523    	XOR	A,A
0B058B 18 53               A  1524    	JR	L_53
                           A  1525    ;  173		}
0B058D                     A  1526    L_52:
                           A  1527    .LINE 173
                           A  1528    
                           A  1529    ;  174		// Do actual work here
                           A  1530    ;  175		mos_flseek(file, 0); // reset to ze
                           A  1531    .LINE 175
                           A  1532    
0B058D 01000000            A  1533    	LD	BC,0
0B0591 C5                  A  1534    	PUSH	BC
0B0592 C5                  A  1535    	PUSH	BC
0B0593 DD4EFF              A  1536    	LD	C,(IX+%FFFFFFFF)
0B0596 0600                A  1537    	LD	B,%0
0B0598 C5                  A  1538    	PUSH	BC
0B0599 CD C7 0B 0B         A  1539    	CALL	_mos_flseek
0B059D C1                  A  1540    	POP	BC
0B059E C1                  A  1541    	POP	BC
0B059F C1                  A  1542    	POP	BC
                           A  1543    ;  176		printf("Updating VDP firmware\r\n")
                           A  1544    .LINE 176
                           A  1545    
0B05A0 01 4C 11 0B         A  1546    	LD	BC,___print_uputch
0B05A4 ED43 04 20 0B       A  1547    	LD	(___print_xputch),BC
0B05A9 01 D0 21 0B         A  1548    	LD	BC,L__43
0B05AD C5                  A  1549    	PUSH	BC
0B05AE CD DB 0F 0B         A  1550    	CALL	___print_sendstring
0B05B2 C1                  A  1551    	POP	BC
                           A  1552    ;  177		filesize = getFileSize(file);	
                           A  1553    .LINE 177
                           A  1554    
0B05B3 DD4EFF              A  1555    	LD	C,(IX+%FFFFFFFF)
0B05B6 0600                A  1556    	LD	B,%0
0B05B8 C5                  A  1557    	PUSH	BC
0B05B9 CD 4B 0F 0B         A  1558    	CALL	_getFileSize
0B05BD C1                  A  1559    	POP	BC
0B05BE DD2FF9              A  1560    	LD	(IX+%FFFFFFF9),HL
                           A  1561    ;  178		startVDPupdate(file, filesize);
                           A  1562    .LINE 178
                           A  1563    
0B05C1 E5C1                A  1564    	LD	BC,HL
0B05C3 C5                  A  1565    	PUSH	BC
0B05C4 DD4EFF              A  1566    	LD	C,(IX+%FFFFFFFF)
0B05C7 0600                A  1567    	LD	B,%0
0B05C9 C5                  A  1568    	PUSH	BC
0B05CA CD 32 0C 0B         A  1569    	CALL	_startVDPupdate
0B05CE C1                  A  1570    	POP	BC
0B05CF C1                  A  1571    	POP	BC
                           A  1572    ;  179		mos_fclose(file);
                           A  1573    .LINE 179
                           A  1574    
0B05D0 DD4EFF              A  1575    	LD	C,(IX+%FFFFFFFF)
0B05D3 0600                A  1576    	LD	B,%0
0B05D5 C5                  A  1577    	PUSH	BC
0B05D6 CD 23 0B 0B         A  1578    	CALL	_mos_fclose
0B05DA C1                  A  1579    	POP	BC
                           A  1580    ;  180		reset();
                           A  1581    .LINE 180
                           A  1582    
0B05DB CD 11 0C 0B         A  1583    	CALL	_reset
                           A  1584    ;  181		return 0; // will never return, but
                           A  1585    .LINE 181
                           A  1586    
0B05DF AF                  A  1587    	XOR	A,A
                           A  1588    ;  182	}
0B05E0                     A  1589    L_53:
                           A  1590    .LINE 182
                           A  1591    
0B05E0 DDF9                A  1592    	LD	SP,IX
0B05E2 DDE1                A  1593    	POP	IX
0B05E4 C9                  A  1594    	RET	
                           A  1595    
                           A  1596    
                           A  1597    ;**************************** _update_vdp *****
                           A  1598    ;Name                         Addr/Register   S
                           A  1599    ;_reset                              IMPORT  --
                           A  1600    ;_startVDPupdate                     IMPORT  --
                           A  1601    ;_getFileSize                        IMPORT  --
                           A  1602    ;_crc32_finalize                     IMPORT  --
                           A  1603    ;_crc32                              IMPORT  --
                           A  1604    ;_mos_flseek                         IMPORT  --
                           A  1605    ;_crc32_initialize                   IMPORT  --
                           A  1606    ;_mos_fclose                         IMPORT  --
                           A  1607    ;_mos_fread                          IMPORT  --
                           A  1608    ;_mos_fopen                          IMPORT  --
                           A  1609    ;___print_sendstring                 IMPORT  --
                           A  1610    ;___print_xputch                     IMPORT    
                           A  1611    ;___print_uputch                     IMPORT  --
                           A  1612    ;_putch                              IMPORT  --
                           A  1613    ;buffer                               IX-47    
                           A  1614    ;crcresult                            IX-11    
                           A  1615    ;filesize                              IX-7    
                           A  1616    ;size                                  IX-4    
                           A  1617    ;file                                  IX-1    
                           A  1618    ;filename                              IX+6    
                           A  1619    
                           A  1620    
                           A  1621    ; Stack Frame Size: 56 (bytes)
                           A  1622    ;       Spill Code: 0 (instruction)
                           A  1623    
                           A  1624    
                           A  1625    .ENDFUNC "update_vdp",182,"_update_vdp"
                           A  1626    	SEGMENT STRSECT
0B2135                     A  1627    L__32:
0B2135 556E6C6F 636B696E   A  1628    	DB	"Unlocking VDP updater..."
0B213D 67205644 50207570 
0B2145 64617465 722E2E2E 
0B214D 0D0A00              A  1629    	DB	13,10,0
0B2150                     A  1630    L__34:
0B2150 20666169 6C656420   A  1631    	DB	" failed - incompatible VDP"
0B2158 2D20696E 636F6D70 
0B2160 61746962 6C652056 
0B2168 4450 
0B216A 0D0A00              A  1632    	DB	13,10,0
0B216D                     A  1633    L__36:
0B216D 4572726F 72206F70   A  1634    	DB	"Error opening \""
0B2175 656E696E 672022 
0B217C 00                  A  1635    	DB	0
0B217D                     A  1636    L__37:
0B217D 22                  A  1637    	DB	"\""
0B217E 0A0D00              A  1638    	DB	10,13,0
0B2181                     A  1639    L__39:
0B2181 46696C65 20646F65   A  1640    	DB	"File does not contain valid ESP32 code
0B2189 73206E6F 7420636F 
0B2191 6E746169 6E207661 
0B2199 6C696420 45535033 
0B21A1 3220636F 6465 
0B21A7 0D0A00              A  1641    	DB	13,10,0
0B21AA                     A  1642    L__40:
0B21AA 0D0A                A  1643    	DB	13,10
0B21AC 56616C69 64204553   A  1644    	DB	"Valid ESP32 code"
0B21B4 50333220 636F6465 
0B21BC 0D0A                A  1645    	DB	13,10
0B21BE 43616C63 756C6174   A  1646    	DB	"Calculating CRC32"
0B21C6 696E6720 43524333 
0B21CE 32 
0B21CF 00                  A  1647    	DB	0
0B21D0                     A  1648    L__43:
0B21D0 55706461 74696E67   A  1649    	DB	"Updating VDP firmware"
0B21D8 20564450 20666972 
0B21E0 6D776172 65 
0B21E5 0D0A00              A  1650    	DB	13,10,0
                           A  1651    	SEGMENT CODE
                           A  1652    ;  183	
                           A  1653    ;  184	uint8_t update_mos(char *filename) {
0B05E5                     A  1654    _update_mos:
                           A  1655    .DEFINE "_update_mos"
                           A  1656    
                           A  1657    .VALUE _update_mos
                           A  1658    
                           A  1659    .CLASS 2
                           A  1660    
                           A  1661    .TYPE 76
                           A  1662    
                           A  1663    .ENDEF
                           A  1664    
                           A  1665    .BEGFUNC "update_mos",184,"_update_mos"
                           A  1666    
                           A  1667    .LINE 184
                           A  1668    
                           A  1669    .DEFINE "filename"
                           A  1670    
                           A  1671    .CLASS 65
                           A  1672    
                           A  1673    .VALUE 6
                           A  1674    
                           A  1675    .TYPE 34
                           A  1676    
                           A  1677    .ENDEF
                           A  1678    
                           A  1679    .DEFINE "counter"
                           A  1680    
                           A  1681    .CLASS 65
                           A  1682    
                           A  1683    .VALUE -3
                           A  1684    
                           A  1685    .TYPE 14
                           A  1686    
                           A  1687    .ENDEF
                           A  1688    
                           A  1689    .DEFINE "file"
                           A  1690    
                           A  1691    .CLASS 65
                           A  1692    
                           A  1693    .VALUE -4
                           A  1694    
                           A  1695    .TYPE 12
                           A  1696    
                           A  1697    .ENDEF
                           A  1698    
                           A  1699    .DEFINE "addressfrom"
                           A  1700    
                           A  1701    .CLASS 65
                           A  1702    
                           A  1703    .VALUE -7
                           A  1704    
                           A  1705    .TYPE 14
                           A  1706    
                           A  1707    .ENDEF
                           A  1708    
                           A  1709    .DEFINE "pagemax"
                           A  1710    
                           A  1711    .CLASS 65
                           A  1712    
                           A  1713    .VALUE -10
                           A  1714    
                           A  1715    .TYPE 14
                           A  1716    
                           A  1717    .ENDEF
                           A  1718    
                           A  1719    .DEFINE "state"
                           A  1720    
                           A  1721    .CLASS 65
                           A  1722    
                           A  1723    .VALUE -13
                           A  1724    
                           A  1725    .TYPE 4
                           A  1726    
                           A  1727    .ENDEF
                           A  1728    
                           A  1729    .DEFINE "filesize"
                           A  1730    
                           A  1731    .CLASS 65
                           A  1732    
                           A  1733    .VALUE -16
                           A  1734    
                           A  1735    .TYPE 14
                           A  1736    
                           A  1737    .ENDEF
                           A  1738    
                           A  1739    .DEFINE "addressto"
                           A  1740    
                           A  1741    .CLASS 65
                           A  1742    
                           A  1743    .VALUE -19
                           A  1744    
                           A  1745    .TYPE 14
                           A  1746    
                           A  1747    .ENDEF
                           A  1748    
                           A  1749    .DEFINE "ptr"
                           A  1750    
                           A  1751    .CLASS 65
                           A  1752    
                           A  1753    .VALUE -22
                           A  1754    
                           A  1755    .TYPE 34
                           A  1756    
                           A  1757    .ENDEF
                           A  1758    
                           A  1759    .DEFINE "crcresult"
                           A  1760    
                           A  1761    .CLASS 65
                           A  1762    
                           A  1763    .VALUE -26
                           A  1764    
                           A  1765    .TYPE 15
                           A  1766    
                           A  1767    .ENDEF
                           A  1768    
                           A  1769    .DEFINE "got"
                           A  1770    
                           A  1771    .CLASS 65
                           A  1772    
                           A  1773    .VALUE -29
                           A  1774    
                           A  1775    .TYPE 14
                           A  1776    
                           A  1777    .ENDEF
                           A  1778    
                           A  1779    .DEFINE "value"
                           A  1780    
                           A  1781    .CLASS 65
                           A  1782    
                           A  1783    .VALUE -30
                           A  1784    
                           A  1785    .TYPE 12
                           A  1786    
                           A  1787    .ENDEF
                           A  1788    
                           A  1789    .DEFINE "lastpagebytes"
                           A  1790    
                           A  1791    .CLASS 65
                           A  1792    
                           A  1793    .VALUE -33
                           A  1794    
                           A  1795    .TYPE 14
                           A  1796    
                           A  1797    .ENDEF
                           A  1798    
                           A  1799    .DEFINE "size"
                           A  1800    
                           A  1801    .CLASS 65
                           A  1802    
                           A  1803    .VALUE -39
                           A  1804    
                           A  1805    .TYPE 14
                           A  1806    
                           A  1807    .ENDEF
                           A  1808    
                           A  1809    .DEFINE "crcexpected"
                           A  1810    
                           A  1811    .CLASS 65
                           A  1812    
                           A  1813    .VALUE -43
                           A  1814    
                           A  1815    .TYPE 15
                           A  1816    
                           A  1817    .ENDEF
                           A  1818    
0B05E5 DDE5                A  1819    	PUSH	IX
0B05E7 DD210000 00         A  1820    	LD	IX,0
0B05EC DD39                A  1821    	ADD	IX,SP
0B05EE ED22D5              A  1822    	LEA	HL,IX+%FFFFFFD5
0B05F1 F9                  A  1823    	LD	SP,HL
                           A  1824    ;  185		uint32_t crcexpected,crcresult;
                           A  1825    ;  186		uint24_t size = 0;
                           A  1826    .LINE 186
                           A  1827    
0B05F2 01000000            A  1828    	LD	BC,0
0B05F6 DD0FD9              A  1829    	LD	(IX+%FFFFFFD9),BC
                           A  1830    ;  187		uint24_t got;
                           A  1831    ;  188		uint8_t file;
                           A  1832    ;  189		char* ptr = (char*)BUFFER1;
                           A  1833    .LINE 189
                           A  1834    
0B05F9 01000005            A  1835    	LD	BC,327680
0B05FD DD0FEA              A  1836    	LD	(IX+%FFFFFFEA),BC
                           A  1837    ;  190		uint8_t value;
                           A  1838    ;  191		uint24_t counter,pagemax, lastpageb
                           A  1839    ;  192		uint24_t addressto,addressfrom;
                           A  1840    ;  193		enum states state;
                           A  1841    ;  194		uint24_t filesize;
                           A  1842    ;  195	
                           A  1843    ;  196		putch(12); // cls
                           A  1844    .LINE 196
                           A  1845    
0B0600 010C0000            A  1846    	LD	BC,12
0B0604 C5                  A  1847    	PUSH	BC
0B0605 CD E5 00 0B         A  1848    	CALL	_putch
0B0609 C1                  A  1849    	POP	BC
                           A  1850    ;  197		print_version();	
                           A  1851    .LINE 197
                           A  1852    
0B060A CD E5 02 0B         A  1853    	CALL	_print_version
                           A  1854    ;  198		
                           A  1855    ;  199		file = mos_fopen(filename, fa_read)
                           A  1856    .LINE 199
                           A  1857    
0B060E 01010000            A  1858    	LD	BC,1
0B0612 C5                  A  1859    	PUSH	BC
0B0613 DD0706              A  1860    	LD	BC,(IX+%6)
0B0616 C5                  A  1861    	PUSH	BC
0B0617 CD 0B 0B 0B         A  1862    	CALL	_mos_fopen
0B061B C1                  A  1863    	POP	BC
0B061C C1                  A  1864    	POP	BC
0B061D DD77FC              A  1865    	LD	(IX+%FFFFFFFC),A
                           A  1866    ;  200		if(!file)
                           A  1867    .LINE 200
                           A  1868    
0B0620 B7                  A  1869    	OR	A,A
0B0621 20 2C               A  1870    	JR	NZ,L_55
                           A  1871    ;  201		{
                           A  1872    ;  202			printf("Error opening \"%s\"\n\
                           A  1873    .LINE 202
                           A  1874    
0B0623 01 4C 11 0B         A  1875    	LD	BC,___print_uputch
0B0627 ED43 04 20 0B       A  1876    	LD	(___print_xputch),BC
0B062C 01 E8 21 0B         A  1877    	LD	BC,L__46
0B0630 C5                  A  1878    	PUSH	BC
0B0631 CD DB 0F 0B         A  1879    	CALL	___print_sendstring
0B0635 C1                  A  1880    	POP	BC
0B0636 DD0706              A  1881    	LD	BC,(IX+%6)
0B0639 C5                  A  1882    	PUSH	BC
0B063A CD DB 0F 0B         A  1883    	CALL	___print_sendstring
0B063E C1                  A  1884    	POP	BC
0B063F 01 F8 21 0B         A  1885    	LD	BC,L__47
0B0643 C5                  A  1886    	PUSH	BC
0B0644 CD DB 0F 0B         A  1887    	CALL	___print_sendstring
0B0648 C1                  A  1888    	POP	BC
                           A  1889    ;  203			return EXIT_FILENOTFOUND;
                           A  1890    .LINE 203
                           A  1891    
0B0649 3E04                A  1892    	LD	A,%4
0B064B C3 2E 0A 0B         A  1893    	JR	L_100
                           A  1894    ;  204		}
0B064F                     A  1895    L_55:
                           A  1896    .LINE 204
                           A  1897    
                           A  1898    ;  205	
                           A  1899    ;  206		mos_fread(file, (char *)BUFFER1, MO
                           A  1900    .LINE 206
                           A  1901    
0B064F 01050000            A  1902    	LD	BC,5
0B0653 C5                  A  1903    	PUSH	BC
0B0654 01000005            A  1904    	LD	BC,327680
0B0658 C5                  A  1905    	PUSH	BC
0B0659 DD4EFC              A  1906    	LD	C,(IX+%FFFFFFFC)
0B065C 0600                A  1907    	LD	B,%0
0B065E C5                  A  1908    	PUSH	BC
0B065F CD 4D 0B 0B         A  1909    	CALL	_mos_fread
0B0663 C1                  A  1910    	POP	BC
0B0664 C1                  A  1911    	POP	BC
0B0665 C1                  A  1912    	POP	BC
                           A  1913    ;  207		if(!containsMosHeader((uint8_t *)BU
                           A  1914    .LINE 207
                           A  1915    
0B0666 01000005            A  1916    	LD	BC,327680
0B066A C5                  A  1917    	PUSH	BC
0B066B CD 46 02 0B         A  1918    	CALL	_containsMosHeader
0B066F C1                  A  1919    	POP	BC
0B0670 B7                  A  1920    	OR	A,A
0B0671 20 24               A  1921    	JR	NZ,L_57
                           A  1922    ;  208			printf("File does not contain v
                           A  1923    .LINE 208
                           A  1924    
0B0673 01 4C 11 0B         A  1925    	LD	BC,___print_uputch
0B0677 ED43 04 20 0B       A  1926    	LD	(___print_xputch),BC
0B067C 01 FC 21 0B         A  1927    	LD	BC,L__49
0B0680 C5                  A  1928    	PUSH	BC
0B0681 CD DB 0F 0B         A  1929    	CALL	___print_sendstring
0B0685 C1                  A  1930    	POP	BC
                           A  1931    ;  209			mos_fclose(file);
                           A  1932    .LINE 209
                           A  1933    
0B0686 DD4EFC              A  1934    	LD	C,(IX+%FFFFFFFC)
0B0689 0600                A  1935    	LD	B,%0
0B068B C5                  A  1936    	PUSH	BC
0B068C CD 23 0B 0B         A  1937    	CALL	_mos_fclose
0B0690 C1                  A  1938    	POP	BC
                           A  1939    ;  210			return EXIT_INVALIDPARAMETER;
                           A  1940    .LINE 210
                           A  1941    
0B0691 3E13                A  1942    	LD	A,%13
0B0693 C3 2E 0A 0B         A  1943    	JR	L_100
                           A  1944    ;  211		}
0B0697                     A  1945    L_57:
                           A  1946    .LINE 211
                           A  1947    
                           A  1948    ;  212	
                           A  1949    ;  213		filesize = getFileSize(file);
                           A  1950    .LINE 213
                           A  1951    
0B0697 DD4EFC              A  1952    	LD	C,(IX+%FFFFFFFC)
0B069A 0600                A  1953    	LD	B,%0
0B069C C5                  A  1954    	PUSH	BC
0B069D CD 4B 0F 0B         A  1955    	CALL	_getFileSize
0B06A1 C1                  A  1956    	POP	BC
0B06A2 DD2FF0              A  1957    	LD	(IX+%FFFFFFF0),HL
                           A  1958    ;  214		if(filesize > FLASHSIZE) {
                           A  1959    .LINE 214
                           A  1960    
0B06A5 E5C1                A  1961    	LD	BC,HL
0B06A7 21000002            A  1962    	LD	HL,131072
0B06AB B7                  A  1963    	OR	A,A
0B06AC ED42                A  1964    	SBC	HL,BC
0B06AE 30 24               A  1965    	JR	NC,L_59
                           A  1966    ;  215			printf("File too large for 128K
                           A  1967    .LINE 215
                           A  1968    
0B06B0 01 4C 11 0B         A  1969    	LD	BC,___print_uputch
0B06B4 ED43 04 20 0B       A  1970    	LD	(___print_xputch),BC
0B06B9 01 30 22 0B         A  1971    	LD	BC,L__51
0B06BD C5                  A  1972    	PUSH	BC
0B06BE CD DB 0F 0B         A  1973    	CALL	___print_sendstring
0B06C2 C1                  A  1974    	POP	BC
                           A  1975    ;  216			mos_fclose(file);
                           A  1976    .LINE 216
                           A  1977    
0B06C3 DD4EFC              A  1978    	LD	C,(IX+%FFFFFFFC)
0B06C6 0600                A  1979    	LD	B,%0
0B06C8 C5                  A  1980    	PUSH	BC
0B06C9 CD 23 0B 0B         A  1981    	CALL	_mos_fclose
0B06CD C1                  A  1982    	POP	BC
                           A  1983    ;  217			return EXIT_INVALIDPARAMETER;
                           A  1984    .LINE 217
                           A  1985    
0B06CE 3E13                A  1986    	LD	A,%13
0B06D0 C3 2E 0A 0B         A  1987    	JR	L_100
                           A  1988    ;  218		}
0B06D4                     A  1989    L_59:
                           A  1990    .LINE 218
                           A  1991    
                           A  1992    ;  219	
                           A  1993    ;  220		printf("\r\nValid ez80 code\r\nCalc
                           A  1994    .LINE 220
                           A  1995    
0B06D4 01 4C 11 0B         A  1996    	LD	BC,___print_uputch
0B06D8 ED43 04 20 0B       A  1997    	LD	(___print_xputch),BC
0B06DD 01 5A 22 0B         A  1998    	LD	BC,L__52
0B06E1 C5                  A  1999    	PUSH	BC
0B06E2 CD DB 0F 0B         A  2000    	CALL	___print_sendstring
0B06E6 C1                  A  2001    	POP	BC
                           A  2002    ;  221	
                           A  2003    ;  222		crc32_initialize();
                           A  2004    .LINE 222
                           A  2005    
0B06E7 CD 99 0E 0B         A  2006    	CALL	_crc32_initialize
                           A  2007    ;  223		mos_flseek(file, 0);
                           A  2008    .LINE 223
                           A  2009    
0B06EB 01000000            A  2010    	LD	BC,0
0B06EF C5                  A  2011    	PUSH	BC
0B06F0 C5                  A  2012    	PUSH	BC
0B06F1 DD4EFC              A  2013    	LD	C,(IX+%FFFFFFFC)
0B06F4 0600                A  2014    	LD	B,%0
0B06F6 C5                  A  2015    	PUSH	BC
0B06F7 CD C7 0B 0B         A  2016    	CALL	_mos_flseek
0B06FB C1                  A  2017    	POP	BC
0B06FC C1                  A  2018    	POP	BC
0B06FD C1                  A  2019    	POP	BC
                           A  2020    ;  224		
                           A  2021    ;  225		// Read file to memory
                           A  2022    ;  226		while((got = mos_fread(file, ptr, B
                           A  2023    .LINE 226
                           A  2024    
0B06FE 18 22               A  2025    	JR	L_60
0B0700                     A  2026    L_61:
                           A  2027    ;  227			crc32(ptr, got);
                           A  2028    .LINE 227
                           A  2029    
0B0700 DD07E3              A  2030    	LD	BC,(IX+%FFFFFFE3)
0B0703 C5                  A  2031    	PUSH	BC
0B0704 DD07EA              A  2032    	LD	BC,(IX+%FFFFFFEA)
0B0707 C5                  A  2033    	PUSH	BC
0B0708 CD EB 0E 0B         A  2034    	CALL	_crc32
0B070C C1                  A  2035    	POP	BC
0B070D C1                  A  2036    	POP	BC
                           A  2037    ;  228			ptr += got;
                           A  2038    .LINE 228
                           A  2039    
0B070E DD07E3              A  2040    	LD	BC,(IX+%FFFFFFE3)
0B0711 DD27EA              A  2041    	LD	HL,(IX+%FFFFFFEA)
0B0714 09                  A  2042    	ADD	HL,BC
0B0715 DD2FEA              A  2043    	LD	(IX+%FFFFFFEA),HL
                           A  2044    ;  229			putch('.');
                           A  2045    .LINE 229
                           A  2046    
0B0718 012E0000            A  2047    	LD	BC,46
0B071C C5                  A  2048    	PUSH	BC
0B071D CD E5 00 0B         A  2049    	CALL	_putch
0B0721 C1                  A  2050    	POP	BC
                           A  2051    ;  230		}		
0B0722                     A  2052    L_60:
                           A  2053    .LINE 230
                           A  2054    
0B0722 01004000            A  2055    	LD	BC,16384
0B0726 C5                  A  2056    	PUSH	BC
0B0727 DD07EA              A  2057    	LD	BC,(IX+%FFFFFFEA)
0B072A C5                  A  2058    	PUSH	BC
0B072B DD4EFC              A  2059    	LD	C,(IX+%FFFFFFFC)
0B072E 0600                A  2060    	LD	B,%0
0B0730 C5                  A  2061    	PUSH	BC
0B0731 CD 4D 0B 0B         A  2062    	CALL	_mos_fread
0B0735 C1                  A  2063    	POP	BC
0B0736 C1                  A  2064    	POP	BC
0B0737 C1                  A  2065    	POP	BC
0B0738 DD2FE3              A  2066    	LD	(IX+%FFFFFFE3),HL
0B073B E5C1                A  2067    	LD	BC,HL
0B073D B7                  A  2068    	OR	A,A
0B073E ED62                A  2069    	SBC	HL,HL
0B0740 B7                  A  2070    	OR	A,A
0B0741 ED42                A  2071    	SBC	HL,BC
0B0743 38 BB               A  2072    	JR	C,L_61
                           A  2073    ;  231		crcresult = crc32_finalize();
                           A  2074    .LINE 231
                           A  2075    
0B0745 CD AE 0E 0B         A  2076    	CALL	_crc32_finalize
0B0749 DD2FE6              A  2077    	LD	(IX+%FFFFFFE6),HL
0B074C DD73E9              A  2078    	LD	(IX+%FFFFFFE9),E
                           A  2079    ;  232		if(!getResponse(MOS, crcresult)) {
                           A  2080    .LINE 232
                           A  2081    
0B074F DD4EE9              A  2082    	LD	C,(IX+%FFFFFFE9)
0B0752 0600                A  2083    	LD	B,%0
0B0754 C5                  A  2084    	PUSH	BC
0B0755 DD07E6              A  2085    	LD	BC,(IX+%FFFFFFE6)
0B0758 C5                  A  2086    	PUSH	BC
0B0759 01000000            A  2087    	LD	BC,0
0B075D C5                  A  2088    	PUSH	BC
0B075E CD 2B 03 0B         A  2089    	CALL	_getResponse
0B0762 C1                  A  2090    	POP	BC
0B0763 C1                  A  2091    	POP	BC
0B0764 C1                  A  2092    	POP	BC
0B0765 B7                  A  2093    	OR	A,A
0B0766 20 10               A  2094    	JR	NZ,L_64
                           A  2095    ;  233			mos_fclose(file);
                           A  2096    .LINE 233
                           A  2097    
0B0768 DD4EFC              A  2098    	LD	C,(IX+%FFFFFFFC)
0B076B 0600                A  2099    	LD	B,%0
0B076D C5                  A  2100    	PUSH	BC
0B076E CD 23 0B 0B         A  2101    	CALL	_mos_fclose
0B0772 C1                  A  2102    	POP	BC
                           A  2103    ;  234			return 0;
                           A  2104    .LINE 234
                           A  2105    
0B0773 AF                  A  2106    	XOR	A,A
0B0774 C3 2E 0A 0B         A  2107    	JR	L_100
                           A  2108    ;  235		}
0B0778                     A  2109    L_64:
                           A  2110    .LINE 235
                           A  2111    
                           A  2112    ;  236	
                           A  2113    ;  237		// Actual work here	
                           A  2114    ;  238		di();								
                           A  2115    .LINE 238
                           A  2116    
0B0778 F3                  A  2117    	di
                           A  2118    ;  239	
                           A  2119    ;  240		// start address in flash
                           A  2120    ;  241		addressto = FLASHSTART;
                           A  2121    .LINE 241
                           A  2122    
0B0779 01000000            A  2123    	LD	BC,0
0B077D DD0FED              A  2124    	LD	(IX+%FFFFFFED),BC
                           A  2125    ;  242		addressfrom = BUFFER1;
                           A  2126    .LINE 242
                           A  2127    
0B0780 01000005            A  2128    	LD	BC,327680
0B0784 DD0FF9              A  2129    	LD	(IX+%FFFFFFF9),BC
                           A  2130    ;  243		
                           A  2131    ;  244		crcexpected = crcresult;
                           A  2132    .LINE 244
                           A  2133    
0B0787 DD07E6              A  2134    	LD	BC,(IX+%FFFFFFE6)
0B078A DD7EE9              A  2135    	LD	A,(IX+%FFFFFFE9)
0B078D DD0FD5              A  2136    	LD	(IX+%FFFFFFD5),BC
0B0790 DD77D8              A  2137    	LD	(IX+%FFFFFFD8),A
                           A  2138    ;  245		state = firmware;
                           A  2139    .LINE 245
                           A  2140    
0B0793 01000000            A  2141    	LD	BC,0
0B0797 DD0FF3              A  2142    	LD	(IX+%FFFFFFF3),BC
                           A  2143    ;  246		size = filesize;	
                           A  2144    .LINE 246
                           A  2145    
0B079A DD07F0              A  2146    	LD	BC,(IX+%FFFFFFF0)
0B079D DD0FD9              A  2147    	LD	(IX+%FFFFFFD9),BC
                           A  2148    ;  247		while(1)
0B07A0                     A  2149    L_98:
                           A  2150    .LINE 247
                           A  2151    
                           A  2152    ;  248		{
                           A  2153    ;  249			switch(state)
                           A  2154    .LINE 249
                           A  2155    
0B07A0 DD27F3              A  2156    	LD	HL,(IX+%FFFFFFF3)
0B07A3 CD EB 17 0B         A  2157    	CALL	__case8D
0B07A7 E9                  A  2158    	JP	(HL)
0B07A8                     A  2159    L__55:
0B07A8 0200                A  2160    	DW	2
0B07AA 00                  A  2161    	DB	0
0B07AB B5070B              A  2162    	DW24	L_65	
                           A  2163    
0B07AE 01                  A  2164    	DB	1
0B07AF C2070B              A  2165    	DW24	L_66	
                           A  2166    
0B07B2 CF070B              A  2167    	DW24	L_67	
                           A  2168    
                           A  2169    ;  250			{
                           A  2170    ;  251				case firmware:
0B07B5                     A  2171    L_65:
                           A  2172    .LINE 251
                           A  2173    
                           A  2174    ;  252					// start address in fla
                           A  2175    ;  253					addressfrom = BUFFER1;
                           A  2176    .LINE 253
                           A  2177    
0B07B5 01000005            A  2178    	LD	BC,327680
0B07B9 DD0FF9              A  2179    	LD	(IX+%FFFFFFF9),BC
                           A  2180    ;  254					crc32_initialize();
                           A  2181    .LINE 254
                           A  2182    
0B07BC CD 99 0E 0B         A  2183    	CALL	_crc32_initialize
                           A  2184    ;  255					break;
                           A  2185    .LINE 255
                           A  2186    
0B07C0 18 48               A  2187    	JR	L_70
                           A  2188    ;  256				case retry:
0B07C2                     A  2189    L_66:
                           A  2190    .LINE 256
                           A  2191    
                           A  2192    ;  257					// start address in fla
                           A  2193    ;  258					addressfrom = BUFFER1;
                           A  2194    .LINE 258
                           A  2195    
0B07C2 01000005            A  2196    	LD	BC,327680
0B07C6 DD0FF9              A  2197    	LD	(IX+%FFFFFFF9),BC
                           A  2198    ;  259					crc32_initialize();
                           A  2199    .LINE 259
                           A  2200    
0B07C9 CD 99 0E 0B         A  2201    	CALL	_crc32_initialize
                           A  2202    ;  260					break;
                           A  2203    .LINE 260
                           A  2204    
0B07CD 18 3B               A  2205    	JR	L_70
                           A  2206    ;  261				default:
0B07CF                     A  2207    L_67:
                           A  2208    .LINE 261
                           A  2209    
                           A  2210    ;  262					// RESET SYSTEM
                           A  2211    ;  263					printf("\r\n");
                           A  2212    .LINE 263
                           A  2213    
0B07CF 01 4C 11 0B         A  2214    	LD	BC,___print_uputch
0B07D3 ED43 04 20 0B       A  2215    	LD	(___print_xputch),BC
0B07D8 01 7F 22 0B         A  2216    	LD	BC,L__56
0B07DC C5                  A  2217    	PUSH	BC
0B07DD CD DB 0F 0B         A  2218    	CALL	___print_sendstring
0B07E1 C1                  A  2219    	POP	BC
                           A  2220    ;  264					printf("Done\r\n");
                           A  2221    .LINE 264
                           A  2222    
0B07E2 01 4C 11 0B         A  2223    	LD	BC,___print_uputch
0B07E6 ED43 04 20 0B       A  2224    	LD	(___print_xputch),BC
0B07EB 01 82 22 0B         A  2225    	LD	BC,L__57
0B07EF C5                  A  2226    	PUSH	BC
0B07F0 CD DB 0F 0B         A  2227    	CALL	___print_sendstring
0B07F4 C1                  A  2228    	POP	BC
                           A  2229    ;  265					printf("Press reset but
                           A  2230    .LINE 265
                           A  2231    
0B07F5 01 4C 11 0B         A  2232    	LD	BC,___print_uputch
0B07F9 ED43 04 20 0B       A  2233    	LD	(___print_xputch),BC
0B07FE 01 89 22 0B         A  2234    	LD	BC,L__58
0B0802 C5                  A  2235    	PUSH	BC
0B0803 CD DB 0F 0B         A  2236    	CALL	___print_sendstring
0B0807 C1                  A  2237    	POP	BC
                           A  2238    ;  266					while(1); // force cold
0B0808                     A  2239    L_69:
                           A  2240    .LINE 266
                           A  2241    
0B0808 18 FE               A  2242    	JR	L_69
                           A  2243    ;  267			}
0B080A                     A  2244    L_70:
                           A  2245    .LINE 267
                           A  2246    
                           A  2247    ;  268	
                           A  2248    ;  269			// Unprotect and erase flash
                           A  2249    ;  270			printf("Erasing flash... ");
                           A  2250    .LINE 270
                           A  2251    
0B080A 01 4C 11 0B         A  2252    	LD	BC,___print_uputch
0B080E ED43 04 20 0B       A  2253    	LD	(___print_xputch),BC
0B0813 01 9C 22 0B         A  2254    	LD	BC,L__59
0B0817 C5                  A  2255    	PUSH	BC
0B0818 CD DB 0F 0B         A  2256    	CALL	___print_sendstring
0B081C C1                  A  2257    	POP	BC
                           A  2258    ;  271			enableFlashKeyRegister();	// 
                           A  2259    .LINE 271
                           A  2260    
0B081D CD E6 0B 0B         A  2261    	CALL	_enableFlashKeyRegister
                           A  2262    ;  272			FLASH_PROT = 0;				// 
                           A  2263    .LINE 272
                           A  2264    
0B0821 AF                  A  2265    	XOR	A,A
0B0822 ED39FA              A  2266    	OUT0	(250),A
                           A  2267    ;  273			enableFlashKeyRegister();	// 
                           A  2268    .LINE 273
                           A  2269    
0B0825 CD E6 0B 0B         A  2270    	CALL	_enableFlashKeyRegister
                           A  2271    ;  274			FLASH_FDIV = 0x5F;			// 
                           A  2272    .LINE 274
                           A  2273    
0B0829 3E5F                A  2274    	LD	A,%5F
0B082B ED39F9              A  2275    	OUT0	(249),A
                           A  2276    ;  275			
                           A  2277    ;  276			for(counter = 0; counter < FLAS
                           A  2278    .LINE 276
                           A  2279    
0B082E 01000000            A  2280    	LD	BC,0
0B0832 DD0FFD              A  2281    	LD	(IX+%FFFFFFFD),BC
0B0835 18 1C               A  2282    	JR	L_76
0B0837                     A  2283    L_74:
                           A  2284    ;  277			{
                           A  2285    ;  278				FLASH_PAGE = counter;
                           A  2286    .LINE 278
                           A  2287    
0B0837 DD7EFD              A  2288    	LD	A,(IX+%FFFFFFFD)
0B083A ED39FC              A  2289    	OUT0	(252),A
                           A  2290    ;  279				FLASH_PGCTL = 0x02;			
                           A  2291    .LINE 279
                           A  2292    
0B083D 3E02                A  2293    	LD	A,%2
0B083F ED39FF              A  2294    	OUT0	(255),A
                           A  2295    ;  280	
                           A  2296    ;  281				do
0B0842                     A  2297    L_72:
                           A  2298    .LINE 281
                           A  2299    
                           A  2300    ;  282				{
                           A  2301    ;  283					value = FLASH_PGCTL;
                           A  2302    .LINE 283
                           A  2303    
0B0842 ED38FF              A  2304    	IN0	A,(255)
0B0845 DD77E2              A  2305    	LD	(IX+%FFFFFFE2),A
                           A  2306    ;  284				}
                           A  2307    ;  285				while(value & 0x02);// wait
                           A  2308    .LINE 285
                           A  2309    
0B0848 E602                A  2310    	AND	A,%2
0B084A 20 F6               A  2311    	JR	NZ,L_72
0B084C DD07FD              A  2312    	LD	BC,(IX+%FFFFFFFD)
0B084F 03                  A  2313    	INC	BC
0B0850 DD0FFD              A  2314    	LD	(IX+%FFFFFFFD),BC
                           A  2315    ;  286			}
0B0853                     A  2316    L_76:
                           A  2317    .LINE 286
                           A  2318    
0B0853 01800000            A  2319    	LD	BC,128
0B0857 DD27FD              A  2320    	LD	HL,(IX+%FFFFFFFD)
0B085A B7                  A  2321    	OR	A,A
0B085B ED42                A  2322    	SBC	HL,BC
0B085D 38 D8               A  2323    	JR	C,L_74
                           A  2324    ;  287			
                           A  2325    ;  288			printf("\r\nWriting new firmwar
                           A  2326    .LINE 288
                           A  2327    
0B085F 01 4C 11 0B         A  2328    	LD	BC,___print_uputch
0B0863 ED43 04 20 0B       A  2329    	LD	(___print_xputch),BC
0B0868 01 AE 22 0B         A  2330    	LD	BC,L__62
0B086C C5                  A  2331    	PUSH	BC
0B086D CD DB 0F 0B         A  2332    	CALL	___print_sendstring
0B0871 C1                  A  2333    	POP	BC
                           A  2334    ;  289			
                           A  2335    ;  290			// determine number of pages to
                           A  2336    ;  291			pagemax = size/PAGESIZE;
                           A  2337    .LINE 291
                           A  2338    
0B0872 DD27F0              A  2339    	LD	HL,(IX+%FFFFFFF0)
0B0875 3E0A                A  2340    	LD	A,%A
0B0877 CD BF 17 0B         A  2341    	CALL	__ishru_b
0B087B DD2FF6              A  2342    	LD	(IX+%FFFFFFF6),HL
                           A  2343    ;  292			if(size%PAGESIZE) // last page 
                           A  2344    .LINE 292
                           A  2345    
0B087E 01FF0300            A  2346    	LD	BC,1023
0B0882 DD27F0              A  2347    	LD	HL,(IX+%FFFFFFF0)
0B0885 CD 51 18 0B         A  2348    	CALL	__iand
0B0889 DD2FDC              A  2349    	LD	(IX+%FFFFFFDC),HL
0B088C CD 09 15 0B         A  2350    	CALL	__icmpzero
0B0890 28 0F               A  2351    	JR	Z,L_79
                           A  2352    ;  293			{
                           A  2353    ;  294				pagemax += 1;
                           A  2354    .LINE 294
                           A  2355    
0B0892 DD07F6              A  2356    	LD	BC,(IX+%FFFFFFF6)
0B0895 03                  A  2357    	INC	BC
0B0896 DD0FF6              A  2358    	LD	(IX+%FFFFFFF6),BC
                           A  2359    ;  295				lastpagebytes = size%PAGESI
                           A  2360    .LINE 295
                           A  2361    
0B0899 DD07DC              A  2362    	LD	BC,(IX+%FFFFFFDC)
0B089C DD0FDF              A  2363    	LD	(IX+%FFFFFFDF),BC
                           A  2364    ;  296			}
                           A  2365    ;  297			else lastpagebytes = PAGESIZE; 
                           A  2366    .LINE 297
                           A  2367    
0B089F 18 07               A  2368    	JR	L_87
0B08A1                     A  2369    L_79:
0B08A1 01000400            A  2370    	LD	BC,1024
0B08A5 DD0FDF              A  2371    	LD	(IX+%FFFFFFDF),BC
0B08A8                     A  2372    L_87:
                           A  2373    ;  298			
                           A  2374    ;  299			// write out each page to flash
                           A  2375    ;  300			for(counter = 0; counter < page
                           A  2376    .LINE 300
                           A  2377    
0B08A8 01000000            A  2378    	LD	BC,0
0B08AC DD0FFD              A  2379    	LD	(IX+%FFFFFFFD),BC
0B08AF C3 5B 09 0B         A  2380    	JR	L_86
0B08B3                     A  2381    L_84:
                           A  2382    ;  301			{
                           A  2383    ;  302				printf("\rWriting flash pag
                           A  2384    .LINE 302
                           A  2385    
0B08B3 01 4C 11 0B         A  2386    	LD	BC,___print_uputch
0B08B7 ED43 04 20 0B       A  2387    	LD	(___print_xputch),BC
0B08BC 01 CA 22 0B         A  2388    	LD	BC,L__64
0B08C0 C5                  A  2389    	PUSH	BC
0B08C1 CD DB 0F 0B         A  2390    	CALL	___print_sendstring
0B08C5 C1                  A  2391    	POP	BC
0B08C6 3E03                A  2392    	LD	A,%3
0B08C8 32 FA 1A 0B         A  2393    	LD	(___print_fmt+5),A
0B08CC 3E40                A  2394    	LD	A,%40
0B08CE 32 F6 1A 0B         A  2395    	LD	(___print_fmt+1),A
0B08D2 DD07FD              A  2396    	LD	BC,(IX+%FFFFFFFD)
0B08D5 03                  A  2397    	INC	BC
0B08D6 AF                  A  2398    	XOR	A,A
0B08D7 C5D1                A  2399    	LD	DE,BC
0B08D9 4F                  A  2400    	LD	C,A
0B08DA 0600                A  2401    	LD	B,%0
0B08DC C5                  A  2402    	PUSH	BC
0B08DD D5                  A  2403    	PUSH	DE
0B08DE CD D2 11 0B         A  2404    	CALL	__u_itoa
0B08E2 C1                  A  2405    	POP	BC
0B08E3 C1                  A  2406    	POP	BC
0B08E4 012F0000            A  2407    	LD	BC,47
0B08E8 C5                  A  2408    	PUSH	BC
0B08E9 CD 4C 11 0B         A  2409    	CALL	___print_uputch
0B08ED C1                  A  2410    	POP	BC
0B08EE 3E03                A  2411    	LD	A,%3
0B08F0 32 FA 1A 0B         A  2412    	LD	(___print_fmt+5),A
0B08F4 3E40                A  2413    	LD	A,%40
0B08F6 32 F6 1A 0B         A  2414    	LD	(___print_fmt+1),A
0B08FA DD07F6              A  2415    	LD	BC,(IX+%FFFFFFF6)
0B08FD AF                  A  2416    	XOR	A,A
0B08FE C5D1                A  2417    	LD	DE,BC
0B0900 4F                  A  2418    	LD	C,A
0B0901 0600                A  2419    	LD	B,%0
0B0903 C5                  A  2420    	PUSH	BC
0B0904 D5                  A  2421    	PUSH	DE
0B0905 CD D2 11 0B         A  2422    	CALL	__u_itoa
0B0909 C1                  A  2423    	POP	BC
0B090A C1                  A  2424    	POP	BC
                           A  2425    ;  303				
                           A  2426    ;  304				if(counter == (pagemax - 1)
                           A  2427    .LINE 304
                           A  2428    
0B090B DD31F6              A  2429    	LD	IY,(IX+%FFFFFFF6)
0B090E ED23FF              A  2430    	LEA	HL,IY+%FFFFFFFF
0B0911 DD07FD              A  2431    	LD	BC,(IX+%FFFFFFFD)
0B0914 B7                  A  2432    	OR	A,A
0B0915 ED42                A  2433    	SBC	HL,BC
0B0917 20 15               A  2434    	JR	NZ,L_82
                           A  2435    ;  305					fastmemcpy(addressto,ad
                           A  2436    .LINE 305
                           A  2437    
0B0919 DD07DF              A  2438    	LD	BC,(IX+%FFFFFFDF)
0B091C C5                  A  2439    	PUSH	BC
0B091D DD07F9              A  2440    	LD	BC,(IX+%FFFFFFF9)
0B0920 C5                  A  2441    	PUSH	BC
0B0921 DD07ED              A  2442    	LD	BC,(IX+%FFFFFFED)
0B0924 C5                  A  2443    	PUSH	BC
0B0925 CD 13 0C 0B         A  2444    	CALL	_fastmemcpy
0B0929 C1                  A  2445    	POP	BC
0B092A C1                  A  2446    	POP	BC
0B092B C1                  A  2447    	POP	BC
                           A  2448    ;  306					//printf("Fake copy to 
                           A  2449    ;  307				else 
                           A  2450    .LINE 307
                           A  2451    
0B092C 18 14               A  2452    	JR	L_83
0B092E                     A  2453    L_82:
                           A  2454    ;  308					fastmemcpy(addressto,ad
                           A  2455    .LINE 308
                           A  2456    
0B092E 01000400            A  2457    	LD	BC,1024
0B0932 C5                  A  2458    	PUSH	BC
0B0933 DD07F9              A  2459    	LD	BC,(IX+%FFFFFFF9)
0B0936 C5                  A  2460    	PUSH	BC
0B0937 DD07ED              A  2461    	LD	BC,(IX+%FFFFFFED)
0B093A C5                  A  2462    	PUSH	BC
0B093B CD 13 0C 0B         A  2463    	CALL	_fastmemcpy
0B093F C1                  A  2464    	POP	BC
0B0940 C1                  A  2465    	POP	BC
0B0941 C1                  A  2466    	POP	BC
0B0942                     A  2467    L_83:
                           A  2468    ;  309					//printf("Fake copy to 
                           A  2469    ;  310			
                           A  2470    ;  311				addressto += PAGESIZE;
                           A  2471    .LINE 311
                           A  2472    
0B0942 01000400            A  2473    	LD	BC,1024
0B0946 DD27ED              A  2474    	LD	HL,(IX+%FFFFFFED)
0B0949 09                  A  2475    	ADD	HL,BC
0B094A DD2FED              A  2476    	LD	(IX+%FFFFFFED),HL
                           A  2477    ;  312				addressfrom += PAGESIZE;
                           A  2478    .LINE 312
                           A  2479    
0B094D DD27F9              A  2480    	LD	HL,(IX+%FFFFFFF9)
0B0950 09                  A  2481    	ADD	HL,BC
0B0951 DD2FF9              A  2482    	LD	(IX+%FFFFFFF9),HL
0B0954 DD07FD              A  2483    	LD	BC,(IX+%FFFFFFFD)
0B0957 03                  A  2484    	INC	BC
0B0958 DD0FFD              A  2485    	LD	(IX+%FFFFFFFD),BC
                           A  2486    ;  313			}
0B095B                     A  2487    L_86:
                           A  2488    .LINE 313
                           A  2489    
0B095B DD07F6              A  2490    	LD	BC,(IX+%FFFFFFF6)
0B095E DD27FD              A  2491    	LD	HL,(IX+%FFFFFFFD)
0B0961 B7                  A  2492    	OR	A,A
0B0962 ED42                A  2493    	SBC	HL,BC
0B0964 DA B3 08 0B         A  2494    	JR	C,L_84
                           A  2495    ;  314			lockFlashKeyRegister();	// lock
                           A  2496    .LINE 314
                           A  2497    
0B0968 CD FE 0B 0B         A  2498    	CALL	_lockFlashKeyRegister
                           A  2499    ;  315			printf("\r\n");
                           A  2500    .LINE 315
                           A  2501    
0B096C 01 4C 11 0B         A  2502    	LD	BC,___print_uputch
0B0970 ED43 04 20 0B       A  2503    	LD	(___print_xputch),BC
0B0975 01 DF 22 0B         A  2504    	LD	BC,L__67
0B0979 C5                  A  2505    	PUSH	BC
0B097A CD DB 0F 0B         A  2506    	CALL	___print_sendstring
0B097E C1                  A  2507    	POP	BC
                           A  2508    ;  316			
                           A  2509    ;  317			//Verify correct CRC in flash
                           A  2510    ;  318			printf("Verifying flash checksu
                           A  2511    .LINE 318
                           A  2512    
0B097F 01 4C 11 0B         A  2513    	LD	BC,___print_uputch
0B0983 ED43 04 20 0B       A  2514    	LD	(___print_xputch),BC
0B0988 01 E2 22 0B         A  2515    	LD	BC,L__68
0B098C C5                  A  2516    	PUSH	BC
0B098D CD DB 0F 0B         A  2517    	CALL	___print_sendstring
0B0991 C1                  A  2518    	POP	BC
                           A  2519    ;  319			crc32((char*)FLASHSTART, size);
                           A  2520    .LINE 319
                           A  2521    
0B0992 DD07F0              A  2522    	LD	BC,(IX+%FFFFFFF0)
0B0995 C5                  A  2523    	PUSH	BC
0B0996 01000000            A  2524    	LD	BC,0
0B099A C5                  A  2525    	PUSH	BC
0B099B CD EB 0E 0B         A  2526    	CALL	_crc32
0B099F C1                  A  2527    	POP	BC
0B09A0 C1                  A  2528    	POP	BC
                           A  2529    ;  320			crcresult = crc32_finalize();
                           A  2530    .LINE 320
                           A  2531    
0B09A1 CD AE 0E 0B         A  2532    	CALL	_crc32_finalize
0B09A5 DD2FE6              A  2533    	LD	(IX+%FFFFFFE6),HL
0B09A8 DD73E9              A  2534    	LD	(IX+%FFFFFFE9),E
                           A  2535    ;  321	
                           A  2536    ;  322			if(crcresult == crcexpected)
                           A  2537    .LINE 322
                           A  2538    
0B09AB DD27E6              A  2539    	LD	HL,(IX+%FFFFFFE6)
0B09AE DD5EE9              A  2540    	LD	E,(IX+%FFFFFFE9)
0B09B1 DD07D5              A  2541    	LD	BC,(IX+%FFFFFFD5)
0B09B4 DD7ED8              A  2542    	LD	A,(IX+%FFFFFFD8)
0B09B7 CD 2E 18 0B         A  2543    	CALL	__lcmpu
0B09BB 20 1E               A  2544    	JR	NZ,L_96
                           A  2545    ;  323			{
                           A  2546    ;  324				printf("- OK\r\n");
                           A  2547    .LINE 324
                           A  2548    
0B09BD 01 4C 11 0B         A  2549    	LD	BC,___print_uputch
0B09C1 ED43 04 20 0B       A  2550    	LD	(___print_xputch),BC
0B09C6 01 FF 22 0B         A  2551    	LD	BC,L__70
0B09CA C5                  A  2552    	PUSH	BC
0B09CB CD DB 0F 0B         A  2553    	CALL	___print_sendstring
0B09CF C1                  A  2554    	POP	BC
                           A  2555    ;  325				state = systemreset;
                           A  2556    .LINE 325
                           A  2557    
0B09D0 01020000            A  2558    	LD	BC,2
0B09D4 DD0FF3              A  2559    	LD	(IX+%FFFFFFF3),BC
                           A  2560    ;  326			}
                           A  2561    ;  327			else // CRC Failure - next acti
                           A  2562    .LINE 327
                           A  2563    
0B09D7 C3 A0 07 0B         A  2564    	JR	L_98
0B09DB                     A  2565    L_96:
                           A  2566    ;  328			{	 // User interaction not po
                           A  2567    ;  329				switch(state)
                           A  2568    .LINE 329
                           A  2569    
0B09DB DD27F3              A  2570    	LD	HL,(IX+%FFFFFFF3)
0B09DE CD EB 17 0B         A  2571    	CALL	__case8D
0B09E2 E9                  A  2572    	JP	(HL)
0B09E3                     A  2573    L__71:
0B09E3 0200                A  2574    	DW	2
0B09E5 00                  A  2575    	DB	0
0B09E6 F0090B              A  2576    	DW24	L_89	
                           A  2577    
0B09E9 01                  A  2578    	DB	1
0B09EA 0E0A0B              A  2579    	DW24	L_90	
                           A  2580    
0B09ED 230A0B              A  2581    	DW24	L_93	
                           A  2582    
                           A  2583    ;  330				{
                           A  2584    ;  331					case firmware:
0B09F0                     A  2585    L_89:
                           A  2586    .LINE 331
                           A  2587    
                           A  2588    ;  332						printf("\r\nError o
                           A  2589    .LINE 332
                           A  2590    
0B09F0 01 4C 11 0B         A  2591    	LD	BC,___print_uputch
0B09F4 ED43 04 20 0B       A  2592    	LD	(___print_xputch),BC
0B09F9 01 06 23 0B         A  2593    	LD	BC,L__72
0B09FD C5                  A  2594    	PUSH	BC
0B09FE CD DB 0F 0B         A  2595    	CALL	___print_sendstring
0B0A02 C1                  A  2596    	POP	BC
                           A  2597    ;  333						state = retry;
                           A  2598    .LINE 333
                           A  2599    
0B0A03 01010000            A  2600    	LD	BC,1
0B0A07 DD0FF3              A  2601    	LD	(IX+%FFFFFFF3),BC
                           A  2602    ;  334						break;
                           A  2603    .LINE 334
                           A  2604    
0B0A0A C3 A0 07 0B         A  2605    	JR	L_98
                           A  2606    ;  335					case retry:
0B0A0E                     A  2607    L_90:
                           A  2608    .LINE 335
                           A  2609    
                           A  2610    ;  336						printf("\r\nRetry f
                           A  2611    .LINE 336
                           A  2612    
0B0A0E 01 4C 11 0B         A  2613    	LD	BC,___print_uputch
0B0A12 ED43 04 20 0B       A  2614    	LD	(___print_xputch),BC
0B0A17 01 35 23 0B         A  2615    	LD	BC,L__73
0B0A1B C5                  A  2616    	PUSH	BC
0B0A1C CD DB 0F 0B         A  2617    	CALL	___print_sendstring
0B0A20 C1                  A  2618    	POP	BC
                           A  2619    ;  337						while(1); // no mor
0B0A21                     A  2620    L_92:
                           A  2621    .LINE 337
                           A  2622    
0B0A21 18 FE               A  2623    	JR	L_92
                           A  2624    ;  338					default:
0B0A23                     A  2625    L_93:
                           A  2626    .LINE 338
                           A  2627    
                           A  2628    ;  339						state = retry;
                           A  2629    .LINE 339
                           A  2630    
0B0A23 01010000            A  2631    	LD	BC,1
0B0A27 DD0FF3              A  2632    	LD	(IX+%FFFFFFF3),BC
0B0A2A C3 A0 07 0B         A  2633    	JR	L_98
                           A  2634    ;  340				}
                           A  2635    ;  341			}
                           A  2636    ;  342		}		
                           A  2637    ;  343		return 0;
                           A  2638    ;  344	}
0B0A2E                     A  2639    L_100:
                           A  2640    .LINE 344
                           A  2641    
0B0A2E DDF9                A  2642    	LD	SP,IX
0B0A30 DDE1                A  2643    	POP	IX
0B0A32 C9                  A  2644    	RET	
                           A  2645    
                           A  2646    
                           A  2647    ;**************************** _update_mos *****
                           A  2648    ;Name                         Addr/Register   S
                           A  2649    ;_lockFlashKeyRegister               IMPORT  --
                           A  2650    ;_fastmemcpy                         IMPORT  --
                           A  2651    ;__u_itoa                            IMPORT  --
                           A  2652    ;___print_fmt                        IMPORT    
                           A  2653    ;_enableFlashKeyRegister             IMPORT  --
                           A  2654    ;_crc32_finalize                     IMPORT  --
                           A  2655    ;_crc32                              IMPORT  --
                           A  2656    ;_mos_flseek                         IMPORT  --
                           A  2657    ;_crc32_initialize                   IMPORT  --
                           A  2658    ;_getFileSize                        IMPORT  --
                           A  2659    ;_mos_fclose                         IMPORT  --
                           A  2660    ;_mos_fread                          IMPORT  --
                           A  2661    ;___print_sendstring                 IMPORT  --
                           A  2662    ;___print_xputch                     IMPORT    
                           A  2663    ;___print_uputch                     IMPORT  --
                           A  2664    ;_mos_fopen                          IMPORT  --
                           A  2665    ;_putch                              IMPORT  --
                           A  2666    ;crcexpected                          IX-43    
                           A  2667    ;size                                 IX-39    
                           A  2668    ;G_0                                  IX-36    
                           A  2669    ;lastpagebytes                        IX-33    
                           A  2670    ;value                                IX-30    
                           A  2671    ;got                                  IX-29    
                           A  2672    ;crcresult                            IX-26    
                           A  2673    ;ptr                                  IX-22    
                           A  2674    ;addressto                            IX-19    
                           A  2675    ;filesize                             IX-16    
                           A  2676    ;state                                IX-13    
                           A  2677    ;pagemax                              IX-10    
                           A  2678    ;addressfrom                           IX-7    
                           A  2679    ;file                                  IX-4    
                           A  2680    ;counter                               IX-3    
                           A  2681    ;filename                              IX+6    
                           A  2682    
                           A  2683    
                           A  2684    ; Stack Frame Size: 52 (bytes)
                           A  2685    ;       Spill Code: 0 (instruction)
                           A  2686    
                           A  2687    
                           A  2688    .ENDFUNC "update_mos",344,"_update_mos"
                           A  2689    	SEGMENT STRSECT
0B21E8                     A  2690    L__46:
0B21E8 4572726F 72206F70   A  2691    	DB	"Error opening \""
0B21F0 656E696E 672022 
0B21F7 00                  A  2692    	DB	0
0B21F8                     A  2693    L__47:
0B21F8 22                  A  2694    	DB	"\""
0B21F9 0A0D00              A  2695    	DB	10,13,0
0B21FC                     A  2696    L__49:
0B21FC 46696C65 20646F65   A  2697    	DB	"File does not contain valid MOS ez80 s
0B2204 73206E6F 7420636F 
0B220C 6E746169 6E207661 
0B2214 6C696420 4D4F5320 
0B221C 657A3830 20737461 
0B2224 72747570 20636F64 
0B222C 65 
0B222D 0D0A00              A  2698    	DB	13,10,0
0B2230                     A  2699    L__51:
0B2230 46696C65 20746F6F   A  2700    	DB	"File too large for 128KB embedded flas
0B2238 206C6172 67652066 
0B2240 6F722031 32384B42 
0B2248 20656D62 65646465 
0B2250 6420666C 617368 
0B2257 0D0A00              A  2701    	DB	13,10,0
0B225A                     A  2702    L__52:
0B225A 0D0A                A  2703    	DB	13,10
0B225C 56616C69 6420657A   A  2704    	DB	"Valid ez80 code"
0B2264 38302063 6F6465 
0B226B 0D0A                A  2705    	DB	13,10
0B226D 43616C63 756C6174   A  2706    	DB	"Calculating CRC32"
0B2275 696E6720 43524333 
0B227D 32 
0B227E 00                  A  2707    	DB	0
0B227F                     A  2708    L__56:
0B227F 0D0A00              A  2709    	DB	13,10,0
0B2282                     A  2710    L__57:
0B2282 446F6E65            A  2711    	DB	"Done"
0B2286 0D0A00              A  2712    	DB	13,10,0
0B2289                     A  2713    L__58:
0B2289 50726573 73207265   A  2714    	DB	"Press reset button"
0B2291 73657420 62757474 
0B2299 6F6E 
0B229B 00                  A  2715    	DB	0
0B229C                     A  2716    L__59:
0B229C 45726173 696E6720   A  2717    	DB	"Erasing flash... "
0B22A4 666C6173 682E2E2E 
0B22AC 20 
0B22AD 00                  A  2718    	DB	0
0B22AE                     A  2719    L__62:
0B22AE 0D0A                A  2720    	DB	13,10
0B22B0 57726974 696E6720   A  2721    	DB	"Writing new firmware..."
0B22B8 6E657720 6669726D 
0B22C0 77617265 2E2E2E 
0B22C7 0D0A00              A  2722    	DB	13,10,0
0B22CA                     A  2723    L__64:
0B22CA 0D                  A  2724    	DB	13
0B22CB 57726974 696E6720   A  2725    	DB	"Writing flash page "
0B22D3 666C6173 68207061 
0B22DB 676520 
0B22DE 00                  A  2726    	DB	0
0B22DF                     A  2727    L__67:
0B22DF 0D0A00              A  2728    	DB	13,10,0
0B22E2                     A  2729    L__68:
0B22E2 56657269 6679696E   A  2730    	DB	"Verifying flash checksum... "
0B22EA 6720666C 61736820 
0B22F2 63686563 6B73756D 
0B22FA 2E2E2E20 
0B22FE 00                  A  2731    	DB	0
0B22FF                     A  2732    L__70:
0B22FF 2D204F4B            A  2733    	DB	"- OK"
0B2303 0D0A00              A  2734    	DB	13,10,0
0B2306                     A  2735    L__72:
0B2306 0D0A                A  2736    	DB	13,10
0B2308 4572726F 72206F63   A  2737    	DB	"Error occured during flash write"
0B2310 63757265 64206475 
0B2318 72696E67 20666C61 
0B2320 73682077 72697465 
0B2328 0D0A                A  2738    	DB	13,10
0B232A 52657472 792E2E2E   A  2739    	DB	"Retry..."
0B2332 0D0A00              A  2740    	DB	13,10,0
0B2335                     A  2741    L__73:
0B2335 0D0A                A  2742    	DB	13,10
0B2337 52657472 79206661   A  2743    	DB	"Retry failed"
0B233F 696C6564 
0B2343 0D0A00              A  2744    	DB	13,10,0
                           A  2745    	SEGMENT CODE
                           A  2746    ;  345	
                           A  2747    ;  346	int main(int argc, char * argv[]) {
0B0A33                     A  2748    _main:
                           A  2749    .DEFINE "_main"
                           A  2750    
                           A  2751    .VALUE _main
                           A  2752    
                           A  2753    .CLASS 2
                           A  2754    
                           A  2755    .TYPE 68
                           A  2756    
                           A  2757    .ENDEF
                           A  2758    
                           A  2759    .BEGFUNC "main",346,"_main"
                           A  2760    
                           A  2761    .LINE 346
                           A  2762    
                           A  2763    .DEFINE "argc"
                           A  2764    
                           A  2765    .CLASS 65
                           A  2766    
                           A  2767    .VALUE 6
                           A  2768    
                           A  2769    .TYPE 4
                           A  2770    
                           A  2771    .ENDEF
                           A  2772    
                           A  2773    .DEFINE "argv"
                           A  2774    
                           A  2775    .CLASS 65
                           A  2776    
                           A  2777    .VALUE 9
                           A  2778    
                           A  2779    .TYPE 290
                           A  2780    
                           A  2781    .ENDEF
                           A  2782    
0B0A33 DDE5                A  2783    	PUSH	IX
0B0A35 DD210000 00         A  2784    	LD	IX,0
0B0A3A DD39                A  2785    	ADD	IX,SP
                           A  2786    ;  347	
                           A  2787    ;  348		if(argc != 3) {
                           A  2788    .LINE 348
                           A  2789    
0B0A3C 01030000            A  2790    	LD	BC,3
0B0A40 DD2706              A  2791    	LD	HL,(IX+%6)
0B0A43 B7                  A  2792    	OR	A,A
0B0A44 ED42                A  2793    	SBC	HL,BC
0B0A46 28 09               A  2794    	JR	Z,L_106
                           A  2795    ;  349			usage();
                           A  2796    .LINE 349
                           A  2797    
0B0A48 CD 06 03 0B         A  2798    	CALL	_usage
                           A  2799    ;  350			return 0;
                           A  2800    .LINE 350
                           A  2801    
0B0A4C B7                  A  2802    	OR	A,A
0B0A4D ED62                A  2803    	SBC	HL,HL
0B0A4F 18 6B               A  2804    	JR	L_107
                           A  2805    ;  351		}
0B0A51                     A  2806    L_106:
                           A  2807    .LINE 351
                           A  2808    
                           A  2809    ;  352	
                           A  2810    ;  353		if(memcmp(argv[1], "mos", 3) == 0) 
                           A  2811    .LINE 353
                           A  2812    
0B0A51 C5                  A  2813    	PUSH	BC
0B0A52 01 46 23 0B         A  2814    	LD	BC,L__76
0B0A56 C5                  A  2815    	PUSH	BC
0B0A57 DD3109              A  2816    	LD	IY,(IX+%9)
0B0A5A ED2303              A  2817    	LEA	HL,IY+%3
0B0A5D ED07                A  2818    	LD	BC,(HL)
0B0A5F C5                  A  2819    	PUSH	BC
0B0A60 CD DF 14 0B         A  2820    	CALL	_memcmp
0B0A64 C1                  A  2821    	POP	BC
0B0A65 C1                  A  2822    	POP	BC
0B0A66 C1                  A  2823    	POP	BC
0B0A67 CD 09 15 0B         A  2824    	CALL	__icmpzero
0B0A6B 20 14               A  2825    	JR	NZ,L_105
                           A  2826    ;  354			return update_mos(argv[2]);
                           A  2827    .LINE 354
                           A  2828    
0B0A6D DD3109              A  2829    	LD	IY,(IX+%9)
0B0A70 ED2306              A  2830    	LEA	HL,IY+%6
0B0A73 ED07                A  2831    	LD	BC,(HL)
0B0A75 C5                  A  2832    	PUSH	BC
0B0A76 CD E5 05 0B         A  2833    	CALL	_update_mos
0B0A7A C1                  A  2834    	POP	BC
0B0A7B B7ED62              A  2835    	UEXT	HL
0B0A7E 6F                  A  2836    	LD	L,A
0B0A7F 18 3B               A  2837    	JR	L_107
                           A  2838    ;  355		}
                           A  2839    ;  356		else {
0B0A81                     A  2840    L_105:
                           A  2841    .LINE 356
                           A  2842    
                           A  2843    ;  357			if(memcmp(argv[1], "vdp", 3) ==
                           A  2844    .LINE 357
                           A  2845    
0B0A81 01030000            A  2846    	LD	BC,3
0B0A85 C5                  A  2847    	PUSH	BC
0B0A86 01 4A 23 0B         A  2848    	LD	BC,L__78
0B0A8A C5                  A  2849    	PUSH	BC
0B0A8B DD3109              A  2850    	LD	IY,(IX+%9)
0B0A8E ED2303              A  2851    	LEA	HL,IY+%3
0B0A91 ED07                A  2852    	LD	BC,(HL)
0B0A93 C5                  A  2853    	PUSH	BC
0B0A94 CD DF 14 0B         A  2854    	CALL	_memcmp
0B0A98 C1                  A  2855    	POP	BC
0B0A99 C1                  A  2856    	POP	BC
0B0A9A C1                  A  2857    	POP	BC
0B0A9B CD 09 15 0B         A  2858    	CALL	__icmpzero
0B0A9F 20 14               A  2859    	JR	NZ,L_103
                           A  2860    ;  358				return update_vdp(argv[2]);
                           A  2861    .LINE 358
                           A  2862    
0B0AA1 DD3109              A  2863    	LD	IY,(IX+%9)
0B0AA4 ED2306              A  2864    	LEA	HL,IY+%6
0B0AA7 ED07                A  2865    	LD	BC,(HL)
0B0AA9 C5                  A  2866    	PUSH	BC
0B0AAA CD 25 04 0B         A  2867    	CALL	_update_vdp
0B0AAE C1                  A  2868    	POP	BC
0B0AAF B7ED62              A  2869    	UEXT	HL
0B0AB2 6F                  A  2870    	LD	L,A
0B0AB3 18 07               A  2871    	JR	L_107
                           A  2872    ;  359			}
                           A  2873    ;  360			else {
0B0AB5                     A  2874    L_103:
                           A  2875    .LINE 360
                           A  2876    
                           A  2877    ;  361				usage();
                           A  2878    .LINE 361
                           A  2879    
0B0AB5 CD 06 03 0B         A  2880    	CALL	_usage
                           A  2881    ;  362				return 0;
                           A  2882    .LINE 362
                           A  2883    
0B0AB9 B7                  A  2884    	OR	A,A
0B0ABA ED62                A  2885    	SBC	HL,HL
                           A  2886    ;  363			}
                           A  2887    ;  364		}
                           A  2888    ;  365	}
0B0ABC                     A  2889    L_107:
                           A  2890    .LINE 365
                           A  2891    
0B0ABC DDF9                A  2892    	LD	SP,IX
0B0ABE DDE1                A  2893    	POP	IX
0B0AC0 C9                  A  2894    	RET	
                           A  2895    
                           A  2896    
                           A  2897    ;**************************** _main ***********
                           A  2898    ;Name                         Addr/Register   S
                           A  2899    ;_memcmp                             IMPORT  --
                           A  2900    ;argv                                  IX+9    
                           A  2901    ;argc                                  IX+6    
                           A  2902    
                           A  2903    
                           A  2904    ; Stack Frame Size: 12 (bytes)
                           A  2905    ;       Spill Code: 0 (instruction)
                           A  2906    
                           A  2907    
                           A  2908    .ENDFUNC "main",365,"_main"
                           A  2909    	SEGMENT STRSECT
0B2346                     A  2910    L__76:
0B2346 6D6F73              A  2911    	DB	"mos"
0B2349 00                  A  2912    	DB	0
0B234A                     A  2913    L__78:
0B234A 766470              A  2914    	DB	"vdp"
0B234D 00                  A  2915    	DB	0
                           A  2916    	XREF _memcmp:ROM
                           A  2917    	XREF _getFileSize:ROM
                           A  2918    	XREF _crc32_finalize:ROM
                           A  2919    	XREF _crc32_initialize:ROM
                           A  2920    	XREF _crc32:ROM
                           A  2921    	XREF _delayms:ROM
                           A  2922    	XREF _startVDPupdate:ROM
                           A  2923    	XREF _reset:ROM
                           A  2924    	XREF _fastmemcpy:ROM
                           A  2925    	XREF _lockFlashKeyRegister:ROM
                           A  2926    	XREF _enableFlashKeyRegister:ROM
                           A  2927    	XREF _mos_flseek:ROM
                           A  2928    	XREF _mos_fread:ROM
                           A  2929    	XREF _mos_fclose:ROM
                           A  2930    	XREF _mos_fopen:ROM
                           A  2931    	XREF _getsysvar_scrchar:ROM
                           A  2932    	XREF _getch:ROM
                           A  2933    	XREF __u_ultoa:ROM
                           A  2934    	XREF __u_itoa:ROM
                           A  2935    	XREF ___print_sendstring:ROM
                           A  2936    	XREF ___print_xputch:ROM
                           A  2937    	XREF ___print_uputch:ROM
                           A  2938    	XREF ___print_fmt:ROM
                           A  2939    	XREF __lcmpu:ROM
                           A  2940    	XREF __iand:ROM
                           A  2941    	XREF __stoiu:ROM
                           A  2942    	XREF __icmpzero:ROM
                           A  2943    	XREF __case8D:ROM
                           A  2944    	XREF __ishru_b:ROM
                           A  2945    	XREF __ishrs_b:ROM
                           A  2946    	XDEF _main
                           A  2947    	XDEF _update_mos
                           A  2948    	XDEF _update_vdp
                           A  2949    	XDEF _getResponse
                           A  2950    	XDEF _usage
                           A  2951    	XDEF _print_version
                           A  2952    	XDEF _containsESP32Header
                           A  2953    	XDEF _esp32_magicnumbers
                           A  2954    	XDEF _containsMosHeader
                           A  2955    	XDEF _mos_magicnumbers
                           A  2956    	XDEF _vdp_ota_present
                           A  2957    	XDEF _getCharAt
                           A  2958    	XDEF _putch
                           A  2959    	XDEF _errno
                           A  2960    	END


Errors: 0
Warnings: 0
Lines Assembled: 2961
