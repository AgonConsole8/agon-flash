Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED01-Nov-23     22:02:20     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",51
                           A   144    .DEFINE "clock"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 15
                           A   148    .ENDEF
                           A   149    .DEFINE "vpd_protocol_flags"
                           A   150    .VALUE 4
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "keyascii"
                           A   155    .VALUE 5
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "keymods"
                           A   160    .VALUE 6
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "cursorX"
                           A   165    .VALUE 7
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "cursorY"
                           A   170    .VALUE 8
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "scrchar"
                           A   175    .VALUE 9
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "scrpixel"
                           A   180    .VALUE 10
                           A   181    .CLASS 8
                           A   182    .TYPE 14
                           A   183    .ENDEF
                           A   184    .DEFINE "audioChannel"
                           A   185    .VALUE 13
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "audioSuccess"
                           A   190    .VALUE 14
                           A   191    .CLASS 8
                           A   192    .TYPE 12
                           A   193    .ENDEF
                           A   194    .DEFINE "scrwidth"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 13
                           A   198    .ENDEF
                           A   199    .DEFINE "scrheight"
                           A   200    .VALUE 17
                           A   201    .CLASS 8
                           A   202    .TYPE 13
                           A   203    .ENDEF
                           A   204    .DEFINE "scrcols"
                           A   205    .VALUE 19
                           A   206    .CLASS 8
                           A   207    .TYPE 12
                           A   208    .ENDEF
                           A   209    .DEFINE "scrrows"
                           A   210    .VALUE 20
                           A   211    .CLASS 8
                           A   212    .TYPE 12
                           A   213    .ENDEF
                           A   214    .DEFINE "scrcolours"
                           A   215    .VALUE 21
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "scrpixelIndex"
                           A   220    .VALUE 22
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "keycode"
                           A   225    .VALUE 23
                           A   226    .CLASS 8
                           A   227    .TYPE 12
                           A   228    .ENDEF
                           A   229    .DEFINE "keydown"
                           A   230    .VALUE 24
                           A   231    .CLASS 8
                           A   232    .TYPE 12
                           A   233    .ENDEF
                           A   234    .DEFINE "keycount"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 12
                           A   238    .ENDEF
                           A   239    .DEFINE "rtc"
                           A   240    .VALUE 26
                           A   241    .CLASS 8
                           A   242    .DIM 6
                           A   243    .TYPE 108
                           A   244    .ENDEF
                           A   245    .DEFINE "rtc_spare"
                           A   246    .VALUE 32
                           A   247    .CLASS 8
                           A   248    .DIM 2
                           A   249    .TYPE 108
                           A   250    .ENDEF
                           A   251    .DEFINE "keydelay"
                           A   252    .VALUE 34
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .DEFINE "keyrate"
                           A   257    .VALUE 36
                           A   258    .CLASS 8
                           A   259    .TYPE 13
                           A   260    .ENDEF
                           A   261    .DEFINE "keyled"
                           A   262    .VALUE 38
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "scrmode"
                           A   267    .VALUE 39
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "rtc_enable"
                           A   272    .VALUE 40
                           A   273    .CLASS 8
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    .DEFINE "mouseX"
                           A   277    .VALUE 41
                           A   278    .CLASS 8
                           A   279    .TYPE 13
                           A   280    .ENDEF
                           A   281    .DEFINE "mouseY"
                           A   282    .VALUE 43
                           A   283    .CLASS 8
                           A   284    .TYPE 13
                           A   285    .ENDEF
                           A   286    .DEFINE "mouseButtons"
                           A   287    .VALUE 45
                           A   288    .CLASS 8
                           A   289    .TYPE 12
                           A   290    .ENDEF
                           A   291    .DEFINE "mouseWheel"
                           A   292    .VALUE 46
                           A   293    .CLASS 8
                           A   294    .TYPE 12
                           A   295    .ENDEF
                           A   296    .DEFINE "mouseXDelta"
                           A   297    .VALUE 47
                           A   298    .CLASS 8
                           A   299    .TYPE 13
                           A   300    .ENDEF
                           A   301    .DEFINE "mouseYDelta"
                           A   302    .VALUE 49
                           A   303    .CLASS 8
                           A   304    .TYPE 13
                           A   305    .ENDEF
                           A   306    .ENDREC "NONAME3"
                           A   307    .BEGREC "NONAME4",8
                           A   308    .DEFINE "baudRate"
                           A   309    .VALUE 0
                           A   310    .CLASS 8
                           A   311    .TYPE 4
                           A   312    .ENDEF
                           A   313    .DEFINE "dataBits"
                           A   314    .VALUE 3
                           A   315    .CLASS 8
                           A   316    .TYPE 12
                           A   317    .ENDEF
                           A   318    .DEFINE "stopBits"
                           A   319    .VALUE 4
                           A   320    .CLASS 8
                           A   321    .TYPE 12
                           A   322    .ENDEF
                           A   323    .DEFINE "parity"
                           A   324    .VALUE 5
                           A   325    .CLASS 8
                           A   326    .TYPE 12
                           A   327    .ENDEF
                           A   328    .DEFINE "flowcontrol"
                           A   329    .VALUE 6
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "eir"
                           A   334    .VALUE 7
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .ENDREC "NONAME4"
                           A   339    .BEGREC "NONAME5",15
                           A   340    .DEFINE "fs"
                           A   341    .VALUE 0
                           A   342    .CLASS 8
                           A   343    .TYPE 46
                           A   344    .ENDEF
                           A   345    .DEFINE "id"
                           A   346    .VALUE 3
                           A   347    .CLASS 8
                           A   348    .TYPE 13
                           A   349    .ENDEF
                           A   350    .DEFINE "attr"
                           A   351    .VALUE 5
                           A   352    .CLASS 8
                           A   353    .TYPE 12
                           A   354    .ENDEF
                           A   355    .DEFINE "stat"
                           A   356    .VALUE 6
                           A   357    .CLASS 8
                           A   358    .TYPE 12
                           A   359    .ENDEF
                           A   360    .DEFINE "sclust"
                           A   361    .VALUE 7
                           A   362    .CLASS 8
                           A   363    .TYPE 15
                           A   364    .ENDEF
                           A   365    .DEFINE "objsize"
                           A   366    .VALUE 11
                           A   367    .CLASS 8
                           A   368    .TYPE 15
                           A   369    .ENDEF
                           A   370    .ENDREC "NONAME5"
                           A   371    .BEGREC "NONAME6",36
                           A   372    .DEFINE "obj"
                           A   373    .VALUE 0
                           A   374    .CLASS 8
                           A   375    .TAG "NONAME5"
                           A   376    .TYPE 8
                           A   377    .ENDEF
                           A   378    .DEFINE "flag"
                           A   379    .VALUE 15
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .DEFINE "err"
                           A   384    .VALUE 16
                           A   385    .CLASS 8
                           A   386    .TYPE 12
                           A   387    .ENDEF
                           A   388    .DEFINE "fptr"
                           A   389    .VALUE 17
                           A   390    .CLASS 8
                           A   391    .TYPE 15
                           A   392    .ENDEF
                           A   393    .DEFINE "clust"
                           A   394    .VALUE 21
                           A   395    .CLASS 8
                           A   396    .TYPE 15
                           A   397    .ENDEF
                           A   398    .DEFINE "sect"
                           A   399    .VALUE 25
                           A   400    .CLASS 8
                           A   401    .TYPE 15
                           A   402    .ENDEF
                           A   403    .DEFINE "dir_sect"
                           A   404    .VALUE 29
                           A   405    .CLASS 8
                           A   406    .TYPE 15
                           A   407    .ENDEF
                           A   408    .DEFINE "dir_ptr"
                           A   409    .VALUE 33
                           A   410    .CLASS 8
                           A   411    .TYPE 46
                           A   412    .ENDEF
                           A   413    .ENDREC "NONAME6"
                           A   414    	SEGMENT BSS
0B2745                     A   415    _errno:
0B2745                     A   416    	DS	3
                           A   417    .DEFINE "errno"
                           A   418    .ALIAS "_errno"
                           A   419    .CLASS 83
                           A   420    .VALUE _errno
                           A   421    .TYPE 4
                           A   422    .ENDEF
                           A   423    ;    1	/*
                           A   424    ;    2	 * Title:			Agon firmware upgra
                           A   425    ;    3	 * Author:			Jeroen Venema
                           A   426    ;    4	 * Created:			17/12/2022
                           A   427    ;    5	 * Last Updated:	14/10/2023
                           A   428    ;    6	 * 
                           A   429    ;    7	 * Modinfo:
                           A   430    ;    8	 * 17/12/2022:		Initial version
                           A   431    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   432    ;   10	 *                  Sends cls just befo
                           A   433    ;   11	 * 07/06/2023:		Included faster crc
                           A   434    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   435    ;   13	 */
                           A   436    ;   14	
                           A   437    ;   15	#include <ez80.h>
                           A   438    ;   16	#include <stdio.h>
                           A   439    ;   17	#include <stdlib.h>
                           A   440    ;   18	#include <ERRNO.H>
                           A   441    ;   19	#include <ctype.h>
                           A   442    ;   20	#include "mos-interface.h"
                           A   443    ;   21	#include "flash.h"
                           A   444    ;   22	#include "agontimer.h"
                           A   445    ;   23	#include "crc32.h"
                           A   446    ;   24	#include "filesize.h"
                           A   447    ;   25	#include "./stdint.h"
                           A   448    ;   26	#include <string.h>
                           A   449    ;   27	
                           A   450    ;   28	#define UNLOCKMATCHLENGTH 9
                           A   451    ;   29	#define EXIT_FILENOTFOUND	4
                           A   452    ;   30	#define EXIT_INVALIDPARAMETER	19
                           A   453    ;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
                           A   454    ;   32	#define DEFAULT_VDPFIRMWARE	"firmware.b
                           A   455    ;   33	
                           A   456    ;   34	#define CMDUNKNOWN	0
                           A   457    ;   35	#define CMDALL		1
                           A   458    ;   36	#define CMDMOS		2
                           A   459    ;   37	#define CMDVDP		3
                           A   460    ;   38	#define CMDSILENT	4
                           A   461    ;   39	
                           A   462    ;   40	int errno; // needed by standard librar
                           A   463    	SEGMENT CODE
                           A   464    ;   41	enum states{firmware,retry,systemreset}
                           A   465    ;   42	
                           A   466    ;   43	// separate putch function that doesn't
                           A   467    ;   44	// UART0 initialization done by MOS fir
                           A   468    ;   45	// This utility doesn't run without MOS
                           A   469    ;   46	int putch(int c)
                           A   470    ;   47	{
0B00E5                     A   471    _putch:
                           A   472    .DEFINE "_putch"
                           A   473    
                           A   474    .VALUE _putch
                           A   475    
                           A   476    .CLASS 2
                           A   477    
                           A   478    .TYPE 68
                           A   479    
                           A   480    .ENDEF
                           A   481    
                           A   482    .BEGFUNC "putch",47,"_putch"
                           A   483    
                           A   484    .LINE 47
                           A   485    
                           A   486    .DEFINE "c"
                           A   487    
                           A   488    .CLASS 65
                           A   489    
                           A   490    .VALUE 6
                           A   491    
                           A   492    .TYPE 4
                           A   493    
0B00E5 DDE5                A   494    	PUSH	IX
0B00E7 DD210000 00         A   495    	LD	IX,0
0B00EC DD39                A   496    	ADD	IX,SP
                           A   497    .ENDEF
                           A   498    
                           A   499    ;   48		UINT8 lsr,temt;
                           A   500    ;   49		
                           A   501    ;   50		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   502    L_1:
                           A   503    .LINE 50
                           A   504    
0B00EE ED38C5              A   505    	IN0	A,(197)
0B00F1 E640                A   506    	AND	A,%40
0B00F3 B7ED62              A   507    	UEXT	HL
0B00F6 6F                  A   508    	LD	L,A
0B00F7 CD F2 18 0B         A   509    	CALL	__icmpzero
0B00FB 28 F1               A   510    	JR	Z,L_1
                           A   511    ;   51		UART0_THR = c;
                           A   512    .LINE 51
                           A   513    
0B00FD DD7E06              A   514    	LD	A,(IX+%6)
0B0100 ED39C0              A   515    	OUT0	(192),A
                           A   516    ;   52		return c;
                           A   517    .LINE 52
                           A   518    
0B0103 DD2706              A   519    	LD	HL,(IX+%6)
                           A   520    ;   53	}
                           A   521    .LINE 53
                           A   522    
0B0106 DDF9                A   523    	LD	SP,IX
0B0108 DDE1                A   524    	POP	IX
0B010A C9                  A   525    	RET	
                           A   526    
                           A   527    
                           A   528    ;**************************** _putch **********
                           A   529    ;Name                         Addr/Register   S
                           A   530    ;c                                     IX+6    
                           A   531    
                           A   532    
                           A   533    ; Stack Frame Size: 9 (bytes)
                           A   534    ;       Spill Code: 0 (instruction)
                           A   535    
                           A   536    
                           A   537    .ENDFUNC "putch",53,"_putch"
                           A   538    ;   54	
                           A   539    ;   55	void beep(unsigned int number) {
0B010B                     A   540    _beep:
                           A   541    .DEFINE "_beep"
                           A   542    
                           A   543    .VALUE _beep
                           A   544    
                           A   545    .CLASS 2
                           A   546    
                           A   547    .TYPE 65
                           A   548    
                           A   549    .ENDEF
                           A   550    
                           A   551    .BEGFUNC "beep",55,"_beep"
                           A   552    
                           A   553    .LINE 55
                           A   554    
                           A   555    .DEFINE "number"
                           A   556    
                           A   557    .CLASS 65
                           A   558    
                           A   559    .VALUE 6
                           A   560    
                           A   561    .TYPE 14
                           A   562    
                           A   563    .ENDEF
                           A   564    
0B010B DDE5                A   565    	PUSH	IX
0B010D DD210000 00         A   566    	LD	IX,0
0B0112 DD39                A   567    	ADD	IX,SP
                           A   568    ;   56		while(number--) {
                           A   569    .LINE 56
                           A   570    
0B0114 18 14               A   571    	JR	L_5
0B0116                     A   572    L_6:
                           A   573    ;   57			putch(7);
                           A   574    .LINE 57
                           A   575    
0B0116 01070000            A   576    	LD	BC,7
0B011A C5                  A   577    	PUSH	BC
0B011B CD E5 00 0B         A   578    	CALL	_putch
0B011F C1                  A   579    	POP	BC
                           A   580    ;   58			delayms(250);
                           A   581    .LINE 58
                           A   582    
0B0120 01FA0000            A   583    	LD	BC,250
0B0124 C5                  A   584    	PUSH	BC
0B0125 CD 61 10 0B         A   585    	CALL	_delayms
0B0129 C1                  A   586    	POP	BC
                           A   587    ;   59		}
0B012A                     A   588    L_5:
                           A   589    .LINE 59
                           A   590    
0B012A DD2706              A   591    	LD	HL,(IX+%6)
0B012D DD3106              A   592    	LD	IY,(IX+%6)
0B0130 ED33FF              A   593    	LEA	IY,IY+%FFFFFFFF
0B0133 DD3E06              A   594    	LD	(IX+%6),IY
0B0136 CD F2 18 0B         A   595    	CALL	__icmpzero
0B013A 20 DA               A   596    	JR	NZ,L_6
                           A   597    ;   60	}
                           A   598    .LINE 60
                           A   599    
0B013C DDF9                A   600    	LD	SP,IX
0B013E DDE1                A   601    	POP	IX
0B0140 C9                  A   602    	RET	
                           A   603    
                           A   604    
                           A   605    ;**************************** _beep ***********
                           A   606    ;Name                         Addr/Register   S
                           A   607    ;_delayms                            IMPORT  --
                           A   608    ;_putch                              IMPORT  --
                           A   609    ;number                                IX+6    
                           A   610    
                           A   611    
                           A   612    ; Stack Frame Size: 9 (bytes)
                           A   613    ;       Spill Code: 0 (instruction)
                           A   614    
                           A   615    
                           A   616    .ENDFUNC "beep",60,"_beep"
                           A   617    ;   61	
                           A   618    ;   62	uint8_t getCharAt(uint16_t x, uint16_t 
0B0141                     A   619    _getCharAt:
                           A   620    .DEFINE "_getCharAt"
                           A   621    
                           A   622    .VALUE _getCharAt
                           A   623    
                           A   624    .CLASS 2
                           A   625    
                           A   626    .TYPE 76
                           A   627    
                           A   628    .ENDEF
                           A   629    
                           A   630    .BEGFUNC "getCharAt",62,"_getCharAt"
                           A   631    
                           A   632    .LINE 62
                           A   633    
                           A   634    .DEFINE "x"
                           A   635    
                           A   636    .CLASS 65
                           A   637    
                           A   638    .VALUE 6
                           A   639    
                           A   640    .TYPE 13
                           A   641    
                           A   642    .ENDEF
                           A   643    
                           A   644    .DEFINE "y"
                           A   645    
                           A   646    .CLASS 65
                           A   647    
                           A   648    .VALUE 9
                           A   649    
                           A   650    .TYPE 13
                           A   651    
                           A   652    .ENDEF
                           A   653    
                           A   654    .DEFINE "sysvars"
                           A   655    
                           A   656    .CLASS 65
                           A   657    
                           A   658    .VALUE -3
                           A   659    
                           A   660    .TAG "NONAME3"
                           A   661    
                           A   662    .TYPE 40
                           A   663    
                           A   664    .ENDEF
                           A   665    
0B0141 DDE5                A   666    	PUSH	IX
0B0143 DD210000 00         A   667    	LD	IX,0
0B0148 DD39                A   668    	ADD	IX,SP
0B014A C5                  A   669    	PUSH	BC
                           A   670    ;   63		sysvar_t *sysvars = getsysvars();
                           A   671    .LINE 63
                           A   672    
0B014B CD 85 0E 0B         A   673    	CALL	_getsysvars
0B014F DD2FFD              A   674    	LD	(IX+%FFFFFFFD),HL
                           A   675    ;   64		delayms(20);
                           A   676    .LINE 64
                           A   677    
0B0152 01140000            A   678    	LD	BC,20
0B0156 C5                  A   679    	PUSH	BC
0B0157 CD 61 10 0B         A   680    	CALL	_delayms
0B015B C1                  A   681    	POP	BC
                           A   682    ;   65		putch(23);
                           A   683    .LINE 65
                           A   684    
0B015C 01170000            A   685    	LD	BC,23
0B0160 C5                  A   686    	PUSH	BC
0B0161 CD E5 00 0B         A   687    	CALL	_putch
0B0165 C1                  A   688    	POP	BC
                           A   689    ;   66		putch(0);
                           A   690    .LINE 66
                           A   691    
0B0166 01000000            A   692    	LD	BC,0
0B016A C5                  A   693    	PUSH	BC
0B016B CD E5 00 0B         A   694    	CALL	_putch
0B016F C1                  A   695    	POP	BC
                           A   696    ;   67		putch(131);
                           A   697    .LINE 67
                           A   698    
0B0170 01830000            A   699    	LD	BC,131
0B0174 C5                  A   700    	PUSH	BC
0B0175 CD E5 00 0B         A   701    	CALL	_putch
0B0179 C1                  A   702    	POP	BC
                           A   703    ;   68		putch(x & 0xFF);
                           A   704    .LINE 68
                           A   705    
0B017A DD0706              A   706    	LD	BC,(IX+%6)
0B017D CD 2F 15 0B         A   707    	CALL	__stoiu
0B0181 7D                  A   708    	LD	A,L
0B0182 B7ED62              A   709    	UEXT	HL
0B0185 6F                  A   710    	LD	L,A
0B0186 E5                  A   711    	PUSH	HL
0B0187 CD E5 00 0B         A   712    	CALL	_putch
0B018B C1                  A   713    	POP	BC
                           A   714    ;   69		putch((x >> 8) & 0xFF);
                           A   715    .LINE 69
                           A   716    
0B018C DD0706              A   717    	LD	BC,(IX+%6)
0B018F CD 2F 15 0B         A   718    	CALL	__stoiu
0B0193 3E08                A   719    	LD	A,%8
0B0195 CD 64 13 0B         A   720    	CALL	__ishrs_b
0B0199 7D                  A   721    	LD	A,L
0B019A B7ED62              A   722    	UEXT	HL
0B019D 6F                  A   723    	LD	L,A
0B019E E5                  A   724    	PUSH	HL
0B019F CD E5 00 0B         A   725    	CALL	_putch
0B01A3 C1                  A   726    	POP	BC
                           A   727    ;   70		putch(y & 0xFF);
                           A   728    .LINE 70
                           A   729    
0B01A4 DD0709              A   730    	LD	BC,(IX+%9)
0B01A7 CD 2F 15 0B         A   731    	CALL	__stoiu
0B01AB 7D                  A   732    	LD	A,L
0B01AC B7ED62              A   733    	UEXT	HL
0B01AF 6F                  A   734    	LD	L,A
0B01B0 E5                  A   735    	PUSH	HL
0B01B1 CD E5 00 0B         A   736    	CALL	_putch
0B01B5 C1                  A   737    	POP	BC
                           A   738    ;   71		putch((y >> 8) & 0xFF);
                           A   739    .LINE 71
                           A   740    
0B01B6 DD0709              A   741    	LD	BC,(IX+%9)
0B01B9 CD 2F 15 0B         A   742    	CALL	__stoiu
0B01BD 3E08                A   743    	LD	A,%8
0B01BF CD 64 13 0B         A   744    	CALL	__ishrs_b
0B01C3 7D                  A   745    	LD	A,L
0B01C4 B7ED62              A   746    	UEXT	HL
0B01C7 6F                  A   747    	LD	L,A
0B01C8 E5                  A   748    	PUSH	HL
0B01C9 CD E5 00 0B         A   749    	CALL	_putch
0B01CD C1                  A   750    	POP	BC
                           A   751    ;   72		delayms(100);
                           A   752    .LINE 72
                           A   753    
0B01CE 01640000            A   754    	LD	BC,100
0B01D2 C5                  A   755    	PUSH	BC
0B01D3 CD 61 10 0B         A   756    	CALL	_delayms
0B01D7 C1                  A   757    	POP	BC
                           A   758    ;   73		return sysvars->scrchar;
                           A   759    .LINE 73
                           A   760    
0B01D8 DD31FD              A   761    	LD	IY,(IX+%FFFFFFFD)
0B01DB FD7E09              A   762    	LD	A,(IY+%9)
                           A   763    ;   74	}
                           A   764    .LINE 74
                           A   765    
0B01DE DDF9                A   766    	LD	SP,IX
0B01E0 DDE1                A   767    	POP	IX
0B01E2 C9                  A   768    	RET	
                           A   769    
                           A   770    
                           A   771    ;**************************** _getCharAt ******
                           A   772    ;Name                         Addr/Register   S
                           A   773    ;_putch                              IMPORT  --
                           A   774    ;_delayms                            IMPORT  --
                           A   775    ;_getsysvars                         IMPORT  --
                           A   776    ;sysvars                               IX-3    
                           A   777    ;y                                     IX+9    
                           A   778    ;x                                     IX+6    
                           A   779    
                           A   780    
                           A   781    ; Stack Frame Size: 15 (bytes)
                           A   782    ;       Spill Code: 0 (instruction)
                           A   783    
                           A   784    
                           A   785    .ENDFUNC "getCharAt",74,"_getCharAt"
                           A   786    ;   75	
                           A   787    ;   76	bool vdp_ota_present(void) {
0B01E3                     A   788    _vdp_ota_present:
                           A   789    .DEFINE "_vdp_ota_present"
                           A   790    
                           A   791    .VALUE _vdp_ota_present
                           A   792    
                           A   793    .CLASS 2
                           A   794    
                           A   795    .TYPE 76
                           A   796    
                           A   797    .ENDEF
                           A   798    
                           A   799    .BEGFUNC "vdp_ota_present",76,"_vdp_ota_present
                           A   800    
                           A   801    .LINE 76
                           A   802    
                           A   803    .DEFINE "n"
                           A   804    
                           A   805    .CLASS 65
                           A   806    
                           A   807    .VALUE -2
                           A   808    
                           A   809    .TYPE 13
                           A   810    
                           A   811    .ENDEF
                           A   812    
                           A   813    .DEFINE "test"
                           A   814    
                           A   815    .CLASS 65
                           A   816    
                           A   817    .VALUE -11
                           A   818    
                           A   819    .DIM 9
                           A   820    
                           A   821    .TYPE 98
                           A   822    
                           A   823    .ENDEF
                           A   824    
0B01E3 DDE5                A   825    	PUSH	IX
0B01E5 DD210000 00         A   826    	LD	IX,0
0B01EA DD39                A   827    	ADD	IX,SP
0B01EC ED22F5              A   828    	LEA	HL,IX+%FFFFFFF5
0B01EF F9                  A   829    	LD	SP,HL
                           A   830    ;   77		char test[UNLOCKMATCHLENGTH];
                           A   831    ;   78		uint16_t n;
                           A   832    ;   79	
                           A   833    ;   80		putch(23);
                           A   834    .LINE 80
                           A   835    
0B01F0 01170000            A   836    	LD	BC,23
0B01F4 C5                  A   837    	PUSH	BC
0B01F5 CD E5 00 0B         A   838    	CALL	_putch
0B01F9 C1                  A   839    	POP	BC
                           A   840    ;   81		putch(0);
                           A   841    .LINE 81
                           A   842    
0B01FA 01000000            A   843    	LD	BC,0
0B01FE C5                  A   844    	PUSH	BC
0B01FF CD E5 00 0B         A   845    	CALL	_putch
0B0203 C1                  A   846    	POP	BC
                           A   847    ;   82		putch(0xA1);
                           A   848    .LINE 82
                           A   849    
0B0204 01A10000            A   850    	LD	BC,161
0B0208 C5                  A   851    	PUSH	BC
0B0209 CD E5 00 0B         A   852    	CALL	_putch
0B020D C1                  A   853    	POP	BC
                           A   854    ;   83		putch(0);
                           A   855    .LINE 83
                           A   856    
0B020E 01000000            A   857    	LD	BC,0
0B0212 C5                  A   858    	PUSH	BC
0B0213 CD E5 00 0B         A   859    	CALL	_putch
0B0217 C1                  A   860    	POP	BC
                           A   861    ;   84		printf("unlock");
                           A   862    .LINE 84
                           A   863    
0B0218 01 35 15 0B         A   864    	LD	BC,___print_uputch
0B021C ED43 04 24 0B       A   865    	LD	(___print_xputch),BC
0B0221 01 87 24 0B         A   866    	LD	BC,L__5
0B0225 C5                  A   867    	PUSH	BC
0B0226 CD C4 13 0B         A   868    	CALL	___print_sendstring
0B022A C1                  A   869    	POP	BC
                           A   870    ;   85	
                           A   871    ;   86		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   872    .LINE 86
                           A   873    
0B022B DD36FE00            A   874    	LD	(IX+%FFFFFFFE),%0
0B022F DD36FF00            A   875    	LD	(IX+%FFFFFFFF),%0
0B0233 18 2A               A   876    	JR	L_12
0B0235                     A   877    L_10:
0B0235 01030000            A   878    	LD	BC,3
0B0239 C5                  A   879    	PUSH	BC
0B023A DD31FE              A   880    	LD	IY,(IX+%FFFFFFFE)
0B023D ED0308              A   881    	LEA	BC,IY+%8
0B0240 C5                  A   882    	PUSH	BC
0B0241 CD 41 01 0B         A   883    	CALL	_getCharAt
0B0245 C1                  A   884    	POP	BC
0B0246 C1                  A   885    	POP	BC
0B0247 DD07FE              A   886    	LD	BC,(IX+%FFFFFFFE)
0B024A CD 2F 15 0B         A   887    	CALL	__stoiu
0B024E E5C1                A   888    	LD	BC,HL
0B0250 ED22F5              A   889    	LEA	HL,IX+%FFFFFFF5
0B0253 09                  A   890    	ADD	HL,BC
0B0254 77                  A   891    	LD	(HL),A
0B0255 DD27FE              A   892    	LD	HL,(IX+%FFFFFFFE)
0B0258 23                  A   893    	INC	HL
0B0259 DD75FE              A   894    	LD	(IX+%FFFFFFFE),L
0B025C DD74FF              A   895    	LD	(IX+%FFFFFFFF),H
0B025F                     A   896    L_12:
0B025F 49010A00            A   897    	LD.LIS	BC,10
0B0263 DD27FE              A   898    	LD	HL,(IX+%FFFFFFFE)
0B0266 B7                  A   899    	OR	A,A
0B0267 40ED42              A   900    	SBC.SIS	HL,BC
0B026A 38 C9               A   901    	JR	C,L_10
                           A   902    ;   87		// 3 - line on-screen
                           A   903    ;   88		if(memcmp(test, "unlocked!",UNLOCKM
                           A   904    .LINE 88
                           A   905    
0B026C 01090000            A   906    	LD	BC,9
0B0270 C5                  A   907    	PUSH	BC
0B0271 01 8E 24 0B         A   908    	LD	BC,L__7
0B0275 C5                  A   909    	PUSH	BC
0B0276 ED65F5              A   910    	PEA	IX+%FFFFFFF5
0B0279 CD C8 18 0B         A   911    	CALL	_memcmp
0B027D C1                  A   912    	POP	BC
0B027E C1                  A   913    	POP	BC
0B027F C1                  A   914    	POP	BC
0B0280 CD F2 18 0B         A   915    	CALL	__icmpzero
0B0284 20 04               A   916    	JR	NZ,L_14
0B0286 3E01                A   917    	LD	A,%1
0B0288 18 01               A   918    	JR	L_16
                           A   919    ;   89		else return false;
0B028A                     A   920    L_14:
                           A   921    .LINE 89
                           A   922    
0B028A AF                  A   923    	XOR	A,A
                           A   924    ;   90	}
0B028B                     A   925    L_16:
                           A   926    .LINE 90
                           A   927    
0B028B DDF9                A   928    	LD	SP,IX
0B028D DDE1                A   929    	POP	IX
0B028F C9                  A   930    	RET	
                           A   931    
                           A   932    
                           A   933    ;**************************** _vdp_ota_present 
                           A   934    ;Name                         Addr/Register   S
                           A   935    ;_memcmp                             IMPORT  --
                           A   936    ;___print_sendstring                 IMPORT  --
                           A   937    ;___print_xputch                     IMPORT    
                           A   938    ;___print_uputch                     IMPORT  --
                           A   939    ;_putch                              IMPORT  --
                           A   940    ;test                                 IX-11    
                           A   941    ;n                                     IX-2    
                           A   942    
                           A   943    
                           A   944    ; Stack Frame Size: 17 (bytes)
                           A   945    ;       Spill Code: 0 (instruction)
                           A   946    
                           A   947    
                           A   948    .ENDFUNC "vdp_ota_present",90,"_vdp_ota_present
                           A   949    	SEGMENT STRSECT
0B2487                     A   950    L__5:
0B2487 756E6C6F 636B       A   951    	DB	"unlock"
0B248D 00                  A   952    	DB	0
0B248E                     A   953    L__7:
0B248E 756E6C6F 636B6564   A   954    	DB	"unlocked!"
0B2496 21 
0B2497 00                  A   955    	DB	0
                           A   956    	SEGMENT DATA
0B1F10                     A   957    _mos_magicnumbers:
0B1F10 F3                  A   958    	DB	243
0B1F11 ED                  A   959    	DB	237
0B1F12 7D                  A   960    	DB	125
0B1F13 5B                  A   961    	DB	91
0B1F14 C3                  A   962    	DB	195
                           A   963    .DEFINE "mos_magicnumbers"
                           A   964    .ALIAS "_mos_magicnumbers"
                           A   965    .CLASS 69
                           A   966    .VALUE _mos_magicnumbers
                           A   967    .DIM 5
                           A   968    .TYPE 108
                           A   969    .ENDEF
                           A   970    ;   91	
                           A   971    ;   92	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   972    	SEGMENT CODE
                           A   973    ;   93	#define MOS_MAGICLENGTH 5
                           A   974    ;   94	bool containsMosHeader(uint8_t *filesta
0B0290                     A   975    _containsMosHeader:
                           A   976    .DEFINE "_containsMosHeader"
                           A   977    
                           A   978    .VALUE _containsMosHeader
                           A   979    
                           A   980    .CLASS 2
                           A   981    
                           A   982    .TYPE 76
                           A   983    
                           A   984    .ENDEF
                           A   985    
                           A   986    .BEGFUNC "containsMosHeader",94,"_containsMosHe
                           A   987    
                           A   988    .LINE 94
                           A   989    
                           A   990    .DEFINE "filestart"
                           A   991    
                           A   992    .CLASS 65
                           A   993    
                           A   994    .VALUE 6
                           A   995    
                           A   996    .TYPE 44
                           A   997    
                           A   998    .ENDEF
                           A   999    
                           A  1000    .DEFINE "n"
                           A  1001    
                           A  1002    .CLASS 65
                           A  1003    
                           A  1004    .VALUE -1
                           A  1005    
                           A  1006    .TYPE 12
                           A  1007    
                           A  1008    .ENDEF
                           A  1009    
                           A  1010    .DEFINE "match"
                           A  1011    
                           A  1012    .CLASS 65
                           A  1013    
                           A  1014    .VALUE -2
                           A  1015    
                           A  1016    .TYPE 12
                           A  1017    
                           A  1018    .ENDEF
                           A  1019    
0B0290 DDE5                A  1020    	PUSH	IX
0B0292 DD210000 00         A  1021    	LD	IX,0
0B0297 DD39                A  1022    	ADD	IX,SP
0B0299 3B                  A  1023    	DEC	SP
0B029A 3B                  A  1024    	DEC	SP
                           A  1025    ;   95		uint8_t n;
                           A  1026    ;   96		bool match = true;
                           A  1027    .LINE 96
                           A  1028    
0B029B DD36FE01            A  1029    	LD	(IX+%FFFFFFFE),%1
                           A  1030    ;   97	
                           A  1031    ;   98		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A  1032    .LINE 98
                           A  1033    
0B029F DD36FF00            A  1034    	LD	(IX+%FFFFFFFF),%0
0B02A3 18 27               A  1035    	JR	L_21
0B02A5                     A  1036    L_19:
0B02A5 DD7EFF              A  1037    	LD	A,(IX+%FFFFFFFF)
0B02A8 B7ED62              A  1038    	UEXT	HL
0B02AB 6F                  A  1039    	LD	L,A
0B02AC 01 10 1F 0B         A  1040    	LD	BC,_mos_magicnumbers
0B02B0 09                  A  1041    	ADD	HL,BC
0B02B1 E5FDE1              A  1042    	LD	IY,HL
0B02B4 DD7EFF              A  1043    	LD	A,(IX+%FFFFFFFF)
0B02B7 B7ED62              A  1044    	UEXT	HL
0B02BA 6F                  A  1045    	LD	L,A
0B02BB DD0706              A  1046    	LD	BC,(IX+%6)
0B02BE 09                  A  1047    	ADD	HL,BC
0B02BF FD7E00              A  1048    	LD	A,(IY)
0B02C2 BE                  A  1049    	CP	A,(HL)
0B02C3 28 04               A  1050    	JR	Z,L_20
0B02C5 DD36FE00            A  1051    	LD	(IX+%FFFFFFFE),%0
0B02C9                     A  1052    L_20:
0B02C9 DD34FF              A  1053    	INC	(IX+%FFFFFFFF)
0B02CC                     A  1054    L_21:
0B02CC DD7EFF              A  1055    	LD	A,(IX+%FFFFFFFF)
0B02CF FE05                A  1056    	CP	A,%5
0B02D1 38 D2               A  1057    	JR	C,L_19
                           A  1058    ;   99		return match;
                           A  1059    .LINE 99
                           A  1060    
0B02D3 DD7EFE              A  1061    	LD	A,(IX+%FFFFFFFE)
                           A  1062    ;  100	}
                           A  1063    .LINE 100
                           A  1064    
0B02D6 DDF9                A  1065    	LD	SP,IX
0B02D8 DDE1                A  1066    	POP	IX
0B02DA C9                  A  1067    	RET	
                           A  1068    
                           A  1069    
                           A  1070    ;**************************** _containsMosHeade
                           A  1071    ;Name                         Addr/Register   S
                           A  1072    ;_mos_magicnumbers                   STATIC    
                           A  1073    ;match                                 IX-2    
                           A  1074    ;n                                     IX-1    
                           A  1075    ;filestart                             IX+6    
                           A  1076    
                           A  1077    
                           A  1078    ; Stack Frame Size: 11 (bytes)
                           A  1079    ;       Spill Code: 0 (instruction)
                           A  1080    
                           A  1081    
                           A  1082    .ENDFUNC "containsMosHeader",100,"_containsMosH
                           A  1083    	SEGMENT DATA
0B1F15                     A  1084    _esp32_magicnumbers:
0B1F15 32                  A  1085    	DB	50
0B1F16 54                  A  1086    	DB	84
0B1F17 CD                  A  1087    	DB	205
0B1F18 AB                  A  1088    	DB	171
                           A  1089    .DEFINE "esp32_magicnumbers"
                           A  1090    .ALIAS "_esp32_magicnumbers"
                           A  1091    .CLASS 69
                           A  1092    .VALUE _esp32_magicnumbers
                           A  1093    .DIM 4
                           A  1094    .TYPE 108
                           A  1095    .ENDEF
                           A  1096    ;  101	
                           A  1097    ;  102	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A  1098    	SEGMENT CODE
                           A  1099    ;  103	#define ESP32_MAGICLENGTH 4
                           A  1100    ;  104	#define ESP32_MAGICSTART 0x20
                           A  1101    ;  105	bool containsESP32Header(uint8_t *files
0B02DB                     A  1102    _containsESP32Header:
                           A  1103    .DEFINE "_containsESP32Header"
                           A  1104    
                           A  1105    .VALUE _containsESP32Header
                           A  1106    
                           A  1107    .CLASS 2
                           A  1108    
                           A  1109    .TYPE 76
                           A  1110    
                           A  1111    .ENDEF
                           A  1112    
                           A  1113    .BEGFUNC "containsESP32Header",105,"_containsES
                           A  1114    
                           A  1115    .LINE 105
                           A  1116    
                           A  1117    .DEFINE "filestart"
                           A  1118    
                           A  1119    .CLASS 65
                           A  1120    
                           A  1121    .VALUE 6
                           A  1122    
                           A  1123    .TYPE 44
                           A  1124    
                           A  1125    .ENDEF
                           A  1126    
                           A  1127    .DEFINE "n"
                           A  1128    
                           A  1129    .CLASS 65
                           A  1130    
                           A  1131    .VALUE -1
                           A  1132    
                           A  1133    .TYPE 12
                           A  1134    
                           A  1135    .ENDEF
                           A  1136    
                           A  1137    .DEFINE "match"
                           A  1138    
                           A  1139    .CLASS 65
                           A  1140    
                           A  1141    .VALUE -2
                           A  1142    
                           A  1143    .TYPE 12
                           A  1144    
                           A  1145    .ENDEF
                           A  1146    
0B02DB DDE5                A  1147    	PUSH	IX
0B02DD DD210000 00         A  1148    	LD	IX,0
0B02E2 DD39                A  1149    	ADD	IX,SP
0B02E4 3B                  A  1150    	DEC	SP
0B02E5 3B                  A  1151    	DEC	SP
                           A  1152    ;  106		uint8_t n;
                           A  1153    ;  107		bool match = true;
                           A  1154    .LINE 107
                           A  1155    
0B02E6 DD36FE01            A  1156    	LD	(IX+%FFFFFFFE),%1
                           A  1157    ;  108	
                           A  1158    ;  109		filestart += ESP32_MAGICSTART; // s
                           A  1159    .LINE 109
                           A  1160    
0B02EA DD3106              A  1161    	LD	IY,(IX+%6)
0B02ED ED3320              A  1162    	LEA	IY,IY+%20
0B02F0 DD3E06              A  1163    	LD	(IX+%6),IY
                           A  1164    ;  110		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A  1165    .LINE 110
                           A  1166    
0B02F3 DD36FF00            A  1167    	LD	(IX+%FFFFFFFF),%0
0B02F7 18 27               A  1168    	JR	L_28
0B02F9                     A  1169    L_26:
                           A  1170    ;  111			if(esp32_magicnumbers[n] != fil
                           A  1171    .LINE 111
                           A  1172    
0B02F9 DD7EFF              A  1173    	LD	A,(IX+%FFFFFFFF)
0B02FC B7ED62              A  1174    	UEXT	HL
0B02FF 6F                  A  1175    	LD	L,A
0B0300 01 15 1F 0B         A  1176    	LD	BC,_esp32_magicnumbers
0B0304 09                  A  1177    	ADD	HL,BC
0B0305 E5FDE1              A  1178    	LD	IY,HL
0B0308 DD7EFF              A  1179    	LD	A,(IX+%FFFFFFFF)
0B030B B7ED62              A  1180    	UEXT	HL
0B030E 6F                  A  1181    	LD	L,A
0B030F DD0706              A  1182    	LD	BC,(IX+%6)
0B0312 09                  A  1183    	ADD	HL,BC
0B0313 FD7E00              A  1184    	LD	A,(IY)
0B0316 BE                  A  1185    	CP	A,(HL)
0B0317 28 04               A  1186    	JR	Z,L_27
0B0319 DD36FE00            A  1187    	LD	(IX+%FFFFFFFE),%0
                           A  1188    ;  112		}
0B031D                     A  1189    L_27:
                           A  1190    .LINE 112
                           A  1191    
0B031D DD34FF              A  1192    	INC	(IX+%FFFFFFFF)
0B0320                     A  1193    L_28:
0B0320 DD7EFF              A  1194    	LD	A,(IX+%FFFFFFFF)
0B0323 FE04                A  1195    	CP	A,%4
0B0325 38 D2               A  1196    	JR	C,L_26
                           A  1197    ;  113		return match;
                           A  1198    .LINE 113
                           A  1199    
0B0327 DD7EFE              A  1200    	LD	A,(IX+%FFFFFFFE)
                           A  1201    ;  114	}
                           A  1202    .LINE 114
                           A  1203    
0B032A DDF9                A  1204    	LD	SP,IX
0B032C DDE1                A  1205    	POP	IX
0B032E C9                  A  1206    	RET	
                           A  1207    
                           A  1208    
                           A  1209    ;**************************** _containsESP32Hea
                           A  1210    ;Name                         Addr/Register   S
                           A  1211    ;_esp32_magicnumbers                 STATIC    
                           A  1212    ;match                                 IX-2    
                           A  1213    ;n                                     IX-1    
                           A  1214    ;filestart                             IX+6    
                           A  1215    
                           A  1216    
                           A  1217    ; Stack Frame Size: 11 (bytes)
                           A  1218    ;       Spill Code: 0 (instruction)
                           A  1219    
                           A  1220    
                           A  1221    .ENDFUNC "containsESP32Header",114,"_containsES
                           A  1222    ;  115	
                           A  1223    ;  116	void print_version(void) {
0B032F                     A  1224    _print_version:
                           A  1225    .DEFINE "_print_version"
                           A  1226    
                           A  1227    .VALUE _print_version
                           A  1228    
                           A  1229    .CLASS 2
                           A  1230    
                           A  1231    .TYPE 65
                           A  1232    
                           A  1233    .ENDEF
                           A  1234    
                           A  1235    .BEGFUNC "print_version",116,"_print_version"
                           A  1236    
0B032F DDE5                A  1237    	PUSH	IX
0B0331 DD210000 00         A  1238    	LD	IX,0
0B0336 DD39                A  1239    	ADD	IX,SP
                           A  1240    ;  117		printf("Agon firmware upgrade utili
                           A  1241    .LINE 117
                           A  1242    
0B0338 01 35 15 0B         A  1243    	LD	BC,___print_uputch
0B033C ED43 04 24 0B       A  1244    	LD	(___print_xputch),BC
0B0341 01 98 24 0B         A  1245    	LD	BC,L__16
0B0345 C5                  A  1246    	PUSH	BC
0B0346 CD C4 13 0B         A  1247    	CALL	___print_sendstring
0B034A C1                  A  1248    	POP	BC
                           A  1249    ;  118	}
                           A  1250    .LINE 118
                           A  1251    
0B034B DDF9                A  1252    	LD	SP,IX
0B034D DDE1                A  1253    	POP	IX
0B034F C9                  A  1254    	RET	
                           A  1255    
                           A  1256    
                           A  1257    ;**************************** _print_version **
                           A  1258    ;Name                         Addr/Register   S
                           A  1259    ;___print_sendstring                 IMPORT  --
                           A  1260    ;___print_xputch                     IMPORT    
                           A  1261    ;___print_uputch                     IMPORT  --
                           A  1262    
                           A  1263    
                           A  1264    ; Stack Frame Size: 6 (bytes)
                           A  1265    ;       Spill Code: 0 (instruction)
                           A  1266    
                           A  1267    
                           A  1268    .ENDFUNC "print_version",118,"_print_version"
                           A  1269    	SEGMENT STRSECT
0B2498                     A  1270    L__16:
0B2498 41676F6E 20666972   A  1271    	DB	"Agon firmware upgrade utility v1.6"
0B24A0 6D776172 65207570 
0B24A8 67726164 65207574 
0B24B0 696C6974 79207631 
0B24B8 2E36 
0B24BA 0A0D0A0D 00         A  1272    	DB	10,13,10,13,0
                           A  1273    	SEGMENT CODE
                           A  1274    ;  119	
                           A  1275    ;  120	void usage(void) {
0B0350                     A  1276    _usage:
                           A  1277    .DEFINE "_usage"
                           A  1278    
                           A  1279    .VALUE _usage
                           A  1280    
                           A  1281    .CLASS 2
                           A  1282    
                           A  1283    .TYPE 65
                           A  1284    
                           A  1285    .ENDEF
                           A  1286    
                           A  1287    .BEGFUNC "usage",120,"_usage"
                           A  1288    
0B0350 DDE5                A  1289    	PUSH	IX
0B0352 DD210000 00         A  1290    	LD	IX,0
0B0357 DD39                A  1291    	ADD	IX,SP
                           A  1292    ;  121		print_version();
                           A  1293    .LINE 121
                           A  1294    
0B0359 CD 2F 03 0B         A  1295    	CALL	_print_version
                           A  1296    ;  122		printf("Usage: FLASH [full | [mos <
                           A  1297    .LINE 122
                           A  1298    
0B035D 01 35 15 0B         A  1299    	LD	BC,___print_uputch
0B0361 ED43 04 24 0B       A  1300    	LD	(___print_xputch),BC
0B0366 01 BF 24 0B         A  1301    	LD	BC,L__18
0B036A C5                  A  1302    	PUSH	BC
0B036B CD C4 13 0B         A  1303    	CALL	___print_sendstring
0B036F C1                  A  1304    	POP	BC
                           A  1305    ;  123	}
                           A  1306    .LINE 123
                           A  1307    
0B0370 DDF9                A  1308    	LD	SP,IX
0B0372 DDE1                A  1309    	POP	IX
0B0374 C9                  A  1310    	RET	
                           A  1311    
                           A  1312    
                           A  1313    ;**************************** _usage **********
                           A  1314    ;Name                         Addr/Register   S
                           A  1315    ;___print_sendstring                 IMPORT  --
                           A  1316    ;___print_xputch                     IMPORT    
                           A  1317    ;___print_uputch                     IMPORT  --
                           A  1318    
                           A  1319    
                           A  1320    ; Stack Frame Size: 6 (bytes)
                           A  1321    ;       Spill Code: 0 (instruction)
                           A  1322    
                           A  1323    
                           A  1324    .ENDFUNC "usage",123,"_usage"
                           A  1325    	SEGMENT STRSECT
0B24BF                     A  1326    L__18:
0B24BF 55736167 653A2046   A  1327    	DB	"Usage: FLASH [full | [mos <filename>] 
0B24C7 4C415348 205B6675 
0B24CF 6C6C207C 205B6D6F 
0B24D7 73203C66 696C656E 
0B24DF 616D653E 5D205B76 
0B24E7 6470203C 66696C65 
0B24EF 6E616D65 3E5D5D20 
0B24F7 3C2D737C 2D73696C 
0B24FF 656E743E 
0B2503 0A0D00              A  1328    	DB	10,13,0
                           A  1329    	SEGMENT CODE
                           A  1330    ;  124	
                           A  1331    ;  125	typedef enum {
                           A  1332    ;  126		MOS,
                           A  1333    ;  127		VDP
                           A  1334    ;  128	} flashtype;
                           A  1335    ;  129	
                           A  1336    ;  130	bool getResponse(void) {
0B0375                     A  1337    _getResponse:
                           A  1338    .DEFINE "_getResponse"
                           A  1339    
                           A  1340    .VALUE _getResponse
                           A  1341    
                           A  1342    .CLASS 2
                           A  1343    
                           A  1344    .TYPE 76
                           A  1345    
                           A  1346    .ENDEF
                           A  1347    
                           A  1348    .BEGFUNC "getResponse",130,"_getResponse"
                           A  1349    
                           A  1350    .LINE 130
                           A  1351    
                           A  1352    .DEFINE "response"
                           A  1353    
                           A  1354    .CLASS 65
                           A  1355    
                           A  1356    .VALUE -1
                           A  1357    
                           A  1358    .TYPE 12
                           A  1359    
                           A  1360    .ENDEF
                           A  1361    
0B0375 DDE5                A  1362    	PUSH	IX
0B0377 DD210000 00         A  1363    	LD	IX,0
0B037C DD39                A  1364    	ADD	IX,SP
0B037E 3B                  A  1365    	DEC	SP
                           A  1366    ;  131		uint8_t response = 0;
                           A  1367    .LINE 131
                           A  1368    
0B037F DD36FF00            A  1369    	LD	(IX+%FFFFFFFF),%0
                           A  1370    ;  132	
                           A  1371    ;  133		printf("Flash firmware (y/n)?");
                           A  1372    .LINE 133
                           A  1373    
0B0383 01 35 15 0B         A  1374    	LD	BC,___print_uputch
0B0387 ED43 04 24 0B       A  1375    	LD	(___print_xputch),BC
0B038C 01 06 25 0B         A  1376    	LD	BC,L__20
0B0390 C5                  A  1377    	PUSH	BC
0B0391 CD C4 13 0B         A  1378    	CALL	___print_sendstring
0B0395 C1                  A  1379    	POP	BC
                           A  1380    ;  134		while((response != 'y') && (respons
                           A  1381    .LINE 134
                           A  1382    
0B0396 18 13               A  1383    	JR	L_34
0B0398                     A  1384    L_35:
0B0398 CD 5F 0E 0B         A  1385    	CALL	_getch
0B039C 47                  A  1386    	LD	B,A
0B039D 78                  A  1387    	LD	A,B
0B039E 17ED62              A  1388    	SEXT	HL
0B03A1 68                  A  1389    	LD	L,B
0B03A2 E5                  A  1390    	PUSH	HL
0B03A3 CD 7F 1C 0B         A  1391    	CALL	_tolower
0B03A7 C1                  A  1392    	POP	BC
0B03A8 DD75FF              A  1393    	LD	(IX+%FFFFFFFF),L
0B03AB                     A  1394    L_34:
0B03AB DD7EFF              A  1395    	LD	A,(IX+%FFFFFFFF)
0B03AE FE79                A  1396    	CP	A,%79
0B03B0 28 07               A  1397    	JR	Z,L_38
0B03B2 DD7EFF              A  1398    	LD	A,(IX+%FFFFFFFF)
0B03B5 FE6E                A  1399    	CP	A,%6E
0B03B7 20 DF               A  1400    	JR	NZ,L_35
0B03B9                     A  1401    L_38:
                           A  1402    ;  135		if(response == 'n') printf("\r\nUse
                           A  1403    .LINE 135
                           A  1404    
0B03B9 DD7EFF              A  1405    	LD	A,(IX+%FFFFFFFF)
0B03BC FE6E                A  1406    	CP	A,%6E
0B03BE 20 15               A  1407    	JR	NZ,L_37
0B03C0 01 35 15 0B         A  1408    	LD	BC,___print_uputch
0B03C4 ED43 04 24 0B       A  1409    	LD	(___print_xputch),BC
0B03C9 01 1C 25 0B         A  1410    	LD	BC,L__24
0B03CD C5                  A  1411    	PUSH	BC
0B03CE CD C4 13 0B         A  1412    	CALL	___print_sendstring
0B03D2 C1                  A  1413    	POP	BC
                           A  1414    ;  136		else printf("\r\n\r\n");
                           A  1415    .LINE 136
                           A  1416    
0B03D3 18 13               A  1417    	JR	L_39
0B03D5                     A  1418    L_37:
0B03D5 01 35 15 0B         A  1419    	LD	BC,___print_uputch
0B03D9 ED43 04 24 0B       A  1420    	LD	(___print_xputch),BC
0B03DE 01 2D 25 0B         A  1421    	LD	BC,L__25
0B03E2 C5                  A  1422    	PUSH	BC
0B03E3 CD C4 13 0B         A  1423    	CALL	___print_sendstring
0B03E7 C1                  A  1424    	POP	BC
0B03E8                     A  1425    L_39:
                           A  1426    ;  137		return response == 'y';
                           A  1427    .LINE 137
                           A  1428    
0B03E8 DD7EFF              A  1429    	LD	A,(IX+%FFFFFFFF)
0B03EB FE79                A  1430    	CP	A,%79
0B03ED 20 04               A  1431    	JR	NZ,L__27
0B03EF 3E01                A  1432    	LD	A,%1
0B03F1 18 01               A  1433    	JR	L__28
0B03F3                     A  1434    L__27:
0B03F3 AF                  A  1435    	XOR	A,A
0B03F4                     A  1436    L__28:
                           A  1437    ;  138	}
                           A  1438    .LINE 138
                           A  1439    
0B03F4 DDF9                A  1440    	LD	SP,IX
0B03F6 DDE1                A  1441    	POP	IX
0B03F8 C9                  A  1442    	RET	
                           A  1443    
                           A  1444    
                           A  1445    ;**************************** _getResponse ****
                           A  1446    ;Name                         Addr/Register   S
                           A  1447    ;_getch                              IMPORT  --
                           A  1448    ;_tolower                            IMPORT  --
                           A  1449    ;___print_sendstring                 IMPORT  --
                           A  1450    ;___print_xputch                     IMPORT    
                           A  1451    ;___print_uputch                     IMPORT  --
                           A  1452    ;response                              IX-1    
                           A  1453    
                           A  1454    
                           A  1455    ; Stack Frame Size: 7 (bytes)
                           A  1456    ;       Spill Code: 0 (instruction)
                           A  1457    
                           A  1458    
                           A  1459    .ENDFUNC "getResponse",138,"_getResponse"
                           A  1460    	SEGMENT STRSECT
0B2506                     A  1461    L__20:
0B2506 466C6173 68206669   A  1462    	DB	"Flash firmware (y/n)?"
0B250E 726D7761 72652028 
0B2516 792F6E29 3F 
0B251B 00                  A  1463    	DB	0
0B251C                     A  1464    L__24:
0B251C 0D0A                A  1465    	DB	13,10
0B251E 55736572 2061626F   A  1466    	DB	"User abort"
0B2526 7274 
0B2528 0A0D0A0D 00         A  1467    	DB	10,13,10,13,0
0B252D                     A  1468    L__25:
0B252D 0D0A0D0A 00         A  1469    	DB	13,10,13,10,0
                           A  1470    	SEGMENT CODE
                           A  1471    ;  139	
                           A  1472    ;  140	uint8_t update_vdp(char *filename) {
0B03F9                     A  1473    _update_vdp:
                           A  1474    .DEFINE "_update_vdp"
                           A  1475    
                           A  1476    .VALUE _update_vdp
                           A  1477    
                           A  1478    .CLASS 2
                           A  1479    
                           A  1480    .TYPE 76
                           A  1481    
                           A  1482    .ENDEF
                           A  1483    
                           A  1484    .BEGFUNC "update_vdp",140,"_update_vdp"
                           A  1485    
                           A  1486    .LINE 140
                           A  1487    
                           A  1488    .DEFINE "filename"
                           A  1489    
                           A  1490    .CLASS 65
                           A  1491    
                           A  1492    .VALUE 6
                           A  1493    
                           A  1494    .TYPE 34
                           A  1495    
                           A  1496    .ENDEF
                           A  1497    
                           A  1498    .DEFINE "file"
                           A  1499    
                           A  1500    .CLASS 65
                           A  1501    
                           A  1502    .VALUE -1
                           A  1503    
                           A  1504    .TYPE 12
                           A  1505    
                           A  1506    .ENDEF
                           A  1507    
                           A  1508    .DEFINE "filesize"
                           A  1509    
                           A  1510    .CLASS 65
                           A  1511    
                           A  1512    .VALUE -4
                           A  1513    
                           A  1514    .TYPE 14
                           A  1515    
                           A  1516    .ENDEF
                           A  1517    
0B03F9 DDE5                A  1518    	PUSH	IX
0B03FB DD210000 00         A  1519    	LD	IX,0
0B0400 DD39                A  1520    	ADD	IX,SP
0B0402 C5                  A  1521    	PUSH	BC
0B0403 3B                  A  1522    	DEC	SP
                           A  1523    ;  141		uint8_t file;
                           A  1524    ;  142		uint24_t filesize;
                           A  1525    ;  143		uint24_t size, n;
                           A  1526    ;  144	
                           A  1527    ;  145		putch(12); // cls
                           A  1528    .LINE 145
                           A  1529    
0B0404 010C0000            A  1530    	LD	BC,12
0B0408 C5                  A  1531    	PUSH	BC
0B0409 CD E5 00 0B         A  1532    	CALL	_putch
0B040D C1                  A  1533    	POP	BC
                           A  1534    ;  146		print_version();	
                           A  1535    .LINE 146
                           A  1536    
0B040E CD 2F 03 0B         A  1537    	CALL	_print_version
                           A  1538    ;  147		printf("Unlocking VDP updater...\r\
                           A  1539    .LINE 147
                           A  1540    
0B0412 01 35 15 0B         A  1541    	LD	BC,___print_uputch
0B0416 ED43 04 24 0B       A  1542    	LD	(___print_xputch),BC
0B041B 01 32 25 0B         A  1543    	LD	BC,L__30
0B041F C5                  A  1544    	PUSH	BC
0B0420 CD C4 13 0B         A  1545    	CALL	___print_sendstring
0B0424 C1                  A  1546    	POP	BC
                           A  1547    ;  148		
                           A  1548    ;  149		if(!vdp_ota_present()) {
                           A  1549    .LINE 149
                           A  1550    
0B0425 CD E3 01 0B         A  1551    	CALL	_vdp_ota_present
0B0429 B7                  A  1552    	OR	A,A
0B042A 20 20               A  1553    	JR	NZ,L_42
                           A  1554    ;  150			printf(" failed - incompatible 
                           A  1555    .LINE 150
                           A  1556    
0B042C 01 35 15 0B         A  1557    	LD	BC,___print_uputch
0B0430 ED43 04 24 0B       A  1558    	LD	(___print_xputch),BC
0B0435 01 4D 25 0B         A  1559    	LD	BC,L__32
0B0439 C5                  A  1560    	PUSH	BC
0B043A CD C4 13 0B         A  1561    	CALL	___print_sendstring
0B043E C1                  A  1562    	POP	BC
                           A  1563    ;  151			beep(5);
                           A  1564    .LINE 151
                           A  1565    
0B043F 01050000            A  1566    	LD	BC,5
0B0443 C5                  A  1567    	PUSH	BC
0B0444 CD 0B 01 0B         A  1568    	CALL	_beep
0B0448 C1                  A  1569    	POP	BC
                           A  1570    ;  152			return 0;
                           A  1571    .LINE 152
                           A  1572    
0B0449 AF                  A  1573    	XOR	A,A
0B044A 18 4E               A  1574    	JR	L_43
                           A  1575    ;  153		}
0B044C                     A  1576    L_42:
                           A  1577    .LINE 153
                           A  1578    
                           A  1579    ;  154	
                           A  1580    ;  155		file = mos_fopen(filename, fa_read)
                           A  1581    .LINE 155
                           A  1582    
0B044C 01010000            A  1583    	LD	BC,1
0B0450 C5                  A  1584    	PUSH	BC
0B0451 DD0706              A  1585    	LD	BC,(IX+%6)
0B0454 C5                  A  1586    	PUSH	BC
0B0455 CD B5 0E 0B         A  1587    	CALL	_mos_fopen
0B0459 C1                  A  1588    	POP	BC
0B045A C1                  A  1589    	POP	BC
0B045B DD77FF              A  1590    	LD	(IX+%FFFFFFFF),A
                           A  1591    ;  156		// Do actual work here
                           A  1592    ;  157		printf("Updating VDP firmware\r\n")
                           A  1593    .LINE 157
                           A  1594    
0B045E 01 35 15 0B         A  1595    	LD	BC,___print_uputch
0B0462 ED43 04 24 0B       A  1596    	LD	(___print_xputch),BC
0B0467 01 6A 25 0B         A  1597    	LD	BC,L__33
0B046B C5                  A  1598    	PUSH	BC
0B046C CD C4 13 0B         A  1599    	CALL	___print_sendstring
0B0470 C1                  A  1600    	POP	BC
                           A  1601    ;  158		filesize = getFileSize(file);	
                           A  1602    .LINE 158
                           A  1603    
0B0471 DD4EFF              A  1604    	LD	C,(IX+%FFFFFFFF)
0B0474 0600                A  1605    	LD	B,%0
0B0476 C5                  A  1606    	PUSH	BC
0B0477 CD F9 12 0B         A  1607    	CALL	_getFileSize
0B047B C1                  A  1608    	POP	BC
0B047C DD2FFC              A  1609    	LD	(IX+%FFFFFFFC),HL
                           A  1610    ;  159		startVDPupdate(file, filesize);
                           A  1611    .LINE 159
                           A  1612    
0B047F E5C1                A  1613    	LD	BC,HL
0B0481 C5                  A  1614    	PUSH	BC
0B0482 DD4EFF              A  1615    	LD	C,(IX+%FFFFFFFF)
0B0485 0600                A  1616    	LD	B,%0
0B0487 C5                  A  1617    	PUSH	BC
0B0488 CD DC 0F 0B         A  1618    	CALL	_startVDPupdate
0B048C C1                  A  1619    	POP	BC
0B048D C1                  A  1620    	POP	BC
                           A  1621    ;  160		mos_fclose(file);
                           A  1622    .LINE 160
                           A  1623    
0B048E DD4EFF              A  1624    	LD	C,(IX+%FFFFFFFF)
0B0491 0600                A  1625    	LD	B,%0
0B0493 C5                  A  1626    	PUSH	BC
0B0494 CD CD 0E 0B         A  1627    	CALL	_mos_fclose
0B0498 C1                  A  1628    	POP	BC
                           A  1629    ;  161		return 0;
                           A  1630    .LINE 161
                           A  1631    
0B0499 AF                  A  1632    	XOR	A,A
                           A  1633    ;  162	}
0B049A                     A  1634    L_43:
                           A  1635    .LINE 162
                           A  1636    
0B049A DDF9                A  1637    	LD	SP,IX
0B049C DDE1                A  1638    	POP	IX
0B049E C9                  A  1639    	RET	
                           A  1640    
                           A  1641    
                           A  1642    ;**************************** _update_vdp *****
                           A  1643    ;Name                         Addr/Register   S
                           A  1644    ;_mos_fclose                         IMPORT  --
                           A  1645    ;_startVDPupdate                     IMPORT  --
                           A  1646    ;_getFileSize                        IMPORT  --
                           A  1647    ;_mos_fopen                          IMPORT  --
                           A  1648    ;___print_sendstring                 IMPORT  --
                           A  1649    ;___print_xputch                     IMPORT    
                           A  1650    ;___print_uputch                     IMPORT  --
                           A  1651    ;_putch                              IMPORT  --
                           A  1652    ;filesize                              IX-4    
                           A  1653    ;file                                  IX-1    
                           A  1654    ;filename                              IX+6    
                           A  1655    
                           A  1656    
                           A  1657    ; Stack Frame Size: 13 (bytes)
                           A  1658    ;       Spill Code: 0 (instruction)
                           A  1659    
                           A  1660    
                           A  1661    .ENDFUNC "update_vdp",162,"_update_vdp"
                           A  1662    	SEGMENT STRSECT
0B2532                     A  1663    L__30:
0B2532 556E6C6F 636B696E   A  1664    	DB	"Unlocking VDP updater..."
0B253A 67205644 50207570 
0B2542 64617465 722E2E2E 
0B254A 0D0A00              A  1665    	DB	13,10,0
0B254D                     A  1666    L__32:
0B254D 20666169 6C656420   A  1667    	DB	" failed - incompatible VDP"
0B2555 2D20696E 636F6D70 
0B255D 61746962 6C652056 
0B2565 4450 
0B2567 0D0A00              A  1668    	DB	13,10,0
0B256A                     A  1669    L__33:
0B256A 55706461 74696E67   A  1670    	DB	"Updating VDP firmware"
0B2572 20564450 20666972 
0B257A 6D776172 65 
0B257F 0D0A00              A  1671    	DB	13,10,0
                           A  1672    	SEGMENT CODE
                           A  1673    ;  163	
                           A  1674    ;  164	uint8_t update_mos(char *filename) {
0B049F                     A  1675    _update_mos:
                           A  1676    .DEFINE "_update_mos"
                           A  1677    
                           A  1678    .VALUE _update_mos
                           A  1679    
                           A  1680    .CLASS 2
                           A  1681    
                           A  1682    .TYPE 76
                           A  1683    
                           A  1684    .ENDEF
                           A  1685    
                           A  1686    .BEGFUNC "update_mos",164,"_update_mos"
                           A  1687    
                           A  1688    .LINE 164
                           A  1689    
                           A  1690    .DEFINE "filename"
                           A  1691    
                           A  1692    .CLASS 65
                           A  1693    
                           A  1694    .VALUE 6
                           A  1695    
                           A  1696    .TYPE 34
                           A  1697    
                           A  1698    .ENDEF
                           A  1699    
                           A  1700    .DEFINE "counter"
                           A  1701    
                           A  1702    .CLASS 65
                           A  1703    
                           A  1704    .VALUE -3
                           A  1705    
                           A  1706    .TYPE 14
                           A  1707    
                           A  1708    .ENDEF
                           A  1709    
                           A  1710    .DEFINE "pagemax"
                           A  1711    
                           A  1712    .CLASS 65
                           A  1713    
                           A  1714    .VALUE -6
                           A  1715    
                           A  1716    .TYPE 14
                           A  1717    
                           A  1718    .ENDEF
                           A  1719    
                           A  1720    .DEFINE "file"
                           A  1721    
                           A  1722    .CLASS 65
                           A  1723    
                           A  1724    .VALUE -7
                           A  1725    
                           A  1726    .TYPE 12
                           A  1727    
                           A  1728    .ENDEF
                           A  1729    
                           A  1730    .DEFINE "ptr"
                           A  1731    
                           A  1732    .CLASS 65
                           A  1733    
                           A  1734    .VALUE -10
                           A  1735    
                           A  1736    .TYPE 34
                           A  1737    
                           A  1738    .ENDEF
                           A  1739    
                           A  1740    .DEFINE "addressto"
                           A  1741    
                           A  1742    .CLASS 65
                           A  1743    
                           A  1744    .VALUE -13
                           A  1745    
                           A  1746    .TYPE 14
                           A  1747    
                           A  1748    .ENDEF
                           A  1749    
                           A  1750    .DEFINE "addressfrom"
                           A  1751    
                           A  1752    .CLASS 65
                           A  1753    
                           A  1754    .VALUE -16
                           A  1755    
                           A  1756    .TYPE 14
                           A  1757    
                           A  1758    .ENDEF
                           A  1759    
                           A  1760    .DEFINE "got"
                           A  1761    
                           A  1762    .CLASS 65
                           A  1763    
                           A  1764    .VALUE -19
                           A  1765    
                           A  1766    .TYPE 14
                           A  1767    
                           A  1768    .ENDEF
                           A  1769    
                           A  1770    .DEFINE "value"
                           A  1771    
                           A  1772    .CLASS 65
                           A  1773    
                           A  1774    .VALUE -20
                           A  1775    
                           A  1776    .TYPE 12
                           A  1777    
                           A  1778    .ENDEF
                           A  1779    
                           A  1780    .DEFINE "lastpagebytes"
                           A  1781    
                           A  1782    .CLASS 65
                           A  1783    
                           A  1784    .VALUE -23
                           A  1785    
                           A  1786    .TYPE 14
                           A  1787    
                           A  1788    .ENDEF
                           A  1789    
                           A  1790    .DEFINE "filesize"
                           A  1791    
                           A  1792    .CLASS 65
                           A  1793    
                           A  1794    .VALUE -26
                           A  1795    
                           A  1796    .TYPE 14
                           A  1797    
                           A  1798    .ENDEF
                           A  1799    
0B049F DDE5                A  1800    	PUSH	IX
0B04A1 DD210000 00         A  1801    	LD	IX,0
0B04A6 DD39                A  1802    	ADD	IX,SP
0B04A8 ED22E3              A  1803    	LEA	HL,IX+%FFFFFFE3
0B04AB F9                  A  1804    	LD	SP,HL
                           A  1805    ;  165		uint24_t got;
                           A  1806    ;  166		uint8_t file;
                           A  1807    ;  167		char* ptr = (char*)BUFFER1;
                           A  1808    .LINE 167
                           A  1809    
0B04AC 01000005            A  1810    	LD	BC,327680
0B04B0 DD0FF6              A  1811    	LD	(IX+%FFFFFFF6),BC
                           A  1812    ;  168		uint8_t value;
                           A  1813    ;  169		uint24_t counter,pagemax, lastpageb
                           A  1814    ;  170		uint24_t addressto,addressfrom;
                           A  1815    ;  171		uint24_t filesize;
                           A  1816    ;  172	
                           A  1817    ;  173		putch(12); // cls
                           A  1818    .LINE 173
                           A  1819    
0B04B3 010C0000            A  1820    	LD	BC,12
0B04B7 C5                  A  1821    	PUSH	BC
0B04B8 CD E5 00 0B         A  1822    	CALL	_putch
0B04BC C1                  A  1823    	POP	BC
                           A  1824    ;  174		print_version();	
                           A  1825    .LINE 174
                           A  1826    
0B04BD CD 2F 03 0B         A  1827    	CALL	_print_version
                           A  1828    ;  175		
                           A  1829    ;  176		printf("\r\nReading MOS firmware");
                           A  1830    .LINE 176
                           A  1831    
0B04C1 01 35 15 0B         A  1832    	LD	BC,___print_uputch
0B04C5 ED43 04 24 0B       A  1833    	LD	(___print_xputch),BC
0B04CA 01 82 25 0B         A  1834    	LD	BC,L__35
0B04CE C5                  A  1835    	PUSH	BC
0B04CF CD C4 13 0B         A  1836    	CALL	___print_sendstring
0B04D3 C1                  A  1837    	POP	BC
                           A  1838    ;  177		file = mos_fopen(filename, fa_read)
                           A  1839    .LINE 177
                           A  1840    
0B04D4 01010000            A  1841    	LD	BC,1
0B04D8 C5                  A  1842    	PUSH	BC
0B04D9 DD0706              A  1843    	LD	BC,(IX+%6)
0B04DC C5                  A  1844    	PUSH	BC
0B04DD CD B5 0E 0B         A  1845    	CALL	_mos_fopen
0B04E1 C1                  A  1846    	POP	BC
0B04E2 C1                  A  1847    	POP	BC
0B04E3 DD77F9              A  1848    	LD	(IX+%FFFFFFF9),A
                           A  1849    ;  178		filesize = getFileSize(file);
                           A  1850    .LINE 178
                           A  1851    
0B04E6 DD4EF9              A  1852    	LD	C,(IX+%FFFFFFF9)
0B04E9 0600                A  1853    	LD	B,%0
0B04EB C5                  A  1854    	PUSH	BC
0B04EC CD F9 12 0B         A  1855    	CALL	_getFileSize
0B04F0 C1                  A  1856    	POP	BC
0B04F1 DD2FE6              A  1857    	LD	(IX+%FFFFFFE6),HL
                           A  1858    ;  179		// Read file to memory
                           A  1859    ;  180		while((got = mos_fread(file, ptr, B
                           A  1860    .LINE 180
                           A  1861    
0B04F4 18 22               A  1862    	JR	L_44
0B04F6                     A  1863    L_45:
                           A  1864    ;  181			crc32(ptr, got);
                           A  1865    .LINE 181
                           A  1866    
0B04F6 DD07ED              A  1867    	LD	BC,(IX+%FFFFFFED)
0B04F9 C5                  A  1868    	PUSH	BC
0B04FA DD07F6              A  1869    	LD	BC,(IX+%FFFFFFF6)
0B04FD C5                  A  1870    	PUSH	BC
0B04FE CD 99 12 0B         A  1871    	CALL	_crc32
0B0502 C1                  A  1872    	POP	BC
0B0503 C1                  A  1873    	POP	BC
                           A  1874    ;  182			ptr += got;
                           A  1875    .LINE 182
                           A  1876    
0B0504 DD07ED              A  1877    	LD	BC,(IX+%FFFFFFED)
0B0507 DD27F6              A  1878    	LD	HL,(IX+%FFFFFFF6)
0B050A 09                  A  1879    	ADD	HL,BC
0B050B DD2FF6              A  1880    	LD	(IX+%FFFFFFF6),HL
                           A  1881    ;  183			putch('.');
                           A  1882    .LINE 183
                           A  1883    
0B050E 012E0000            A  1884    	LD	BC,46
0B0512 C5                  A  1885    	PUSH	BC
0B0513 CD E5 00 0B         A  1886    	CALL	_putch
0B0517 C1                  A  1887    	POP	BC
                           A  1888    ;  184		}	
0B0518                     A  1889    L_44:
                           A  1890    .LINE 184
                           A  1891    
0B0518 01004000            A  1892    	LD	BC,16384
0B051C C5                  A  1893    	PUSH	BC
0B051D DD07F6              A  1894    	LD	BC,(IX+%FFFFFFF6)
0B0520 C5                  A  1895    	PUSH	BC
0B0521 DD4EF9              A  1896    	LD	C,(IX+%FFFFFFF9)
0B0524 0600                A  1897    	LD	B,%0
0B0526 C5                  A  1898    	PUSH	BC
0B0527 CD F7 0E 0B         A  1899    	CALL	_mos_fread
0B052B C1                  A  1900    	POP	BC
0B052C C1                  A  1901    	POP	BC
0B052D C1                  A  1902    	POP	BC
0B052E DD2FED              A  1903    	LD	(IX+%FFFFFFED),HL
0B0531 E5C1                A  1904    	LD	BC,HL
0B0533 B7                  A  1905    	OR	A,A
0B0534 ED62                A  1906    	SBC	HL,HL
0B0536 B7                  A  1907    	OR	A,A
0B0537 ED42                A  1908    	SBC	HL,BC
0B0539 38 BB               A  1909    	JR	C,L_45
                           A  1910    ;  185		printf("\r\n");	
                           A  1911    .LINE 185
                           A  1912    
0B053B 01 35 15 0B         A  1913    	LD	BC,___print_uputch
0B053F ED43 04 24 0B       A  1914    	LD	(___print_xputch),BC
0B0544 01 99 25 0B         A  1915    	LD	BC,L__37
0B0548 C5                  A  1916    	PUSH	BC
0B0549 CD C4 13 0B         A  1917    	CALL	___print_sendstring
0B054D C1                  A  1918    	POP	BC
                           A  1919    ;  186		// Actual work here	
                           A  1920    ;  187		di();								
                           A  1921    .LINE 187
                           A  1922    
0B054E F3                  A  1923    	di
                           A  1924    ;  188	
                           A  1925    ;  189		// start address in flash
                           A  1926    ;  190		addressto = FLASHSTART;
                           A  1927    .LINE 190
                           A  1928    
0B054F 01000000            A  1929    	LD	BC,0
0B0553 DD0FF3              A  1930    	LD	(IX+%FFFFFFF3),BC
                           A  1931    ;  191		addressfrom = BUFFER1;
                           A  1932    .LINE 191
                           A  1933    
0B0556 01000005            A  1934    	LD	BC,327680
0B055A DD0FF0              A  1935    	LD	(IX+%FFFFFFF0),BC
                           A  1936    ;  192	
                           A  1937    ;  193		// Unprotect and erase flash
                           A  1938    ;  194		printf("Erasing flash... ");
                           A  1939    .LINE 194
                           A  1940    
0B055D 01 35 15 0B         A  1941    	LD	BC,___print_uputch
0B0561 ED43 04 24 0B       A  1942    	LD	(___print_xputch),BC
0B0566 01 9C 25 0B         A  1943    	LD	BC,L__38
0B056A C5                  A  1944    	PUSH	BC
0B056B CD C4 13 0B         A  1945    	CALL	___print_sendstring
0B056F C1                  A  1946    	POP	BC
                           A  1947    ;  195		enableFlashKeyRegister();	// unlo
                           A  1948    .LINE 195
                           A  1949    
0B0570 CD 90 0F 0B         A  1950    	CALL	_enableFlashKeyRegister
                           A  1951    ;  196		FLASH_PROT = 0;				// disa
                           A  1952    .LINE 196
                           A  1953    
0B0574 AF                  A  1954    	XOR	A,A
0B0575 ED39FA              A  1955    	OUT0	(250),A
                           A  1956    ;  197		enableFlashKeyRegister();	// will
                           A  1957    .LINE 197
                           A  1958    
0B0578 CD 90 0F 0B         A  1959    	CALL	_enableFlashKeyRegister
                           A  1960    ;  198		FLASH_FDIV = 0x5F;			// Ceil
                           A  1961    .LINE 198
                           A  1962    
0B057C 3E5F                A  1963    	LD	A,%5F
0B057E ED39F9              A  1964    	OUT0	(249),A
                           A  1965    ;  199		
                           A  1966    ;  200		for(counter = 0; counter < FLASHPAG
                           A  1967    .LINE 200
                           A  1968    
0B0581 01000000            A  1969    	LD	BC,0
0B0585 DD0FFD              A  1970    	LD	(IX+%FFFFFFFD),BC
0B0588 18 1C               A  1971    	JR	L_52
0B058A                     A  1972    L_50:
                           A  1973    ;  201		{
                           A  1974    ;  202			FLASH_PAGE = counter;
                           A  1975    .LINE 202
                           A  1976    
0B058A DD7EFD              A  1977    	LD	A,(IX+%FFFFFFFD)
0B058D ED39FC              A  1978    	OUT0	(252),A
                           A  1979    ;  203			FLASH_PGCTL = 0x02;			// 
                           A  1980    .LINE 203
                           A  1981    
0B0590 3E02                A  1982    	LD	A,%2
0B0592 ED39FF              A  1983    	OUT0	(255),A
                           A  1984    ;  204	
                           A  1985    ;  205			do
0B0595                     A  1986    L_48:
                           A  1987    .LINE 205
                           A  1988    
                           A  1989    ;  206			{
                           A  1990    ;  207				value = FLASH_PGCTL;
                           A  1991    .LINE 207
                           A  1992    
0B0595 ED38FF              A  1993    	IN0	A,(255)
0B0598 DD77EC              A  1994    	LD	(IX+%FFFFFFEC),A
                           A  1995    ;  208			}
                           A  1996    ;  209			while(value & 0x02);// wait for
                           A  1997    .LINE 209
                           A  1998    
0B059B E602                A  1999    	AND	A,%2
0B059D 20 F6               A  2000    	JR	NZ,L_48
0B059F DD07FD              A  2001    	LD	BC,(IX+%FFFFFFFD)
0B05A2 03                  A  2002    	INC	BC
0B05A3 DD0FFD              A  2003    	LD	(IX+%FFFFFFFD),BC
                           A  2004    ;  210		}
0B05A6                     A  2005    L_52:
                           A  2006    .LINE 210
                           A  2007    
0B05A6 01800000            A  2008    	LD	BC,128
0B05AA DD27FD              A  2009    	LD	HL,(IX+%FFFFFFFD)
0B05AD B7                  A  2010    	OR	A,A
0B05AE ED42                A  2011    	SBC	HL,BC
0B05B0 38 D8               A  2012    	JR	C,L_50
                           A  2013    ;  211		
                           A  2014    ;  212		printf("\r\nWriting new firmware...
                           A  2015    .LINE 212
                           A  2016    
0B05B2 01 35 15 0B         A  2017    	LD	BC,___print_uputch
0B05B6 ED43 04 24 0B       A  2018    	LD	(___print_xputch),BC
0B05BB 01 AE 25 0B         A  2019    	LD	BC,L__41
0B05BF C5                  A  2020    	PUSH	BC
0B05C0 CD C4 13 0B         A  2021    	CALL	___print_sendstring
0B05C4 C1                  A  2022    	POP	BC
                           A  2023    ;  213		
                           A  2024    ;  214		// determine number of pages to wri
                           A  2025    ;  215		pagemax = filesize/PAGESIZE;
                           A  2026    .LINE 215
                           A  2027    
0B05C5 DD27E6              A  2028    	LD	HL,(IX+%FFFFFFE6)
0B05C8 3E0A                A  2029    	LD	A,%A
0B05CA CD A8 1B 0B         A  2030    	CALL	__ishru_b
0B05CE DD2FFA              A  2031    	LD	(IX+%FFFFFFFA),HL
                           A  2032    ;  216		if(filesize%PAGESIZE) // last page 
                           A  2033    .LINE 216
                           A  2034    
0B05D1 01FF0300            A  2035    	LD	BC,1023
0B05D5 DD27E6              A  2036    	LD	HL,(IX+%FFFFFFE6)
0B05D8 CD 54 1C 0B         A  2037    	CALL	__iand
0B05DC DD2FE3              A  2038    	LD	(IX+%FFFFFFE3),HL
0B05DF CD F2 18 0B         A  2039    	CALL	__icmpzero
0B05E3 28 0F               A  2040    	JR	Z,L_55
                           A  2041    ;  217		{
                           A  2042    ;  218			pagemax += 1;
                           A  2043    .LINE 218
                           A  2044    
0B05E5 DD07FA              A  2045    	LD	BC,(IX+%FFFFFFFA)
0B05E8 03                  A  2046    	INC	BC
0B05E9 DD0FFA              A  2047    	LD	(IX+%FFFFFFFA),BC
                           A  2048    ;  219			lastpagebytes = filesize%PAGESI
                           A  2049    .LINE 219
                           A  2050    
0B05EC DD07E3              A  2051    	LD	BC,(IX+%FFFFFFE3)
0B05EF DD0FE9              A  2052    	LD	(IX+%FFFFFFE9),BC
                           A  2053    ;  220		}
                           A  2054    ;  221		else lastpagebytes = PAGESIZE; // n
                           A  2055    .LINE 221
                           A  2056    
0B05F2 18 07               A  2057    	JR	L_63
0B05F4                     A  2058    L_55:
0B05F4 01000400            A  2059    	LD	BC,1024
0B05F8 DD0FE9              A  2060    	LD	(IX+%FFFFFFE9),BC
0B05FB                     A  2061    L_63:
                           A  2062    ;  222		
                           A  2063    ;  223		// write out each page to flash
                           A  2064    ;  224		for(counter = 0; counter < pagemax;
                           A  2065    .LINE 224
                           A  2066    
0B05FB 01000000            A  2067    	LD	BC,0
0B05FF DD0FFD              A  2068    	LD	(IX+%FFFFFFFD),BC
0B0602 C3 AE 06 0B         A  2069    	JR	L_62
0B0606                     A  2070    L_60:
                           A  2071    ;  225		{
                           A  2072    ;  226			printf("\rWriting flash page %0
                           A  2073    .LINE 226
                           A  2074    
0B0606 01 35 15 0B         A  2075    	LD	BC,___print_uputch
0B060A ED43 04 24 0B       A  2076    	LD	(___print_xputch),BC
0B060F 01 CA 25 0B         A  2077    	LD	BC,L__43
0B0613 C5                  A  2078    	PUSH	BC
0B0614 CD C4 13 0B         A  2079    	CALL	___print_sendstring
0B0618 C1                  A  2080    	POP	BC
0B0619 3E03                A  2081    	LD	A,%3
0B061B 32 5B 29 0B         A  2082    	LD	(___print_fmt+5),A
0B061F 3E40                A  2083    	LD	A,%40
0B0621 32 57 29 0B         A  2084    	LD	(___print_fmt+1),A
0B0625 DD07FD              A  2085    	LD	BC,(IX+%FFFFFFFD)
0B0628 03                  A  2086    	INC	BC
0B0629 AF                  A  2087    	XOR	A,A
0B062A C5D1                A  2088    	LD	DE,BC
0B062C 4F                  A  2089    	LD	C,A
0B062D 0600                A  2090    	LD	B,%0
0B062F C5                  A  2091    	PUSH	BC
0B0630 D5                  A  2092    	PUSH	DE
0B0631 CD BB 15 0B         A  2093    	CALL	__u_itoa
0B0635 C1                  A  2094    	POP	BC
0B0636 C1                  A  2095    	POP	BC
0B0637 012F0000            A  2096    	LD	BC,47
0B063B C5                  A  2097    	PUSH	BC
0B063C CD 35 15 0B         A  2098    	CALL	___print_uputch
0B0640 C1                  A  2099    	POP	BC
0B0641 3E03                A  2100    	LD	A,%3
0B0643 32 5B 29 0B         A  2101    	LD	(___print_fmt+5),A
0B0647 3E40                A  2102    	LD	A,%40
0B0649 32 57 29 0B         A  2103    	LD	(___print_fmt+1),A
0B064D DD07FA              A  2104    	LD	BC,(IX+%FFFFFFFA)
0B0650 AF                  A  2105    	XOR	A,A
0B0651 C5D1                A  2106    	LD	DE,BC
0B0653 4F                  A  2107    	LD	C,A
0B0654 0600                A  2108    	LD	B,%0
0B0656 C5                  A  2109    	PUSH	BC
0B0657 D5                  A  2110    	PUSH	DE
0B0658 CD BB 15 0B         A  2111    	CALL	__u_itoa
0B065C C1                  A  2112    	POP	BC
0B065D C1                  A  2113    	POP	BC
                           A  2114    ;  227			
                           A  2115    ;  228			if(counter == (pagemax - 1)) //
                           A  2116    .LINE 228
                           A  2117    
0B065E DD31FA              A  2118    	LD	IY,(IX+%FFFFFFFA)
0B0661 ED23FF              A  2119    	LEA	HL,IY+%FFFFFFFF
0B0664 DD07FD              A  2120    	LD	BC,(IX+%FFFFFFFD)
0B0667 B7                  A  2121    	OR	A,A
0B0668 ED42                A  2122    	SBC	HL,BC
0B066A 20 15               A  2123    	JR	NZ,L_58
                           A  2124    ;  229				fastmemcpy(addressto,addres
                           A  2125    .LINE 229
                           A  2126    
0B066C DD07E9              A  2127    	LD	BC,(IX+%FFFFFFE9)
0B066F C5                  A  2128    	PUSH	BC
0B0670 DD07F0              A  2129    	LD	BC,(IX+%FFFFFFF0)
0B0673 C5                  A  2130    	PUSH	BC
0B0674 DD07F3              A  2131    	LD	BC,(IX+%FFFFFFF3)
0B0677 C5                  A  2132    	PUSH	BC
0B0678 CD BD 0F 0B         A  2133    	CALL	_fastmemcpy
0B067C C1                  A  2134    	POP	BC
0B067D C1                  A  2135    	POP	BC
0B067E C1                  A  2136    	POP	BC
                           A  2137    ;  230				//printf("Fake copy to %lx,
                           A  2138    ;  231			else 
                           A  2139    .LINE 231
                           A  2140    
0B067F 18 14               A  2141    	JR	L_59
0B0681                     A  2142    L_58:
                           A  2143    ;  232				fastmemcpy(addressto,addres
                           A  2144    .LINE 232
                           A  2145    
0B0681 01000400            A  2146    	LD	BC,1024
0B0685 C5                  A  2147    	PUSH	BC
0B0686 DD07F0              A  2148    	LD	BC,(IX+%FFFFFFF0)
0B0689 C5                  A  2149    	PUSH	BC
0B068A DD07F3              A  2150    	LD	BC,(IX+%FFFFFFF3)
0B068D C5                  A  2151    	PUSH	BC
0B068E CD BD 0F 0B         A  2152    	CALL	_fastmemcpy
0B0692 C1                  A  2153    	POP	BC
0B0693 C1                  A  2154    	POP	BC
0B0694 C1                  A  2155    	POP	BC
0B0695                     A  2156    L_59:
                           A  2157    ;  233				//printf("Fake copy to %lx,
                           A  2158    ;  234		
                           A  2159    ;  235			addressto += PAGESIZE;
                           A  2160    .LINE 235
                           A  2161    
0B0695 01000400            A  2162    	LD	BC,1024
0B0699 DD27F3              A  2163    	LD	HL,(IX+%FFFFFFF3)
0B069C 09                  A  2164    	ADD	HL,BC
0B069D DD2FF3              A  2165    	LD	(IX+%FFFFFFF3),HL
                           A  2166    ;  236			addressfrom += PAGESIZE;
                           A  2167    .LINE 236
                           A  2168    
0B06A0 DD27F0              A  2169    	LD	HL,(IX+%FFFFFFF0)
0B06A3 09                  A  2170    	ADD	HL,BC
0B06A4 DD2FF0              A  2171    	LD	(IX+%FFFFFFF0),HL
0B06A7 DD07FD              A  2172    	LD	BC,(IX+%FFFFFFFD)
0B06AA 03                  A  2173    	INC	BC
0B06AB DD0FFD              A  2174    	LD	(IX+%FFFFFFFD),BC
                           A  2175    ;  237		}
0B06AE                     A  2176    L_62:
                           A  2177    .LINE 237
                           A  2178    
0B06AE DD07FA              A  2179    	LD	BC,(IX+%FFFFFFFA)
0B06B1 DD27FD              A  2180    	LD	HL,(IX+%FFFFFFFD)
0B06B4 B7                  A  2181    	OR	A,A
0B06B5 ED42                A  2182    	SBC	HL,BC
0B06B7 DA 06 06 0B         A  2183    	JR	C,L_60
                           A  2184    ;  238		lockFlashKeyRegister();	// lock the
                           A  2185    .LINE 238
                           A  2186    
0B06BB CD A8 0F 0B         A  2187    	CALL	_lockFlashKeyRegister
                           A  2188    ;  239		printf("\r\n\r\nDone\r\n");
                           A  2189    .LINE 239
                           A  2190    
0B06BF 01 35 15 0B         A  2191    	LD	BC,___print_uputch
0B06C3 ED43 04 24 0B       A  2192    	LD	(___print_xputch),BC
0B06C8 01 DF 25 0B         A  2193    	LD	BC,L__46
0B06CC C5                  A  2194    	PUSH	BC
0B06CD CD C4 13 0B         A  2195    	CALL	___print_sendstring
0B06D1 C1                  A  2196    	POP	BC
                           A  2197    ;  240		return 0;
                           A  2198    .LINE 240
                           A  2199    
0B06D2 AF                  A  2200    	XOR	A,A
                           A  2201    ;  241	}
                           A  2202    .LINE 241
                           A  2203    
0B06D3 DDF9                A  2204    	LD	SP,IX
0B06D5 DDE1                A  2205    	POP	IX
0B06D7 C9                  A  2206    	RET	
                           A  2207    
                           A  2208    
                           A  2209    ;**************************** _update_mos *****
                           A  2210    ;Name                         Addr/Register   S
                           A  2211    ;_lockFlashKeyRegister               IMPORT  --
                           A  2212    ;_fastmemcpy                         IMPORT  --
                           A  2213    ;__u_itoa                            IMPORT  --
                           A  2214    ;___print_fmt                        IMPORT    
                           A  2215    ;_enableFlashKeyRegister             IMPORT  --
                           A  2216    ;_mos_fread                          IMPORT  --
                           A  2217    ;_crc32                              IMPORT  --
                           A  2218    ;_getFileSize                        IMPORT  --
                           A  2219    ;_mos_fopen                          IMPORT  --
                           A  2220    ;___print_sendstring                 IMPORT  --
                           A  2221    ;___print_xputch                     IMPORT    
                           A  2222    ;___print_uputch                     IMPORT  --
                           A  2223    ;_putch                              IMPORT  --
                           A  2224    ;G_0                                  IX-29    
                           A  2225    ;filesize                             IX-26    
                           A  2226    ;lastpagebytes                        IX-23    
                           A  2227    ;value                                IX-20    
                           A  2228    ;got                                  IX-19    
                           A  2229    ;addressfrom                          IX-16    
                           A  2230    ;addressto                            IX-13    
                           A  2231    ;ptr                                  IX-10    
                           A  2232    ;file                                  IX-7    
                           A  2233    ;pagemax                               IX-6    
                           A  2234    ;counter                               IX-3    
                           A  2235    ;filename                              IX+6    
                           A  2236    
                           A  2237    
                           A  2238    ; Stack Frame Size: 38 (bytes)
                           A  2239    ;       Spill Code: 0 (instruction)
                           A  2240    
                           A  2241    
                           A  2242    .ENDFUNC "update_mos",241,"_update_mos"
                           A  2243    	SEGMENT STRSECT
0B2582                     A  2244    L__35:
0B2582 0D0A                A  2245    	DB	13,10
0B2584 52656164 696E6720   A  2246    	DB	"Reading MOS firmware"
0B258C 4D4F5320 6669726D 
0B2594 77617265 
0B2598 00                  A  2247    	DB	0
0B2599                     A  2248    L__37:
0B2599 0D0A00              A  2249    	DB	13,10,0
0B259C                     A  2250    L__38:
0B259C 45726173 696E6720   A  2251    	DB	"Erasing flash... "
0B25A4 666C6173 682E2E2E 
0B25AC 20 
0B25AD 00                  A  2252    	DB	0
0B25AE                     A  2253    L__41:
0B25AE 0D0A                A  2254    	DB	13,10
0B25B0 57726974 696E6720   A  2255    	DB	"Writing new firmware..."
0B25B8 6E657720 6669726D 
0B25C0 77617265 2E2E2E 
0B25C7 0D0A00              A  2256    	DB	13,10,0
0B25CA                     A  2257    L__43:
0B25CA 0D                  A  2258    	DB	13
0B25CB 57726974 696E6720   A  2259    	DB	"Writing flash page "
0B25D3 666C6173 68207061 
0B25DB 676520 
0B25DE 00                  A  2260    	DB	0
0B25DF                     A  2261    L__46:
0B25DF 0D0A0D0A            A  2262    	DB	13,10,13,10
0B25E3 446F6E65            A  2263    	DB	"Done"
0B25E7 0D0A00              A  2264    	DB	13,10,0
                           A  2265    	SEGMENT CODE
                           A  2266    ;  242	
                           A  2267    ;  243	void echoVDP(uint8_t value) {
0B06D8                     A  2268    _echoVDP:
                           A  2269    .DEFINE "_echoVDP"
                           A  2270    
                           A  2271    .VALUE _echoVDP
                           A  2272    
                           A  2273    .CLASS 2
                           A  2274    
                           A  2275    .TYPE 65
                           A  2276    
                           A  2277    .ENDEF
                           A  2278    
                           A  2279    .BEGFUNC "echoVDP",243,"_echoVDP"
                           A  2280    
                           A  2281    .LINE 243
                           A  2282    
                           A  2283    .DEFINE "value"
                           A  2284    
                           A  2285    .CLASS 65
                           A  2286    
                           A  2287    .VALUE 6
                           A  2288    
                           A  2289    .TYPE 12
                           A  2290    
                           A  2291    .ENDEF
                           A  2292    
0B06D8 DDE5                A  2293    	PUSH	IX
0B06DA DD210000 00         A  2294    	LD	IX,0
0B06DF DD39                A  2295    	ADD	IX,SP
                           A  2296    ;  244		putch(23);
                           A  2297    .LINE 244
                           A  2298    
0B06E1 01170000            A  2299    	LD	BC,23
0B06E5 C5                  A  2300    	PUSH	BC
0B06E6 CD E5 00 0B         A  2301    	CALL	_putch
0B06EA C1                  A  2302    	POP	BC
                           A  2303    ;  245		putch(0);
                           A  2304    .LINE 245
                           A  2305    
0B06EB 01000000            A  2306    	LD	BC,0
0B06EF C5                  A  2307    	PUSH	BC
0B06F0 CD E5 00 0B         A  2308    	CALL	_putch
0B06F4 C1                  A  2309    	POP	BC
                           A  2310    ;  246		putch(0x80);
                           A  2311    .LINE 246
                           A  2312    
0B06F5 01800000            A  2313    	LD	BC,128
0B06F9 C5                  A  2314    	PUSH	BC
0B06FA CD E5 00 0B         A  2315    	CALL	_putch
0B06FE C1                  A  2316    	POP	BC
                           A  2317    ;  247		putch(value);
                           A  2318    .LINE 247
                           A  2319    
0B06FF DD7E06              A  2320    	LD	A,(IX+%6)
0B0702 B7ED62              A  2321    	UEXT	HL
0B0705 6F                  A  2322    	LD	L,A
0B0706 E5                  A  2323    	PUSH	HL
0B0707 CD E5 00 0B         A  2324    	CALL	_putch
0B070B C1                  A  2325    	POP	BC
                           A  2326    ;  248		delayms(100);
                           A  2327    .LINE 248
                           A  2328    
0B070C 01640000            A  2329    	LD	BC,100
0B0710 C5                  A  2330    	PUSH	BC
0B0711 CD 61 10 0B         A  2331    	CALL	_delayms
0B0715 C1                  A  2332    	POP	BC
                           A  2333    ;  249	}
                           A  2334    .LINE 249
                           A  2335    
0B0716 DDF9                A  2336    	LD	SP,IX
0B0718 DDE1                A  2337    	POP	IX
0B071A C9                  A  2338    	RET	
                           A  2339    
                           A  2340    
                           A  2341    ;**************************** _echoVDP ********
                           A  2342    ;Name                         Addr/Register   S
                           A  2343    ;_delayms                            IMPORT  --
                           A  2344    ;_putch                              IMPORT  --
                           A  2345    ;value                                 IX+6    
                           A  2346    
                           A  2347    
                           A  2348    ; Stack Frame Size: 9 (bytes)
                           A  2349    ;       Spill Code: 0 (instruction)
                           A  2350    
                           A  2351    
                           A  2352    .ENDFUNC "echoVDP",249,"_echoVDP"
                           A  2353    ;  250	
                           A  2354    ;  251	int getCommand(const char *command) {
0B071B                     A  2355    _getCommand:
                           A  2356    .DEFINE "_getCommand"
                           A  2357    
                           A  2358    .VALUE _getCommand
                           A  2359    
                           A  2360    .CLASS 2
                           A  2361    
                           A  2362    .TYPE 68
                           A  2363    
                           A  2364    .ENDEF
                           A  2365    
                           A  2366    .BEGFUNC "getCommand",251,"_getCommand"
                           A  2367    
                           A  2368    .LINE 251
                           A  2369    
                           A  2370    .DEFINE "command"
                           A  2371    
                           A  2372    .CLASS 65
                           A  2373    
                           A  2374    .VALUE 6
                           A  2375    
                           A  2376    .TYPE 194
                           A  2377    
                           A  2378    .ENDEF
                           A  2379    
0B071B DDE5                A  2380    	PUSH	IX
0B071D DD210000 00         A  2381    	LD	IX,0
0B0722 DD39                A  2382    	ADD	IX,SP
                           A  2383    ;  252		if(memcmp(command, "all", 4) == 0) 
                           A  2384    .LINE 252
                           A  2385    
0B0724 01040000            A  2386    	LD	BC,4
0B0728 C5                  A  2387    	PUSH	BC
0B0729 01 EA 25 0B         A  2388    	LD	BC,L__49
0B072D C5                  A  2389    	PUSH	BC
0B072E DD0706              A  2390    	LD	BC,(IX+%6)
0B0731 C5                  A  2391    	PUSH	BC
0B0732 CD C8 18 0B         A  2392    	CALL	_memcmp
0B0736 C1                  A  2393    	POP	BC
0B0737 C1                  A  2394    	POP	BC
0B0738 C1                  A  2395    	POP	BC
0B0739 CD F2 18 0B         A  2396    	CALL	__icmpzero
0B073D 20 06               A  2397    	JR	NZ,L_69
0B073F 21010000            A  2398    	LD	HL,1
0B0743 18 66               A  2399    	JR	L_75
0B0745                     A  2400    L_69:
                           A  2401    ;  253		if(memcmp(command, "mos", 3) == 0) 
                           A  2402    .LINE 253
                           A  2403    
0B0745 01030000            A  2404    	LD	BC,3
0B0749 C5                  A  2405    	PUSH	BC
0B074A 01 EE 25 0B         A  2406    	LD	BC,L__51
0B074E C5                  A  2407    	PUSH	BC
0B074F DD0706              A  2408    	LD	BC,(IX+%6)
0B0752 C5                  A  2409    	PUSH	BC
0B0753 CD C8 18 0B         A  2410    	CALL	_memcmp
0B0757 C1                  A  2411    	POP	BC
0B0758 C1                  A  2412    	POP	BC
0B0759 C1                  A  2413    	POP	BC
0B075A CD F2 18 0B         A  2414    	CALL	__icmpzero
0B075E 20 06               A  2415    	JR	NZ,L_71
0B0760 21020000            A  2416    	LD	HL,2
0B0764 18 45               A  2417    	JR	L_75
0B0766                     A  2418    L_71:
                           A  2419    ;  254		if(memcmp(command, "vdp", 3) == 0) 
                           A  2420    .LINE 254
                           A  2421    
0B0766 01030000            A  2422    	LD	BC,3
0B076A C5                  A  2423    	PUSH	BC
0B076B 01 F2 25 0B         A  2424    	LD	BC,L__53
0B076F C5                  A  2425    	PUSH	BC
0B0770 DD0706              A  2426    	LD	BC,(IX+%6)
0B0773 C5                  A  2427    	PUSH	BC
0B0774 CD C8 18 0B         A  2428    	CALL	_memcmp
0B0778 C1                  A  2429    	POP	BC
0B0779 C1                  A  2430    	POP	BC
0B077A C1                  A  2431    	POP	BC
0B077B CD F2 18 0B         A  2432    	CALL	__icmpzero
0B077F 20 06               A  2433    	JR	NZ,L_73
0B0781 21030000            A  2434    	LD	HL,3
0B0785 18 24               A  2435    	JR	L_75
0B0787                     A  2436    L_73:
                           A  2437    ;  255		if(memcmp(command, "silent", 6) == 
                           A  2438    .LINE 255
                           A  2439    
0B0787 01060000            A  2440    	LD	BC,6
0B078B C5                  A  2441    	PUSH	BC
0B078C 01 F6 25 0B         A  2442    	LD	BC,L__55
0B0790 C5                  A  2443    	PUSH	BC
0B0791 DD0706              A  2444    	LD	BC,(IX+%6)
0B0794 C5                  A  2445    	PUSH	BC
0B0795 CD C8 18 0B         A  2446    	CALL	_memcmp
0B0799 C1                  A  2447    	POP	BC
0B079A C1                  A  2448    	POP	BC
0B079B C1                  A  2449    	POP	BC
0B079C CD F2 18 0B         A  2450    	CALL	__icmpzero
0B07A0 20 06               A  2451    	JR	NZ,L_74
0B07A2 21040000            A  2452    	LD	HL,4
0B07A6 18 03               A  2453    	JR	L_75
0B07A8                     A  2454    L_74:
                           A  2455    ;  256		return CMDUNKNOWN;
                           A  2456    .LINE 256
                           A  2457    
0B07A8 B7                  A  2458    	OR	A,A
0B07A9 ED62                A  2459    	SBC	HL,HL
                           A  2460    ;  257	}
0B07AB                     A  2461    L_75:
                           A  2462    .LINE 257
                           A  2463    
0B07AB DDF9                A  2464    	LD	SP,IX
0B07AD DDE1                A  2465    	POP	IX
0B07AF C9                  A  2466    	RET	
                           A  2467    
                           A  2468    
                           A  2469    ;**************************** _getCommand *****
                           A  2470    ;Name                         Addr/Register   S
                           A  2471    ;_memcmp                             IMPORT  --
                           A  2472    ;command                               IX+6    
                           A  2473    
                           A  2474    
                           A  2475    ; Stack Frame Size: 9 (bytes)
                           A  2476    ;       Spill Code: 0 (instruction)
                           A  2477    
                           A  2478    
                           A  2479    .ENDFUNC "getCommand",257,"_getCommand"
                           A  2480    	SEGMENT STRSECT
0B25EA                     A  2481    L__49:
0B25EA 616C6C              A  2482    	DB	"all"
0B25ED 00                  A  2483    	DB	0
0B25EE                     A  2484    L__51:
0B25EE 6D6F73              A  2485    	DB	"mos"
0B25F1 00                  A  2486    	DB	0
0B25F2                     A  2487    L__53:
0B25F2 766470              A  2488    	DB	"vdp"
0B25F5 00                  A  2489    	DB	0
0B25F6                     A  2490    L__55:
0B25F6 73696C65 6E74       A  2491    	DB	"silent"
0B25FC 00                  A  2492    	DB	0
                           A  2493    	SEGMENT DATA
0B1F19                     A  2494    _flashmos:
0B1F19 00                  A  2495    	DB	0
                           A  2496    .DEFINE "flashmos"
                           A  2497    .ALIAS "_flashmos"
                           A  2498    .CLASS 69
                           A  2499    .VALUE _flashmos
                           A  2500    .TYPE 12
                           A  2501    .ENDEF
                           A  2502    	SEGMENT BSS
0B2748                     A  2503    _mosfilename:
0B2748                     A  2504    	DS	256
                           A  2505    .DEFINE "mosfilename"
                           A  2506    .ALIAS "_mosfilename"
                           A  2507    .CLASS 83
                           A  2508    .VALUE _mosfilename
                           A  2509    .DIM 256
                           A  2510    .TYPE 98
                           A  2511    .ENDEF
                           A  2512    	SEGMENT DATA
0B1F1A                     A  2513    _flashvdp:
0B1F1A 00                  A  2514    	DB	0
                           A  2515    .DEFINE "flashvdp"
                           A  2516    .ALIAS "_flashvdp"
                           A  2517    .CLASS 69
                           A  2518    .VALUE _flashvdp
                           A  2519    .TYPE 12
                           A  2520    .ENDEF
                           A  2521    	SEGMENT BSS
0B2848                     A  2522    _vdpfilename:
0B2848                     A  2523    	DS	256
                           A  2524    .DEFINE "vdpfilename"
                           A  2525    .ALIAS "_vdpfilename"
                           A  2526    .CLASS 83
                           A  2527    .VALUE _vdpfilename
                           A  2528    .DIM 256
                           A  2529    .TYPE 98
                           A  2530    .ENDEF
                           A  2531    	SEGMENT DATA
0B1F1B                     A  2532    _silent:
0B1F1B 00                  A  2533    	DB	0
                           A  2534    .DEFINE "silent"
                           A  2535    .ALIAS "_silent"
                           A  2536    .CLASS 69
                           A  2537    .VALUE _silent
                           A  2538    .TYPE 12
                           A  2539    .ENDEF
                           A  2540    ;  258	
                           A  2541    ;  259	bool flashmos = false;
                           A  2542    ;  260	char mosfilename[256];
                           A  2543    ;  261	bool flashvdp = false;
                           A  2544    ;  262	char vdpfilename[256];
                           A  2545    ;  263	bool silent = false;
                           A  2546    	SEGMENT CODE
                           A  2547    ;  264	
                           A  2548    ;  265	bool parseCommands(int argc, char *argv
0B07B0                     A  2549    _parseCommands:
                           A  2550    .DEFINE "_parseCommands"
                           A  2551    
                           A  2552    .VALUE _parseCommands
                           A  2553    
                           A  2554    .CLASS 2
                           A  2555    
                           A  2556    .TYPE 76
                           A  2557    
                           A  2558    .ENDEF
                           A  2559    
                           A  2560    .BEGFUNC "parseCommands",265,"_parseCommands"
                           A  2561    
                           A  2562    .LINE 265
                           A  2563    
                           A  2564    .DEFINE "argc"
                           A  2565    
                           A  2566    .CLASS 65
                           A  2567    
                           A  2568    .VALUE 6
                           A  2569    
                           A  2570    .TYPE 4
                           A  2571    
                           A  2572    .ENDEF
                           A  2573    
                           A  2574    .DEFINE "argv"
                           A  2575    
                           A  2576    .CLASS 65
                           A  2577    
                           A  2578    .VALUE 9
                           A  2579    
                           A  2580    .TYPE 290
                           A  2581    
                           A  2582    .ENDEF
                           A  2583    
                           A  2584    .DEFINE "argcounter"
                           A  2585    
                           A  2586    .CLASS 65
                           A  2587    
                           A  2588    .VALUE -3
                           A  2589    
                           A  2590    .TYPE 4
                           A  2591    
                           A  2592    .ENDEF
                           A  2593    
                           A  2594    .DEFINE "command"
                           A  2595    
                           A  2596    .CLASS 65
                           A  2597    
                           A  2598    .VALUE -15
                           A  2599    
                           A  2600    .TYPE 4
                           A  2601    
                           A  2602    .ENDEF
                           A  2603    
0B07B0 DDE5                A  2604    	PUSH	IX
0B07B2 DD210000 00         A  2605    	LD	IX,0
0B07B7 DD39                A  2606    	ADD	IX,SP
0B07B9 ED22F1              A  2607    	LEA	HL,IX+%FFFFFFF1
0B07BC F9                  A  2608    	LD	SP,HL
                           A  2609    ;  266		int argcounter;
                           A  2610    ;  267		int command;
                           A  2611    ;  268	
                           A  2612    ;  269		argcounter = 1;
                           A  2613    .LINE 269
                           A  2614    
0B07BD 01010000            A  2615    	LD	BC,1
0B07C1 DD0FFD              A  2616    	LD	(IX+%FFFFFFFD),BC
                           A  2617    ;  270		while(argcounter < argc) {
                           A  2618    .LINE 270
                           A  2619    
0B07C4 C3 3D 09 0B         A  2620    	JR	L_102
0B07C8                     A  2621    L_103:
                           A  2622    ;  271			command = getCommand(argv[argco
                           A  2623    .LINE 271
                           A  2624    
0B07C8 DD27FD              A  2625    	LD	HL,(IX+%FFFFFFFD)
0B07CB E5C1                A  2626    	LD	BC,HL
0B07CD 29                  A  2627    	ADD	HL,HL
0B07CE 09                  A  2628    	ADD	HL,BC
0B07CF DD0709              A  2629    	LD	BC,(IX+%9)
0B07D2 09                  A  2630    	ADD	HL,BC
0B07D3 ED07                A  2631    	LD	BC,(HL)
0B07D5 C5                  A  2632    	PUSH	BC
0B07D6 CD 1B 07 0B         A  2633    	CALL	_getCommand
0B07DA C1                  A  2634    	POP	BC
0B07DB DD2FF1              A  2635    	LD	(IX+%FFFFFFF1),HL
                           A  2636    ;  272			switch(command) {
                           A  2637    .LINE 272
                           A  2638    
0B07DE CD 89 13 0B         A  2639    	CALL	__seqcaseD
0B07E2 E9                  A  2640    	JP	(HL)
0B07E3                     A  2641    L__58:
0B07E3 0500                A  2642    	DW	5
0B07E5 0000                A  2643    	DW	0
0B07E7 00                  A  2644    	DB	0
0B07E8 FA070B              A  2645    	DW24	L_76	
                           A  2646    
0B07EB FF070B              A  2647    	DW24	L_77	
                           A  2648    
0B07EE 40080B              A  2649    	DW24	L_81	
                           A  2650    
0B07F1 B4080B              A  2651    	DW24	L_89	
                           A  2652    
0B07F4 26090B              A  2653    	DW24	L_97	
                           A  2654    
0B07F7 36090B              A  2655    	DW24	L_101	
                           A  2656    
                           A  2657    ;  273				case CMDUNKNOWN:
0B07FA                     A  2658    L_76:
                           A  2659    .LINE 273
                           A  2660    
                           A  2661    ;  274					return false;
                           A  2662    .LINE 274
                           A  2663    
0B07FA AF                  A  2664    	XOR	A,A
0B07FB C3 6B 09 0B         A  2665    	JR	L_110
                           A  2666    ;  275					break;
                           A  2667    ;  276				case CMDALL:
0B07FF                     A  2668    L_77:
                           A  2669    .LINE 276
                           A  2670    
                           A  2671    ;  277					if(flashmos || flashvdp
                           A  2672    .LINE 277
                           A  2673    
0B07FF 3A 19 1F 0B         A  2674    	LD	A,(_flashmos)
0B0803 B7                  A  2675    	OR	A,A
0B0804 20 07               A  2676    	JR	NZ,L_79
0B0806 3A 1A 1F 0B         A  2677    	LD	A,(_flashvdp)
0B080A B7                  A  2678    	OR	A,A
0B080B 28 05               A  2679    	JR	Z,L_80
0B080D                     A  2680    L_79:
0B080D AF                  A  2681    	XOR	A,A
0B080E C3 6B 09 0B         A  2682    	JR	L_110
0B0812                     A  2683    L_80:
                           A  2684    ;  278					strcpy(mosfilename, DEF
                           A  2685    .LINE 278
                           A  2686    
0B0812 01 FD 25 0B         A  2687    	LD	BC,L__61
0B0816 C5                  A  2688    	PUSH	BC
0B0817 01 48 27 0B         A  2689    	LD	BC,_mosfilename
0B081B C5                  A  2690    	PUSH	BC
0B081C CD 2D 1C 0B         A  2691    	CALL	_strcpy
0B0820 C1                  A  2692    	POP	BC
0B0821 C1                  A  2693    	POP	BC
                           A  2694    ;  279					strcpy(vdpfilename, DEF
                           A  2695    .LINE 279
                           A  2696    
0B0822 01 05 26 0B         A  2697    	LD	BC,L__62
0B0826 C5                  A  2698    	PUSH	BC
0B0827 01 48 28 0B         A  2699    	LD	BC,_vdpfilename
0B082B C5                  A  2700    	PUSH	BC
0B082C CD 2D 1C 0B         A  2701    	CALL	_strcpy
0B0830 C1                  A  2702    	POP	BC
0B0831 C1                  A  2703    	POP	BC
                           A  2704    ;  280					flashmos = true;
                           A  2705    .LINE 280
                           A  2706    
0B0832 3E01                A  2707    	LD	A,%1
0B0834 32 19 1F 0B         A  2708    	LD	(_flashmos),A
                           A  2709    ;  281					flashvdp = true;
                           A  2710    .LINE 281
                           A  2711    
0B0838 32 1A 1F 0B         A  2712    	LD	(_flashvdp),A
                           A  2713    ;  282					break;
                           A  2714    .LINE 282
                           A  2715    
0B083C C3 36 09 0B         A  2716    	JR	L_101
                           A  2717    ;  283				case CMDMOS:
0B0840                     A  2718    L_81:
                           A  2719    .LINE 283
                           A  2720    
                           A  2721    ;  284					if(flashmos) return fal
                           A  2722    .LINE 284
                           A  2723    
0B0840 3A 19 1F 0B         A  2724    	LD	A,(_flashmos)
0B0844 B7                  A  2725    	OR	A,A
0B0845 28 05               A  2726    	JR	Z,L_87
0B0847 AF                  A  2727    	XOR	A,A
0B0848 C3 6B 09 0B         A  2728    	JR	L_110
0B084C                     A  2729    L_87:
                           A  2730    ;  285					if((argc > (argcounter+
                           A  2731    .LINE 285
                           A  2732    
0B084C DD07FD              A  2733    	LD	BC,(IX+%FFFFFFFD)
0B084F 03                  A  2734    	INC	BC
0B0850 DD0FFA              A  2735    	LD	(IX+%FFFFFFFA),BC
0B0853 DD0706              A  2736    	LD	BC,(IX+%6)
0B0856 DD27FA              A  2737    	LD	HL,(IX+%FFFFFFFA)
0B0859 B7                  A  2738    	OR	A,A
0B085A ED42                A  2739    	SBC	HL,BC
0B085C F2 9A 08 0B         A  2740    	JP	P,L_86
0B0860 DD27FA              A  2741    	LD	HL,(IX+%FFFFFFFA)
0B0863 E5C1                A  2742    	LD	BC,HL
0B0865 29                  A  2743    	ADD	HL,HL
0B0866 09                  A  2744    	ADD	HL,BC
0B0867 DD0709              A  2745    	LD	BC,(IX+%9)
0B086A 09                  A  2746    	ADD	HL,BC
0B086B ED07                A  2747    	LD	BC,(HL)
0B086D C5                  A  2748    	PUSH	BC
0B086E CD 1B 07 0B         A  2749    	CALL	_getCommand
0B0872 C1                  A  2750    	POP	BC
0B0873 CD F2 18 0B         A  2751    	CALL	__icmpzero
0B0877 20 21               A  2752    	JR	NZ,L_86
                           A  2753    ;  286						strcpy(mosfilename,
                           A  2754    .LINE 286
                           A  2755    
0B0879 DD27FA              A  2756    	LD	HL,(IX+%FFFFFFFA)
0B087C E5C1                A  2757    	LD	BC,HL
0B087E 29                  A  2758    	ADD	HL,HL
0B087F 09                  A  2759    	ADD	HL,BC
0B0880 DD0709              A  2760    	LD	BC,(IX+%9)
0B0883 09                  A  2761    	ADD	HL,BC
0B0884 ED07                A  2762    	LD	BC,(HL)
0B0886 C5                  A  2763    	PUSH	BC
0B0887 01 48 27 0B         A  2764    	LD	BC,_mosfilename
0B088B C5                  A  2765    	PUSH	BC
0B088C CD 2D 1C 0B         A  2766    	CALL	_strcpy
0B0890 C1                  A  2767    	POP	BC
0B0891 C1                  A  2768    	POP	BC
                           A  2769    ;  287						argcounter++;
                           A  2770    .LINE 287
                           A  2771    
0B0892 DD07FA              A  2772    	LD	BC,(IX+%FFFFFFFA)
0B0895 DD0FFD              A  2773    	LD	(IX+%FFFFFFFD),BC
                           A  2774    ;  288					}
                           A  2775    ;  289					else {
                           A  2776    .LINE 289
                           A  2777    
0B0898 18 10               A  2778    	JR	L_88
0B089A                     A  2779    L_86:
                           A  2780    ;  290						strcpy(mosfilename,
                           A  2781    .LINE 290
                           A  2782    
0B089A 01 12 26 0B         A  2783    	LD	BC,L__66
0B089E C5                  A  2784    	PUSH	BC
0B089F 01 48 27 0B         A  2785    	LD	BC,_mosfilename
0B08A3 C5                  A  2786    	PUSH	BC
0B08A4 CD 2D 1C 0B         A  2787    	CALL	_strcpy
0B08A8 C1                  A  2788    	POP	BC
0B08A9 C1                  A  2789    	POP	BC
                           A  2790    ;  291					}
0B08AA                     A  2791    L_88:
                           A  2792    .LINE 291
                           A  2793    
                           A  2794    ;  292					flashmos = true;
                           A  2795    .LINE 292
                           A  2796    
0B08AA 3E01                A  2797    	LD	A,%1
0B08AC 32 19 1F 0B         A  2798    	LD	(_flashmos),A
                           A  2799    ;  293					break;
                           A  2800    .LINE 293
                           A  2801    
0B08B0 C3 36 09 0B         A  2802    	JR	L_101
                           A  2803    ;  294				case CMDVDP:
0B08B4                     A  2804    L_89:
                           A  2805    .LINE 294
                           A  2806    
                           A  2807    ;  295					if(flashvdp) return fal
                           A  2808    .LINE 295
                           A  2809    
0B08B4 3A 1A 1F 0B         A  2810    	LD	A,(_flashvdp)
0B08B8 B7                  A  2811    	OR	A,A
0B08B9 28 05               A  2812    	JR	Z,L_95
0B08BB AF                  A  2813    	XOR	A,A
0B08BC C3 6B 09 0B         A  2814    	JR	L_110
0B08C0                     A  2815    L_95:
                           A  2816    ;  296					if((argc > (argcounter+
                           A  2817    .LINE 296
                           A  2818    
0B08C0 DD07FD              A  2819    	LD	BC,(IX+%FFFFFFFD)
0B08C3 03                  A  2820    	INC	BC
0B08C4 DD0FF7              A  2821    	LD	(IX+%FFFFFFF7),BC
0B08C7 DD0706              A  2822    	LD	BC,(IX+%6)
0B08CA DD27F7              A  2823    	LD	HL,(IX+%FFFFFFF7)
0B08CD B7                  A  2824    	OR	A,A
0B08CE ED42                A  2825    	SBC	HL,BC
0B08D0 F2 0E 09 0B         A  2826    	JP	P,L_94
0B08D4 DD27F7              A  2827    	LD	HL,(IX+%FFFFFFF7)
0B08D7 E5C1                A  2828    	LD	BC,HL
0B08D9 29                  A  2829    	ADD	HL,HL
0B08DA 09                  A  2830    	ADD	HL,BC
0B08DB DD0709              A  2831    	LD	BC,(IX+%9)
0B08DE 09                  A  2832    	ADD	HL,BC
0B08DF ED07                A  2833    	LD	BC,(HL)
0B08E1 C5                  A  2834    	PUSH	BC
0B08E2 CD 1B 07 0B         A  2835    	CALL	_getCommand
0B08E6 C1                  A  2836    	POP	BC
0B08E7 CD F2 18 0B         A  2837    	CALL	__icmpzero
0B08EB 20 21               A  2838    	JR	NZ,L_94
                           A  2839    ;  297						strcpy(vdpfilename,
                           A  2840    .LINE 297
                           A  2841    
0B08ED DD27F7              A  2842    	LD	HL,(IX+%FFFFFFF7)
0B08F0 E5C1                A  2843    	LD	BC,HL
0B08F2 29                  A  2844    	ADD	HL,HL
0B08F3 09                  A  2845    	ADD	HL,BC
0B08F4 DD0709              A  2846    	LD	BC,(IX+%9)
0B08F7 09                  A  2847    	ADD	HL,BC
0B08F8 ED07                A  2848    	LD	BC,(HL)
0B08FA C5                  A  2849    	PUSH	BC
0B08FB 01 48 28 0B         A  2850    	LD	BC,_vdpfilename
0B08FF C5                  A  2851    	PUSH	BC
0B0900 CD 2D 1C 0B         A  2852    	CALL	_strcpy
0B0904 C1                  A  2853    	POP	BC
0B0905 C1                  A  2854    	POP	BC
                           A  2855    ;  298						argcounter++;
                           A  2856    .LINE 298
                           A  2857    
0B0906 DD07F7              A  2858    	LD	BC,(IX+%FFFFFFF7)
0B0909 DD0FFD              A  2859    	LD	(IX+%FFFFFFFD),BC
                           A  2860    ;  299					}
                           A  2861    ;  300					else {
                           A  2862    .LINE 300
                           A  2863    
0B090C 18 10               A  2864    	JR	L_96
0B090E                     A  2865    L_94:
                           A  2866    ;  301						strcpy(vdpfilename,
                           A  2867    .LINE 301
                           A  2868    
0B090E 01 1A 26 0B         A  2869    	LD	BC,L__70
0B0912 C5                  A  2870    	PUSH	BC
0B0913 01 48 28 0B         A  2871    	LD	BC,_vdpfilename
0B0917 C5                  A  2872    	PUSH	BC
0B0918 CD 2D 1C 0B         A  2873    	CALL	_strcpy
0B091C C1                  A  2874    	POP	BC
0B091D C1                  A  2875    	POP	BC
                           A  2876    ;  302					}
0B091E                     A  2877    L_96:
                           A  2878    .LINE 302
                           A  2879    
                           A  2880    ;  303					flashvdp = true;
                           A  2881    .LINE 303
                           A  2882    
0B091E 3E01                A  2883    	LD	A,%1
0B0920 32 1A 1F 0B         A  2884    	LD	(_flashvdp),A
                           A  2885    ;  304					break;
                           A  2886    .LINE 304
                           A  2887    
0B0924 18 10               A  2888    	JR	L_101
                           A  2889    ;  305				case CMDSILENT:
0B0926                     A  2890    L_97:
                           A  2891    .LINE 305
                           A  2892    
                           A  2893    ;  306					if(silent) return false
                           A  2894    .LINE 306
                           A  2895    
0B0926 3A 1B 1F 0B         A  2896    	LD	A,(_silent)
0B092A B7                  A  2897    	OR	A,A
0B092B 28 03               A  2898    	JR	Z,L_99
0B092D AF                  A  2899    	XOR	A,A
0B092E 18 3B               A  2900    	JR	L_110
0B0930                     A  2901    L_99:
                           A  2902    ;  307					silent = true;
                           A  2903    .LINE 307
                           A  2904    
0B0930 3E01                A  2905    	LD	A,%1
0B0932 32 1B 1F 0B         A  2906    	LD	(_silent),A
                           A  2907    ;  308					break;
                           A  2908    ;  309			}
0B0936                     A  2909    L_101:
                           A  2910    .LINE 309
                           A  2911    
                           A  2912    ;  310			argcounter++;
                           A  2913    .LINE 310
                           A  2914    
0B0936 DD07FD              A  2915    	LD	BC,(IX+%FFFFFFFD)
0B0939 03                  A  2916    	INC	BC
0B093A DD0FFD              A  2917    	LD	(IX+%FFFFFFFD),BC
                           A  2918    ;  311		}
0B093D                     A  2919    L_102:
                           A  2920    .LINE 311
                           A  2921    
0B093D DD0706              A  2922    	LD	BC,(IX+%6)
0B0940 DD27FD              A  2923    	LD	HL,(IX+%FFFFFFFD)
0B0943 B7                  A  2924    	OR	A,A
0B0944 ED42                A  2925    	SBC	HL,BC
0B0946 FA C8 07 0B         A  2926    	JP	M,L_103
                           A  2927    ;  312		return (flashvdp || flashmos);
                           A  2928    .LINE 312
                           A  2929    
0B094A 3A 1A 1F 0B         A  2930    	LD	A,(_flashvdp)
0B094E B7                  A  2931    	OR	A,A
0B094F 20 07               A  2932    	JR	NZ,L_105
0B0951 3A 19 1F 0B         A  2933    	LD	A,(_flashmos)
0B0955 B7                  A  2934    	OR	A,A
0B0956 28 09               A  2935    	JR	Z,L_106
0B0958                     A  2936    L_105:
                           A  2937    ;  313	}
                           A  2938    .LINE 313
                           A  2939    
0B0958 01010000            A  2940    	LD	BC,1
0B095C DD0FF4              A  2941    	LD	(IX+%FFFFFFF4),BC
0B095F 18 07               A  2942    	JR	L_107
0B0961                     A  2943    L_106:
0B0961 01000000            A  2944    	LD	BC,0
0B0965 DD0FF4              A  2945    	LD	(IX+%FFFFFFF4),BC
0B0968                     A  2946    L_107:
0B0968 DD7EF4              A  2947    	LD	A,(IX+%FFFFFFF4)
0B096B                     A  2948    L_110:
0B096B DDF9                A  2949    	LD	SP,IX
0B096D DDE1                A  2950    	POP	IX
0B096F C9                  A  2951    	RET	
                           A  2952    
                           A  2953    
                           A  2954    ;**************************** _parseCommands **
                           A  2955    ;Name                         Addr/Register   S
                           A  2956    ;_silent                             STATIC    
                           A  2957    ;_vdpfilename                        STATIC    
                           A  2958    ;_mosfilename                        STATIC    
                           A  2959    ;_strcpy                             IMPORT  --
                           A  2960    ;_flashvdp                           STATIC    
                           A  2961    ;_flashmos                           STATIC    
                           A  2962    ;command                              IX-15    
                           A  2963    ;temp108                              IX-12    
                           A  2964    ;G_4                                   IX-9    
                           A  2965    ;G_1                                   IX-6    
                           A  2966    ;argcounter                            IX-3    
                           A  2967    ;argv                                  IX+9    
                           A  2968    ;argc                                  IX+6    
                           A  2969    
                           A  2970    
                           A  2971    ; Stack Frame Size: 27 (bytes)
                           A  2972    ;       Spill Code: 0 (instruction)
                           A  2973    
                           A  2974    
                           A  2975    .ENDFUNC "parseCommands",313,"_parseCommands"
                           A  2976    	SEGMENT STRSECT
0B25FD                     A  2977    L__61:
0B25FD 4D4F532E 62696E     A  2978    	DB	"MOS.bin"
0B2604 00                  A  2979    	DB	0
0B2605                     A  2980    L__62:
0B2605 6669726D 77617265   A  2981    	DB	"firmware.bin"
0B260D 2E62696E 
0B2611 00                  A  2982    	DB	0
0B2612                     A  2983    L__66:
0B2612 4D4F532E 62696E     A  2984    	DB	"MOS.bin"
0B2619 00                  A  2985    	DB	0
0B261A                     A  2986    L__70:
0B261A 6669726D 77617265   A  2987    	DB	"firmware.bin"
0B2622 2E62696E 
0B2626 00                  A  2988    	DB	0
                           A  2989    	SEGMENT CODE
                           A  2990    ;  314	
                           A  2991    ;  315	bool filesExist(void) {
0B0970                     A  2992    _filesExist:
                           A  2993    .DEFINE "_filesExist"
                           A  2994    
                           A  2995    .VALUE _filesExist
                           A  2996    
                           A  2997    .CLASS 2
                           A  2998    
                           A  2999    .TYPE 76
                           A  3000    
                           A  3001    .ENDEF
                           A  3002    
                           A  3003    .BEGFUNC "filesExist",315,"_filesExist"
                           A  3004    
                           A  3005    .LINE 315
                           A  3006    
                           A  3007    .DEFINE "file"
                           A  3008    
                           A  3009    .CLASS 65
                           A  3010    
                           A  3011    .VALUE -1
                           A  3012    
                           A  3013    .TYPE 12
                           A  3014    
                           A  3015    .ENDEF
                           A  3016    
                           A  3017    .DEFINE "filesexist"
                           A  3018    
                           A  3019    .CLASS 65
                           A  3020    
                           A  3021    .VALUE -2
                           A  3022    
                           A  3023    .TYPE 12
                           A  3024    
                           A  3025    .ENDEF
                           A  3026    
0B0970 DDE5                A  3027    	PUSH	IX
0B0972 DD210000 00         A  3028    	LD	IX,0
0B0977 DD39                A  3029    	ADD	IX,SP
0B0979 3B                  A  3030    	DEC	SP
0B097A 3B                  A  3031    	DEC	SP
                           A  3032    ;  316		uint8_t file;
                           A  3033    ;  317		bool filesexist = true;
                           A  3034    .LINE 317
                           A  3035    
0B097B DD36FE01            A  3036    	LD	(IX+%FFFFFFFE),%1
                           A  3037    ;  318	
                           A  3038    ;  319		if(flashmos) {
                           A  3039    .LINE 319
                           A  3040    
0B097F 3A 19 1F 0B         A  3041    	LD	A,(_flashmos)
0B0983 B7                  A  3042    	OR	A,A
0B0984 28 4C               A  3043    	JR	Z,L_117
                           A  3044    ;  320			file = mos_fopen(mosfilename, f
                           A  3045    .LINE 320
                           A  3046    
0B0986 01010000            A  3047    	LD	BC,1
0B098A C5                  A  3048    	PUSH	BC
0B098B 01 48 27 0B         A  3049    	LD	BC,_mosfilename
0B098F C5                  A  3050    	PUSH	BC
0B0990 CD B5 0E 0B         A  3051    	CALL	_mos_fopen
0B0994 C1                  A  3052    	POP	BC
0B0995 C1                  A  3053    	POP	BC
0B0996 DD77FF              A  3054    	LD	(IX+%FFFFFFFF),A
                           A  3055    ;  321			if(!file) {
                           A  3056    .LINE 321
                           A  3057    
0B0999 B7                  A  3058    	OR	A,A
0B099A 20 2B               A  3059    	JR	NZ,L_112
                           A  3060    ;  322				printf("Error opening MOS f
                           A  3061    .LINE 322
                           A  3062    
0B099C 01 35 15 0B         A  3063    	LD	BC,___print_uputch
0B09A0 ED43 04 24 0B       A  3064    	LD	(___print_xputch),BC
0B09A5 01 27 26 0B         A  3065    	LD	BC,L__78
0B09A9 C5                  A  3066    	PUSH	BC
0B09AA CD C4 13 0B         A  3067    	CALL	___print_sendstring
0B09AE C1                  A  3068    	POP	BC
0B09AF 01 48 27 0B         A  3069    	LD	BC,_mosfilename
0B09B3 C5                  A  3070    	PUSH	BC
0B09B4 CD C4 13 0B         A  3071    	CALL	___print_sendstring
0B09B8 C1                  A  3072    	POP	BC
0B09B9 01 44 26 0B         A  3073    	LD	BC,L__79
0B09BD C5                  A  3074    	PUSH	BC
0B09BE CD C4 13 0B         A  3075    	CALL	___print_sendstring
0B09C2 C1                  A  3076    	POP	BC
                           A  3077    ;  323				filesexist = false;
                           A  3078    .LINE 323
                           A  3079    
0B09C3 DD36FE00            A  3080    	LD	(IX+%FFFFFFFE),%0
                           A  3081    ;  324			}
0B09C7                     A  3082    L_112:
                           A  3083    .LINE 324
                           A  3084    
                           A  3085    ;  325			mos_fclose(file);
                           A  3086    .LINE 325
                           A  3087    
0B09C7 DD4EFF              A  3088    	LD	C,(IX+%FFFFFFFF)
0B09CA 0600                A  3089    	LD	B,%0
0B09CC C5                  A  3090    	PUSH	BC
0B09CD CD CD 0E 0B         A  3091    	CALL	_mos_fclose
0B09D1 C1                  A  3092    	POP	BC
                           A  3093    ;  326		}
0B09D2                     A  3094    L_117:
                           A  3095    .LINE 326
                           A  3096    
                           A  3097    ;  327	
                           A  3098    ;  328		if(flashvdp) {
                           A  3099    .LINE 328
                           A  3100    
0B09D2 3A 1A 1F 0B         A  3101    	LD	A,(_flashvdp)
0B09D6 B7                  A  3102    	OR	A,A
0B09D7 28 4C               A  3103    	JR	Z,L_118
                           A  3104    ;  329			file = mos_fopen(vdpfilename, f
                           A  3105    .LINE 329
                           A  3106    
0B09D9 01010000            A  3107    	LD	BC,1
0B09DD C5                  A  3108    	PUSH	BC
0B09DE 01 48 28 0B         A  3109    	LD	BC,_vdpfilename
0B09E2 C5                  A  3110    	PUSH	BC
0B09E3 CD B5 0E 0B         A  3111    	CALL	_mos_fopen
0B09E7 C1                  A  3112    	POP	BC
0B09E8 C1                  A  3113    	POP	BC
0B09E9 DD77FF              A  3114    	LD	(IX+%FFFFFFFF),A
                           A  3115    ;  330			if(!file) {
                           A  3116    .LINE 330
                           A  3117    
0B09EC B7                  A  3118    	OR	A,A
0B09ED 20 2B               A  3119    	JR	NZ,L_115
                           A  3120    ;  331				printf("Error opening VDP f
                           A  3121    .LINE 331
                           A  3122    
0B09EF 01 35 15 0B         A  3123    	LD	BC,___print_uputch
0B09F3 ED43 04 24 0B       A  3124    	LD	(___print_xputch),BC
0B09F8 01 48 26 0B         A  3125    	LD	BC,L__82
0B09FC C5                  A  3126    	PUSH	BC
0B09FD CD C4 13 0B         A  3127    	CALL	___print_sendstring
0B0A01 C1                  A  3128    	POP	BC
0B0A02 01 48 28 0B         A  3129    	LD	BC,_vdpfilename
0B0A06 C5                  A  3130    	PUSH	BC
0B0A07 CD C4 13 0B         A  3131    	CALL	___print_sendstring
0B0A0B C1                  A  3132    	POP	BC
0B0A0C 01 65 26 0B         A  3133    	LD	BC,L__83
0B0A10 C5                  A  3134    	PUSH	BC
0B0A11 CD C4 13 0B         A  3135    	CALL	___print_sendstring
0B0A15 C1                  A  3136    	POP	BC
                           A  3137    ;  332				filesexist = false;
                           A  3138    .LINE 332
                           A  3139    
0B0A16 DD36FE00            A  3140    	LD	(IX+%FFFFFFFE),%0
                           A  3141    ;  333			}
0B0A1A                     A  3142    L_115:
                           A  3143    .LINE 333
                           A  3144    
                           A  3145    ;  334			mos_fclose(file);
                           A  3146    .LINE 334
                           A  3147    
0B0A1A DD4EFF              A  3148    	LD	C,(IX+%FFFFFFFF)
0B0A1D 0600                A  3149    	LD	B,%0
0B0A1F C5                  A  3150    	PUSH	BC
0B0A20 CD CD 0E 0B         A  3151    	CALL	_mos_fclose
0B0A24 C1                  A  3152    	POP	BC
                           A  3153    ;  335		}
0B0A25                     A  3154    L_118:
                           A  3155    .LINE 335
                           A  3156    
                           A  3157    ;  336	
                           A  3158    ;  337		return filesexist;
                           A  3159    .LINE 337
                           A  3160    
0B0A25 DD7EFE              A  3161    	LD	A,(IX+%FFFFFFFE)
                           A  3162    ;  338	}
                           A  3163    .LINE 338
                           A  3164    
0B0A28 DDF9                A  3165    	LD	SP,IX
0B0A2A DDE1                A  3166    	POP	IX
0B0A2C C9                  A  3167    	RET	
                           A  3168    
                           A  3169    
                           A  3170    ;**************************** _filesExist *****
                           A  3171    ;Name                         Addr/Register   S
                           A  3172    ;_vdpfilename                        STATIC    
                           A  3173    ;_flashvdp                           STATIC    
                           A  3174    ;_mos_fclose                         IMPORT  --
                           A  3175    ;___print_sendstring                 IMPORT  --
                           A  3176    ;___print_xputch                     IMPORT    
                           A  3177    ;___print_uputch                     IMPORT  --
                           A  3178    ;_mosfilename                        STATIC    
                           A  3179    ;_mos_fopen                          IMPORT  --
                           A  3180    ;_flashmos                           STATIC    
                           A  3181    ;filesexist                            IX-2    
                           A  3182    ;file                                  IX-1    
                           A  3183    
                           A  3184    
                           A  3185    ; Stack Frame Size: 8 (bytes)
                           A  3186    ;       Spill Code: 0 (instruction)
                           A  3187    
                           A  3188    
                           A  3189    .ENDFUNC "filesExist",338,"_filesExist"
                           A  3190    	SEGMENT STRSECT
0B2627                     A  3191    L__78:
0B2627 4572726F 72206F70   A  3192    	DB	"Error opening MOS firmware \""
0B262F 656E696E 67204D4F 
0B2637 53206669 726D7761 
0B263F 72652022 
0B2643 00                  A  3193    	DB	0
0B2644                     A  3194    L__79:
0B2644 22                  A  3195    	DB	"\""
0B2645 0A0D00              A  3196    	DB	10,13,0
0B2648                     A  3197    L__82:
0B2648 4572726F 72206F70   A  3198    	DB	"Error opening VDP firmware \""
0B2650 656E696E 67205644 
0B2658 50206669 726D7761 
0B2660 72652022 
0B2664 00                  A  3199    	DB	0
0B2665                     A  3200    L__83:
0B2665 22                  A  3201    	DB	"\""
0B2666 0A0D00              A  3202    	DB	10,13,0
                           A  3203    	SEGMENT CODE
                           A  3204    ;  339	
                           A  3205    ;  340	bool firmwareContentOK(void) {
0B0A2D                     A  3206    _firmwareContentOK:
                           A  3207    .DEFINE "_firmwareContentOK"
                           A  3208    
                           A  3209    .VALUE _firmwareContentOK
                           A  3210    
                           A  3211    .CLASS 2
                           A  3212    
                           A  3213    .TYPE 76
                           A  3214    
                           A  3215    .ENDEF
                           A  3216    
                           A  3217    .BEGFUNC "firmwareContentOK",340,"_firmwareCont
                           A  3218    
                           A  3219    .LINE 340
                           A  3220    
                           A  3221    .DEFINE "file"
                           A  3222    
                           A  3223    .CLASS 65
                           A  3224    
                           A  3225    .VALUE -1
                           A  3226    
                           A  3227    .TYPE 12
                           A  3228    
                           A  3229    .ENDEF
                           A  3230    
                           A  3231    .DEFINE "validfirmware"
                           A  3232    
                           A  3233    .CLASS 65
                           A  3234    
                           A  3235    .VALUE -2
                           A  3236    
                           A  3237    .TYPE 12
                           A  3238    
                           A  3239    .ENDEF
                           A  3240    
                           A  3241    .DEFINE "filesize"
                           A  3242    
                           A  3243    .CLASS 65
                           A  3244    
                           A  3245    .VALUE -5
                           A  3246    
                           A  3247    .TYPE 14
                           A  3248    
                           A  3249    .ENDEF
                           A  3250    
                           A  3251    .DEFINE "buffer"
                           A  3252    
                           A  3253    .CLASS 65
                           A  3254    
                           A  3255    .VALUE -41
                           A  3256    
                           A  3257    .DIM 36
                           A  3258    
                           A  3259    .TYPE 108
                           A  3260    
                           A  3261    .ENDEF
                           A  3262    
0B0A2D DDE5                A  3263    	PUSH	IX
0B0A2F DD210000 00         A  3264    	LD	IX,0
0B0A34 DD39                A  3265    	ADD	IX,SP
0B0A36 ED22D7              A  3266    	LEA	HL,IX+%FFFFFFD7
0B0A39 F9                  A  3267    	LD	SP,HL
                           A  3268    ;  341		uint8_t file;
                           A  3269    ;  342		uint24_t filesize;
                           A  3270    ;  343		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  3271    ;  344		bool validfirmware = true;
                           A  3272    .LINE 344
                           A  3273    
0B0A3A DD36FE01            A  3274    	LD	(IX+%FFFFFFFE),%1
                           A  3275    ;  345	
                           A  3276    ;  346		if(flashmos) {
                           A  3277    .LINE 346
                           A  3278    
0B0A3E 3A 19 1F 0B         A  3279    	LD	A,(_flashmos)
0B0A42 B7                  A  3280    	OR	A,A
0B0A43 CA F8 0A 0B         A  3281    	JR	Z,L_128
                           A  3282    ;  347			file = mos_fopen(mosfilename, f
                           A  3283    .LINE 347
                           A  3284    
0B0A47 01010000            A  3285    	LD	BC,1
0B0A4B C5                  A  3286    	PUSH	BC
0B0A4C 01 48 27 0B         A  3287    	LD	BC,_mosfilename
0B0A50 C5                  A  3288    	PUSH	BC
0B0A51 CD B5 0E 0B         A  3289    	CALL	_mos_fopen
0B0A55 C1                  A  3290    	POP	BC
0B0A56 C1                  A  3291    	POP	BC
0B0A57 DD77FF              A  3292    	LD	(IX+%FFFFFFFF),A
                           A  3293    ;  348			mos_fread(file, (char *)BUFFER1
                           A  3294    .LINE 348
                           A  3295    
0B0A5A 01050000            A  3296    	LD	BC,5
0B0A5E C5                  A  3297    	PUSH	BC
0B0A5F 01000005            A  3298    	LD	BC,327680
0B0A63 C5                  A  3299    	PUSH	BC
0B0A64 DD4EFF              A  3300    	LD	C,(IX+%FFFFFFFF)
0B0A67 0600                A  3301    	LD	B,%0
0B0A69 C5                  A  3302    	PUSH	BC
0B0A6A CD F7 0E 0B         A  3303    	CALL	_mos_fread
0B0A6E C1                  A  3304    	POP	BC
0B0A6F C1                  A  3305    	POP	BC
0B0A70 C1                  A  3306    	POP	BC
                           A  3307    ;  349			if(!containsMosHeader((uint8_t 
                           A  3308    .LINE 349
                           A  3309    
0B0A71 01000005            A  3310    	LD	BC,327680
0B0A75 C5                  A  3311    	PUSH	BC
0B0A76 CD 90 02 0B         A  3312    	CALL	_containsMosHeader
0B0A7A C1                  A  3313    	POP	BC
0B0A7B B7                  A  3314    	OR	A,A
0B0A7C 20 2B               A  3315    	JR	NZ,L_121
                           A  3316    ;  350				printf("\"%s\" does not con
                           A  3317    .LINE 350
                           A  3318    
0B0A7E 01 35 15 0B         A  3319    	LD	BC,___print_uputch
0B0A82 ED43 04 24 0B       A  3320    	LD	(___print_xputch),BC
0B0A87 01220000            A  3321    	LD	BC,34
0B0A8B C5                  A  3322    	PUSH	BC
0B0A8C CD 35 15 0B         A  3323    	CALL	___print_uputch
0B0A90 C1                  A  3324    	POP	BC
0B0A91 01 48 27 0B         A  3325    	LD	BC,_mosfilename
0B0A95 C5                  A  3326    	PUSH	BC
0B0A96 CD C4 13 0B         A  3327    	CALL	___print_sendstring
0B0A9A C1                  A  3328    	POP	BC
0B0A9B 01 69 26 0B         A  3329    	LD	BC,L__87
0B0A9F C5                  A  3330    	PUSH	BC
0B0AA0 CD C4 13 0B         A  3331    	CALL	___print_sendstring
0B0AA4 C1                  A  3332    	POP	BC
                           A  3333    ;  351				validfirmware = false;
                           A  3334    .LINE 351
                           A  3335    
0B0AA5 DD36FE00            A  3336    	LD	(IX+%FFFFFFFE),%0
                           A  3337    ;  352			}
0B0AA9                     A  3338    L_121:
                           A  3339    .LINE 352
                           A  3340    
                           A  3341    ;  353			filesize = getFileSize(file);
                           A  3342    .LINE 353
                           A  3343    
0B0AA9 DD4EFF              A  3344    	LD	C,(IX+%FFFFFFFF)
0B0AAC 0600                A  3345    	LD	B,%0
0B0AAE C5                  A  3346    	PUSH	BC
0B0AAF CD F9 12 0B         A  3347    	CALL	_getFileSize
0B0AB3 C1                  A  3348    	POP	BC
0B0AB4 DD2FFB              A  3349    	LD	(IX+%FFFFFFFB),HL
                           A  3350    ;  354			if(filesize > FLASHSIZE) {
                           A  3351    .LINE 354
                           A  3352    
0B0AB7 E5C1                A  3353    	LD	BC,HL
0B0AB9 21000002            A  3354    	LD	HL,131072
0B0ABD B7                  A  3355    	OR	A,A
0B0ABE ED42                A  3356    	SBC	HL,BC
0B0AC0 30 2B               A  3357    	JR	NC,L_123
                           A  3358    ;  355				printf("\"%s\" too large fo
                           A  3359    .LINE 355
                           A  3360    
0B0AC2 01 35 15 0B         A  3361    	LD	BC,___print_uputch
0B0AC6 ED43 04 24 0B       A  3362    	LD	(___print_xputch),BC
0B0ACB 01220000            A  3363    	LD	BC,34
0B0ACF C5                  A  3364    	PUSH	BC
0B0AD0 CD 35 15 0B         A  3365    	CALL	___print_uputch
0B0AD4 C1                  A  3366    	POP	BC
0B0AD5 01 48 27 0B         A  3367    	LD	BC,_mosfilename
0B0AD9 C5                  A  3368    	PUSH	BC
0B0ADA CD C4 13 0B         A  3369    	CALL	___print_sendstring
0B0ADE C1                  A  3370    	POP	BC
0B0ADF 01 9A 26 0B         A  3371    	LD	BC,L__89
0B0AE3 C5                  A  3372    	PUSH	BC
0B0AE4 CD C4 13 0B         A  3373    	CALL	___print_sendstring
0B0AE8 C1                  A  3374    	POP	BC
                           A  3375    ;  356				validfirmware = false;
                           A  3376    .LINE 356
                           A  3377    
0B0AE9 DD36FE00            A  3378    	LD	(IX+%FFFFFFFE),%0
                           A  3379    ;  357			}
0B0AED                     A  3380    L_123:
                           A  3381    .LINE 357
                           A  3382    
                           A  3383    ;  358			mos_fclose(file);
                           A  3384    .LINE 358
                           A  3385    
0B0AED DD4EFF              A  3386    	LD	C,(IX+%FFFFFFFF)
0B0AF0 0600                A  3387    	LD	B,%0
0B0AF2 C5                  A  3388    	PUSH	BC
0B0AF3 CD CD 0E 0B         A  3389    	CALL	_mos_fclose
0B0AF7 C1                  A  3390    	POP	BC
                           A  3391    ;  359		}
0B0AF8                     A  3392    L_128:
                           A  3393    .LINE 359
                           A  3394    
                           A  3395    ;  360		if(flashvdp) {
                           A  3396    .LINE 360
                           A  3397    
0B0AF8 3A 1A 1F 0B         A  3398    	LD	A,(_flashvdp)
0B0AFC B7                  A  3399    	OR	A,A
0B0AFD 28 69               A  3400    	JR	Z,L_129
                           A  3401    ;  361			file = mos_fopen(vdpfilename, f
                           A  3402    .LINE 361
                           A  3403    
0B0AFF 01010000            A  3404    	LD	BC,1
0B0B03 C5                  A  3405    	PUSH	BC
0B0B04 01 48 28 0B         A  3406    	LD	BC,_vdpfilename
0B0B08 C5                  A  3407    	PUSH	BC
0B0B09 CD B5 0E 0B         A  3408    	CALL	_mos_fopen
0B0B0D C1                  A  3409    	POP	BC
0B0B0E C1                  A  3410    	POP	BC
0B0B0F DD77FF              A  3411    	LD	(IX+%FFFFFFFF),A
                           A  3412    ;  362			mos_fread(file, (char *)buffer,
                           A  3413    .LINE 362
                           A  3414    
0B0B12 01240000            A  3415    	LD	BC,36
0B0B16 C5                  A  3416    	PUSH	BC
0B0B17 ED65D7              A  3417    	PEA	IX+%FFFFFFD7
0B0B1A DD4EFF              A  3418    	LD	C,(IX+%FFFFFFFF)
0B0B1D 0600                A  3419    	LD	B,%0
0B0B1F C5                  A  3420    	PUSH	BC
0B0B20 CD F7 0E 0B         A  3421    	CALL	_mos_fread
0B0B24 C1                  A  3422    	POP	BC
0B0B25 C1                  A  3423    	POP	BC
0B0B26 C1                  A  3424    	POP	BC
                           A  3425    ;  363			if(!containsESP32Header(buffer)
                           A  3426    .LINE 363
                           A  3427    
0B0B27 ED65D7              A  3428    	PEA	IX+%FFFFFFD7
0B0B2A CD DB 02 0B         A  3429    	CALL	_containsESP32Header
0B0B2E C1                  A  3430    	POP	BC
0B0B2F B7                  A  3431    	OR	A,A
0B0B30 20 2B               A  3432    	JR	NZ,L_126
                           A  3433    ;  364				printf("\"%s\" does not con
                           A  3434    .LINE 364
                           A  3435    
0B0B32 01 35 15 0B         A  3436    	LD	BC,___print_uputch
0B0B36 ED43 04 24 0B       A  3437    	LD	(___print_xputch),BC
0B0B3B 01220000            A  3438    	LD	BC,34
0B0B3F C5                  A  3439    	PUSH	BC
0B0B40 CD 35 15 0B         A  3440    	CALL	___print_uputch
0B0B44 C1                  A  3441    	POP	BC
0B0B45 01 48 28 0B         A  3442    	LD	BC,_vdpfilename
0B0B49 C5                  A  3443    	PUSH	BC
0B0B4A CD C4 13 0B         A  3444    	CALL	___print_sendstring
0B0B4E C1                  A  3445    	POP	BC
0B0B4F 01 C1 26 0B         A  3446    	LD	BC,L__92
0B0B53 C5                  A  3447    	PUSH	BC
0B0B54 CD C4 13 0B         A  3448    	CALL	___print_sendstring
0B0B58 C1                  A  3449    	POP	BC
                           A  3450    ;  365				validfirmware = false;
                           A  3451    .LINE 365
                           A  3452    
0B0B59 DD36FE00            A  3453    	LD	(IX+%FFFFFFFE),%0
                           A  3454    ;  366			}
0B0B5D                     A  3455    L_126:
                           A  3456    .LINE 366
                           A  3457    
                           A  3458    ;  367			mos_fclose(file);
                           A  3459    .LINE 367
                           A  3460    
0B0B5D DD4EFF              A  3461    	LD	C,(IX+%FFFFFFFF)
0B0B60 0600                A  3462    	LD	B,%0
0B0B62 C5                  A  3463    	PUSH	BC
0B0B63 CD CD 0E 0B         A  3464    	CALL	_mos_fclose
0B0B67 C1                  A  3465    	POP	BC
                           A  3466    ;  368		}
0B0B68                     A  3467    L_129:
                           A  3468    .LINE 368
                           A  3469    
                           A  3470    ;  369		return validfirmware;
                           A  3471    .LINE 369
                           A  3472    
0B0B68 DD7EFE              A  3473    	LD	A,(IX+%FFFFFFFE)
                           A  3474    ;  370	}
                           A  3475    .LINE 370
                           A  3476    
0B0B6B DDF9                A  3477    	LD	SP,IX
0B0B6D DDE1                A  3478    	POP	IX
0B0B6F C9                  A  3479    	RET	
                           A  3480    
                           A  3481    
                           A  3482    ;**************************** _firmwareContentO
                           A  3483    ;Name                         Addr/Register   S
                           A  3484    ;_vdpfilename                        STATIC    
                           A  3485    ;_flashvdp                           STATIC    
                           A  3486    ;_mos_fclose                         IMPORT  --
                           A  3487    ;_getFileSize                        IMPORT  --
                           A  3488    ;___print_sendstring                 IMPORT  --
                           A  3489    ;___print_xputch                     IMPORT    
                           A  3490    ;___print_uputch                     IMPORT  --
                           A  3491    ;_mos_fread                          IMPORT  --
                           A  3492    ;_mosfilename                        STATIC    
                           A  3493    ;_mos_fopen                          IMPORT  --
                           A  3494    ;_flashmos                           STATIC    
                           A  3495    ;buffer                               IX-41    
                           A  3496    ;filesize                              IX-5    
                           A  3497    ;validfirmware                         IX-2    
                           A  3498    ;file                                  IX-1    
                           A  3499    
                           A  3500    
                           A  3501    ; Stack Frame Size: 47 (bytes)
                           A  3502    ;       Spill Code: 0 (instruction)
                           A  3503    
                           A  3504    
                           A  3505    .ENDFUNC "firmwareContentOK",370,"_firmwareCont
                           A  3506    	SEGMENT STRSECT
0B2669                     A  3507    L__87:
0B2669 2220646F 6573206E   A  3508    	DB	"\" does not contain valid MOS ez80 sta
0B2671 6F742063 6F6E7461 
0B2679 696E2076 616C6964 
0B2681 204D4F53 20657A38 
0B2689 30207374 61727475 
0B2691 7020636F 6465 
0B2697 0D0A00              A  3509    	DB	13,10,0
0B269A                     A  3510    L__89:
0B269A 2220746F 6F206C61   A  3511    	DB	"\" too large for 128KB embedded flash"
0B26A2 72676520 666F7220 
0B26AA 3132384B 4220656D 
0B26B2 62656464 65642066 
0B26BA 6C617368 
0B26BE 0D0A00              A  3512    	DB	13,10,0
0B26C1                     A  3513    L__92:
0B26C1 2220646F 6573206E   A  3514    	DB	"\" does not contain valid ESP32 code"
0B26C9 6F742063 6F6E7461 
0B26D1 696E2076 616C6964 
0B26D9 20455350 33322063 
0B26E1 6F6465 
0B26E4 0D0A00              A  3515    	DB	13,10,0
                           A  3516    	SEGMENT CODE
                           A  3517    ;  371	void showCRC32(void) {
0B0B70                     A  3518    _showCRC32:
                           A  3519    .DEFINE "_showCRC32"
                           A  3520    
                           A  3521    .VALUE _showCRC32
                           A  3522    
                           A  3523    .CLASS 2
                           A  3524    
                           A  3525    .TYPE 65
                           A  3526    
                           A  3527    .ENDEF
                           A  3528    
                           A  3529    .BEGFUNC "showCRC32",371,"_showCRC32"
                           A  3530    
                           A  3531    .LINE 371
                           A  3532    
                           A  3533    .DEFINE "file"
                           A  3534    
                           A  3535    .CLASS 65
                           A  3536    
                           A  3537    .VALUE -1
                           A  3538    
                           A  3539    .TYPE 12
                           A  3540    
                           A  3541    .ENDEF
                           A  3542    
                           A  3543    .DEFINE "ptr"
                           A  3544    
                           A  3545    .CLASS 65
                           A  3546    
                           A  3547    .VALUE -4
                           A  3548    
                           A  3549    .TYPE 34
                           A  3550    
                           A  3551    .ENDEF
                           A  3552    
                           A  3553    .DEFINE "got"
                           A  3554    
                           A  3555    .CLASS 65
                           A  3556    
                           A  3557    .VALUE -7
                           A  3558    
                           A  3559    .TYPE 14
                           A  3560    
                           A  3561    .ENDEF
                           A  3562    
                           A  3563    .DEFINE "size"
                           A  3564    
                           A  3565    .CLASS 65
                           A  3566    
                           A  3567    .VALUE -10
                           A  3568    
                           A  3569    .TYPE 14
                           A  3570    
                           A  3571    .ENDEF
                           A  3572    
                           A  3573    .DEFINE "vdpcrc"
                           A  3574    
                           A  3575    .CLASS 65
                           A  3576    
                           A  3577    .VALUE -14
                           A  3578    
                           A  3579    .TYPE 15
                           A  3580    
                           A  3581    .ENDEF
                           A  3582    
                           A  3583    .DEFINE "moscrc"
                           A  3584    
                           A  3585    .CLASS 65
                           A  3586    
                           A  3587    .VALUE -18
                           A  3588    
                           A  3589    .TYPE 15
                           A  3590    
                           A  3591    .ENDEF
                           A  3592    
0B0B70 DDE5                A  3593    	PUSH	IX
0B0B72 DD210000 00         A  3594    	LD	IX,0
0B0B77 DD39                A  3595    	ADD	IX,SP
0B0B79 ED22EE              A  3596    	LEA	HL,IX+%FFFFFFEE
0B0B7C F9                  A  3597    	LD	SP,HL
                           A  3598    ;  372		uint8_t file;
                           A  3599    ;  373		uint24_t got,size;
                           A  3600    ;  374		uint32_t moscrc,vdpcrc;
                           A  3601    ;  375		char* ptr;
                           A  3602    ;  376	
                           A  3603    ;  377		moscrc = 0;
                           A  3604    .LINE 377
                           A  3605    
0B0B7D 01000000            A  3606    	LD	BC,0
0B0B81 AF                  A  3607    	XOR	A,A
0B0B82 DD0FEE              A  3608    	LD	(IX+%FFFFFFEE),BC
0B0B85 DD77F1              A  3609    	LD	(IX+%FFFFFFF1),A
                           A  3610    ;  378		vdpcrc = 0;
                           A  3611    .LINE 378
                           A  3612    
0B0B88 AF                  A  3613    	XOR	A,A
0B0B89 DD0FF2              A  3614    	LD	(IX+%FFFFFFF2),BC
0B0B8C DD77F5              A  3615    	LD	(IX+%FFFFFFF5),A
                           A  3616    ;  379	
                           A  3617    ;  380		printf("Calculating CRC");
                           A  3618    .LINE 380
                           A  3619    
0B0B8F 01 35 15 0B         A  3620    	LD	BC,___print_uputch
0B0B93 ED43 04 24 0B       A  3621    	LD	(___print_xputch),BC
0B0B98 01 E7 26 0B         A  3622    	LD	BC,L__94
0B0B9C C5                  A  3623    	PUSH	BC
0B0B9D CD C4 13 0B         A  3624    	CALL	___print_sendstring
0B0BA1 C1                  A  3625    	POP	BC
                           A  3626    ;  381	
                           A  3627    ;  382		if(flashmos) {
                           A  3628    .LINE 382
                           A  3629    
0B0BA2 3A 19 1F 0B         A  3630    	LD	A,(_flashmos)
0B0BA6 B7                  A  3631    	OR	A,A
0B0BA7 28 7A               A  3632    	JR	Z,L_141
                           A  3633    ;  383			ptr = (char*)BUFFER1;
                           A  3634    .LINE 383
                           A  3635    
0B0BA9 01000005            A  3636    	LD	BC,327680
0B0BAD DD0FFC              A  3637    	LD	(IX+%FFFFFFFC),BC
                           A  3638    ;  384			file = mos_fopen(mosfilename, f
                           A  3639    .LINE 384
                           A  3640    
0B0BB0 01010000            A  3641    	LD	BC,1
0B0BB4 C5                  A  3642    	PUSH	BC
0B0BB5 01 48 27 0B         A  3643    	LD	BC,_mosfilename
0B0BB9 C5                  A  3644    	PUSH	BC
0B0BBA CD B5 0E 0B         A  3645    	CALL	_mos_fopen
0B0BBE C1                  A  3646    	POP	BC
0B0BBF C1                  A  3647    	POP	BC
0B0BC0 DD77FF              A  3648    	LD	(IX+%FFFFFFFF),A
                           A  3649    ;  385			crc32_initialize();
                           A  3650    .LINE 385
                           A  3651    
0B0BC3 CD 47 12 0B         A  3652    	CALL	_crc32_initialize
                           A  3653    ;  386			
                           A  3654    ;  387			// Read file to memory
                           A  3655    ;  388			while((got = mos_fread(file, pt
                           A  3656    .LINE 388
                           A  3657    
0B0BC7 18 22               A  3658    	JR	L_131
0B0BC9                     A  3659    L_132:
                           A  3660    ;  389				crc32(ptr, got);
                           A  3661    .LINE 389
                           A  3662    
0B0BC9 DD07F9              A  3663    	LD	BC,(IX+%FFFFFFF9)
0B0BCC C5                  A  3664    	PUSH	BC
0B0BCD DD07FC              A  3665    	LD	BC,(IX+%FFFFFFFC)
0B0BD0 C5                  A  3666    	PUSH	BC
0B0BD1 CD 99 12 0B         A  3667    	CALL	_crc32
0B0BD5 C1                  A  3668    	POP	BC
0B0BD6 C1                  A  3669    	POP	BC
                           A  3670    ;  390				ptr += got;
                           A  3671    .LINE 390
                           A  3672    
0B0BD7 DD07F9              A  3673    	LD	BC,(IX+%FFFFFFF9)
0B0BDA DD27FC              A  3674    	LD	HL,(IX+%FFFFFFFC)
0B0BDD 09                  A  3675    	ADD	HL,BC
0B0BDE DD2FFC              A  3676    	LD	(IX+%FFFFFFFC),HL
                           A  3677    ;  391				putch('.');
                           A  3678    .LINE 391
                           A  3679    
0B0BE1 012E0000            A  3680    	LD	BC,46
0B0BE5 C5                  A  3681    	PUSH	BC
0B0BE6 CD E5 00 0B         A  3682    	CALL	_putch
0B0BEA C1                  A  3683    	POP	BC
                           A  3684    ;  392			}		
0B0BEB                     A  3685    L_131:
                           A  3686    .LINE 392
                           A  3687    
0B0BEB 01004000            A  3688    	LD	BC,16384
0B0BEF C5                  A  3689    	PUSH	BC
0B0BF0 DD07FC              A  3690    	LD	BC,(IX+%FFFFFFFC)
0B0BF3 C5                  A  3691    	PUSH	BC
0B0BF4 DD4EFF              A  3692    	LD	C,(IX+%FFFFFFFF)
0B0BF7 0600                A  3693    	LD	B,%0
0B0BF9 C5                  A  3694    	PUSH	BC
0B0BFA CD F7 0E 0B         A  3695    	CALL	_mos_fread
0B0BFE C1                  A  3696    	POP	BC
0B0BFF C1                  A  3697    	POP	BC
0B0C00 C1                  A  3698    	POP	BC
0B0C01 DD2FF9              A  3699    	LD	(IX+%FFFFFFF9),HL
0B0C04 E5C1                A  3700    	LD	BC,HL
0B0C06 B7                  A  3701    	OR	A,A
0B0C07 ED62                A  3702    	SBC	HL,HL
0B0C09 B7                  A  3703    	OR	A,A
0B0C0A ED42                A  3704    	SBC	HL,BC
0B0C0C 38 BB               A  3705    	JR	C,L_132
                           A  3706    ;  393			moscrc = crc32_finalize();
                           A  3707    .LINE 393
                           A  3708    
0B0C0E CD 5C 12 0B         A  3709    	CALL	_crc32_finalize
0B0C12 DD2FEE              A  3710    	LD	(IX+%FFFFFFEE),HL
0B0C15 DD73F1              A  3711    	LD	(IX+%FFFFFFF1),E
                           A  3712    ;  394			mos_fclose(file);
                           A  3713    .LINE 394
                           A  3714    
0B0C18 DD4EFF              A  3715    	LD	C,(IX+%FFFFFFFF)
0B0C1B 0600                A  3716    	LD	B,%0
0B0C1D C5                  A  3717    	PUSH	BC
0B0C1E CD CD 0E 0B         A  3718    	CALL	_mos_fclose
0B0C22 C1                  A  3719    	POP	BC
                           A  3720    ;  395		}
0B0C23                     A  3721    L_141:
                           A  3722    .LINE 395
                           A  3723    
                           A  3724    ;  396		if(flashvdp) {
                           A  3725    .LINE 396
                           A  3726    
0B0C23 3A 1A 1F 0B         A  3727    	LD	A,(_flashvdp)
0B0C27 B7                  A  3728    	OR	A,A
0B0C28 28 67               A  3729    	JR	Z,L_142
                           A  3730    ;  397			file = mos_fopen(vdpfilename, f
                           A  3731    .LINE 397
                           A  3732    
0B0C2A 01010000            A  3733    	LD	BC,1
0B0C2E C5                  A  3734    	PUSH	BC
0B0C2F 01 48 28 0B         A  3735    	LD	BC,_vdpfilename
0B0C33 C5                  A  3736    	PUSH	BC
0B0C34 CD B5 0E 0B         A  3737    	CALL	_mos_fopen
0B0C38 C1                  A  3738    	POP	BC
0B0C39 C1                  A  3739    	POP	BC
0B0C3A DD77FF              A  3740    	LD	(IX+%FFFFFFFF),A
                           A  3741    ;  398			crc32_initialize();
                           A  3742    .LINE 398
                           A  3743    
0B0C3D CD 47 12 0B         A  3744    	CALL	_crc32_initialize
                           A  3745    ;  399			while(1) {
0B0C41                     A  3746    L_138:
                           A  3747    .LINE 399
                           A  3748    
                           A  3749    ;  400				size = mos_fread(file, (cha
                           A  3750    .LINE 400
                           A  3751    
0B0C41 01004000            A  3752    	LD	BC,16384
0B0C45 C5                  A  3753    	PUSH	BC
0B0C46 01000005            A  3754    	LD	BC,327680
0B0C4A C5                  A  3755    	PUSH	BC
0B0C4B DD4EFF              A  3756    	LD	C,(IX+%FFFFFFFF)
0B0C4E 0600                A  3757    	LD	B,%0
0B0C50 C5                  A  3758    	PUSH	BC
0B0C51 CD F7 0E 0B         A  3759    	CALL	_mos_fread
0B0C55 C1                  A  3760    	POP	BC
0B0C56 C1                  A  3761    	POP	BC
0B0C57 C1                  A  3762    	POP	BC
0B0C58 DD2FF6              A  3763    	LD	(IX+%FFFFFFF6),HL
                           A  3764    ;  401				if(size == 0) break;
                           A  3765    .LINE 401
                           A  3766    
0B0C5B CD F2 18 0B         A  3767    	CALL	__icmpzero
0B0C5F 28 1B               A  3768    	JR	Z,L_139
                           A  3769    ;  402				putch('.');
                           A  3770    .LINE 402
                           A  3771    
0B0C61 012E0000            A  3772    	LD	BC,46
0B0C65 C5                  A  3773    	PUSH	BC
0B0C66 CD E5 00 0B         A  3774    	CALL	_putch
0B0C6A C1                  A  3775    	POP	BC
                           A  3776    ;  403				crc32((char *)BUFFER1, size
                           A  3777    .LINE 403
                           A  3778    
0B0C6B DD07F6              A  3779    	LD	BC,(IX+%FFFFFFF6)
0B0C6E C5                  A  3780    	PUSH	BC
0B0C6F 01000005            A  3781    	LD	BC,327680
0B0C73 C5                  A  3782    	PUSH	BC
0B0C74 CD 99 12 0B         A  3783    	CALL	_crc32
0B0C78 C1                  A  3784    	POP	BC
0B0C79 C1                  A  3785    	POP	BC
0B0C7A 18 C5               A  3786    	JR	L_138
                           A  3787    ;  404			}
0B0C7C                     A  3788    L_139:
                           A  3789    .LINE 404
                           A  3790    
                           A  3791    ;  405			vdpcrc = crc32_finalize();
                           A  3792    .LINE 405
                           A  3793    
0B0C7C CD 5C 12 0B         A  3794    	CALL	_crc32_finalize
0B0C80 DD2FF2              A  3795    	LD	(IX+%FFFFFFF2),HL
0B0C83 DD73F5              A  3796    	LD	(IX+%FFFFFFF5),E
                           A  3797    ;  406			mos_fclose(file);
                           A  3798    .LINE 406
                           A  3799    
0B0C86 DD4EFF              A  3800    	LD	C,(IX+%FFFFFFFF)
0B0C89 0600                A  3801    	LD	B,%0
0B0C8B C5                  A  3802    	PUSH	BC
0B0C8C CD CD 0E 0B         A  3803    	CALL	_mos_fclose
0B0C90 C1                  A  3804    	POP	BC
                           A  3805    ;  407		}
0B0C91                     A  3806    L_142:
                           A  3807    .LINE 407
                           A  3808    
                           A  3809    ;  408		printf("\r\n\r\n");
                           A  3810    .LINE 408
                           A  3811    
0B0C91 01 35 15 0B         A  3812    	LD	BC,___print_uputch
0B0C95 ED43 04 24 0B       A  3813    	LD	(___print_xputch),BC
0B0C9A 01 F7 26 0B         A  3814    	LD	BC,L__99
0B0C9E C5                  A  3815    	PUSH	BC
0B0C9F CD C4 13 0B         A  3816    	CALL	___print_sendstring
0B0CA3 C1                  A  3817    	POP	BC
                           A  3818    ;  409		if(flashmos) printf("MOS CRC 0x%04l
                           A  3819    .LINE 409
                           A  3820    
0B0CA4 3A 19 1F 0B         A  3821    	LD	A,(_flashmos)
0B0CA8 B7                  A  3822    	OR	A,A
0B0CA9 28 3F               A  3823    	JR	Z,L_145
0B0CAB 01 35 15 0B         A  3824    	LD	BC,___print_uputch
0B0CAF ED43 04 24 0B       A  3825    	LD	(___print_xputch),BC
0B0CB4 01 FC 26 0B         A  3826    	LD	BC,L__101
0B0CB8 C5                  A  3827    	PUSH	BC
0B0CB9 CD C4 13 0B         A  3828    	CALL	___print_sendstring
0B0CBD C1                  A  3829    	POP	BC
0B0CBE 3E04                A  3830    	LD	A,%4
0B0CC0 32 5B 29 0B         A  3831    	LD	(___print_fmt+5),A
0B0CC4 3E60                A  3832    	LD	A,%60
0B0CC6 32 57 29 0B         A  3833    	LD	(___print_fmt+1),A
0B0CCA 3E78                A  3834    	LD	A,%78
0B0CCC 32 5A 29 0B         A  3835    	LD	(___print_fmt+4),A
0B0CD0 DD4EF1              A  3836    	LD	C,(IX+%FFFFFFF1)
0B0CD3 0600                A  3837    	LD	B,%0
0B0CD5 C5                  A  3838    	PUSH	BC
0B0CD6 DD07EE              A  3839    	LD	BC,(IX+%FFFFFFEE)
0B0CD9 C5                  A  3840    	PUSH	BC
0B0CDA CD DA 1C 0B         A  3841    	CALL	__u_ultoa
0B0CDE C1                  A  3842    	POP	BC
0B0CDF C1                  A  3843    	POP	BC
0B0CE0 01 07 27 0B         A  3844    	LD	BC,L__102
0B0CE4 C5                  A  3845    	PUSH	BC
0B0CE5 CD C4 13 0B         A  3846    	CALL	___print_sendstring
0B0CE9 C1                  A  3847    	POP	BC
0B0CEA                     A  3848    L_145:
                           A  3849    ;  410		if(flashvdp) printf("VDP CRC 0x%04l
                           A  3850    .LINE 410
                           A  3851    
0B0CEA 3A 1A 1F 0B         A  3852    	LD	A,(_flashvdp)
0B0CEE B7                  A  3853    	OR	A,A
0B0CEF 28 3F               A  3854    	JR	Z,L_146
0B0CF1 01 35 15 0B         A  3855    	LD	BC,___print_uputch
0B0CF5 ED43 04 24 0B       A  3856    	LD	(___print_xputch),BC
0B0CFA 01 0A 27 0B         A  3857    	LD	BC,L__104
0B0CFE C5                  A  3858    	PUSH	BC
0B0CFF CD C4 13 0B         A  3859    	CALL	___print_sendstring
0B0D03 C1                  A  3860    	POP	BC
0B0D04 3E04                A  3861    	LD	A,%4
0B0D06 32 5B 29 0B         A  3862    	LD	(___print_fmt+5),A
0B0D0A 3E60                A  3863    	LD	A,%60
0B0D0C 32 57 29 0B         A  3864    	LD	(___print_fmt+1),A
0B0D10 3E78                A  3865    	LD	A,%78
0B0D12 32 5A 29 0B         A  3866    	LD	(___print_fmt+4),A
0B0D16 DD4EF5              A  3867    	LD	C,(IX+%FFFFFFF5)
0B0D19 0600                A  3868    	LD	B,%0
0B0D1B C5                  A  3869    	PUSH	BC
0B0D1C DD07F2              A  3870    	LD	BC,(IX+%FFFFFFF2)
0B0D1F C5                  A  3871    	PUSH	BC
0B0D20 CD DA 1C 0B         A  3872    	CALL	__u_ultoa
0B0D24 C1                  A  3873    	POP	BC
0B0D25 C1                  A  3874    	POP	BC
0B0D26 01 15 27 0B         A  3875    	LD	BC,L__105
0B0D2A C5                  A  3876    	PUSH	BC
0B0D2B CD C4 13 0B         A  3877    	CALL	___print_sendstring
0B0D2F C1                  A  3878    	POP	BC
0B0D30                     A  3879    L_146:
                           A  3880    ;  411		printf("\r\n");
                           A  3881    .LINE 411
                           A  3882    
0B0D30 01 35 15 0B         A  3883    	LD	BC,___print_uputch
0B0D34 ED43 04 24 0B       A  3884    	LD	(___print_xputch),BC
0B0D39 01 18 27 0B         A  3885    	LD	BC,L__106
0B0D3D C5                  A  3886    	PUSH	BC
0B0D3E CD C4 13 0B         A  3887    	CALL	___print_sendstring
0B0D42 C1                  A  3888    	POP	BC
                           A  3889    ;  412	}
                           A  3890    .LINE 412
                           A  3891    
0B0D43 DDF9                A  3892    	LD	SP,IX
0B0D45 DDE1                A  3893    	POP	IX
0B0D47 C9                  A  3894    	RET	
                           A  3895    
                           A  3896    
                           A  3897    ;**************************** _showCRC32 ******
                           A  3898    ;Name                         Addr/Register   S
                           A  3899    ;__u_ultoa                           IMPORT  --
                           A  3900    ;___print_fmt                        IMPORT    
                           A  3901    ;_vdpfilename                        STATIC    
                           A  3902    ;_flashvdp                           STATIC    
                           A  3903    ;_mos_fclose                         IMPORT  --
                           A  3904    ;_crc32_finalize                     IMPORT  --
                           A  3905    ;_mos_fread                          IMPORT  --
                           A  3906    ;_putch                              IMPORT  --
                           A  3907    ;_crc32                              IMPORT  --
                           A  3908    ;_crc32_initialize                   IMPORT  --
                           A  3909    ;_mosfilename                        STATIC    
                           A  3910    ;_mos_fopen                          IMPORT  --
                           A  3911    ;_flashmos                           STATIC    
                           A  3912    ;___print_sendstring                 IMPORT  --
                           A  3913    ;___print_xputch                     IMPORT    
                           A  3914    ;___print_uputch                     IMPORT  --
                           A  3915    ;moscrc                               IX-18    
                           A  3916    ;vdpcrc                               IX-14    
                           A  3917    ;size                                 IX-10    
                           A  3918    ;got                                   IX-7    
                           A  3919    ;ptr                                   IX-4    
                           A  3920    ;file                                  IX-1    
                           A  3921    
                           A  3922    
                           A  3923    ; Stack Frame Size: 24 (bytes)
                           A  3924    ;       Spill Code: 0 (instruction)
                           A  3925    
                           A  3926    
                           A  3927    .ENDFUNC "showCRC32",412,"_showCRC32"
                           A  3928    	SEGMENT STRSECT
0B26E7                     A  3929    L__94:
0B26E7 43616C63 756C6174   A  3930    	DB	"Calculating CRC"
0B26EF 696E6720 435243 
0B26F6 00                  A  3931    	DB	0
0B26F7                     A  3932    L__99:
0B26F7 0D0A0D0A 00         A  3933    	DB	13,10,13,10,0
0B26FC                     A  3934    L__101:
0B26FC 4D4F5320 43524320   A  3935    	DB	"MOS CRC 0x"
0B2704 3078 
0B2706 00                  A  3936    	DB	0
0B2707                     A  3937    L__102:
0B2707 0D0A00              A  3938    	DB	13,10,0
0B270A                     A  3939    L__104:
0B270A 56445020 43524320   A  3940    	DB	"VDP CRC 0x"
0B2712 3078 
0B2714 00                  A  3941    	DB	0
0B2715                     A  3942    L__105:
0B2715 0D0A00              A  3943    	DB	13,10,0
0B2718                     A  3944    L__106:
0B2718 0D0A00              A  3945    	DB	13,10,0
                           A  3946    	SEGMENT CODE
                           A  3947    ;  413	
                           A  3948    ;  414	int main(int argc, char * argv[]) {	
0B0D48                     A  3949    _main:
                           A  3950    .DEFINE "_main"
                           A  3951    
                           A  3952    .VALUE _main
                           A  3953    
                           A  3954    .CLASS 2
                           A  3955    
                           A  3956    .TYPE 68
                           A  3957    
                           A  3958    .ENDEF
                           A  3959    
                           A  3960    .BEGFUNC "main",414,"_main"
                           A  3961    
                           A  3962    .LINE 414
                           A  3963    
                           A  3964    .DEFINE "argc"
                           A  3965    
                           A  3966    .CLASS 65
                           A  3967    
                           A  3968    .VALUE 6
                           A  3969    
                           A  3970    .TYPE 4
                           A  3971    
                           A  3972    .ENDEF
                           A  3973    
                           A  3974    .DEFINE "argv"
                           A  3975    
                           A  3976    .CLASS 65
                           A  3977    
                           A  3978    .VALUE 9
                           A  3979    
                           A  3980    .TYPE 290
                           A  3981    
                           A  3982    .ENDEF
                           A  3983    
                           A  3984    .DEFINE "sysvars"
                           A  3985    
                           A  3986    .CLASS 65
                           A  3987    
                           A  3988    .VALUE -3
                           A  3989    
                           A  3990    .TAG "NONAME3"
                           A  3991    
                           A  3992    .TYPE 40
                           A  3993    
                           A  3994    .ENDEF
                           A  3995    
0B0D48 DDE5                A  3996    	PUSH	IX
0B0D4A DD210000 00         A  3997    	LD	IX,0
0B0D4F DD39                A  3998    	ADD	IX,SP
0B0D51 C5                  A  3999    	PUSH	BC
                           A  4000    ;  415		sysvar_t *sysvars;
                           A  4001    ;  416		sysvars = getsysvars();
                           A  4002    .LINE 416
                           A  4003    
0B0D52 CD 85 0E 0B         A  4004    	CALL	_getsysvars
0B0D56 DD2FFD              A  4005    	LD	(IX+%FFFFFFFD),HL
                           A  4006    ;  417	
                           A  4007    ;  418		// All checks
                           A  4008    ;  419		if(argc == 1) {
                           A  4009    .LINE 419
                           A  4010    
0B0D59 01010000            A  4011    	LD	BC,1
0B0D5D DD2706              A  4012    	LD	HL,(IX+%6)
0B0D60 B7                  A  4013    	OR	A,A
0B0D61 ED42                A  4014    	SBC	HL,BC
0B0D63 20 0B               A  4015    	JR	NZ,L_150
                           A  4016    ;  420			usage();
                           A  4017    .LINE 420
                           A  4018    
0B0D65 CD 50 03 0B         A  4019    	CALL	_usage
                           A  4020    ;  421			return 0;
                           A  4021    .LINE 421
                           A  4022    
0B0D69 B7                  A  4023    	OR	A,A
0B0D6A ED62                A  4024    	SBC	HL,HL
0B0D6C C3 5A 0E 0B         A  4025    	JR	L_172
                           A  4026    ;  422		}
0B0D70                     A  4027    L_150:
                           A  4028    .LINE 422
                           A  4029    
                           A  4030    ;  423		if(!parseCommands(argc, argv)) {
                           A  4031    .LINE 423
                           A  4032    
0B0D70 DD0709              A  4033    	LD	BC,(IX+%9)
0B0D73 C5                  A  4034    	PUSH	BC
0B0D74 DD0706              A  4035    	LD	BC,(IX+%6)
0B0D77 C5                  A  4036    	PUSH	BC
0B0D78 CD B0 07 0B         A  4037    	CALL	_parseCommands
0B0D7C C1                  A  4038    	POP	BC
0B0D7D C1                  A  4039    	POP	BC
0B0D7E B7                  A  4040    	OR	A,A
0B0D7F 20 0C               A  4041    	JR	NZ,L_152
                           A  4042    ;  424			usage();
                           A  4043    .LINE 424
                           A  4044    
0B0D81 CD 50 03 0B         A  4045    	CALL	_usage
                           A  4046    ;  425			return EXIT_INVALIDPARAMETER;
                           A  4047    .LINE 425
                           A  4048    
0B0D85 21130000            A  4049    	LD	HL,19
0B0D89 C3 5A 0E 0B         A  4050    	JR	L_172
                           A  4051    ;  426		}
0B0D8D                     A  4052    L_152:
                           A  4053    .LINE 426
                           A  4054    
                           A  4055    ;  427		if(!filesExist()) return EXIT_FILEN
                           A  4056    .LINE 427
                           A  4057    
0B0D8D CD 70 09 0B         A  4058    	CALL	_filesExist
0B0D91 B7                  A  4059    	OR	A,A
0B0D92 20 08               A  4060    	JR	NZ,L_154
0B0D94 21040000            A  4061    	LD	HL,4
0B0D98 C3 5A 0E 0B         A  4062    	JR	L_172
0B0D9C                     A  4063    L_154:
                           A  4064    ;  428		if(!firmwareContentOK()) {
                           A  4065    .LINE 428
                           A  4066    
0B0D9C CD 2D 0A 0B         A  4067    	CALL	_firmwareContentOK
0B0DA0 B7                  A  4068    	OR	A,A
0B0DA1 20 08               A  4069    	JR	NZ,L_155
                           A  4070    ;  429			return EXIT_INVALIDPARAMETER;
                           A  4071    .LINE 429
                           A  4072    
0B0DA3 21130000            A  4073    	LD	HL,19
0B0DA7 C3 5A 0E 0B         A  4074    	JR	L_172
                           A  4075    ;  430		}
0B0DAB                     A  4076    L_155:
                           A  4077    .LINE 430
                           A  4078    
                           A  4079    ;  431	
                           A  4080    ;  432		// Banner
                           A  4081    ;  433		putch(12);
                           A  4082    .LINE 433
                           A  4083    
0B0DAB 010C0000            A  4084    	LD	BC,12
0B0DAF C5                  A  4085    	PUSH	BC
0B0DB0 CD E5 00 0B         A  4086    	CALL	_putch
0B0DB4 C1                  A  4087    	POP	BC
                           A  4088    ;  434		print_version();
                           A  4089    .LINE 434
                           A  4090    
0B0DB5 CD 2F 03 0B         A  4091    	CALL	_print_version
                           A  4092    ;  435	
                           A  4093    ;  436		// Skip CRC32 and user input when '
                           A  4094    ;  437		if(!silent) {
                           A  4095    .LINE 437
                           A  4096    
0B0DB9 3A 1B 1F 0B         A  4097    	LD	A,(_silent)
0B0DBD B7                  A  4098    	OR	A,A
0B0DBE 20 12               A  4099    	JR	NZ,L_158
                           A  4100    ;  438			showCRC32();
                           A  4101    .LINE 438
                           A  4102    
0B0DC0 CD 70 0B 0B         A  4103    	CALL	_showCRC32
                           A  4104    ;  439			if(!getResponse()) return 0;
                           A  4105    .LINE 439
                           A  4106    
0B0DC4 CD 75 03 0B         A  4107    	CALL	_getResponse
0B0DC8 B7                  A  4108    	OR	A,A
0B0DC9 20 07               A  4109    	JR	NZ,L_158
0B0DCB B7                  A  4110    	OR	A,A
0B0DCC ED62                A  4111    	SBC	HL,HL
0B0DCE C3 5A 0E 0B         A  4112    	JR	L_172
                           A  4113    ;  440		}
0B0DD2                     A  4114    L_158:
                           A  4115    .LINE 440
                           A  4116    
                           A  4117    ;  441	
                           A  4118    ;  442		printf("Flashing firmware...\r\n");
                           A  4119    .LINE 442
                           A  4120    
0B0DD2 01 35 15 0B         A  4121    	LD	BC,___print_uputch
0B0DD6 ED43 04 24 0B       A  4122    	LD	(___print_xputch),BC
0B0DDB 01 1B 27 0B         A  4123    	LD	BC,L__114
0B0DDF C5                  A  4124    	PUSH	BC
0B0DE0 CD C4 13 0B         A  4125    	CALL	___print_sendstring
0B0DE4 C1                  A  4126    	POP	BC
                           A  4127    ;  443		delayms(750);
                           A  4128    .LINE 443
                           A  4129    
0B0DE5 01EE0200            A  4130    	LD	BC,750
0B0DE9 C5                  A  4131    	PUSH	BC
0B0DEA CD 61 10 0B         A  4132    	CALL	_delayms
0B0DEE C1                  A  4133    	POP	BC
                           A  4134    ;  444	
                           A  4135    ;  445		if(flashvdp) {
                           A  4136    .LINE 445
                           A  4137    
0B0DEF 3A 1A 1F 0B         A  4138    	LD	A,(_flashvdp)
0B0DF3 B7                  A  4139    	OR	A,A
0B0DF4 28 3E               A  4140    	JR	Z,L_168
                           A  4141    ;  446			while(sysvars->scrheight == 0);
0B0DF6                     A  4142    L_160:
                           A  4143    .LINE 446
                           A  4144    
0B0DF6 DD31FD              A  4145    	LD	IY,(IX+%FFFFFFFD)
0B0DF9 FD2711              A  4146    	LD	HL,(IY+%11)
0B0DFC CD 47 1C 0B         A  4147    	CALL	__scmpzero
0B0E00 28 F4               A  4148    	JR	Z,L_160
                           A  4149    ;  447			//beep(1);
                           A  4150    ;  448			sysvars->scrheight = 0;
                           A  4151    .LINE 448
                           A  4152    
0B0E02 DD31FD              A  4153    	LD	IY,(IX+%FFFFFFFD)
0B0E05 FD361100            A  4154    	LD	(IY+%11),%0
0B0E09 FD361200            A  4155    	LD	(IY+%12),%0
                           A  4156    ;  449			if(flashvdp) update_vdp(vdpfile
                           A  4157    .LINE 449
                           A  4158    
0B0E0D 3A 1A 1F 0B         A  4159    	LD	A,(_flashvdp)
0B0E11 B7                  A  4160    	OR	A,A
0B0E12 28 0A               A  4161    	JR	Z,L_163
0B0E14 01 48 28 0B         A  4162    	LD	BC,_vdpfilename
0B0E18 C5                  A  4163    	PUSH	BC
0B0E19 CD F9 03 0B         A  4164    	CALL	_update_vdp
0B0E1D C1                  A  4165    	POP	BC
0B0E1E                     A  4166    L_163:
                           A  4167    ;  450			echoVDP(1);
                           A  4168    .LINE 450
                           A  4169    
0B0E1E 01010000            A  4170    	LD	BC,1
0B0E22 C5                  A  4171    	PUSH	BC
0B0E23 CD D8 06 0B         A  4172    	CALL	_echoVDP
0B0E27 C1                  A  4173    	POP	BC
                           A  4174    ;  451			while(sysvars->scrheight == 0);
0B0E28                     A  4175    L_165:
                           A  4176    .LINE 451
                           A  4177    
0B0E28 DD31FD              A  4178    	LD	IY,(IX+%FFFFFFFD)
0B0E2B FD2711              A  4179    	LD	HL,(IY+%11)
0B0E2E CD 47 1C 0B         A  4180    	CALL	__scmpzero
0B0E32 28 F4               A  4181    	JR	Z,L_165
                           A  4182    ;  452		}
0B0E34                     A  4183    L_168:
                           A  4184    .LINE 452
                           A  4185    
                           A  4186    ;  453		//beep(2);
                           A  4187    ;  454		if(flashmos) update_mos(mosfilename
                           A  4188    .LINE 454
                           A  4189    
0B0E34 3A 19 1F 0B         A  4190    	LD	A,(_flashmos)
0B0E38 B7                  A  4191    	OR	A,A
0B0E39 28 0A               A  4192    	JR	Z,L_169
0B0E3B 01 48 27 0B         A  4193    	LD	BC,_mosfilename
0B0E3F C5                  A  4194    	PUSH	BC
0B0E40 CD 9F 04 0B         A  4195    	CALL	_update_mos
0B0E44 C1                  A  4196    	POP	BC
0B0E45                     A  4197    L_169:
                           A  4198    ;  455		//beep(3);
                           A  4199    ;  456		printf("Press reset button");
                           A  4200    .LINE 456
                           A  4201    
0B0E45 01 35 15 0B         A  4202    	LD	BC,___print_uputch
0B0E49 ED43 04 24 0B       A  4203    	LD	(___print_xputch),BC
0B0E4E 01 32 27 0B         A  4204    	LD	BC,L__120
0B0E52 C5                  A  4205    	PUSH	BC
0B0E53 CD C4 13 0B         A  4206    	CALL	___print_sendstring
0B0E57 C1                  A  4207    	POP	BC
                           A  4208    ;  457		while(1);
0B0E58                     A  4209    L_171:
                           A  4210    .LINE 457
                           A  4211    
0B0E58 18 FE               A  4212    	JR	L_171
                           A  4213    ;  458	}
0B0E5A                     A  4214    L_172:
                           A  4215    .LINE 458
                           A  4216    
0B0E5A DDF9                A  4217    	LD	SP,IX
0B0E5C DDE1                A  4218    	POP	IX
0B0E5E C9                  A  4219    	RET	
                           A  4220    
                           A  4221    
                           A  4222    ;**************************** _main ***********
                           A  4223    ;Name                         Addr/Register   S
                           A  4224    ;_mosfilename                        STATIC    
                           A  4225    ;_flashmos                           STATIC    
                           A  4226    ;_vdpfilename                        STATIC    
                           A  4227    ;_flashvdp                           STATIC    
                           A  4228    ;_delayms                            IMPORT  --
                           A  4229    ;___print_sendstring                 IMPORT  --
                           A  4230    ;___print_xputch                     IMPORT    
                           A  4231    ;___print_uputch                     IMPORT  --
                           A  4232    ;_silent                             STATIC    
                           A  4233    ;_putch                              IMPORT  --
                           A  4234    ;_getsysvars                         IMPORT  --
                           A  4235    ;sysvars                               IX-3    
                           A  4236    ;argv                                  IX+9    
                           A  4237    ;argc                                  IX+6    
                           A  4238    
                           A  4239    
                           A  4240    ; Stack Frame Size: 15 (bytes)
                           A  4241    ;       Spill Code: 0 (instruction)
                           A  4242    
                           A  4243    
                           A  4244    .ENDFUNC "main",458,"_main"
                           A  4245    	SEGMENT STRSECT
0B271B                     A  4246    L__114:
0B271B 466C6173 68696E67   A  4247    	DB	"Flashing firmware..."
0B2723 20666972 6D776172 
0B272B 652E2E2E 
0B272F 0D0A00              A  4248    	DB	13,10,0
0B2732                     A  4249    L__120:
0B2732 50726573 73207265   A  4250    	DB	"Press reset button"
0B273A 73657420 62757474 
0B2742 6F6E 
0B2744 00                  A  4251    	DB	0
                           A  4252    	XREF _memcmp:ROM
                           A  4253    	XREF _strcpy:ROM
                           A  4254    	XREF _getFileSize:ROM
                           A  4255    	XREF _crc32_finalize:ROM
                           A  4256    	XREF _crc32_initialize:ROM
                           A  4257    	XREF _crc32:ROM
                           A  4258    	XREF _delayms:ROM
                           A  4259    	XREF _startVDPupdate:ROM
                           A  4260    	XREF _fastmemcpy:ROM
                           A  4261    	XREF _lockFlashKeyRegister:ROM
                           A  4262    	XREF _enableFlashKeyRegister:ROM
                           A  4263    	XREF _mos_fread:ROM
                           A  4264    	XREF _mos_fclose:ROM
                           A  4265    	XREF _mos_fopen:ROM
                           A  4266    	XREF _getsysvars:ROM
                           A  4267    	XREF _getch:ROM
                           A  4268    	XREF _tolower:ROM
                           A  4269    	XREF __u_ultoa:ROM
                           A  4270    	XREF __u_itoa:ROM
                           A  4271    	XREF ___print_sendstring:ROM
                           A  4272    	XREF ___print_xputch:ROM
                           A  4273    	XREF ___print_uputch:ROM
                           A  4274    	XREF ___print_fmt:ROM
                           A  4275    	XREF __iand:ROM
                           A  4276    	XREF __stoiu:ROM
                           A  4277    	XREF __scmpzero:ROM
                           A  4278    	XREF __icmpzero:ROM
                           A  4279    	XREF __seqcaseD:ROM
                           A  4280    	XREF __ishru_b:ROM
                           A  4281    	XREF __ishrs_b:ROM
                           A  4282    	XDEF _main
                           A  4283    	XDEF _showCRC32
                           A  4284    	XDEF _firmwareContentOK
                           A  4285    	XDEF _filesExist
                           A  4286    	XDEF _parseCommands
                           A  4287    	XDEF _silent
                           A  4288    	XDEF _vdpfilename
                           A  4289    	XDEF _flashvdp
                           A  4290    	XDEF _mosfilename
                           A  4291    	XDEF _flashmos
                           A  4292    	XDEF _getCommand
                           A  4293    	XDEF _echoVDP
                           A  4294    	XDEF _update_mos
                           A  4295    	XDEF _update_vdp
                           A  4296    	XDEF _getResponse
                           A  4297    	XDEF _usage
                           A  4298    	XDEF _print_version
                           A  4299    	XDEF _containsESP32Header
                           A  4300    	XDEF _esp32_magicnumbers
                           A  4301    	XDEF _containsMosHeader
                           A  4302    	XDEF _mos_magicnumbers
                           A  4303    	XDEF _vdp_ota_present
                           A  4304    	XDEF _getCharAt
                           A  4305    	XDEF _beep
                           A  4306    	XDEF _putch
                           A  4307    	XDEF _errno
                           A  4308    	END


Errors: 0
Warnings: 0
Lines Assembled: 4309
