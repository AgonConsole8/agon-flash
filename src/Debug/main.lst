Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED01-Nov-23     21:34:19     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",51
                           A   144    .DEFINE "clock"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 15
                           A   148    .ENDEF
                           A   149    .DEFINE "vpd_protocol_flags"
                           A   150    .VALUE 4
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "keyascii"
                           A   155    .VALUE 5
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "keymods"
                           A   160    .VALUE 6
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "cursorX"
                           A   165    .VALUE 7
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "cursorY"
                           A   170    .VALUE 8
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "scrchar"
                           A   175    .VALUE 9
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "scrpixel"
                           A   180    .VALUE 10
                           A   181    .CLASS 8
                           A   182    .TYPE 14
                           A   183    .ENDEF
                           A   184    .DEFINE "audioChannel"
                           A   185    .VALUE 13
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "audioSuccess"
                           A   190    .VALUE 14
                           A   191    .CLASS 8
                           A   192    .TYPE 12
                           A   193    .ENDEF
                           A   194    .DEFINE "scrwidth"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 13
                           A   198    .ENDEF
                           A   199    .DEFINE "scrheight"
                           A   200    .VALUE 17
                           A   201    .CLASS 8
                           A   202    .TYPE 13
                           A   203    .ENDEF
                           A   204    .DEFINE "scrcols"
                           A   205    .VALUE 19
                           A   206    .CLASS 8
                           A   207    .TYPE 12
                           A   208    .ENDEF
                           A   209    .DEFINE "scrrows"
                           A   210    .VALUE 20
                           A   211    .CLASS 8
                           A   212    .TYPE 12
                           A   213    .ENDEF
                           A   214    .DEFINE "scrcolours"
                           A   215    .VALUE 21
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "scrpixelIndex"
                           A   220    .VALUE 22
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "keycode"
                           A   225    .VALUE 23
                           A   226    .CLASS 8
                           A   227    .TYPE 12
                           A   228    .ENDEF
                           A   229    .DEFINE "keydown"
                           A   230    .VALUE 24
                           A   231    .CLASS 8
                           A   232    .TYPE 12
                           A   233    .ENDEF
                           A   234    .DEFINE "keycount"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 12
                           A   238    .ENDEF
                           A   239    .DEFINE "rtc"
                           A   240    .VALUE 26
                           A   241    .CLASS 8
                           A   242    .DIM 6
                           A   243    .TYPE 108
                           A   244    .ENDEF
                           A   245    .DEFINE "rtc_spare"
                           A   246    .VALUE 32
                           A   247    .CLASS 8
                           A   248    .DIM 2
                           A   249    .TYPE 108
                           A   250    .ENDEF
                           A   251    .DEFINE "keydelay"
                           A   252    .VALUE 34
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .DEFINE "keyrate"
                           A   257    .VALUE 36
                           A   258    .CLASS 8
                           A   259    .TYPE 13
                           A   260    .ENDEF
                           A   261    .DEFINE "keyled"
                           A   262    .VALUE 38
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "scrmode"
                           A   267    .VALUE 39
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "rtc_enable"
                           A   272    .VALUE 40
                           A   273    .CLASS 8
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    .DEFINE "mouseX"
                           A   277    .VALUE 41
                           A   278    .CLASS 8
                           A   279    .TYPE 13
                           A   280    .ENDEF
                           A   281    .DEFINE "mouseY"
                           A   282    .VALUE 43
                           A   283    .CLASS 8
                           A   284    .TYPE 13
                           A   285    .ENDEF
                           A   286    .DEFINE "mouseButtons"
                           A   287    .VALUE 45
                           A   288    .CLASS 8
                           A   289    .TYPE 12
                           A   290    .ENDEF
                           A   291    .DEFINE "mouseWheel"
                           A   292    .VALUE 46
                           A   293    .CLASS 8
                           A   294    .TYPE 12
                           A   295    .ENDEF
                           A   296    .DEFINE "mouseXDelta"
                           A   297    .VALUE 47
                           A   298    .CLASS 8
                           A   299    .TYPE 13
                           A   300    .ENDEF
                           A   301    .DEFINE "mouseYDelta"
                           A   302    .VALUE 49
                           A   303    .CLASS 8
                           A   304    .TYPE 13
                           A   305    .ENDEF
                           A   306    .ENDREC "NONAME3"
                           A   307    .BEGREC "NONAME4",8
                           A   308    .DEFINE "baudRate"
                           A   309    .VALUE 0
                           A   310    .CLASS 8
                           A   311    .TYPE 4
                           A   312    .ENDEF
                           A   313    .DEFINE "dataBits"
                           A   314    .VALUE 3
                           A   315    .CLASS 8
                           A   316    .TYPE 12
                           A   317    .ENDEF
                           A   318    .DEFINE "stopBits"
                           A   319    .VALUE 4
                           A   320    .CLASS 8
                           A   321    .TYPE 12
                           A   322    .ENDEF
                           A   323    .DEFINE "parity"
                           A   324    .VALUE 5
                           A   325    .CLASS 8
                           A   326    .TYPE 12
                           A   327    .ENDEF
                           A   328    .DEFINE "flowcontrol"
                           A   329    .VALUE 6
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "eir"
                           A   334    .VALUE 7
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .ENDREC "NONAME4"
                           A   339    .BEGREC "NONAME5",15
                           A   340    .DEFINE "fs"
                           A   341    .VALUE 0
                           A   342    .CLASS 8
                           A   343    .TYPE 46
                           A   344    .ENDEF
                           A   345    .DEFINE "id"
                           A   346    .VALUE 3
                           A   347    .CLASS 8
                           A   348    .TYPE 13
                           A   349    .ENDEF
                           A   350    .DEFINE "attr"
                           A   351    .VALUE 5
                           A   352    .CLASS 8
                           A   353    .TYPE 12
                           A   354    .ENDEF
                           A   355    .DEFINE "stat"
                           A   356    .VALUE 6
                           A   357    .CLASS 8
                           A   358    .TYPE 12
                           A   359    .ENDEF
                           A   360    .DEFINE "sclust"
                           A   361    .VALUE 7
                           A   362    .CLASS 8
                           A   363    .TYPE 15
                           A   364    .ENDEF
                           A   365    .DEFINE "objsize"
                           A   366    .VALUE 11
                           A   367    .CLASS 8
                           A   368    .TYPE 15
                           A   369    .ENDEF
                           A   370    .ENDREC "NONAME5"
                           A   371    .BEGREC "NONAME6",36
                           A   372    .DEFINE "obj"
                           A   373    .VALUE 0
                           A   374    .CLASS 8
                           A   375    .TAG "NONAME5"
                           A   376    .TYPE 8
                           A   377    .ENDEF
                           A   378    .DEFINE "flag"
                           A   379    .VALUE 15
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .DEFINE "err"
                           A   384    .VALUE 16
                           A   385    .CLASS 8
                           A   386    .TYPE 12
                           A   387    .ENDEF
                           A   388    .DEFINE "fptr"
                           A   389    .VALUE 17
                           A   390    .CLASS 8
                           A   391    .TYPE 15
                           A   392    .ENDEF
                           A   393    .DEFINE "clust"
                           A   394    .VALUE 21
                           A   395    .CLASS 8
                           A   396    .TYPE 15
                           A   397    .ENDEF
                           A   398    .DEFINE "sect"
                           A   399    .VALUE 25
                           A   400    .CLASS 8
                           A   401    .TYPE 15
                           A   402    .ENDEF
                           A   403    .DEFINE "dir_sect"
                           A   404    .VALUE 29
                           A   405    .CLASS 8
                           A   406    .TYPE 15
                           A   407    .ENDEF
                           A   408    .DEFINE "dir_ptr"
                           A   409    .VALUE 33
                           A   410    .CLASS 8
                           A   411    .TYPE 46
                           A   412    .ENDEF
                           A   413    .ENDREC "NONAME6"
                           A   414    	SEGMENT BSS
0B219A                     A   415    _errno:
0B219A                     A   416    	DS	3
                           A   417    .DEFINE "errno"
                           A   418    .ALIAS "_errno"
                           A   419    .CLASS 83
                           A   420    .VALUE _errno
                           A   421    .TYPE 4
                           A   422    .ENDEF
                           A   423    ;    1	/*
                           A   424    ;    2	 * Title:			Agon firmware upgra
                           A   425    ;    3	 * Author:			Jeroen Venema
                           A   426    ;    4	 * Created:			17/12/2022
                           A   427    ;    5	 * Last Updated:	14/10/2023
                           A   428    ;    6	 * 
                           A   429    ;    7	 * Modinfo:
                           A   430    ;    8	 * 17/12/2022:		Initial version
                           A   431    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   432    ;   10	 *                  Sends cls just befo
                           A   433    ;   11	 * 07/06/2023:		Included faster crc
                           A   434    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   435    ;   13	 */
                           A   436    ;   14	
                           A   437    ;   15	#include <ez80.h>
                           A   438    ;   16	#include <stdio.h>
                           A   439    ;   17	#include <stdlib.h>
                           A   440    ;   18	#include <ERRNO.H>
                           A   441    ;   19	#include <ctype.h>
                           A   442    ;   20	#include "mos-interface.h"
                           A   443    ;   21	#include "flash.h"
                           A   444    ;   22	#include "agontimer.h"
                           A   445    ;   23	#include "crc32.h"
                           A   446    ;   24	#include "filesize.h"
                           A   447    ;   25	#include "./stdint.h"
                           A   448    ;   26	#include <string.h>
                           A   449    ;   27	
                           A   450    ;   28	#define UNLOCKMATCHLENGTH 9
                           A   451    ;   29	#define EXIT_FILENOTFOUND	4
                           A   452    ;   30	#define EXIT_INVALIDPARAMETER	19
                           A   453    ;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
                           A   454    ;   32	#define DEFAULT_VDPFIRMWARE	"firmware.b
                           A   455    ;   33	
                           A   456    ;   34	#define CMDUNKNOWN	0
                           A   457    ;   35	#define CMDALL		1
                           A   458    ;   36	#define CMDMOS		2
                           A   459    ;   37	#define CMDVDP		3
                           A   460    ;   38	#define CMDSILENT	4
                           A   461    ;   39	
                           A   462    ;   40	int errno; // needed by standard librar
                           A   463    	SEGMENT CODE
                           A   464    ;   41	enum states{firmware,retry,systemreset}
                           A   465    ;   42	
                           A   466    ;   43	// separate putch function that doesn't
                           A   467    ;   44	// UART0 initialization done by MOS fir
                           A   468    ;   45	// This utility doesn't run without MOS
                           A   469    ;   46	int putch(int c)
                           A   470    ;   47	{
0B00E5                     A   471    _putch:
                           A   472    .DEFINE "_putch"
                           A   473    
                           A   474    .VALUE _putch
                           A   475    
                           A   476    .CLASS 2
                           A   477    
                           A   478    .TYPE 68
                           A   479    
                           A   480    .ENDEF
                           A   481    
                           A   482    .BEGFUNC "putch",47,"_putch"
                           A   483    
                           A   484    .LINE 47
                           A   485    
                           A   486    .DEFINE "c"
                           A   487    
                           A   488    .CLASS 65
                           A   489    
                           A   490    .VALUE 6
                           A   491    
                           A   492    .TYPE 4
                           A   493    
0B00E5 DDE5                A   494    	PUSH	IX
0B00E7 DD210000 00         A   495    	LD	IX,0
0B00EC DD39                A   496    	ADD	IX,SP
                           A   497    .ENDEF
                           A   498    
                           A   499    ;   48		UINT8 lsr,temt;
                           A   500    ;   49		
                           A   501    ;   50		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   502    L_1:
                           A   503    .LINE 50
                           A   504    
0B00EE ED38C5              A   505    	IN0	A,(197)
0B00F1 E640                A   506    	AND	A,%40
0B00F3 B7ED62              A   507    	UEXT	HL
0B00F6 6F                  A   508    	LD	L,A
0B00F7 CD 70 1B 0B         A   509    	CALL	__icmpzero
0B00FB 28 F1               A   510    	JR	Z,L_1
                           A   511    ;   51		UART0_THR = c;
                           A   512    .LINE 51
                           A   513    
0B00FD DD7E06              A   514    	LD	A,(IX+%6)
0B0100 ED39C0              A   515    	OUT0	(192),A
                           A   516    ;   52		return c;
                           A   517    .LINE 52
                           A   518    
0B0103 DD2706              A   519    	LD	HL,(IX+%6)
                           A   520    ;   53	}
                           A   521    .LINE 53
                           A   522    
0B0106 DDF9                A   523    	LD	SP,IX
0B0108 DDE1                A   524    	POP	IX
0B010A C9                  A   525    	RET	
                           A   526    
                           A   527    
                           A   528    ;**************************** _putch **********
                           A   529    ;Name                         Addr/Register   S
                           A   530    ;c                                     IX+6    
                           A   531    
                           A   532    
                           A   533    ; Stack Frame Size: 9 (bytes)
                           A   534    ;       Spill Code: 0 (instruction)
                           A   535    
                           A   536    
                           A   537    .ENDFUNC "putch",53,"_putch"
                           A   538    ;   54	
                           A   539    ;   55	void beep(unsigned int number) {
0B010B                     A   540    _beep:
                           A   541    .DEFINE "_beep"
                           A   542    
                           A   543    .VALUE _beep
                           A   544    
                           A   545    .CLASS 2
                           A   546    
                           A   547    .TYPE 65
                           A   548    
                           A   549    .ENDEF
                           A   550    
                           A   551    .BEGFUNC "beep",55,"_beep"
                           A   552    
                           A   553    .LINE 55
                           A   554    
                           A   555    .DEFINE "number"
                           A   556    
                           A   557    .CLASS 65
                           A   558    
                           A   559    .VALUE 6
                           A   560    
                           A   561    .TYPE 14
                           A   562    
                           A   563    .ENDEF
                           A   564    
0B010B DDE5                A   565    	PUSH	IX
0B010D DD210000 00         A   566    	LD	IX,0
0B0112 DD39                A   567    	ADD	IX,SP
                           A   568    ;   56		while(number--) {
                           A   569    .LINE 56
                           A   570    
0B0114 18 14               A   571    	JR	L_5
0B0116                     A   572    L_6:
                           A   573    ;   57			putch(7);
                           A   574    .LINE 57
                           A   575    
0B0116 01070000            A   576    	LD	BC,7
0B011A C5                  A   577    	PUSH	BC
0B011B CD E5 00 0B         A   578    	CALL	_putch
0B011F C1                  A   579    	POP	BC
                           A   580    ;   58			delayms(250);
                           A   581    .LINE 58
                           A   582    
0B0120 01FA0000            A   583    	LD	BC,250
0B0124 C5                  A   584    	PUSH	BC
0B0125 CD DF 12 0B         A   585    	CALL	_delayms
0B0129 C1                  A   586    	POP	BC
                           A   587    ;   59		}
0B012A                     A   588    L_5:
                           A   589    .LINE 59
                           A   590    
0B012A DD2706              A   591    	LD	HL,(IX+%6)
0B012D DD3106              A   592    	LD	IY,(IX+%6)
0B0130 ED33FF              A   593    	LEA	IY,IY+%FFFFFFFF
0B0133 DD3E06              A   594    	LD	(IX+%6),IY
0B0136 CD 70 1B 0B         A   595    	CALL	__icmpzero
0B013A 20 DA               A   596    	JR	NZ,L_6
                           A   597    ;   60	}
                           A   598    .LINE 60
                           A   599    
0B013C DDF9                A   600    	LD	SP,IX
0B013E DDE1                A   601    	POP	IX
0B0140 C9                  A   602    	RET	
                           A   603    
                           A   604    
                           A   605    ;**************************** _beep ***********
                           A   606    ;Name                         Addr/Register   S
                           A   607    ;_delayms                            IMPORT  --
                           A   608    ;_putch                              IMPORT  --
                           A   609    ;number                                IX+6    
                           A   610    
                           A   611    
                           A   612    ; Stack Frame Size: 9 (bytes)
                           A   613    ;       Spill Code: 0 (instruction)
                           A   614    
                           A   615    
                           A   616    .ENDFUNC "beep",60,"_beep"
                           A   617    ;   61	
                           A   618    ;   62	uint8_t getCharAt(uint16_t x, uint16_t 
0B0141                     A   619    _getCharAt:
                           A   620    .DEFINE "_getCharAt"
                           A   621    
                           A   622    .VALUE _getCharAt
                           A   623    
                           A   624    .CLASS 2
                           A   625    
                           A   626    .TYPE 76
                           A   627    
                           A   628    .ENDEF
                           A   629    
                           A   630    .BEGFUNC "getCharAt",62,"_getCharAt"
                           A   631    
                           A   632    .LINE 62
                           A   633    
                           A   634    .DEFINE "x"
                           A   635    
                           A   636    .CLASS 65
                           A   637    
                           A   638    .VALUE 6
                           A   639    
                           A   640    .TYPE 13
                           A   641    
                           A   642    .ENDEF
                           A   643    
                           A   644    .DEFINE "y"
                           A   645    
                           A   646    .CLASS 65
                           A   647    
                           A   648    .VALUE 9
                           A   649    
                           A   650    .TYPE 13
                           A   651    
                           A   652    .ENDEF
                           A   653    
                           A   654    .DEFINE "sysvars"
                           A   655    
                           A   656    .CLASS 65
                           A   657    
                           A   658    .VALUE -3
                           A   659    
                           A   660    .TAG "NONAME3"
                           A   661    
                           A   662    .TYPE 40
                           A   663    
                           A   664    .ENDEF
                           A   665    
0B0141 DDE5                A   666    	PUSH	IX
0B0143 DD210000 00         A   667    	LD	IX,0
0B0148 DD39                A   668    	ADD	IX,SP
0B014A C5                  A   669    	PUSH	BC
                           A   670    ;   63		sysvar_t *sysvars = getsysvars();
                           A   671    .LINE 63
                           A   672    
0B014B CD 03 11 0B         A   673    	CALL	_getsysvars
0B014F DD2FFD              A   674    	LD	(IX+%FFFFFFFD),HL
                           A   675    ;   64		delayms(20);
                           A   676    .LINE 64
                           A   677    
0B0152 01140000            A   678    	LD	BC,20
0B0156 C5                  A   679    	PUSH	BC
0B0157 CD DF 12 0B         A   680    	CALL	_delayms
0B015B C1                  A   681    	POP	BC
                           A   682    ;   65		putch(23);
                           A   683    .LINE 65
                           A   684    
0B015C 01170000            A   685    	LD	BC,23
0B0160 C5                  A   686    	PUSH	BC
0B0161 CD E5 00 0B         A   687    	CALL	_putch
0B0165 C1                  A   688    	POP	BC
                           A   689    ;   66		putch(0);
                           A   690    .LINE 66
                           A   691    
0B0166 01000000            A   692    	LD	BC,0
0B016A C5                  A   693    	PUSH	BC
0B016B CD E5 00 0B         A   694    	CALL	_putch
0B016F C1                  A   695    	POP	BC
                           A   696    ;   67		putch(131);
                           A   697    .LINE 67
                           A   698    
0B0170 01830000            A   699    	LD	BC,131
0B0174 C5                  A   700    	PUSH	BC
0B0175 CD E5 00 0B         A   701    	CALL	_putch
0B0179 C1                  A   702    	POP	BC
                           A   703    ;   68		putch(x & 0xFF);
                           A   704    .LINE 68
                           A   705    
0B017A DD0706              A   706    	LD	BC,(IX+%6)
0B017D CD AD 17 0B         A   707    	CALL	__stoiu
0B0181 7D                  A   708    	LD	A,L
0B0182 B7ED62              A   709    	UEXT	HL
0B0185 6F                  A   710    	LD	L,A
0B0186 E5                  A   711    	PUSH	HL
0B0187 CD E5 00 0B         A   712    	CALL	_putch
0B018B C1                  A   713    	POP	BC
                           A   714    ;   69		putch((x >> 8) & 0xFF);
                           A   715    .LINE 69
                           A   716    
0B018C DD0706              A   717    	LD	BC,(IX+%6)
0B018F CD AD 17 0B         A   718    	CALL	__stoiu
0B0193 3E08                A   719    	LD	A,%8
0B0195 CD E2 15 0B         A   720    	CALL	__ishrs_b
0B0199 7D                  A   721    	LD	A,L
0B019A B7ED62              A   722    	UEXT	HL
0B019D 6F                  A   723    	LD	L,A
0B019E E5                  A   724    	PUSH	HL
0B019F CD E5 00 0B         A   725    	CALL	_putch
0B01A3 C1                  A   726    	POP	BC
                           A   727    ;   70		putch(y & 0xFF);
                           A   728    .LINE 70
                           A   729    
0B01A4 DD0709              A   730    	LD	BC,(IX+%9)
0B01A7 CD AD 17 0B         A   731    	CALL	__stoiu
0B01AB 7D                  A   732    	LD	A,L
0B01AC B7ED62              A   733    	UEXT	HL
0B01AF 6F                  A   734    	LD	L,A
0B01B0 E5                  A   735    	PUSH	HL
0B01B1 CD E5 00 0B         A   736    	CALL	_putch
0B01B5 C1                  A   737    	POP	BC
                           A   738    ;   71		putch((y >> 8) & 0xFF);
                           A   739    .LINE 71
                           A   740    
0B01B6 DD0709              A   741    	LD	BC,(IX+%9)
0B01B9 CD AD 17 0B         A   742    	CALL	__stoiu
0B01BD 3E08                A   743    	LD	A,%8
0B01BF CD E2 15 0B         A   744    	CALL	__ishrs_b
0B01C3 7D                  A   745    	LD	A,L
0B01C4 B7ED62              A   746    	UEXT	HL
0B01C7 6F                  A   747    	LD	L,A
0B01C8 E5                  A   748    	PUSH	HL
0B01C9 CD E5 00 0B         A   749    	CALL	_putch
0B01CD C1                  A   750    	POP	BC
                           A   751    ;   72		delayms(100);
                           A   752    .LINE 72
                           A   753    
0B01CE 01640000            A   754    	LD	BC,100
0B01D2 C5                  A   755    	PUSH	BC
0B01D3 CD DF 12 0B         A   756    	CALL	_delayms
0B01D7 C1                  A   757    	POP	BC
                           A   758    ;   73		return sysvars->scrchar;
                           A   759    .LINE 73
                           A   760    
0B01D8 DD31FD              A   761    	LD	IY,(IX+%FFFFFFFD)
0B01DB FD7E09              A   762    	LD	A,(IY+%9)
                           A   763    ;   74	}
                           A   764    .LINE 74
                           A   765    
0B01DE DDF9                A   766    	LD	SP,IX
0B01E0 DDE1                A   767    	POP	IX
0B01E2 C9                  A   768    	RET	
                           A   769    
                           A   770    
                           A   771    ;**************************** _getCharAt ******
                           A   772    ;Name                         Addr/Register   S
                           A   773    ;_putch                              IMPORT  --
                           A   774    ;_delayms                            IMPORT  --
                           A   775    ;_getsysvars                         IMPORT  --
                           A   776    ;sysvars                               IX-3    
                           A   777    ;y                                     IX+9    
                           A   778    ;x                                     IX+6    
                           A   779    
                           A   780    
                           A   781    ; Stack Frame Size: 15 (bytes)
                           A   782    ;       Spill Code: 0 (instruction)
                           A   783    
                           A   784    
                           A   785    .ENDFUNC "getCharAt",74,"_getCharAt"
                           A   786    ;   75	
                           A   787    ;   76	bool vdp_ota_present(void) {
0B01E3                     A   788    _vdp_ota_present:
                           A   789    .DEFINE "_vdp_ota_present"
                           A   790    
                           A   791    .VALUE _vdp_ota_present
                           A   792    
                           A   793    .CLASS 2
                           A   794    
                           A   795    .TYPE 76
                           A   796    
                           A   797    .ENDEF
                           A   798    
                           A   799    .BEGFUNC "vdp_ota_present",76,"_vdp_ota_present
                           A   800    
                           A   801    .LINE 76
                           A   802    
                           A   803    .DEFINE "n"
                           A   804    
                           A   805    .CLASS 65
                           A   806    
                           A   807    .VALUE -2
                           A   808    
                           A   809    .TYPE 13
                           A   810    
                           A   811    .ENDEF
                           A   812    
                           A   813    .DEFINE "test"
                           A   814    
                           A   815    .CLASS 65
                           A   816    
                           A   817    .VALUE -11
                           A   818    
                           A   819    .DIM 9
                           A   820    
                           A   821    .TYPE 98
                           A   822    
                           A   823    .ENDEF
                           A   824    
0B01E3 DDE5                A   825    	PUSH	IX
0B01E5 DD210000 00         A   826    	LD	IX,0
0B01EA DD39                A   827    	ADD	IX,SP
0B01EC ED22F5              A   828    	LEA	HL,IX+%FFFFFFF5
0B01EF F9                  A   829    	LD	SP,HL
                           A   830    ;   77		char test[UNLOCKMATCHLENGTH];
                           A   831    ;   78		uint16_t n;
                           A   832    ;   79	
                           A   833    ;   80		putch(23);
                           A   834    .LINE 80
                           A   835    
0B01F0 01170000            A   836    	LD	BC,23
0B01F4 C5                  A   837    	PUSH	BC
0B01F5 CD E5 00 0B         A   838    	CALL	_putch
0B01F9 C1                  A   839    	POP	BC
                           A   840    ;   81		putch(0);
                           A   841    .LINE 81
                           A   842    
0B01FA 01000000            A   843    	LD	BC,0
0B01FE C5                  A   844    	PUSH	BC
0B01FF CD E5 00 0B         A   845    	CALL	_putch
0B0203 C1                  A   846    	POP	BC
                           A   847    ;   82		putch(0xA1);
                           A   848    .LINE 82
                           A   849    
0B0204 01A10000            A   850    	LD	BC,161
0B0208 C5                  A   851    	PUSH	BC
0B0209 CD E5 00 0B         A   852    	CALL	_putch
0B020D C1                  A   853    	POP	BC
                           A   854    ;   83		putch(0);
                           A   855    .LINE 83
                           A   856    
0B020E 01000000            A   857    	LD	BC,0
0B0212 C5                  A   858    	PUSH	BC
0B0213 CD E5 00 0B         A   859    	CALL	_putch
0B0217 C1                  A   860    	POP	BC
                           A   861    ;   84		printf("unlock");
                           A   862    .LINE 84
                           A   863    
0B0218 01 B3 17 0B         A   864    	LD	BC,___print_uputch
0B021C ED43 04 28 0B       A   865    	LD	(___print_xputch),BC
0B0221 01 87 28 0B         A   866    	LD	BC,L__5
0B0225 C5                  A   867    	PUSH	BC
0B0226 CD 42 16 0B         A   868    	CALL	___print_sendstring
0B022A C1                  A   869    	POP	BC
                           A   870    ;   85	
                           A   871    ;   86		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   872    .LINE 86
                           A   873    
0B022B DD36FE00            A   874    	LD	(IX+%FFFFFFFE),%0
0B022F DD36FF00            A   875    	LD	(IX+%FFFFFFFF),%0
0B0233 18 2A               A   876    	JR	L_12
0B0235                     A   877    L_10:
0B0235 01030000            A   878    	LD	BC,3
0B0239 C5                  A   879    	PUSH	BC
0B023A DD31FE              A   880    	LD	IY,(IX+%FFFFFFFE)
0B023D ED0308              A   881    	LEA	BC,IY+%8
0B0240 C5                  A   882    	PUSH	BC
0B0241 CD 41 01 0B         A   883    	CALL	_getCharAt
0B0245 C1                  A   884    	POP	BC
0B0246 C1                  A   885    	POP	BC
0B0247 DD07FE              A   886    	LD	BC,(IX+%FFFFFFFE)
0B024A CD AD 17 0B         A   887    	CALL	__stoiu
0B024E E5C1                A   888    	LD	BC,HL
0B0250 ED22F5              A   889    	LEA	HL,IX+%FFFFFFF5
0B0253 09                  A   890    	ADD	HL,BC
0B0254 77                  A   891    	LD	(HL),A
0B0255 DD27FE              A   892    	LD	HL,(IX+%FFFFFFFE)
0B0258 23                  A   893    	INC	HL
0B0259 DD75FE              A   894    	LD	(IX+%FFFFFFFE),L
0B025C DD74FF              A   895    	LD	(IX+%FFFFFFFF),H
0B025F                     A   896    L_12:
0B025F 49010A00            A   897    	LD.LIS	BC,10
0B0263 DD27FE              A   898    	LD	HL,(IX+%FFFFFFFE)
0B0266 B7                  A   899    	OR	A,A
0B0267 40ED42              A   900    	SBC.SIS	HL,BC
0B026A 38 C9               A   901    	JR	C,L_10
                           A   902    ;   87		// 3 - line on-screen
                           A   903    ;   88		if(memcmp(test, "unlocked!",UNLOCKM
                           A   904    .LINE 88
                           A   905    
0B026C 01090000            A   906    	LD	BC,9
0B0270 C5                  A   907    	PUSH	BC
0B0271 01 8E 28 0B         A   908    	LD	BC,L__7
0B0275 C5                  A   909    	PUSH	BC
0B0276 ED65F5              A   910    	PEA	IX+%FFFFFFF5
0B0279 CD 46 1B 0B         A   911    	CALL	_memcmp
0B027D C1                  A   912    	POP	BC
0B027E C1                  A   913    	POP	BC
0B027F C1                  A   914    	POP	BC
0B0280 CD 70 1B 0B         A   915    	CALL	__icmpzero
0B0284 20 04               A   916    	JR	NZ,L_14
0B0286 3E01                A   917    	LD	A,%1
0B0288 18 01               A   918    	JR	L_16
                           A   919    ;   89		else return false;
0B028A                     A   920    L_14:
                           A   921    .LINE 89
                           A   922    
0B028A AF                  A   923    	XOR	A,A
                           A   924    ;   90	}
0B028B                     A   925    L_16:
                           A   926    .LINE 90
                           A   927    
0B028B DDF9                A   928    	LD	SP,IX
0B028D DDE1                A   929    	POP	IX
0B028F C9                  A   930    	RET	
                           A   931    
                           A   932    
                           A   933    ;**************************** _vdp_ota_present 
                           A   934    ;Name                         Addr/Register   S
                           A   935    ;_memcmp                             IMPORT  --
                           A   936    ;___print_sendstring                 IMPORT  --
                           A   937    ;___print_xputch                     IMPORT    
                           A   938    ;___print_uputch                     IMPORT  --
                           A   939    ;_putch                              IMPORT  --
                           A   940    ;test                                 IX-11    
                           A   941    ;n                                     IX-2    
                           A   942    
                           A   943    
                           A   944    ; Stack Frame Size: 17 (bytes)
                           A   945    ;       Spill Code: 0 (instruction)
                           A   946    
                           A   947    
                           A   948    .ENDFUNC "vdp_ota_present",90,"_vdp_ota_present
                           A   949    	SEGMENT STRSECT
0B2887                     A   950    L__5:
0B2887 756E6C6F 636B       A   951    	DB	"unlock"
0B288D 00                  A   952    	DB	0
0B288E                     A   953    L__7:
0B288E 756E6C6F 636B6564   A   954    	DB	"unlocked!"
0B2896 21 
0B2897 00                  A   955    	DB	0
                           A   956    	SEGMENT DATA
0B218E                     A   957    _mos_magicnumbers:
0B218E F3                  A   958    	DB	243
0B218F ED                  A   959    	DB	237
0B2190 7D                  A   960    	DB	125
0B2191 5B                  A   961    	DB	91
0B2192 C3                  A   962    	DB	195
                           A   963    .DEFINE "mos_magicnumbers"
                           A   964    .ALIAS "_mos_magicnumbers"
                           A   965    .CLASS 69
                           A   966    .VALUE _mos_magicnumbers
                           A   967    .DIM 5
                           A   968    .TYPE 108
                           A   969    .ENDEF
                           A   970    ;   91	
                           A   971    ;   92	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   972    	SEGMENT CODE
                           A   973    ;   93	#define MOS_MAGICLENGTH 5
                           A   974    ;   94	bool containsMosHeader(uint8_t *filesta
0B0290                     A   975    _containsMosHeader:
                           A   976    .DEFINE "_containsMosHeader"
                           A   977    
                           A   978    .VALUE _containsMosHeader
                           A   979    
                           A   980    .CLASS 2
                           A   981    
                           A   982    .TYPE 76
                           A   983    
                           A   984    .ENDEF
                           A   985    
                           A   986    .BEGFUNC "containsMosHeader",94,"_containsMosHe
                           A   987    
                           A   988    .LINE 94
                           A   989    
                           A   990    .DEFINE "filestart"
                           A   991    
                           A   992    .CLASS 65
                           A   993    
                           A   994    .VALUE 6
                           A   995    
                           A   996    .TYPE 44
                           A   997    
                           A   998    .ENDEF
                           A   999    
                           A  1000    .DEFINE "n"
                           A  1001    
                           A  1002    .CLASS 65
                           A  1003    
                           A  1004    .VALUE -1
                           A  1005    
                           A  1006    .TYPE 12
                           A  1007    
                           A  1008    .ENDEF
                           A  1009    
                           A  1010    .DEFINE "match"
                           A  1011    
                           A  1012    .CLASS 65
                           A  1013    
                           A  1014    .VALUE -2
                           A  1015    
                           A  1016    .TYPE 12
                           A  1017    
                           A  1018    .ENDEF
                           A  1019    
0B0290 DDE5                A  1020    	PUSH	IX
0B0292 DD210000 00         A  1021    	LD	IX,0
0B0297 DD39                A  1022    	ADD	IX,SP
0B0299 3B                  A  1023    	DEC	SP
0B029A 3B                  A  1024    	DEC	SP
                           A  1025    ;   95		uint8_t n;
                           A  1026    ;   96		bool match = true;
                           A  1027    .LINE 96
                           A  1028    
0B029B DD36FE01            A  1029    	LD	(IX+%FFFFFFFE),%1
                           A  1030    ;   97	
                           A  1031    ;   98		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A  1032    .LINE 98
                           A  1033    
0B029F DD36FF00            A  1034    	LD	(IX+%FFFFFFFF),%0
0B02A3 18 27               A  1035    	JR	L_21
0B02A5                     A  1036    L_19:
0B02A5 DD7EFF              A  1037    	LD	A,(IX+%FFFFFFFF)
0B02A8 B7ED62              A  1038    	UEXT	HL
0B02AB 6F                  A  1039    	LD	L,A
0B02AC 01 8E 21 0B         A  1040    	LD	BC,_mos_magicnumbers
0B02B0 09                  A  1041    	ADD	HL,BC
0B02B1 E5FDE1              A  1042    	LD	IY,HL
0B02B4 DD7EFF              A  1043    	LD	A,(IX+%FFFFFFFF)
0B02B7 B7ED62              A  1044    	UEXT	HL
0B02BA 6F                  A  1045    	LD	L,A
0B02BB DD0706              A  1046    	LD	BC,(IX+%6)
0B02BE 09                  A  1047    	ADD	HL,BC
0B02BF FD7E00              A  1048    	LD	A,(IY)
0B02C2 BE                  A  1049    	CP	A,(HL)
0B02C3 28 04               A  1050    	JR	Z,L_20
0B02C5 DD36FE00            A  1051    	LD	(IX+%FFFFFFFE),%0
0B02C9                     A  1052    L_20:
0B02C9 DD34FF              A  1053    	INC	(IX+%FFFFFFFF)
0B02CC                     A  1054    L_21:
0B02CC DD7EFF              A  1055    	LD	A,(IX+%FFFFFFFF)
0B02CF FE05                A  1056    	CP	A,%5
0B02D1 38 D2               A  1057    	JR	C,L_19
                           A  1058    ;   99		return match;
                           A  1059    .LINE 99
                           A  1060    
0B02D3 DD7EFE              A  1061    	LD	A,(IX+%FFFFFFFE)
                           A  1062    ;  100	}
                           A  1063    .LINE 100
                           A  1064    
0B02D6 DDF9                A  1065    	LD	SP,IX
0B02D8 DDE1                A  1066    	POP	IX
0B02DA C9                  A  1067    	RET	
                           A  1068    
                           A  1069    
                           A  1070    ;**************************** _containsMosHeade
                           A  1071    ;Name                         Addr/Register   S
                           A  1072    ;_mos_magicnumbers                   STATIC    
                           A  1073    ;match                                 IX-2    
                           A  1074    ;n                                     IX-1    
                           A  1075    ;filestart                             IX+6    
                           A  1076    
                           A  1077    
                           A  1078    ; Stack Frame Size: 11 (bytes)
                           A  1079    ;       Spill Code: 0 (instruction)
                           A  1080    
                           A  1081    
                           A  1082    .ENDFUNC "containsMosHeader",100,"_containsMosH
                           A  1083    	SEGMENT DATA
0B2193                     A  1084    _esp32_magicnumbers:
0B2193 32                  A  1085    	DB	50
0B2194 54                  A  1086    	DB	84
0B2195 CD                  A  1087    	DB	205
0B2196 AB                  A  1088    	DB	171
                           A  1089    .DEFINE "esp32_magicnumbers"
                           A  1090    .ALIAS "_esp32_magicnumbers"
                           A  1091    .CLASS 69
                           A  1092    .VALUE _esp32_magicnumbers
                           A  1093    .DIM 4
                           A  1094    .TYPE 108
                           A  1095    .ENDEF
                           A  1096    ;  101	
                           A  1097    ;  102	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A  1098    	SEGMENT CODE
                           A  1099    ;  103	#define ESP32_MAGICLENGTH 4
                           A  1100    ;  104	#define ESP32_MAGICSTART 0x20
                           A  1101    ;  105	bool containsESP32Header(uint8_t *files
0B02DB                     A  1102    _containsESP32Header:
                           A  1103    .DEFINE "_containsESP32Header"
                           A  1104    
                           A  1105    .VALUE _containsESP32Header
                           A  1106    
                           A  1107    .CLASS 2
                           A  1108    
                           A  1109    .TYPE 76
                           A  1110    
                           A  1111    .ENDEF
                           A  1112    
                           A  1113    .BEGFUNC "containsESP32Header",105,"_containsES
                           A  1114    
                           A  1115    .LINE 105
                           A  1116    
                           A  1117    .DEFINE "filestart"
                           A  1118    
                           A  1119    .CLASS 65
                           A  1120    
                           A  1121    .VALUE 6
                           A  1122    
                           A  1123    .TYPE 44
                           A  1124    
                           A  1125    .ENDEF
                           A  1126    
                           A  1127    .DEFINE "n"
                           A  1128    
                           A  1129    .CLASS 65
                           A  1130    
                           A  1131    .VALUE -1
                           A  1132    
                           A  1133    .TYPE 12
                           A  1134    
                           A  1135    .ENDEF
                           A  1136    
                           A  1137    .DEFINE "match"
                           A  1138    
                           A  1139    .CLASS 65
                           A  1140    
                           A  1141    .VALUE -2
                           A  1142    
                           A  1143    .TYPE 12
                           A  1144    
                           A  1145    .ENDEF
                           A  1146    
0B02DB DDE5                A  1147    	PUSH	IX
0B02DD DD210000 00         A  1148    	LD	IX,0
0B02E2 DD39                A  1149    	ADD	IX,SP
0B02E4 3B                  A  1150    	DEC	SP
0B02E5 3B                  A  1151    	DEC	SP
                           A  1152    ;  106		uint8_t n;
                           A  1153    ;  107		bool match = true;
                           A  1154    .LINE 107
                           A  1155    
0B02E6 DD36FE01            A  1156    	LD	(IX+%FFFFFFFE),%1
                           A  1157    ;  108	
                           A  1158    ;  109		filestart += ESP32_MAGICSTART; // s
                           A  1159    .LINE 109
                           A  1160    
0B02EA DD3106              A  1161    	LD	IY,(IX+%6)
0B02ED ED3320              A  1162    	LEA	IY,IY+%20
0B02F0 DD3E06              A  1163    	LD	(IX+%6),IY
                           A  1164    ;  110		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A  1165    .LINE 110
                           A  1166    
0B02F3 DD36FF00            A  1167    	LD	(IX+%FFFFFFFF),%0
0B02F7 18 27               A  1168    	JR	L_28
0B02F9                     A  1169    L_26:
                           A  1170    ;  111			if(esp32_magicnumbers[n] != fil
                           A  1171    .LINE 111
                           A  1172    
0B02F9 DD7EFF              A  1173    	LD	A,(IX+%FFFFFFFF)
0B02FC B7ED62              A  1174    	UEXT	HL
0B02FF 6F                  A  1175    	LD	L,A
0B0300 01 93 21 0B         A  1176    	LD	BC,_esp32_magicnumbers
0B0304 09                  A  1177    	ADD	HL,BC
0B0305 E5FDE1              A  1178    	LD	IY,HL
0B0308 DD7EFF              A  1179    	LD	A,(IX+%FFFFFFFF)
0B030B B7ED62              A  1180    	UEXT	HL
0B030E 6F                  A  1181    	LD	L,A
0B030F DD0706              A  1182    	LD	BC,(IX+%6)
0B0312 09                  A  1183    	ADD	HL,BC
0B0313 FD7E00              A  1184    	LD	A,(IY)
0B0316 BE                  A  1185    	CP	A,(HL)
0B0317 28 04               A  1186    	JR	Z,L_27
0B0319 DD36FE00            A  1187    	LD	(IX+%FFFFFFFE),%0
                           A  1188    ;  112		}
0B031D                     A  1189    L_27:
                           A  1190    .LINE 112
                           A  1191    
0B031D DD34FF              A  1192    	INC	(IX+%FFFFFFFF)
0B0320                     A  1193    L_28:
0B0320 DD7EFF              A  1194    	LD	A,(IX+%FFFFFFFF)
0B0323 FE04                A  1195    	CP	A,%4
0B0325 38 D2               A  1196    	JR	C,L_26
                           A  1197    ;  113		return match;
                           A  1198    .LINE 113
                           A  1199    
0B0327 DD7EFE              A  1200    	LD	A,(IX+%FFFFFFFE)
                           A  1201    ;  114	}
                           A  1202    .LINE 114
                           A  1203    
0B032A DDF9                A  1204    	LD	SP,IX
0B032C DDE1                A  1205    	POP	IX
0B032E C9                  A  1206    	RET	
                           A  1207    
                           A  1208    
                           A  1209    ;**************************** _containsESP32Hea
                           A  1210    ;Name                         Addr/Register   S
                           A  1211    ;_esp32_magicnumbers                 STATIC    
                           A  1212    ;match                                 IX-2    
                           A  1213    ;n                                     IX-1    
                           A  1214    ;filestart                             IX+6    
                           A  1215    
                           A  1216    
                           A  1217    ; Stack Frame Size: 11 (bytes)
                           A  1218    ;       Spill Code: 0 (instruction)
                           A  1219    
                           A  1220    
                           A  1221    .ENDFUNC "containsESP32Header",114,"_containsES
                           A  1222    ;  115	
                           A  1223    ;  116	void print_version(void) {
0B032F                     A  1224    _print_version:
                           A  1225    .DEFINE "_print_version"
                           A  1226    
                           A  1227    .VALUE _print_version
                           A  1228    
                           A  1229    .CLASS 2
                           A  1230    
                           A  1231    .TYPE 65
                           A  1232    
                           A  1233    .ENDEF
                           A  1234    
                           A  1235    .BEGFUNC "print_version",116,"_print_version"
                           A  1236    
0B032F DDE5                A  1237    	PUSH	IX
0B0331 DD210000 00         A  1238    	LD	IX,0
0B0336 DD39                A  1239    	ADD	IX,SP
                           A  1240    ;  117		printf("Agon firmware upgrade utili
                           A  1241    .LINE 117
                           A  1242    
0B0338 01 B3 17 0B         A  1243    	LD	BC,___print_uputch
0B033C ED43 04 28 0B       A  1244    	LD	(___print_xputch),BC
0B0341 01 98 28 0B         A  1245    	LD	BC,L__16
0B0345 C5                  A  1246    	PUSH	BC
0B0346 CD 42 16 0B         A  1247    	CALL	___print_sendstring
0B034A C1                  A  1248    	POP	BC
                           A  1249    ;  118	}
                           A  1250    .LINE 118
                           A  1251    
0B034B DDF9                A  1252    	LD	SP,IX
0B034D DDE1                A  1253    	POP	IX
0B034F C9                  A  1254    	RET	
                           A  1255    
                           A  1256    
                           A  1257    ;**************************** _print_version **
                           A  1258    ;Name                         Addr/Register   S
                           A  1259    ;___print_sendstring                 IMPORT  --
                           A  1260    ;___print_xputch                     IMPORT    
                           A  1261    ;___print_uputch                     IMPORT  --
                           A  1262    
                           A  1263    
                           A  1264    ; Stack Frame Size: 6 (bytes)
                           A  1265    ;       Spill Code: 0 (instruction)
                           A  1266    
                           A  1267    
                           A  1268    .ENDFUNC "print_version",118,"_print_version"
                           A  1269    	SEGMENT STRSECT
0B2898                     A  1270    L__16:
0B2898 41676F6E 20666972   A  1271    	DB	"Agon firmware upgrade utility v1.6"
0B28A0 6D776172 65207570 
0B28A8 67726164 65207574 
0B28B0 696C6974 79207631 
0B28B8 2E36 
0B28BA 0A0D0A0D 00         A  1272    	DB	10,13,10,13,0
                           A  1273    	SEGMENT CODE
                           A  1274    ;  119	
                           A  1275    ;  120	void usage(void) {
0B0350                     A  1276    _usage:
                           A  1277    .DEFINE "_usage"
                           A  1278    
                           A  1279    .VALUE _usage
                           A  1280    
                           A  1281    .CLASS 2
                           A  1282    
                           A  1283    .TYPE 65
                           A  1284    
                           A  1285    .ENDEF
                           A  1286    
                           A  1287    .BEGFUNC "usage",120,"_usage"
                           A  1288    
0B0350 DDE5                A  1289    	PUSH	IX
0B0352 DD210000 00         A  1290    	LD	IX,0
0B0357 DD39                A  1291    	ADD	IX,SP
                           A  1292    ;  121		print_version();
                           A  1293    .LINE 121
                           A  1294    
0B0359 CD 2F 03 0B         A  1295    	CALL	_print_version
                           A  1296    ;  122		printf("Usage: FLASH [full | [mos <
                           A  1297    .LINE 122
                           A  1298    
0B035D 01 B3 17 0B         A  1299    	LD	BC,___print_uputch
0B0361 ED43 04 28 0B       A  1300    	LD	(___print_xputch),BC
0B0366 01 BF 28 0B         A  1301    	LD	BC,L__18
0B036A C5                  A  1302    	PUSH	BC
0B036B CD 42 16 0B         A  1303    	CALL	___print_sendstring
0B036F C1                  A  1304    	POP	BC
                           A  1305    ;  123	}
                           A  1306    .LINE 123
                           A  1307    
0B0370 DDF9                A  1308    	LD	SP,IX
0B0372 DDE1                A  1309    	POP	IX
0B0374 C9                  A  1310    	RET	
                           A  1311    
                           A  1312    
                           A  1313    ;**************************** _usage **********
                           A  1314    ;Name                         Addr/Register   S
                           A  1315    ;___print_sendstring                 IMPORT  --
                           A  1316    ;___print_xputch                     IMPORT    
                           A  1317    ;___print_uputch                     IMPORT  --
                           A  1318    
                           A  1319    
                           A  1320    ; Stack Frame Size: 6 (bytes)
                           A  1321    ;       Spill Code: 0 (instruction)
                           A  1322    
                           A  1323    
                           A  1324    .ENDFUNC "usage",123,"_usage"
                           A  1325    	SEGMENT STRSECT
0B28BF                     A  1326    L__18:
0B28BF 55736167 653A2046   A  1327    	DB	"Usage: FLASH [full | [mos <filename>] 
0B28C7 4C415348 205B6675 
0B28CF 6C6C207C 205B6D6F 
0B28D7 73203C66 696C656E 
0B28DF 616D653E 5D205B76 
0B28E7 6470203C 66696C65 
0B28EF 6E616D65 3E5D5D20 
0B28F7 3C2D737C 2D73696C 
0B28FF 656E743E 
0B2903 0A0D00              A  1328    	DB	10,13,0
                           A  1329    	SEGMENT CODE
                           A  1330    ;  124	
                           A  1331    ;  125	typedef enum {
                           A  1332    ;  126		MOS,
                           A  1333    ;  127		VDP
                           A  1334    ;  128	} flashtype;
                           A  1335    ;  129	
                           A  1336    ;  130	bool getResponse(void) {
0B0375                     A  1337    _getResponse:
                           A  1338    .DEFINE "_getResponse"
                           A  1339    
                           A  1340    .VALUE _getResponse
                           A  1341    
                           A  1342    .CLASS 2
                           A  1343    
                           A  1344    .TYPE 76
                           A  1345    
                           A  1346    .ENDEF
                           A  1347    
                           A  1348    .BEGFUNC "getResponse",130,"_getResponse"
                           A  1349    
                           A  1350    .LINE 130
                           A  1351    
                           A  1352    .DEFINE "response"
                           A  1353    
                           A  1354    .CLASS 65
                           A  1355    
                           A  1356    .VALUE -1
                           A  1357    
                           A  1358    .TYPE 12
                           A  1359    
                           A  1360    .ENDEF
                           A  1361    
0B0375 DDE5                A  1362    	PUSH	IX
0B0377 DD210000 00         A  1363    	LD	IX,0
0B037C DD39                A  1364    	ADD	IX,SP
0B037E 3B                  A  1365    	DEC	SP
                           A  1366    ;  131		uint8_t response = 0;
                           A  1367    .LINE 131
                           A  1368    
0B037F DD36FF00            A  1369    	LD	(IX+%FFFFFFFF),%0
                           A  1370    ;  132	
                           A  1371    ;  133		printf("Flash firmware (y/n)?");
                           A  1372    .LINE 133
                           A  1373    
0B0383 01 B3 17 0B         A  1374    	LD	BC,___print_uputch
0B0387 ED43 04 28 0B       A  1375    	LD	(___print_xputch),BC
0B038C 01 06 29 0B         A  1376    	LD	BC,L__20
0B0390 C5                  A  1377    	PUSH	BC
0B0391 CD 42 16 0B         A  1378    	CALL	___print_sendstring
0B0395 C1                  A  1379    	POP	BC
                           A  1380    ;  134		while((response != 'y') && (respons
                           A  1381    .LINE 134
                           A  1382    
0B0396 18 13               A  1383    	JR	L_34
0B0398                     A  1384    L_35:
0B0398 CD DD 10 0B         A  1385    	CALL	_getch
0B039C 47                  A  1386    	LD	B,A
0B039D 78                  A  1387    	LD	A,B
0B039E 17ED62              A  1388    	SEXT	HL
0B03A1 68                  A  1389    	LD	L,B
0B03A2 E5                  A  1390    	PUSH	HL
0B03A3 CD FD 1E 0B         A  1391    	CALL	_tolower
0B03A7 C1                  A  1392    	POP	BC
0B03A8 DD75FF              A  1393    	LD	(IX+%FFFFFFFF),L
0B03AB                     A  1394    L_34:
0B03AB DD7EFF              A  1395    	LD	A,(IX+%FFFFFFFF)
0B03AE FE79                A  1396    	CP	A,%79
0B03B0 28 07               A  1397    	JR	Z,L_38
0B03B2 DD7EFF              A  1398    	LD	A,(IX+%FFFFFFFF)
0B03B5 FE6E                A  1399    	CP	A,%6E
0B03B7 20 DF               A  1400    	JR	NZ,L_35
0B03B9                     A  1401    L_38:
                           A  1402    ;  135		if(response == 'n') printf("\r\nUse
                           A  1403    .LINE 135
                           A  1404    
0B03B9 DD7EFF              A  1405    	LD	A,(IX+%FFFFFFFF)
0B03BC FE6E                A  1406    	CP	A,%6E
0B03BE 20 15               A  1407    	JR	NZ,L_37
0B03C0 01 B3 17 0B         A  1408    	LD	BC,___print_uputch
0B03C4 ED43 04 28 0B       A  1409    	LD	(___print_xputch),BC
0B03C9 01 1C 29 0B         A  1410    	LD	BC,L__24
0B03CD C5                  A  1411    	PUSH	BC
0B03CE CD 42 16 0B         A  1412    	CALL	___print_sendstring
0B03D2 C1                  A  1413    	POP	BC
                           A  1414    ;  136		else printf("\r\n\r\n");
                           A  1415    .LINE 136
                           A  1416    
0B03D3 18 13               A  1417    	JR	L_39
0B03D5                     A  1418    L_37:
0B03D5 01 B3 17 0B         A  1419    	LD	BC,___print_uputch
0B03D9 ED43 04 28 0B       A  1420    	LD	(___print_xputch),BC
0B03DE 01 2D 29 0B         A  1421    	LD	BC,L__25
0B03E2 C5                  A  1422    	PUSH	BC
0B03E3 CD 42 16 0B         A  1423    	CALL	___print_sendstring
0B03E7 C1                  A  1424    	POP	BC
0B03E8                     A  1425    L_39:
                           A  1426    ;  137		return response == 'y';
                           A  1427    .LINE 137
                           A  1428    
0B03E8 DD7EFF              A  1429    	LD	A,(IX+%FFFFFFFF)
0B03EB FE79                A  1430    	CP	A,%79
0B03ED 20 04               A  1431    	JR	NZ,L__27
0B03EF 3E01                A  1432    	LD	A,%1
0B03F1 18 01               A  1433    	JR	L__28
0B03F3                     A  1434    L__27:
0B03F3 AF                  A  1435    	XOR	A,A
0B03F4                     A  1436    L__28:
                           A  1437    ;  138	}
                           A  1438    .LINE 138
                           A  1439    
0B03F4 DDF9                A  1440    	LD	SP,IX
0B03F6 DDE1                A  1441    	POP	IX
0B03F8 C9                  A  1442    	RET	
                           A  1443    
                           A  1444    
                           A  1445    ;**************************** _getResponse ****
                           A  1446    ;Name                         Addr/Register   S
                           A  1447    ;_getch                              IMPORT  --
                           A  1448    ;_tolower                            IMPORT  --
                           A  1449    ;___print_sendstring                 IMPORT  --
                           A  1450    ;___print_xputch                     IMPORT    
                           A  1451    ;___print_uputch                     IMPORT  --
                           A  1452    ;response                              IX-1    
                           A  1453    
                           A  1454    
                           A  1455    ; Stack Frame Size: 7 (bytes)
                           A  1456    ;       Spill Code: 0 (instruction)
                           A  1457    
                           A  1458    
                           A  1459    .ENDFUNC "getResponse",138,"_getResponse"
                           A  1460    	SEGMENT STRSECT
0B2906                     A  1461    L__20:
0B2906 466C6173 68206669   A  1462    	DB	"Flash firmware (y/n)?"
0B290E 726D7761 72652028 
0B2916 792F6E29 3F 
0B291B 00                  A  1463    	DB	0
0B291C                     A  1464    L__24:
0B291C 0D0A                A  1465    	DB	13,10
0B291E 55736572 2061626F   A  1466    	DB	"User abort"
0B2926 7274 
0B2928 0A0D0A0D 00         A  1467    	DB	10,13,10,13,0
0B292D                     A  1468    L__25:
0B292D 0D0A0D0A 00         A  1469    	DB	13,10,13,10,0
                           A  1470    	SEGMENT CODE
                           A  1471    ;  139	
                           A  1472    ;  140	uint8_t update_vdp(char *filename) {
0B03F9                     A  1473    _update_vdp:
                           A  1474    .DEFINE "_update_vdp"
                           A  1475    
                           A  1476    .VALUE _update_vdp
                           A  1477    
                           A  1478    .CLASS 2
                           A  1479    
                           A  1480    .TYPE 76
                           A  1481    
                           A  1482    .ENDEF
                           A  1483    
                           A  1484    .BEGFUNC "update_vdp",140,"_update_vdp"
                           A  1485    
                           A  1486    .LINE 140
                           A  1487    
                           A  1488    .DEFINE "filename"
                           A  1489    
                           A  1490    .CLASS 65
                           A  1491    
                           A  1492    .VALUE 6
                           A  1493    
                           A  1494    .TYPE 34
                           A  1495    
                           A  1496    .ENDEF
                           A  1497    
                           A  1498    .DEFINE "file"
                           A  1499    
                           A  1500    .CLASS 65
                           A  1501    
                           A  1502    .VALUE -1
                           A  1503    
                           A  1504    .TYPE 12
                           A  1505    
                           A  1506    .ENDEF
                           A  1507    
                           A  1508    .DEFINE "filesize"
                           A  1509    
                           A  1510    .CLASS 65
                           A  1511    
                           A  1512    .VALUE -4
                           A  1513    
                           A  1514    .TYPE 14
                           A  1515    
                           A  1516    .ENDEF
                           A  1517    
                           A  1518    .DEFINE "buffer"
                           A  1519    
                           A  1520    .CLASS 65
                           A  1521    
                           A  1522    .VALUE -40
                           A  1523    
                           A  1524    .DIM 36
                           A  1525    
                           A  1526    .TYPE 108
                           A  1527    
                           A  1528    .ENDEF
                           A  1529    
0B03F9 DDE5                A  1530    	PUSH	IX
0B03FB DD210000 00         A  1531    	LD	IX,0
0B0400 DD39                A  1532    	ADD	IX,SP
0B0402 ED22D8              A  1533    	LEA	HL,IX+%FFFFFFD8
0B0405 F9                  A  1534    	LD	SP,HL
                           A  1535    ;  141		uint8_t file;
                           A  1536    ;  142		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1537    ;  143		uint24_t filesize;
                           A  1538    ;  144		//uint32_t crcresult;
                           A  1539    ;  145		uint24_t size, n;
                           A  1540    ;  146		uint8_t response;
                           A  1541    ;  147	
                           A  1542    ;  148		putch(12); // cls
                           A  1543    .LINE 148
                           A  1544    
0B0406 010C0000            A  1545    	LD	BC,12
0B040A C5                  A  1546    	PUSH	BC
0B040B CD E5 00 0B         A  1547    	CALL	_putch
0B040F C1                  A  1548    	POP	BC
                           A  1549    ;  149		print_version();	
                           A  1550    .LINE 149
                           A  1551    
0B0410 CD 2F 03 0B         A  1552    	CALL	_print_version
                           A  1553    ;  150		printf("Unlocking VDP updater...\r\
                           A  1554    .LINE 150
                           A  1555    
0B0414 01 B3 17 0B         A  1556    	LD	BC,___print_uputch
0B0418 ED43 04 28 0B       A  1557    	LD	(___print_xputch),BC
0B041D 01 32 29 0B         A  1558    	LD	BC,L__30
0B0421 C5                  A  1559    	PUSH	BC
0B0422 CD 42 16 0B         A  1560    	CALL	___print_sendstring
0B0426 C1                  A  1561    	POP	BC
                           A  1562    ;  151		
                           A  1563    ;  152		if(!vdp_ota_present()) {
                           A  1564    .LINE 152
                           A  1565    
0B0427 CD E3 01 0B         A  1566    	CALL	_vdp_ota_present
0B042B B7                  A  1567    	OR	A,A
0B042C 20 22               A  1568    	JR	NZ,L_42
                           A  1569    ;  153			printf(" failed - incompatible 
                           A  1570    .LINE 153
                           A  1571    
0B042E 01 B3 17 0B         A  1572    	LD	BC,___print_uputch
0B0432 ED43 04 28 0B       A  1573    	LD	(___print_xputch),BC
0B0437 01 4D 29 0B         A  1574    	LD	BC,L__32
0B043B C5                  A  1575    	PUSH	BC
0B043C CD 42 16 0B         A  1576    	CALL	___print_sendstring
0B0440 C1                  A  1577    	POP	BC
                           A  1578    ;  154			beep(5);
                           A  1579    .LINE 154
                           A  1580    
0B0441 01050000            A  1581    	LD	BC,5
0B0445 C5                  A  1582    	PUSH	BC
0B0446 CD 0B 01 0B         A  1583    	CALL	_beep
0B044A C1                  A  1584    	POP	BC
                           A  1585    ;  155			return 0;
                           A  1586    .LINE 155
                           A  1587    
0B044B AF                  A  1588    	XOR	A,A
0B044C C3 35 05 0B         A  1589    	JR	L_47
                           A  1590    ;  156		}
0B0450                     A  1591    L_42:
                           A  1592    .LINE 156
                           A  1593    
                           A  1594    ;  157		//vdp_ota_present();
                           A  1595    ;  158	
                           A  1596    ;  159		file = mos_fopen(filename, fa_read)
                           A  1597    .LINE 159
                           A  1598    
0B0450 01010000            A  1599    	LD	BC,1
0B0454 C5                  A  1600    	PUSH	BC
0B0455 DD0706              A  1601    	LD	BC,(IX+%6)
0B0458 C5                  A  1602    	PUSH	BC
0B0459 CD 33 11 0B         A  1603    	CALL	_mos_fopen
0B045D C1                  A  1604    	POP	BC
0B045E C1                  A  1605    	POP	BC
0B045F DD77FF              A  1606    	LD	(IX+%FFFFFFFF),A
                           A  1607    ;  160		if(!file) {
                           A  1608    .LINE 160
                           A  1609    
0B0462 B7                  A  1610    	OR	A,A
0B0463 20 2C               A  1611    	JR	NZ,L_44
                           A  1612    ;  161			printf("Error opening \"%s\"\n\
                           A  1613    .LINE 161
                           A  1614    
0B0465 01 B3 17 0B         A  1615    	LD	BC,___print_uputch
0B0469 ED43 04 28 0B       A  1616    	LD	(___print_xputch),BC
0B046E 01 6A 29 0B         A  1617    	LD	BC,L__34
0B0472 C5                  A  1618    	PUSH	BC
0B0473 CD 42 16 0B         A  1619    	CALL	___print_sendstring
0B0477 C1                  A  1620    	POP	BC
0B0478 DD0706              A  1621    	LD	BC,(IX+%6)
0B047B C5                  A  1622    	PUSH	BC
0B047C CD 42 16 0B         A  1623    	CALL	___print_sendstring
0B0480 C1                  A  1624    	POP	BC
0B0481 01 7A 29 0B         A  1625    	LD	BC,L__35
0B0485 C5                  A  1626    	PUSH	BC
0B0486 CD 42 16 0B         A  1627    	CALL	___print_sendstring
0B048A C1                  A  1628    	POP	BC
                           A  1629    ;  162			return EXIT_FILENOTFOUND;
                           A  1630    .LINE 162
                           A  1631    
0B048B 3E04                A  1632    	LD	A,%4
0B048D C3 35 05 0B         A  1633    	JR	L_47
                           A  1634    ;  163		}
0B0491                     A  1635    L_44:
                           A  1636    .LINE 163
                           A  1637    
                           A  1638    ;  164	
                           A  1639    ;  165		mos_fread(file, (char *)buffer, ESP
                           A  1640    .LINE 165
                           A  1641    
0B0491 01240000            A  1642    	LD	BC,36
0B0495 C5                  A  1643    	PUSH	BC
0B0496 ED65D8              A  1644    	PEA	IX+%FFFFFFD8
0B0499 DD4EFF              A  1645    	LD	C,(IX+%FFFFFFFF)
0B049C 0600                A  1646    	LD	B,%0
0B049E C5                  A  1647    	PUSH	BC
0B049F CD 75 11 0B         A  1648    	CALL	_mos_fread
0B04A3 C1                  A  1649    	POP	BC
0B04A4 C1                  A  1650    	POP	BC
0B04A5 C1                  A  1651    	POP	BC
                           A  1652    ;  166		if(!containsESP32Header(buffer)) {
                           A  1653    .LINE 166
                           A  1654    
0B04A6 ED65D8              A  1655    	PEA	IX+%FFFFFFD8
0B04A9 CD DB 02 0B         A  1656    	CALL	_containsESP32Header
0B04AD C1                  A  1657    	POP	BC
0B04AE B7                  A  1658    	OR	A,A
0B04AF 20 22               A  1659    	JR	NZ,L_46
                           A  1660    ;  167			printf("File does not contain v
                           A  1661    .LINE 167
                           A  1662    
0B04B1 01 B3 17 0B         A  1663    	LD	BC,___print_uputch
0B04B5 ED43 04 28 0B       A  1664    	LD	(___print_xputch),BC
0B04BA 01 7E 29 0B         A  1665    	LD	BC,L__37
0B04BE C5                  A  1666    	PUSH	BC
0B04BF CD 42 16 0B         A  1667    	CALL	___print_sendstring
0B04C3 C1                  A  1668    	POP	BC
                           A  1669    ;  168			mos_fclose(file);
                           A  1670    .LINE 168
                           A  1671    
0B04C4 DD4EFF              A  1672    	LD	C,(IX+%FFFFFFFF)
0B04C7 0600                A  1673    	LD	B,%0
0B04C9 C5                  A  1674    	PUSH	BC
0B04CA CD 4B 11 0B         A  1675    	CALL	_mos_fclose
0B04CE C1                  A  1676    	POP	BC
                           A  1677    ;  169			return EXIT_INVALIDPARAMETER;
                           A  1678    .LINE 169
                           A  1679    
0B04CF 3E13                A  1680    	LD	A,%13
0B04D1 18 62               A  1681    	JR	L_47
                           A  1682    ;  170		}
0B04D3                     A  1683    L_46:
                           A  1684    .LINE 170
                           A  1685    
                           A  1686    ;  171		//printf("\r\nValid ESP32 code\r\nC
                           A  1687    ;  172		printf("\r\nValid ESP32 code\r\n");
                           A  1688    .LINE 172
                           A  1689    
0B04D3 01 B3 17 0B         A  1690    	LD	BC,___print_uputch
0B04D7 ED43 04 28 0B       A  1691    	LD	(___print_xputch),BC
0B04DC 01 A7 29 0B         A  1692    	LD	BC,L__38
0B04E0 C5                  A  1693    	PUSH	BC
0B04E1 CD 42 16 0B         A  1694    	CALL	___print_sendstring
0B04E5 C1                  A  1695    	POP	BC
                           A  1696    ;  173		//crc32_initialize();
                           A  1697    ;  174		//mos_flseek(file, 0);
                           A  1698    ;  175		//while(1) {
                           A  1699    ;  176		//	size = mos_fread(file, (char *)
                           A  1700    ;  177		//	if(size == 0) break;
                           A  1701    ;  178		//	putch('.');
                           A  1702    ;  179			//crc32((char *)BUFFER1, size);
                           A  1703    ;  180		//}
                           A  1704    ;  181		//crcresult = crc32_finalize();
                           A  1705    ;  182	
                           A  1706    ;  183		// Do actual work here
                           A  1707    ;  184		mos_flseek(file, 0); // reset to ze
                           A  1708    .LINE 184
                           A  1709    
0B04E6 01000000            A  1710    	LD	BC,0
0B04EA C5                  A  1711    	PUSH	BC
0B04EB C5                  A  1712    	PUSH	BC
0B04EC DD4EFF              A  1713    	LD	C,(IX+%FFFFFFFF)
0B04EF 0600                A  1714    	LD	B,%0
0B04F1 C5                  A  1715    	PUSH	BC
0B04F2 CD EF 11 0B         A  1716    	CALL	_mos_flseek
0B04F6 C1                  A  1717    	POP	BC
0B04F7 C1                  A  1718    	POP	BC
0B04F8 C1                  A  1719    	POP	BC
                           A  1720    ;  185		printf("Updating VDP firmware\r\n")
                           A  1721    .LINE 185
                           A  1722    
0B04F9 01 B3 17 0B         A  1723    	LD	BC,___print_uputch
0B04FD ED43 04 28 0B       A  1724    	LD	(___print_xputch),BC
0B0502 01 BC 29 0B         A  1725    	LD	BC,L__39
0B0506 C5                  A  1726    	PUSH	BC
0B0507 CD 42 16 0B         A  1727    	CALL	___print_sendstring
0B050B C1                  A  1728    	POP	BC
                           A  1729    ;  186		filesize = getFileSize(file);	
                           A  1730    .LINE 186
                           A  1731    
0B050C DD4EFF              A  1732    	LD	C,(IX+%FFFFFFFF)
0B050F 0600                A  1733    	LD	B,%0
0B0511 C5                  A  1734    	PUSH	BC
0B0512 CD 77 15 0B         A  1735    	CALL	_getFileSize
0B0516 C1                  A  1736    	POP	BC
0B0517 DD2FFC              A  1737    	LD	(IX+%FFFFFFFC),HL
                           A  1738    ;  187		startVDPupdate(file, filesize);
                           A  1739    .LINE 187
                           A  1740    
0B051A E5C1                A  1741    	LD	BC,HL
0B051C C5                  A  1742    	PUSH	BC
0B051D DD4EFF              A  1743    	LD	C,(IX+%FFFFFFFF)
0B0520 0600                A  1744    	LD	B,%0
0B0522 C5                  A  1745    	PUSH	BC
0B0523 CD 5A 12 0B         A  1746    	CALL	_startVDPupdate
0B0527 C1                  A  1747    	POP	BC
0B0528 C1                  A  1748    	POP	BC
                           A  1749    ;  188		mos_fclose(file);
                           A  1750    .LINE 188
                           A  1751    
0B0529 DD4EFF              A  1752    	LD	C,(IX+%FFFFFFFF)
0B052C 0600                A  1753    	LD	B,%0
0B052E C5                  A  1754    	PUSH	BC
0B052F CD 4B 11 0B         A  1755    	CALL	_mos_fclose
0B0533 C1                  A  1756    	POP	BC
                           A  1757    ;  189		//reset();
                           A  1758    ;  190		return 0; // will never return, but
                           A  1759    .LINE 190
                           A  1760    
0B0534 AF                  A  1761    	XOR	A,A
                           A  1762    ;  191	}
0B0535                     A  1763    L_47:
                           A  1764    .LINE 191
                           A  1765    
0B0535 DDF9                A  1766    	LD	SP,IX
0B0537 DDE1                A  1767    	POP	IX
0B0539 C9                  A  1768    	RET	
                           A  1769    
                           A  1770    
                           A  1771    ;**************************** _update_vdp *****
                           A  1772    ;Name                         Addr/Register   S
                           A  1773    ;_startVDPupdate                     IMPORT  --
                           A  1774    ;_getFileSize                        IMPORT  --
                           A  1775    ;_mos_flseek                         IMPORT  --
                           A  1776    ;_mos_fclose                         IMPORT  --
                           A  1777    ;_mos_fread                          IMPORT  --
                           A  1778    ;_mos_fopen                          IMPORT  --
                           A  1779    ;___print_sendstring                 IMPORT  --
                           A  1780    ;___print_xputch                     IMPORT    
                           A  1781    ;___print_uputch                     IMPORT  --
                           A  1782    ;_putch                              IMPORT  --
                           A  1783    ;buffer                               IX-40    
                           A  1784    ;filesize                              IX-4    
                           A  1785    ;file                                  IX-1    
                           A  1786    ;filename                              IX+6    
                           A  1787    
                           A  1788    
                           A  1789    ; Stack Frame Size: 49 (bytes)
                           A  1790    ;       Spill Code: 0 (instruction)
                           A  1791    
                           A  1792    
                           A  1793    .ENDFUNC "update_vdp",191,"_update_vdp"
                           A  1794    	SEGMENT STRSECT
0B2932                     A  1795    L__30:
0B2932 556E6C6F 636B696E   A  1796    	DB	"Unlocking VDP updater..."
0B293A 67205644 50207570 
0B2942 64617465 722E2E2E 
0B294A 0D0A00              A  1797    	DB	13,10,0
0B294D                     A  1798    L__32:
0B294D 20666169 6C656420   A  1799    	DB	" failed - incompatible VDP"
0B2955 2D20696E 636F6D70 
0B295D 61746962 6C652056 
0B2965 4450 
0B2967 0D0A00              A  1800    	DB	13,10,0
0B296A                     A  1801    L__34:
0B296A 4572726F 72206F70   A  1802    	DB	"Error opening \""
0B2972 656E696E 672022 
0B2979 00                  A  1803    	DB	0
0B297A                     A  1804    L__35:
0B297A 22                  A  1805    	DB	"\""
0B297B 0A0D00              A  1806    	DB	10,13,0
0B297E                     A  1807    L__37:
0B297E 46696C65 20646F65   A  1808    	DB	"File does not contain valid ESP32 code
0B2986 73206E6F 7420636F 
0B298E 6E746169 6E207661 
0B2996 6C696420 45535033 
0B299E 3220636F 6465 
0B29A4 0D0A00              A  1809    	DB	13,10,0
0B29A7                     A  1810    L__38:
0B29A7 0D0A                A  1811    	DB	13,10
0B29A9 56616C69 64204553   A  1812    	DB	"Valid ESP32 code"
0B29B1 50333220 636F6465 
0B29B9 0D0A00              A  1813    	DB	13,10,0
0B29BC                     A  1814    L__39:
0B29BC 55706461 74696E67   A  1815    	DB	"Updating VDP firmware"
0B29C4 20564450 20666972 
0B29CC 6D776172 65 
0B29D1 0D0A00              A  1816    	DB	13,10,0
                           A  1817    	SEGMENT CODE
                           A  1818    ;  192	
                           A  1819    ;  193	uint8_t update_mos(char *filename) {
0B053A                     A  1820    _update_mos:
                           A  1821    .DEFINE "_update_mos"
                           A  1822    
                           A  1823    .VALUE _update_mos
                           A  1824    
                           A  1825    .CLASS 2
                           A  1826    
                           A  1827    .TYPE 76
                           A  1828    
                           A  1829    .ENDEF
                           A  1830    
                           A  1831    .BEGFUNC "update_mos",193,"_update_mos"
                           A  1832    
                           A  1833    .LINE 193
                           A  1834    
                           A  1835    .DEFINE "filename"
                           A  1836    
                           A  1837    .CLASS 65
                           A  1838    
                           A  1839    .VALUE 6
                           A  1840    
                           A  1841    .TYPE 34
                           A  1842    
                           A  1843    .ENDEF
                           A  1844    
                           A  1845    .DEFINE "counter"
                           A  1846    
                           A  1847    .CLASS 65
                           A  1848    
                           A  1849    .VALUE -3
                           A  1850    
                           A  1851    .TYPE 14
                           A  1852    
                           A  1853    .ENDEF
                           A  1854    
                           A  1855    .DEFINE "file"
                           A  1856    
                           A  1857    .CLASS 65
                           A  1858    
                           A  1859    .VALUE -4
                           A  1860    
                           A  1861    .TYPE 12
                           A  1862    
                           A  1863    .ENDEF
                           A  1864    
                           A  1865    .DEFINE "addressfrom"
                           A  1866    
                           A  1867    .CLASS 65
                           A  1868    
                           A  1869    .VALUE -7
                           A  1870    
                           A  1871    .TYPE 14
                           A  1872    
                           A  1873    .ENDEF
                           A  1874    
                           A  1875    .DEFINE "pagemax"
                           A  1876    
                           A  1877    .CLASS 65
                           A  1878    
                           A  1879    .VALUE -10
                           A  1880    
                           A  1881    .TYPE 14
                           A  1882    
                           A  1883    .ENDEF
                           A  1884    
                           A  1885    .DEFINE "state"
                           A  1886    
                           A  1887    .CLASS 65
                           A  1888    
                           A  1889    .VALUE -13
                           A  1890    
                           A  1891    .TYPE 4
                           A  1892    
                           A  1893    .ENDEF
                           A  1894    
                           A  1895    .DEFINE "filesize"
                           A  1896    
                           A  1897    .CLASS 65
                           A  1898    
                           A  1899    .VALUE -16
                           A  1900    
                           A  1901    .TYPE 14
                           A  1902    
                           A  1903    .ENDEF
                           A  1904    
                           A  1905    .DEFINE "addressto"
                           A  1906    
                           A  1907    .CLASS 65
                           A  1908    
                           A  1909    .VALUE -19
                           A  1910    
                           A  1911    .TYPE 14
                           A  1912    
                           A  1913    .ENDEF
                           A  1914    
                           A  1915    .DEFINE "ptr"
                           A  1916    
                           A  1917    .CLASS 65
                           A  1918    
                           A  1919    .VALUE -22
                           A  1920    
                           A  1921    .TYPE 34
                           A  1922    
                           A  1923    .ENDEF
                           A  1924    
                           A  1925    .DEFINE "got"
                           A  1926    
                           A  1927    .CLASS 65
                           A  1928    
                           A  1929    .VALUE -25
                           A  1930    
                           A  1931    .TYPE 14
                           A  1932    
                           A  1933    .ENDEF
                           A  1934    
                           A  1935    .DEFINE "value"
                           A  1936    
                           A  1937    .CLASS 65
                           A  1938    
                           A  1939    .VALUE -26
                           A  1940    
                           A  1941    .TYPE 12
                           A  1942    
                           A  1943    .ENDEF
                           A  1944    
                           A  1945    .DEFINE "crcresult"
                           A  1946    
                           A  1947    .CLASS 65
                           A  1948    
                           A  1949    .VALUE -30
                           A  1950    
                           A  1951    .TYPE 15
                           A  1952    
                           A  1953    .ENDEF
                           A  1954    
                           A  1955    .DEFINE "lastpagebytes"
                           A  1956    
                           A  1957    .CLASS 65
                           A  1958    
                           A  1959    .VALUE -33
                           A  1960    
                           A  1961    .TYPE 14
                           A  1962    
                           A  1963    .ENDEF
                           A  1964    
                           A  1965    .DEFINE "size"
                           A  1966    
                           A  1967    .CLASS 65
                           A  1968    
                           A  1969    .VALUE -39
                           A  1970    
                           A  1971    .TYPE 14
                           A  1972    
                           A  1973    .ENDEF
                           A  1974    
                           A  1975    .DEFINE "crcexpected"
                           A  1976    
                           A  1977    .CLASS 65
                           A  1978    
                           A  1979    .VALUE -43
                           A  1980    
                           A  1981    .TYPE 15
                           A  1982    
                           A  1983    .ENDEF
                           A  1984    
0B053A DDE5                A  1985    	PUSH	IX
0B053C DD210000 00         A  1986    	LD	IX,0
0B0541 DD39                A  1987    	ADD	IX,SP
0B0543 ED22D5              A  1988    	LEA	HL,IX+%FFFFFFD5
0B0546 F9                  A  1989    	LD	SP,HL
                           A  1990    ;  194		uint32_t crcexpected,crcresult;
                           A  1991    ;  195		uint24_t size = 0;
                           A  1992    .LINE 195
                           A  1993    
0B0547 01000000            A  1994    	LD	BC,0
0B054B DD0FD9              A  1995    	LD	(IX+%FFFFFFD9),BC
                           A  1996    ;  196		uint24_t got;
                           A  1997    ;  197		uint8_t file;
                           A  1998    ;  198		char* ptr = (char*)BUFFER1;
                           A  1999    .LINE 198
                           A  2000    
0B054E 01000005            A  2001    	LD	BC,327680
0B0552 DD0FEA              A  2002    	LD	(IX+%FFFFFFEA),BC
                           A  2003    ;  199		uint8_t value;
                           A  2004    ;  200		uint24_t counter,pagemax, lastpageb
                           A  2005    ;  201		uint24_t addressto,addressfrom;
                           A  2006    ;  202		enum states state;
                           A  2007    ;  203		uint24_t filesize;
                           A  2008    ;  204	
                           A  2009    ;  205		putch(12); // cls
                           A  2010    .LINE 205
                           A  2011    
0B0555 010C0000            A  2012    	LD	BC,12
0B0559 C5                  A  2013    	PUSH	BC
0B055A CD E5 00 0B         A  2014    	CALL	_putch
0B055E C1                  A  2015    	POP	BC
                           A  2016    ;  206		print_version();	
                           A  2017    .LINE 206
                           A  2018    
0B055F CD 2F 03 0B         A  2019    	CALL	_print_version
                           A  2020    ;  207		
                           A  2021    ;  208		file = mos_fopen(filename, fa_read)
                           A  2022    .LINE 208
                           A  2023    
0B0563 01010000            A  2024    	LD	BC,1
0B0567 C5                  A  2025    	PUSH	BC
0B0568 DD0706              A  2026    	LD	BC,(IX+%6)
0B056B C5                  A  2027    	PUSH	BC
0B056C CD 33 11 0B         A  2028    	CALL	_mos_fopen
0B0570 C1                  A  2029    	POP	BC
0B0571 C1                  A  2030    	POP	BC
0B0572 DD77FC              A  2031    	LD	(IX+%FFFFFFFC),A
                           A  2032    ;  209		if(!file)
                           A  2033    .LINE 209
                           A  2034    
0B0575 B7                  A  2035    	OR	A,A
0B0576 20 2C               A  2036    	JR	NZ,L_49
                           A  2037    ;  210		{
                           A  2038    ;  211			printf("Error opening \"%s\"\n\
                           A  2039    .LINE 211
                           A  2040    
0B0578 01 B3 17 0B         A  2041    	LD	BC,___print_uputch
0B057C ED43 04 28 0B       A  2042    	LD	(___print_xputch),BC
0B0581 01 D4 29 0B         A  2043    	LD	BC,L__42
0B0585 C5                  A  2044    	PUSH	BC
0B0586 CD 42 16 0B         A  2045    	CALL	___print_sendstring
0B058A C1                  A  2046    	POP	BC
0B058B DD0706              A  2047    	LD	BC,(IX+%6)
0B058E C5                  A  2048    	PUSH	BC
0B058F CD 42 16 0B         A  2049    	CALL	___print_sendstring
0B0593 C1                  A  2050    	POP	BC
0B0594 01 E4 29 0B         A  2051    	LD	BC,L__43
0B0598 C5                  A  2052    	PUSH	BC
0B0599 CD 42 16 0B         A  2053    	CALL	___print_sendstring
0B059D C1                  A  2054    	POP	BC
                           A  2055    ;  212			return EXIT_FILENOTFOUND;
                           A  2056    .LINE 212
                           A  2057    
0B059E 3E04                A  2058    	LD	A,%4
0B05A0 C3 4A 09 0B         A  2059    	JR	L_90
                           A  2060    ;  213		}
0B05A4                     A  2061    L_49:
                           A  2062    .LINE 213
                           A  2063    
                           A  2064    ;  214	
                           A  2065    ;  215		mos_fread(file, (char *)BUFFER1, MO
                           A  2066    .LINE 215
                           A  2067    
0B05A4 01050000            A  2068    	LD	BC,5
0B05A8 C5                  A  2069    	PUSH	BC
0B05A9 01000005            A  2070    	LD	BC,327680
0B05AD C5                  A  2071    	PUSH	BC
0B05AE DD4EFC              A  2072    	LD	C,(IX+%FFFFFFFC)
0B05B1 0600                A  2073    	LD	B,%0
0B05B3 C5                  A  2074    	PUSH	BC
0B05B4 CD 75 11 0B         A  2075    	CALL	_mos_fread
0B05B8 C1                  A  2076    	POP	BC
0B05B9 C1                  A  2077    	POP	BC
0B05BA C1                  A  2078    	POP	BC
                           A  2079    ;  216		if(!containsMosHeader((uint8_t *)BU
                           A  2080    .LINE 216
                           A  2081    
0B05BB 01000005            A  2082    	LD	BC,327680
0B05BF C5                  A  2083    	PUSH	BC
0B05C0 CD 90 02 0B         A  2084    	CALL	_containsMosHeader
0B05C4 C1                  A  2085    	POP	BC
0B05C5 B7                  A  2086    	OR	A,A
0B05C6 20 24               A  2087    	JR	NZ,L_51
                           A  2088    ;  217			printf("File does not contain v
                           A  2089    .LINE 217
                           A  2090    
0B05C8 01 B3 17 0B         A  2091    	LD	BC,___print_uputch
0B05CC ED43 04 28 0B       A  2092    	LD	(___print_xputch),BC
0B05D1 01 E8 29 0B         A  2093    	LD	BC,L__45
0B05D5 C5                  A  2094    	PUSH	BC
0B05D6 CD 42 16 0B         A  2095    	CALL	___print_sendstring
0B05DA C1                  A  2096    	POP	BC
                           A  2097    ;  218			mos_fclose(file);
                           A  2098    .LINE 218
                           A  2099    
0B05DB DD4EFC              A  2100    	LD	C,(IX+%FFFFFFFC)
0B05DE 0600                A  2101    	LD	B,%0
0B05E0 C5                  A  2102    	PUSH	BC
0B05E1 CD 4B 11 0B         A  2103    	CALL	_mos_fclose
0B05E5 C1                  A  2104    	POP	BC
                           A  2105    ;  219			return EXIT_INVALIDPARAMETER;
                           A  2106    .LINE 219
                           A  2107    
0B05E6 3E13                A  2108    	LD	A,%13
0B05E8 C3 4A 09 0B         A  2109    	JR	L_90
                           A  2110    ;  220		}
0B05EC                     A  2111    L_51:
                           A  2112    .LINE 220
                           A  2113    
                           A  2114    ;  221	
                           A  2115    ;  222		filesize = getFileSize(file);
                           A  2116    .LINE 222
                           A  2117    
0B05EC DD4EFC              A  2118    	LD	C,(IX+%FFFFFFFC)
0B05EF 0600                A  2119    	LD	B,%0
0B05F1 C5                  A  2120    	PUSH	BC
0B05F2 CD 77 15 0B         A  2121    	CALL	_getFileSize
0B05F6 C1                  A  2122    	POP	BC
0B05F7 DD2FF0              A  2123    	LD	(IX+%FFFFFFF0),HL
                           A  2124    ;  223		if(filesize > FLASHSIZE) {
                           A  2125    .LINE 223
                           A  2126    
0B05FA E5C1                A  2127    	LD	BC,HL
0B05FC 21000002            A  2128    	LD	HL,131072
0B0600 B7                  A  2129    	OR	A,A
0B0601 ED42                A  2130    	SBC	HL,BC
0B0603 30 24               A  2131    	JR	NC,L_53
                           A  2132    ;  224			printf("File too large for 128K
                           A  2133    .LINE 224
                           A  2134    
0B0605 01 B3 17 0B         A  2135    	LD	BC,___print_uputch
0B0609 ED43 04 28 0B       A  2136    	LD	(___print_xputch),BC
0B060E 01 1C 2A 0B         A  2137    	LD	BC,L__47
0B0612 C5                  A  2138    	PUSH	BC
0B0613 CD 42 16 0B         A  2139    	CALL	___print_sendstring
0B0617 C1                  A  2140    	POP	BC
                           A  2141    ;  225			mos_fclose(file);
                           A  2142    .LINE 225
                           A  2143    
0B0618 DD4EFC              A  2144    	LD	C,(IX+%FFFFFFFC)
0B061B 0600                A  2145    	LD	B,%0
0B061D C5                  A  2146    	PUSH	BC
0B061E CD 4B 11 0B         A  2147    	CALL	_mos_fclose
0B0622 C1                  A  2148    	POP	BC
                           A  2149    ;  226			return EXIT_INVALIDPARAMETER;
                           A  2150    .LINE 226
                           A  2151    
0B0623 3E13                A  2152    	LD	A,%13
0B0625 C3 4A 09 0B         A  2153    	JR	L_90
                           A  2154    ;  227		}
0B0629                     A  2155    L_53:
                           A  2156    .LINE 227
                           A  2157    
                           A  2158    ;  228	
                           A  2159    ;  229		printf("\r\nValid ez80 code\r\nCalc
                           A  2160    .LINE 229
                           A  2161    
0B0629 01 B3 17 0B         A  2162    	LD	BC,___print_uputch
0B062D ED43 04 28 0B       A  2163    	LD	(___print_xputch),BC
0B0632 01 46 2A 0B         A  2164    	LD	BC,L__48
0B0636 C5                  A  2165    	PUSH	BC
0B0637 CD 42 16 0B         A  2166    	CALL	___print_sendstring
0B063B C1                  A  2167    	POP	BC
                           A  2168    ;  230	
                           A  2169    ;  231		crc32_initialize();
                           A  2170    .LINE 231
                           A  2171    
0B063C CD C5 14 0B         A  2172    	CALL	_crc32_initialize
                           A  2173    ;  232		mos_flseek(file, 0);
                           A  2174    .LINE 232
                           A  2175    
0B0640 01000000            A  2176    	LD	BC,0
0B0644 C5                  A  2177    	PUSH	BC
0B0645 C5                  A  2178    	PUSH	BC
0B0646 DD4EFC              A  2179    	LD	C,(IX+%FFFFFFFC)
0B0649 0600                A  2180    	LD	B,%0
0B064B C5                  A  2181    	PUSH	BC
0B064C CD EF 11 0B         A  2182    	CALL	_mos_flseek
0B0650 C1                  A  2183    	POP	BC
0B0651 C1                  A  2184    	POP	BC
0B0652 C1                  A  2185    	POP	BC
                           A  2186    ;  233		
                           A  2187    ;  234		// Read file to memory
                           A  2188    ;  235		while((got = mos_fread(file, ptr, B
                           A  2189    .LINE 235
                           A  2190    
0B0653 18 22               A  2191    	JR	L_54
0B0655                     A  2192    L_55:
                           A  2193    ;  236			crc32(ptr, got);
                           A  2194    .LINE 236
                           A  2195    
0B0655 DD07E7              A  2196    	LD	BC,(IX+%FFFFFFE7)
0B0658 C5                  A  2197    	PUSH	BC
0B0659 DD07EA              A  2198    	LD	BC,(IX+%FFFFFFEA)
0B065C C5                  A  2199    	PUSH	BC
0B065D CD 17 15 0B         A  2200    	CALL	_crc32
0B0661 C1                  A  2201    	POP	BC
0B0662 C1                  A  2202    	POP	BC
                           A  2203    ;  237			ptr += got;
                           A  2204    .LINE 237
                           A  2205    
0B0663 DD07E7              A  2206    	LD	BC,(IX+%FFFFFFE7)
0B0666 DD27EA              A  2207    	LD	HL,(IX+%FFFFFFEA)
0B0669 09                  A  2208    	ADD	HL,BC
0B066A DD2FEA              A  2209    	LD	(IX+%FFFFFFEA),HL
                           A  2210    ;  238			putch('.');
                           A  2211    .LINE 238
                           A  2212    
0B066D 012E0000            A  2213    	LD	BC,46
0B0671 C5                  A  2214    	PUSH	BC
0B0672 CD E5 00 0B         A  2215    	CALL	_putch
0B0676 C1                  A  2216    	POP	BC
                           A  2217    ;  239		}		
0B0677                     A  2218    L_54:
                           A  2219    .LINE 239
                           A  2220    
0B0677 01004000            A  2221    	LD	BC,16384
0B067B C5                  A  2222    	PUSH	BC
0B067C DD07EA              A  2223    	LD	BC,(IX+%FFFFFFEA)
0B067F C5                  A  2224    	PUSH	BC
0B0680 DD4EFC              A  2225    	LD	C,(IX+%FFFFFFFC)
0B0683 0600                A  2226    	LD	B,%0
0B0685 C5                  A  2227    	PUSH	BC
0B0686 CD 75 11 0B         A  2228    	CALL	_mos_fread
0B068A C1                  A  2229    	POP	BC
0B068B C1                  A  2230    	POP	BC
0B068C C1                  A  2231    	POP	BC
0B068D DD2FE7              A  2232    	LD	(IX+%FFFFFFE7),HL
0B0690 E5C1                A  2233    	LD	BC,HL
0B0692 B7                  A  2234    	OR	A,A
0B0693 ED62                A  2235    	SBC	HL,HL
0B0695 B7                  A  2236    	OR	A,A
0B0696 ED42                A  2237    	SBC	HL,BC
0B0698 38 BB               A  2238    	JR	C,L_55
                           A  2239    ;  240		crcresult = crc32_finalize();
                           A  2240    .LINE 240
                           A  2241    
0B069A CD DA 14 0B         A  2242    	CALL	_crc32_finalize
0B069E DD2FE2              A  2243    	LD	(IX+%FFFFFFE2),HL
0B06A1 DD73E5              A  2244    	LD	(IX+%FFFFFFE5),E
                           A  2245    ;  241		// Actual work here	
                           A  2246    ;  242		di();								
                           A  2247    .LINE 242
                           A  2248    
0B06A4 F3                  A  2249    	di
                           A  2250    ;  243	
                           A  2251    ;  244		// start address in flash
                           A  2252    ;  245		addressto = FLASHSTART;
                           A  2253    .LINE 245
                           A  2254    
0B06A5 01000000            A  2255    	LD	BC,0
0B06A9 DD0FED              A  2256    	LD	(IX+%FFFFFFED),BC
                           A  2257    ;  246		addressfrom = BUFFER1;
                           A  2258    .LINE 246
                           A  2259    
0B06AC 01000005            A  2260    	LD	BC,327680
0B06B0 DD0FF9              A  2261    	LD	(IX+%FFFFFFF9),BC
                           A  2262    ;  247		
                           A  2263    ;  248		crcexpected = crcresult;
                           A  2264    .LINE 248
                           A  2265    
0B06B3 DD07E2              A  2266    	LD	BC,(IX+%FFFFFFE2)
0B06B6 DD7EE5              A  2267    	LD	A,(IX+%FFFFFFE5)
0B06B9 DD0FD5              A  2268    	LD	(IX+%FFFFFFD5),BC
0B06BC DD77D8              A  2269    	LD	(IX+%FFFFFFD8),A
                           A  2270    ;  249		state = firmware;
                           A  2271    .LINE 249
                           A  2272    
0B06BF 01000000            A  2273    	LD	BC,0
0B06C3 DD0FF3              A  2274    	LD	(IX+%FFFFFFF3),BC
                           A  2275    ;  250		size = filesize;	
                           A  2276    .LINE 250
                           A  2277    
0B06C6 DD07F0              A  2278    	LD	BC,(IX+%FFFFFFF0)
0B06C9 DD0FD9              A  2279    	LD	(IX+%FFFFFFD9),BC
                           A  2280    ;  251		while(1)
0B06CC                     A  2281    L_88:
                           A  2282    .LINE 251
                           A  2283    
                           A  2284    ;  252		{
                           A  2285    ;  253			switch(state)
                           A  2286    .LINE 253
                           A  2287    
0B06CC DD27F3              A  2288    	LD	HL,(IX+%FFFFFFF3)
0B06CF CD 52 1E 0B         A  2289    	CALL	__case8D
0B06D3 E9                  A  2290    	JP	(HL)
0B06D4                     A  2291    L__50:
0B06D4 0200                A  2292    	DW	2
0B06D6 00                  A  2293    	DB	0
0B06D7 E1060B              A  2294    	DW24	L_57	
                           A  2295    
0B06DA 01                  A  2296    	DB	1
0B06DB EE060B              A  2297    	DW24	L_58	
                           A  2298    
0B06DE FB060B              A  2299    	DW24	L_59	
                           A  2300    
                           A  2301    ;  254			{
                           A  2302    ;  255				case firmware:
0B06E1                     A  2303    L_57:
                           A  2304    .LINE 255
                           A  2305    
                           A  2306    ;  256					// start address in fla
                           A  2307    ;  257					addressfrom = BUFFER1;
                           A  2308    .LINE 257
                           A  2309    
0B06E1 01000005            A  2310    	LD	BC,327680
0B06E5 DD0FF9              A  2311    	LD	(IX+%FFFFFFF9),BC
                           A  2312    ;  258					crc32_initialize();
                           A  2313    .LINE 258
                           A  2314    
0B06E8 CD C5 14 0B         A  2315    	CALL	_crc32_initialize
                           A  2316    ;  259					break;
                           A  2317    .LINE 259
                           A  2318    
0B06EC 18 38               A  2319    	JR	L_60
                           A  2320    ;  260				case retry:
0B06EE                     A  2321    L_58:
                           A  2322    .LINE 260
                           A  2323    
                           A  2324    ;  261					// start address in fla
                           A  2325    ;  262					addressfrom = BUFFER1;
                           A  2326    .LINE 262
                           A  2327    
0B06EE 01000005            A  2328    	LD	BC,327680
0B06F2 DD0FF9              A  2329    	LD	(IX+%FFFFFFF9),BC
                           A  2330    ;  263					crc32_initialize();
                           A  2331    .LINE 263
                           A  2332    
0B06F5 CD C5 14 0B         A  2333    	CALL	_crc32_initialize
                           A  2334    ;  264					break;
                           A  2335    .LINE 264
                           A  2336    
0B06F9 18 2B               A  2337    	JR	L_60
                           A  2338    ;  265				default:
0B06FB                     A  2339    L_59:
                           A  2340    .LINE 265
                           A  2341    
                           A  2342    ;  266					// RESET SYSTEM
                           A  2343    ;  267					printf("\r\n");
                           A  2344    .LINE 267
                           A  2345    
0B06FB 01 B3 17 0B         A  2346    	LD	BC,___print_uputch
0B06FF ED43 04 28 0B       A  2347    	LD	(___print_xputch),BC
0B0704 01 6B 2A 0B         A  2348    	LD	BC,L__51
0B0708 C5                  A  2349    	PUSH	BC
0B0709 CD 42 16 0B         A  2350    	CALL	___print_sendstring
0B070D C1                  A  2351    	POP	BC
                           A  2352    ;  268					printf("Done\r\n");
                           A  2353    .LINE 268
                           A  2354    
0B070E 01 B3 17 0B         A  2355    	LD	BC,___print_uputch
0B0712 ED43 04 28 0B       A  2356    	LD	(___print_xputch),BC
0B0717 01 6E 2A 0B         A  2357    	LD	BC,L__52
0B071B C5                  A  2358    	PUSH	BC
0B071C CD 42 16 0B         A  2359    	CALL	___print_sendstring
0B0720 C1                  A  2360    	POP	BC
                           A  2361    ;  269					//printf("Press reset b
                           A  2362    ;  270					//while(1); // force co
                           A  2363    ;  271					return 0;
                           A  2364    .LINE 271
                           A  2365    
0B0721 AF                  A  2366    	XOR	A,A
0B0722 C3 4A 09 0B         A  2367    	JR	L_90
                           A  2368    ;  272			}
0B0726                     A  2369    L_60:
                           A  2370    .LINE 272
                           A  2371    
                           A  2372    ;  273	
                           A  2373    ;  274			// Unprotect and erase flash
                           A  2374    ;  275			printf("Erasing flash... ");
                           A  2375    .LINE 275
                           A  2376    
0B0726 01 B3 17 0B         A  2377    	LD	BC,___print_uputch
0B072A ED43 04 28 0B       A  2378    	LD	(___print_xputch),BC
0B072F 01 75 2A 0B         A  2379    	LD	BC,L__53
0B0733 C5                  A  2380    	PUSH	BC
0B0734 CD 42 16 0B         A  2381    	CALL	___print_sendstring
0B0738 C1                  A  2382    	POP	BC
                           A  2383    ;  276			enableFlashKeyRegister();	// 
                           A  2384    .LINE 276
                           A  2385    
0B0739 CD 0E 12 0B         A  2386    	CALL	_enableFlashKeyRegister
                           A  2387    ;  277			FLASH_PROT = 0;				// 
                           A  2388    .LINE 277
                           A  2389    
0B073D AF                  A  2390    	XOR	A,A
0B073E ED39FA              A  2391    	OUT0	(250),A
                           A  2392    ;  278			enableFlashKeyRegister();	// 
                           A  2393    .LINE 278
                           A  2394    
0B0741 CD 0E 12 0B         A  2395    	CALL	_enableFlashKeyRegister
                           A  2396    ;  279			FLASH_FDIV = 0x5F;			// 
                           A  2397    .LINE 279
                           A  2398    
0B0745 3E5F                A  2399    	LD	A,%5F
0B0747 ED39F9              A  2400    	OUT0	(249),A
                           A  2401    ;  280			
                           A  2402    ;  281			for(counter = 0; counter < FLAS
                           A  2403    .LINE 281
                           A  2404    
0B074A 01000000            A  2405    	LD	BC,0
0B074E DD0FFD              A  2406    	LD	(IX+%FFFFFFFD),BC
0B0751 18 1C               A  2407    	JR	L_66
0B0753                     A  2408    L_64:
                           A  2409    ;  282			{
                           A  2410    ;  283				FLASH_PAGE = counter;
                           A  2411    .LINE 283
                           A  2412    
0B0753 DD7EFD              A  2413    	LD	A,(IX+%FFFFFFFD)
0B0756 ED39FC              A  2414    	OUT0	(252),A
                           A  2415    ;  284				FLASH_PGCTL = 0x02;			
                           A  2416    .LINE 284
                           A  2417    
0B0759 3E02                A  2418    	LD	A,%2
0B075B ED39FF              A  2419    	OUT0	(255),A
                           A  2420    ;  285	
                           A  2421    ;  286				do
0B075E                     A  2422    L_62:
                           A  2423    .LINE 286
                           A  2424    
                           A  2425    ;  287				{
                           A  2426    ;  288					value = FLASH_PGCTL;
                           A  2427    .LINE 288
                           A  2428    
0B075E ED38FF              A  2429    	IN0	A,(255)
0B0761 DD77E6              A  2430    	LD	(IX+%FFFFFFE6),A
                           A  2431    ;  289				}
                           A  2432    ;  290				while(value & 0x02);// wait
                           A  2433    .LINE 290
                           A  2434    
0B0764 E602                A  2435    	AND	A,%2
0B0766 20 F6               A  2436    	JR	NZ,L_62
0B0768 DD07FD              A  2437    	LD	BC,(IX+%FFFFFFFD)
0B076B 03                  A  2438    	INC	BC
0B076C DD0FFD              A  2439    	LD	(IX+%FFFFFFFD),BC
                           A  2440    ;  291			}
0B076F                     A  2441    L_66:
                           A  2442    .LINE 291
                           A  2443    
0B076F 01800000            A  2444    	LD	BC,128
0B0773 DD27FD              A  2445    	LD	HL,(IX+%FFFFFFFD)
0B0776 B7                  A  2446    	OR	A,A
0B0777 ED42                A  2447    	SBC	HL,BC
0B0779 38 D8               A  2448    	JR	C,L_64
                           A  2449    ;  292			
                           A  2450    ;  293			printf("\r\nWriting new firmwar
                           A  2451    .LINE 293
                           A  2452    
0B077B 01 B3 17 0B         A  2453    	LD	BC,___print_uputch
0B077F ED43 04 28 0B       A  2454    	LD	(___print_xputch),BC
0B0784 01 87 2A 0B         A  2455    	LD	BC,L__56
0B0788 C5                  A  2456    	PUSH	BC
0B0789 CD 42 16 0B         A  2457    	CALL	___print_sendstring
0B078D C1                  A  2458    	POP	BC
                           A  2459    ;  294			
                           A  2460    ;  295			// determine number of pages to
                           A  2461    ;  296			pagemax = size/PAGESIZE;
                           A  2462    .LINE 296
                           A  2463    
0B078E DD27F0              A  2464    	LD	HL,(IX+%FFFFFFF0)
0B0791 3E0A                A  2465    	LD	A,%A
0B0793 CD 26 1E 0B         A  2466    	CALL	__ishru_b
0B0797 DD2FF6              A  2467    	LD	(IX+%FFFFFFF6),HL
                           A  2468    ;  297			if(size%PAGESIZE) // last page 
                           A  2469    .LINE 297
                           A  2470    
0B079A 01FF0300            A  2471    	LD	BC,1023
0B079E DD27F0              A  2472    	LD	HL,(IX+%FFFFFFF0)
0B07A1 CD D2 1E 0B         A  2473    	CALL	__iand
0B07A5 DD2FDC              A  2474    	LD	(IX+%FFFFFFDC),HL
0B07A8 CD 70 1B 0B         A  2475    	CALL	__icmpzero
0B07AC 28 0F               A  2476    	JR	Z,L_69
                           A  2477    ;  298			{
                           A  2478    ;  299				pagemax += 1;
                           A  2479    .LINE 299
                           A  2480    
0B07AE DD07F6              A  2481    	LD	BC,(IX+%FFFFFFF6)
0B07B1 03                  A  2482    	INC	BC
0B07B2 DD0FF6              A  2483    	LD	(IX+%FFFFFFF6),BC
                           A  2484    ;  300				lastpagebytes = size%PAGESI
                           A  2485    .LINE 300
                           A  2486    
0B07B5 DD07DC              A  2487    	LD	BC,(IX+%FFFFFFDC)
0B07B8 DD0FDF              A  2488    	LD	(IX+%FFFFFFDF),BC
                           A  2489    ;  301			}
                           A  2490    ;  302			else lastpagebytes = PAGESIZE; 
                           A  2491    .LINE 302
                           A  2492    
0B07BB 18 07               A  2493    	JR	L_77
0B07BD                     A  2494    L_69:
0B07BD 01000400            A  2495    	LD	BC,1024
0B07C1 DD0FDF              A  2496    	LD	(IX+%FFFFFFDF),BC
0B07C4                     A  2497    L_77:
                           A  2498    ;  303			
                           A  2499    ;  304			// write out each page to flash
                           A  2500    ;  305			for(counter = 0; counter < page
                           A  2501    .LINE 305
                           A  2502    
0B07C4 01000000            A  2503    	LD	BC,0
0B07C8 DD0FFD              A  2504    	LD	(IX+%FFFFFFFD),BC
0B07CB C3 77 08 0B         A  2505    	JR	L_76
0B07CF                     A  2506    L_74:
                           A  2507    ;  306			{
                           A  2508    ;  307				printf("\rWriting flash pag
                           A  2509    .LINE 307
                           A  2510    
0B07CF 01 B3 17 0B         A  2511    	LD	BC,___print_uputch
0B07D3 ED43 04 28 0B       A  2512    	LD	(___print_xputch),BC
0B07D8 01 A3 2A 0B         A  2513    	LD	BC,L__58
0B07DC C5                  A  2514    	PUSH	BC
0B07DD CD 42 16 0B         A  2515    	CALL	___print_sendstring
0B07E1 C1                  A  2516    	POP	BC
0B07E2 3E03                A  2517    	LD	A,%3
0B07E4 32 B0 23 0B         A  2518    	LD	(___print_fmt+5),A
0B07E8 3E40                A  2519    	LD	A,%40
0B07EA 32 AC 23 0B         A  2520    	LD	(___print_fmt+1),A
0B07EE DD07FD              A  2521    	LD	BC,(IX+%FFFFFFFD)
0B07F1 03                  A  2522    	INC	BC
0B07F2 AF                  A  2523    	XOR	A,A
0B07F3 C5D1                A  2524    	LD	DE,BC
0B07F5 4F                  A  2525    	LD	C,A
0B07F6 0600                A  2526    	LD	B,%0
0B07F8 C5                  A  2527    	PUSH	BC
0B07F9 D5                  A  2528    	PUSH	DE
0B07FA CD 39 18 0B         A  2529    	CALL	__u_itoa
0B07FE C1                  A  2530    	POP	BC
0B07FF C1                  A  2531    	POP	BC
0B0800 012F0000            A  2532    	LD	BC,47
0B0804 C5                  A  2533    	PUSH	BC
0B0805 CD B3 17 0B         A  2534    	CALL	___print_uputch
0B0809 C1                  A  2535    	POP	BC
0B080A 3E03                A  2536    	LD	A,%3
0B080C 32 B0 23 0B         A  2537    	LD	(___print_fmt+5),A
0B0810 3E40                A  2538    	LD	A,%40
0B0812 32 AC 23 0B         A  2539    	LD	(___print_fmt+1),A
0B0816 DD07F6              A  2540    	LD	BC,(IX+%FFFFFFF6)
0B0819 AF                  A  2541    	XOR	A,A
0B081A C5D1                A  2542    	LD	DE,BC
0B081C 4F                  A  2543    	LD	C,A
0B081D 0600                A  2544    	LD	B,%0
0B081F C5                  A  2545    	PUSH	BC
0B0820 D5                  A  2546    	PUSH	DE
0B0821 CD 39 18 0B         A  2547    	CALL	__u_itoa
0B0825 C1                  A  2548    	POP	BC
0B0826 C1                  A  2549    	POP	BC
                           A  2550    ;  308				
                           A  2551    ;  309				if(counter == (pagemax - 1)
                           A  2552    .LINE 309
                           A  2553    
0B0827 DD31F6              A  2554    	LD	IY,(IX+%FFFFFFF6)
0B082A ED23FF              A  2555    	LEA	HL,IY+%FFFFFFFF
0B082D DD07FD              A  2556    	LD	BC,(IX+%FFFFFFFD)
0B0830 B7                  A  2557    	OR	A,A
0B0831 ED42                A  2558    	SBC	HL,BC
0B0833 20 15               A  2559    	JR	NZ,L_72
                           A  2560    ;  310					fastmemcpy(addressto,ad
                           A  2561    .LINE 310
                           A  2562    
0B0835 DD07DF              A  2563    	LD	BC,(IX+%FFFFFFDF)
0B0838 C5                  A  2564    	PUSH	BC
0B0839 DD07F9              A  2565    	LD	BC,(IX+%FFFFFFF9)
0B083C C5                  A  2566    	PUSH	BC
0B083D DD07ED              A  2567    	LD	BC,(IX+%FFFFFFED)
0B0840 C5                  A  2568    	PUSH	BC
0B0841 CD 3B 12 0B         A  2569    	CALL	_fastmemcpy
0B0845 C1                  A  2570    	POP	BC
0B0846 C1                  A  2571    	POP	BC
0B0847 C1                  A  2572    	POP	BC
                           A  2573    ;  311					//printf("Fake copy to 
                           A  2574    ;  312				else 
                           A  2575    .LINE 312
                           A  2576    
0B0848 18 14               A  2577    	JR	L_73
0B084A                     A  2578    L_72:
                           A  2579    ;  313					fastmemcpy(addressto,ad
                           A  2580    .LINE 313
                           A  2581    
0B084A 01000400            A  2582    	LD	BC,1024
0B084E C5                  A  2583    	PUSH	BC
0B084F DD07F9              A  2584    	LD	BC,(IX+%FFFFFFF9)
0B0852 C5                  A  2585    	PUSH	BC
0B0853 DD07ED              A  2586    	LD	BC,(IX+%FFFFFFED)
0B0856 C5                  A  2587    	PUSH	BC
0B0857 CD 3B 12 0B         A  2588    	CALL	_fastmemcpy
0B085B C1                  A  2589    	POP	BC
0B085C C1                  A  2590    	POP	BC
0B085D C1                  A  2591    	POP	BC
0B085E                     A  2592    L_73:
                           A  2593    ;  314					//printf("Fake copy to 
                           A  2594    ;  315			
                           A  2595    ;  316				addressto += PAGESIZE;
                           A  2596    .LINE 316
                           A  2597    
0B085E 01000400            A  2598    	LD	BC,1024
0B0862 DD27ED              A  2599    	LD	HL,(IX+%FFFFFFED)
0B0865 09                  A  2600    	ADD	HL,BC
0B0866 DD2FED              A  2601    	LD	(IX+%FFFFFFED),HL
                           A  2602    ;  317				addressfrom += PAGESIZE;
                           A  2603    .LINE 317
                           A  2604    
0B0869 DD27F9              A  2605    	LD	HL,(IX+%FFFFFFF9)
0B086C 09                  A  2606    	ADD	HL,BC
0B086D DD2FF9              A  2607    	LD	(IX+%FFFFFFF9),HL
0B0870 DD07FD              A  2608    	LD	BC,(IX+%FFFFFFFD)
0B0873 03                  A  2609    	INC	BC
0B0874 DD0FFD              A  2610    	LD	(IX+%FFFFFFFD),BC
                           A  2611    ;  318			}
0B0877                     A  2612    L_76:
                           A  2613    .LINE 318
                           A  2614    
0B0877 DD07F6              A  2615    	LD	BC,(IX+%FFFFFFF6)
0B087A DD27FD              A  2616    	LD	HL,(IX+%FFFFFFFD)
0B087D B7                  A  2617    	OR	A,A
0B087E ED42                A  2618    	SBC	HL,BC
0B0880 DA CF 07 0B         A  2619    	JR	C,L_74
                           A  2620    ;  319			lockFlashKeyRegister();	// lock
                           A  2621    .LINE 319
                           A  2622    
0B0884 CD 26 12 0B         A  2623    	CALL	_lockFlashKeyRegister
                           A  2624    ;  320			printf("\r\n");
                           A  2625    .LINE 320
                           A  2626    
0B0888 01 B3 17 0B         A  2627    	LD	BC,___print_uputch
0B088C ED43 04 28 0B       A  2628    	LD	(___print_xputch),BC
0B0891 01 B8 2A 0B         A  2629    	LD	BC,L__61
0B0895 C5                  A  2630    	PUSH	BC
0B0896 CD 42 16 0B         A  2631    	CALL	___print_sendstring
0B089A C1                  A  2632    	POP	BC
                           A  2633    ;  321			
                           A  2634    ;  322			//Verify correct CRC in flash
                           A  2635    ;  323			printf("Verifying flash checksu
                           A  2636    .LINE 323
                           A  2637    
0B089B 01 B3 17 0B         A  2638    	LD	BC,___print_uputch
0B089F ED43 04 28 0B       A  2639    	LD	(___print_xputch),BC
0B08A4 01 BB 2A 0B         A  2640    	LD	BC,L__62
0B08A8 C5                  A  2641    	PUSH	BC
0B08A9 CD 42 16 0B         A  2642    	CALL	___print_sendstring
0B08AD C1                  A  2643    	POP	BC
                           A  2644    ;  324			crc32((char*)FLASHSTART, size);
                           A  2645    .LINE 324
                           A  2646    
0B08AE DD07F0              A  2647    	LD	BC,(IX+%FFFFFFF0)
0B08B1 C5                  A  2648    	PUSH	BC
0B08B2 01000000            A  2649    	LD	BC,0
0B08B6 C5                  A  2650    	PUSH	BC
0B08B7 CD 17 15 0B         A  2651    	CALL	_crc32
0B08BB C1                  A  2652    	POP	BC
0B08BC C1                  A  2653    	POP	BC
                           A  2654    ;  325			crcresult = crc32_finalize();
                           A  2655    .LINE 325
                           A  2656    
0B08BD CD DA 14 0B         A  2657    	CALL	_crc32_finalize
0B08C1 DD2FE2              A  2658    	LD	(IX+%FFFFFFE2),HL
0B08C4 DD73E5              A  2659    	LD	(IX+%FFFFFFE5),E
                           A  2660    ;  326	
                           A  2661    ;  327			if(crcresult == crcexpected)
                           A  2662    .LINE 327
                           A  2663    
0B08C7 DD27E2              A  2664    	LD	HL,(IX+%FFFFFFE2)
0B08CA DD5EE5              A  2665    	LD	E,(IX+%FFFFFFE5)
0B08CD DD07D5              A  2666    	LD	BC,(IX+%FFFFFFD5)
0B08D0 DD7ED8              A  2667    	LD	A,(IX+%FFFFFFD8)
0B08D3 CD 95 1E 0B         A  2668    	CALL	__lcmpu
0B08D7 20 1E               A  2669    	JR	NZ,L_86
                           A  2670    ;  328			{
                           A  2671    ;  329				printf("- OK\r\n");
                           A  2672    .LINE 329
                           A  2673    
0B08D9 01 B3 17 0B         A  2674    	LD	BC,___print_uputch
0B08DD ED43 04 28 0B       A  2675    	LD	(___print_xputch),BC
0B08E2 01 D8 2A 0B         A  2676    	LD	BC,L__64
0B08E6 C5                  A  2677    	PUSH	BC
0B08E7 CD 42 16 0B         A  2678    	CALL	___print_sendstring
0B08EB C1                  A  2679    	POP	BC
                           A  2680    ;  330				state = systemreset;
                           A  2681    .LINE 330
                           A  2682    
0B08EC 01020000            A  2683    	LD	BC,2
0B08F0 DD0FF3              A  2684    	LD	(IX+%FFFFFFF3),BC
                           A  2685    ;  331			}
                           A  2686    ;  332			else // CRC Failure - next acti
                           A  2687    .LINE 332
                           A  2688    
0B08F3 C3 CC 06 0B         A  2689    	JR	L_88
0B08F7                     A  2690    L_86:
                           A  2691    ;  333			{	 // User interaction not po
                           A  2692    ;  334				switch(state)
                           A  2693    .LINE 334
                           A  2694    
0B08F7 DD27F3              A  2695    	LD	HL,(IX+%FFFFFFF3)
0B08FA CD 52 1E 0B         A  2696    	CALL	__case8D
0B08FE E9                  A  2697    	JP	(HL)
0B08FF                     A  2698    L__65:
0B08FF 0200                A  2699    	DW	2
0B0901 00                  A  2700    	DB	0
0B0902 0C090B              A  2701    	DW24	L_79	
                           A  2702    
0B0905 01                  A  2703    	DB	1
0B0906 2A090B              A  2704    	DW24	L_80	
                           A  2705    
0B0909 3F090B              A  2706    	DW24	L_83	
                           A  2707    
                           A  2708    ;  335				{
                           A  2709    ;  336					case firmware:
0B090C                     A  2710    L_79:
                           A  2711    .LINE 336
                           A  2712    
                           A  2713    ;  337						printf("\r\nError o
                           A  2714    .LINE 337
                           A  2715    
0B090C 01 B3 17 0B         A  2716    	LD	BC,___print_uputch
0B0910 ED43 04 28 0B       A  2717    	LD	(___print_xputch),BC
0B0915 01 DF 2A 0B         A  2718    	LD	BC,L__66
0B0919 C5                  A  2719    	PUSH	BC
0B091A CD 42 16 0B         A  2720    	CALL	___print_sendstring
0B091E C1                  A  2721    	POP	BC
                           A  2722    ;  338						state = retry;
                           A  2723    .LINE 338
                           A  2724    
0B091F 01010000            A  2725    	LD	BC,1
0B0923 DD0FF3              A  2726    	LD	(IX+%FFFFFFF3),BC
                           A  2727    ;  339						break;
                           A  2728    .LINE 339
                           A  2729    
0B0926 C3 CC 06 0B         A  2730    	JR	L_88
                           A  2731    ;  340					case retry:
0B092A                     A  2732    L_80:
                           A  2733    .LINE 340
                           A  2734    
                           A  2735    ;  341						printf("\r\nRetry f
                           A  2736    .LINE 341
                           A  2737    
0B092A 01 B3 17 0B         A  2738    	LD	BC,___print_uputch
0B092E ED43 04 28 0B       A  2739    	LD	(___print_xputch),BC
0B0933 01 0E 2B 0B         A  2740    	LD	BC,L__67
0B0937 C5                  A  2741    	PUSH	BC
0B0938 CD 42 16 0B         A  2742    	CALL	___print_sendstring
0B093C C1                  A  2743    	POP	BC
                           A  2744    ;  342						while(1); // no mor
0B093D                     A  2745    L_82:
                           A  2746    .LINE 342
                           A  2747    
0B093D 18 FE               A  2748    	JR	L_82
                           A  2749    ;  343					default:
0B093F                     A  2750    L_83:
                           A  2751    .LINE 343
                           A  2752    
                           A  2753    ;  344						state = retry;
                           A  2754    .LINE 344
                           A  2755    
0B093F 01010000            A  2756    	LD	BC,1
0B0943 DD0FF3              A  2757    	LD	(IX+%FFFFFFF3),BC
0B0946 C3 CC 06 0B         A  2758    	JR	L_88
                           A  2759    ;  345				}
                           A  2760    ;  346			}
                           A  2761    ;  347		}		
                           A  2762    ;  348		return 0;
                           A  2763    ;  349	}
0B094A                     A  2764    L_90:
                           A  2765    .LINE 349
                           A  2766    
0B094A DDF9                A  2767    	LD	SP,IX
0B094C DDE1                A  2768    	POP	IX
0B094E C9                  A  2769    	RET	
                           A  2770    
                           A  2771    
                           A  2772    ;**************************** _update_mos *****
                           A  2773    ;Name                         Addr/Register   S
                           A  2774    ;_lockFlashKeyRegister               IMPORT  --
                           A  2775    ;_fastmemcpy                         IMPORT  --
                           A  2776    ;__u_itoa                            IMPORT  --
                           A  2777    ;___print_fmt                        IMPORT    
                           A  2778    ;_enableFlashKeyRegister             IMPORT  --
                           A  2779    ;_crc32_finalize                     IMPORT  --
                           A  2780    ;_crc32                              IMPORT  --
                           A  2781    ;_mos_flseek                         IMPORT  --
                           A  2782    ;_crc32_initialize                   IMPORT  --
                           A  2783    ;_getFileSize                        IMPORT  --
                           A  2784    ;_mos_fclose                         IMPORT  --
                           A  2785    ;_mos_fread                          IMPORT  --
                           A  2786    ;___print_sendstring                 IMPORT  --
                           A  2787    ;___print_xputch                     IMPORT    
                           A  2788    ;___print_uputch                     IMPORT  --
                           A  2789    ;_mos_fopen                          IMPORT  --
                           A  2790    ;_putch                              IMPORT  --
                           A  2791    ;crcexpected                          IX-43    
                           A  2792    ;size                                 IX-39    
                           A  2793    ;G_0                                  IX-36    
                           A  2794    ;lastpagebytes                        IX-33    
                           A  2795    ;crcresult                            IX-30    
                           A  2796    ;value                                IX-26    
                           A  2797    ;got                                  IX-25    
                           A  2798    ;ptr                                  IX-22    
                           A  2799    ;addressto                            IX-19    
                           A  2800    ;filesize                             IX-16    
                           A  2801    ;state                                IX-13    
                           A  2802    ;pagemax                              IX-10    
                           A  2803    ;addressfrom                           IX-7    
                           A  2804    ;file                                  IX-4    
                           A  2805    ;counter                               IX-3    
                           A  2806    ;filename                              IX+6    
                           A  2807    
                           A  2808    
                           A  2809    ; Stack Frame Size: 52 (bytes)
                           A  2810    ;       Spill Code: 0 (instruction)
                           A  2811    
                           A  2812    
                           A  2813    .ENDFUNC "update_mos",349,"_update_mos"
                           A  2814    	SEGMENT STRSECT
0B29D4                     A  2815    L__42:
0B29D4 4572726F 72206F70   A  2816    	DB	"Error opening \""
0B29DC 656E696E 672022 
0B29E3 00                  A  2817    	DB	0
0B29E4                     A  2818    L__43:
0B29E4 22                  A  2819    	DB	"\""
0B29E5 0A0D00              A  2820    	DB	10,13,0
0B29E8                     A  2821    L__45:
0B29E8 46696C65 20646F65   A  2822    	DB	"File does not contain valid MOS ez80 s
0B29F0 73206E6F 7420636F 
0B29F8 6E746169 6E207661 
0B2A00 6C696420 4D4F5320 
0B2A08 657A3830 20737461 
0B2A10 72747570 20636F64 
0B2A18 65 
0B2A19 0D0A00              A  2823    	DB	13,10,0
0B2A1C                     A  2824    L__47:
0B2A1C 46696C65 20746F6F   A  2825    	DB	"File too large for 128KB embedded flas
0B2A24 206C6172 67652066 
0B2A2C 6F722031 32384B42 
0B2A34 20656D62 65646465 
0B2A3C 6420666C 617368 
0B2A43 0D0A00              A  2826    	DB	13,10,0
0B2A46                     A  2827    L__48:
0B2A46 0D0A                A  2828    	DB	13,10
0B2A48 56616C69 6420657A   A  2829    	DB	"Valid ez80 code"
0B2A50 38302063 6F6465 
0B2A57 0D0A                A  2830    	DB	13,10
0B2A59 43616C63 756C6174   A  2831    	DB	"Calculating CRC32"
0B2A61 696E6720 43524333 
0B2A69 32 
0B2A6A 00                  A  2832    	DB	0
0B2A6B                     A  2833    L__51:
0B2A6B 0D0A00              A  2834    	DB	13,10,0
0B2A6E                     A  2835    L__52:
0B2A6E 446F6E65            A  2836    	DB	"Done"
0B2A72 0D0A00              A  2837    	DB	13,10,0
0B2A75                     A  2838    L__53:
0B2A75 45726173 696E6720   A  2839    	DB	"Erasing flash... "
0B2A7D 666C6173 682E2E2E 
0B2A85 20 
0B2A86 00                  A  2840    	DB	0
0B2A87                     A  2841    L__56:
0B2A87 0D0A                A  2842    	DB	13,10
0B2A89 57726974 696E6720   A  2843    	DB	"Writing new firmware..."
0B2A91 6E657720 6669726D 
0B2A99 77617265 2E2E2E 
0B2AA0 0D0A00              A  2844    	DB	13,10,0
0B2AA3                     A  2845    L__58:
0B2AA3 0D                  A  2846    	DB	13
0B2AA4 57726974 696E6720   A  2847    	DB	"Writing flash page "
0B2AAC 666C6173 68207061 
0B2AB4 676520 
0B2AB7 00                  A  2848    	DB	0
0B2AB8                     A  2849    L__61:
0B2AB8 0D0A00              A  2850    	DB	13,10,0
0B2ABB                     A  2851    L__62:
0B2ABB 56657269 6679696E   A  2852    	DB	"Verifying flash checksum... "
0B2AC3 6720666C 61736820 
0B2ACB 63686563 6B73756D 
0B2AD3 2E2E2E20 
0B2AD7 00                  A  2853    	DB	0
0B2AD8                     A  2854    L__64:
0B2AD8 2D204F4B            A  2855    	DB	"- OK"
0B2ADC 0D0A00              A  2856    	DB	13,10,0
0B2ADF                     A  2857    L__66:
0B2ADF 0D0A                A  2858    	DB	13,10
0B2AE1 4572726F 72206F63   A  2859    	DB	"Error occured during flash write"
0B2AE9 63757265 64206475 
0B2AF1 72696E67 20666C61 
0B2AF9 73682077 72697465 
0B2B01 0D0A                A  2860    	DB	13,10
0B2B03 52657472 792E2E2E   A  2861    	DB	"Retry..."
0B2B0B 0D0A00              A  2862    	DB	13,10,0
0B2B0E                     A  2863    L__67:
0B2B0E 0D0A                A  2864    	DB	13,10
0B2B10 52657472 79206661   A  2865    	DB	"Retry failed"
0B2B18 696C6564 
0B2B1C 0D0A00              A  2866    	DB	13,10,0
                           A  2867    	SEGMENT CODE
                           A  2868    ;  350	
                           A  2869    ;  351	void echoVDP(uint8_t value) {
0B094F                     A  2870    _echoVDP:
                           A  2871    .DEFINE "_echoVDP"
                           A  2872    
                           A  2873    .VALUE _echoVDP
                           A  2874    
                           A  2875    .CLASS 2
                           A  2876    
                           A  2877    .TYPE 65
                           A  2878    
                           A  2879    .ENDEF
                           A  2880    
                           A  2881    .BEGFUNC "echoVDP",351,"_echoVDP"
                           A  2882    
                           A  2883    .LINE 351
                           A  2884    
                           A  2885    .DEFINE "value"
                           A  2886    
                           A  2887    .CLASS 65
                           A  2888    
                           A  2889    .VALUE 6
                           A  2890    
                           A  2891    .TYPE 12
                           A  2892    
                           A  2893    .ENDEF
                           A  2894    
0B094F DDE5                A  2895    	PUSH	IX
0B0951 DD210000 00         A  2896    	LD	IX,0
0B0956 DD39                A  2897    	ADD	IX,SP
                           A  2898    ;  352		putch(23);
                           A  2899    .LINE 352
                           A  2900    
0B0958 01170000            A  2901    	LD	BC,23
0B095C C5                  A  2902    	PUSH	BC
0B095D CD E5 00 0B         A  2903    	CALL	_putch
0B0961 C1                  A  2904    	POP	BC
                           A  2905    ;  353		putch(0);
                           A  2906    .LINE 353
                           A  2907    
0B0962 01000000            A  2908    	LD	BC,0
0B0966 C5                  A  2909    	PUSH	BC
0B0967 CD E5 00 0B         A  2910    	CALL	_putch
0B096B C1                  A  2911    	POP	BC
                           A  2912    ;  354		putch(0x80);
                           A  2913    .LINE 354
                           A  2914    
0B096C 01800000            A  2915    	LD	BC,128
0B0970 C5                  A  2916    	PUSH	BC
0B0971 CD E5 00 0B         A  2917    	CALL	_putch
0B0975 C1                  A  2918    	POP	BC
                           A  2919    ;  355		putch(value);
                           A  2920    .LINE 355
                           A  2921    
0B0976 DD7E06              A  2922    	LD	A,(IX+%6)
0B0979 B7ED62              A  2923    	UEXT	HL
0B097C 6F                  A  2924    	LD	L,A
0B097D E5                  A  2925    	PUSH	HL
0B097E CD E5 00 0B         A  2926    	CALL	_putch
0B0982 C1                  A  2927    	POP	BC
                           A  2928    ;  356		delayms(100);
                           A  2929    .LINE 356
                           A  2930    
0B0983 01640000            A  2931    	LD	BC,100
0B0987 C5                  A  2932    	PUSH	BC
0B0988 CD DF 12 0B         A  2933    	CALL	_delayms
0B098C C1                  A  2934    	POP	BC
                           A  2935    ;  357	}
                           A  2936    .LINE 357
                           A  2937    
0B098D DDF9                A  2938    	LD	SP,IX
0B098F DDE1                A  2939    	POP	IX
0B0991 C9                  A  2940    	RET	
                           A  2941    
                           A  2942    
                           A  2943    ;**************************** _echoVDP ********
                           A  2944    ;Name                         Addr/Register   S
                           A  2945    ;_delayms                            IMPORT  --
                           A  2946    ;_putch                              IMPORT  --
                           A  2947    ;value                                 IX+6    
                           A  2948    
                           A  2949    
                           A  2950    ; Stack Frame Size: 9 (bytes)
                           A  2951    ;       Spill Code: 0 (instruction)
                           A  2952    
                           A  2953    
                           A  2954    .ENDFUNC "echoVDP",357,"_echoVDP"
                           A  2955    ;  358	
                           A  2956    ;  359	int getCommand(const char *command) {
0B0992                     A  2957    _getCommand:
                           A  2958    .DEFINE "_getCommand"
                           A  2959    
                           A  2960    .VALUE _getCommand
                           A  2961    
                           A  2962    .CLASS 2
                           A  2963    
                           A  2964    .TYPE 68
                           A  2965    
                           A  2966    .ENDEF
                           A  2967    
                           A  2968    .BEGFUNC "getCommand",359,"_getCommand"
                           A  2969    
                           A  2970    .LINE 359
                           A  2971    
                           A  2972    .DEFINE "command"
                           A  2973    
                           A  2974    .CLASS 65
                           A  2975    
                           A  2976    .VALUE 6
                           A  2977    
                           A  2978    .TYPE 194
                           A  2979    
                           A  2980    .ENDEF
                           A  2981    
0B0992 DDE5                A  2982    	PUSH	IX
0B0994 DD210000 00         A  2983    	LD	IX,0
0B0999 DD39                A  2984    	ADD	IX,SP
                           A  2985    ;  360		if(memcmp(command, "all", 4) == 0) 
                           A  2986    .LINE 360
                           A  2987    
0B099B 01040000            A  2988    	LD	BC,4
0B099F C5                  A  2989    	PUSH	BC
0B09A0 01 1F 2B 0B         A  2990    	LD	BC,L__70
0B09A4 C5                  A  2991    	PUSH	BC
0B09A5 DD0706              A  2992    	LD	BC,(IX+%6)
0B09A8 C5                  A  2993    	PUSH	BC
0B09A9 CD 46 1B 0B         A  2994    	CALL	_memcmp
0B09AD C1                  A  2995    	POP	BC
0B09AE C1                  A  2996    	POP	BC
0B09AF C1                  A  2997    	POP	BC
0B09B0 CD 70 1B 0B         A  2998    	CALL	__icmpzero
0B09B4 20 06               A  2999    	JR	NZ,L_94
0B09B6 21010000            A  3000    	LD	HL,1
0B09BA 18 66               A  3001    	JR	L_100
0B09BC                     A  3002    L_94:
                           A  3003    ;  361		if(memcmp(command, "mos", 3) == 0) 
                           A  3004    .LINE 361
                           A  3005    
0B09BC 01030000            A  3006    	LD	BC,3
0B09C0 C5                  A  3007    	PUSH	BC
0B09C1 01 23 2B 0B         A  3008    	LD	BC,L__72
0B09C5 C5                  A  3009    	PUSH	BC
0B09C6 DD0706              A  3010    	LD	BC,(IX+%6)
0B09C9 C5                  A  3011    	PUSH	BC
0B09CA CD 46 1B 0B         A  3012    	CALL	_memcmp
0B09CE C1                  A  3013    	POP	BC
0B09CF C1                  A  3014    	POP	BC
0B09D0 C1                  A  3015    	POP	BC
0B09D1 CD 70 1B 0B         A  3016    	CALL	__icmpzero
0B09D5 20 06               A  3017    	JR	NZ,L_96
0B09D7 21020000            A  3018    	LD	HL,2
0B09DB 18 45               A  3019    	JR	L_100
0B09DD                     A  3020    L_96:
                           A  3021    ;  362		if(memcmp(command, "vdp", 3) == 0) 
                           A  3022    .LINE 362
                           A  3023    
0B09DD 01030000            A  3024    	LD	BC,3
0B09E1 C5                  A  3025    	PUSH	BC
0B09E2 01 27 2B 0B         A  3026    	LD	BC,L__74
0B09E6 C5                  A  3027    	PUSH	BC
0B09E7 DD0706              A  3028    	LD	BC,(IX+%6)
0B09EA C5                  A  3029    	PUSH	BC
0B09EB CD 46 1B 0B         A  3030    	CALL	_memcmp
0B09EF C1                  A  3031    	POP	BC
0B09F0 C1                  A  3032    	POP	BC
0B09F1 C1                  A  3033    	POP	BC
0B09F2 CD 70 1B 0B         A  3034    	CALL	__icmpzero
0B09F6 20 06               A  3035    	JR	NZ,L_98
0B09F8 21030000            A  3036    	LD	HL,3
0B09FC 18 24               A  3037    	JR	L_100
0B09FE                     A  3038    L_98:
                           A  3039    ;  363		if(memcmp(command, "silent", 6) == 
                           A  3040    .LINE 363
                           A  3041    
0B09FE 01060000            A  3042    	LD	BC,6
0B0A02 C5                  A  3043    	PUSH	BC
0B0A03 01 2B 2B 0B         A  3044    	LD	BC,L__76
0B0A07 C5                  A  3045    	PUSH	BC
0B0A08 DD0706              A  3046    	LD	BC,(IX+%6)
0B0A0B C5                  A  3047    	PUSH	BC
0B0A0C CD 46 1B 0B         A  3048    	CALL	_memcmp
0B0A10 C1                  A  3049    	POP	BC
0B0A11 C1                  A  3050    	POP	BC
0B0A12 C1                  A  3051    	POP	BC
0B0A13 CD 70 1B 0B         A  3052    	CALL	__icmpzero
0B0A17 20 06               A  3053    	JR	NZ,L_99
0B0A19 21040000            A  3054    	LD	HL,4
0B0A1D 18 03               A  3055    	JR	L_100
0B0A1F                     A  3056    L_99:
                           A  3057    ;  364		return CMDUNKNOWN;
                           A  3058    .LINE 364
                           A  3059    
0B0A1F B7                  A  3060    	OR	A,A
0B0A20 ED62                A  3061    	SBC	HL,HL
                           A  3062    ;  365	}
0B0A22                     A  3063    L_100:
                           A  3064    .LINE 365
                           A  3065    
0B0A22 DDF9                A  3066    	LD	SP,IX
0B0A24 DDE1                A  3067    	POP	IX
0B0A26 C9                  A  3068    	RET	
                           A  3069    
                           A  3070    
                           A  3071    ;**************************** _getCommand *****
                           A  3072    ;Name                         Addr/Register   S
                           A  3073    ;_memcmp                             IMPORT  --
                           A  3074    ;command                               IX+6    
                           A  3075    
                           A  3076    
                           A  3077    ; Stack Frame Size: 9 (bytes)
                           A  3078    ;       Spill Code: 0 (instruction)
                           A  3079    
                           A  3080    
                           A  3081    .ENDFUNC "getCommand",365,"_getCommand"
                           A  3082    	SEGMENT STRSECT
0B2B1F                     A  3083    L__70:
0B2B1F 616C6C              A  3084    	DB	"all"
0B2B22 00                  A  3085    	DB	0
0B2B23                     A  3086    L__72:
0B2B23 6D6F73              A  3087    	DB	"mos"
0B2B26 00                  A  3088    	DB	0
0B2B27                     A  3089    L__74:
0B2B27 766470              A  3090    	DB	"vdp"
0B2B2A 00                  A  3091    	DB	0
0B2B2B                     A  3092    L__76:
0B2B2B 73696C65 6E74       A  3093    	DB	"silent"
0B2B31 00                  A  3094    	DB	0
                           A  3095    	SEGMENT DATA
0B2197                     A  3096    _flashmos:
0B2197 00                  A  3097    	DB	0
                           A  3098    .DEFINE "flashmos"
                           A  3099    .ALIAS "_flashmos"
                           A  3100    .CLASS 69
                           A  3101    .VALUE _flashmos
                           A  3102    .TYPE 12
                           A  3103    .ENDEF
                           A  3104    	SEGMENT BSS
0B219D                     A  3105    _mosfilename:
0B219D                     A  3106    	DS	256
                           A  3107    .DEFINE "mosfilename"
                           A  3108    .ALIAS "_mosfilename"
                           A  3109    .CLASS 83
                           A  3110    .VALUE _mosfilename
                           A  3111    .DIM 256
                           A  3112    .TYPE 98
                           A  3113    .ENDEF
                           A  3114    	SEGMENT DATA
0B2198                     A  3115    _flashvdp:
0B2198 00                  A  3116    	DB	0
                           A  3117    .DEFINE "flashvdp"
                           A  3118    .ALIAS "_flashvdp"
                           A  3119    .CLASS 69
                           A  3120    .VALUE _flashvdp
                           A  3121    .TYPE 12
                           A  3122    .ENDEF
                           A  3123    	SEGMENT BSS
0B229D                     A  3124    _vdpfilename:
0B229D                     A  3125    	DS	256
                           A  3126    .DEFINE "vdpfilename"
                           A  3127    .ALIAS "_vdpfilename"
                           A  3128    .CLASS 83
                           A  3129    .VALUE _vdpfilename
                           A  3130    .DIM 256
                           A  3131    .TYPE 98
                           A  3132    .ENDEF
                           A  3133    	SEGMENT DATA
0B2199                     A  3134    _silent:
0B2199 00                  A  3135    	DB	0
                           A  3136    .DEFINE "silent"
                           A  3137    .ALIAS "_silent"
                           A  3138    .CLASS 69
                           A  3139    .VALUE _silent
                           A  3140    .TYPE 12
                           A  3141    .ENDEF
                           A  3142    ;  366	
                           A  3143    ;  367	bool flashmos = false;
                           A  3144    ;  368	char mosfilename[256];
                           A  3145    ;  369	bool flashvdp = false;
                           A  3146    ;  370	char vdpfilename[256];
                           A  3147    ;  371	bool silent = false;
                           A  3148    	SEGMENT CODE
                           A  3149    ;  372	
                           A  3150    ;  373	bool parseCommands(int argc, char *argv
0B0A27                     A  3151    _parseCommands:
                           A  3152    .DEFINE "_parseCommands"
                           A  3153    
                           A  3154    .VALUE _parseCommands
                           A  3155    
                           A  3156    .CLASS 2
                           A  3157    
                           A  3158    .TYPE 76
                           A  3159    
                           A  3160    .ENDEF
                           A  3161    
                           A  3162    .BEGFUNC "parseCommands",373,"_parseCommands"
                           A  3163    
                           A  3164    .LINE 373
                           A  3165    
                           A  3166    .DEFINE "argc"
                           A  3167    
                           A  3168    .CLASS 65
                           A  3169    
                           A  3170    .VALUE 6
                           A  3171    
                           A  3172    .TYPE 4
                           A  3173    
                           A  3174    .ENDEF
                           A  3175    
                           A  3176    .DEFINE "argv"
                           A  3177    
                           A  3178    .CLASS 65
                           A  3179    
                           A  3180    .VALUE 9
                           A  3181    
                           A  3182    .TYPE 290
                           A  3183    
                           A  3184    .ENDEF
                           A  3185    
                           A  3186    .DEFINE "argcounter"
                           A  3187    
                           A  3188    .CLASS 65
                           A  3189    
                           A  3190    .VALUE -3
                           A  3191    
                           A  3192    .TYPE 4
                           A  3193    
                           A  3194    .ENDEF
                           A  3195    
                           A  3196    .DEFINE "command"
                           A  3197    
                           A  3198    .CLASS 65
                           A  3199    
                           A  3200    .VALUE -15
                           A  3201    
                           A  3202    .TYPE 4
                           A  3203    
                           A  3204    .ENDEF
                           A  3205    
0B0A27 DDE5                A  3206    	PUSH	IX
0B0A29 DD210000 00         A  3207    	LD	IX,0
0B0A2E DD39                A  3208    	ADD	IX,SP
0B0A30 ED22F1              A  3209    	LEA	HL,IX+%FFFFFFF1
0B0A33 F9                  A  3210    	LD	SP,HL
                           A  3211    ;  374		int argcounter;
                           A  3212    ;  375		int command;
                           A  3213    ;  376	
                           A  3214    ;  377		argcounter = 1;
                           A  3215    .LINE 377
                           A  3216    
0B0A34 01010000            A  3217    	LD	BC,1
0B0A38 DD0FFD              A  3218    	LD	(IX+%FFFFFFFD),BC
                           A  3219    ;  378		while(argcounter < argc) {
                           A  3220    .LINE 378
                           A  3221    
0B0A3B C3 B4 0B 0B         A  3222    	JR	L_127
0B0A3F                     A  3223    L_128:
                           A  3224    ;  379			command = getCommand(argv[argco
                           A  3225    .LINE 379
                           A  3226    
0B0A3F DD27FD              A  3227    	LD	HL,(IX+%FFFFFFFD)
0B0A42 E5C1                A  3228    	LD	BC,HL
0B0A44 29                  A  3229    	ADD	HL,HL
0B0A45 09                  A  3230    	ADD	HL,BC
0B0A46 DD0709              A  3231    	LD	BC,(IX+%9)
0B0A49 09                  A  3232    	ADD	HL,BC
0B0A4A ED07                A  3233    	LD	BC,(HL)
0B0A4C C5                  A  3234    	PUSH	BC
0B0A4D CD 92 09 0B         A  3235    	CALL	_getCommand
0B0A51 C1                  A  3236    	POP	BC
0B0A52 DD2FF1              A  3237    	LD	(IX+%FFFFFFF1),HL
                           A  3238    ;  380			switch(command) {
                           A  3239    .LINE 380
                           A  3240    
0B0A55 CD 07 16 0B         A  3241    	CALL	__seqcaseD
0B0A59 E9                  A  3242    	JP	(HL)
0B0A5A                     A  3243    L__79:
0B0A5A 0500                A  3244    	DW	5
0B0A5C 0000                A  3245    	DW	0
0B0A5E 00                  A  3246    	DB	0
0B0A5F 710A0B              A  3247    	DW24	L_101	
                           A  3248    
0B0A62 760A0B              A  3249    	DW24	L_102	
                           A  3250    
0B0A65 B70A0B              A  3251    	DW24	L_106	
                           A  3252    
0B0A68 2B0B0B              A  3253    	DW24	L_114	
                           A  3254    
0B0A6B 9D0B0B              A  3255    	DW24	L_122	
                           A  3256    
0B0A6E AD0B0B              A  3257    	DW24	L_126	
                           A  3258    
                           A  3259    ;  381				case CMDUNKNOWN:
0B0A71                     A  3260    L_101:
                           A  3261    .LINE 381
                           A  3262    
                           A  3263    ;  382					return false;
                           A  3264    .LINE 382
                           A  3265    
0B0A71 AF                  A  3266    	XOR	A,A
0B0A72 C3 E2 0B 0B         A  3267    	JR	L_135
                           A  3268    ;  383					break;
                           A  3269    ;  384				case CMDALL:
0B0A76                     A  3270    L_102:
                           A  3271    .LINE 384
                           A  3272    
                           A  3273    ;  385					if(flashmos || flashvdp
                           A  3274    .LINE 385
                           A  3275    
0B0A76 3A 97 21 0B         A  3276    	LD	A,(_flashmos)
0B0A7A B7                  A  3277    	OR	A,A
0B0A7B 20 07               A  3278    	JR	NZ,L_104
0B0A7D 3A 98 21 0B         A  3279    	LD	A,(_flashvdp)
0B0A81 B7                  A  3280    	OR	A,A
0B0A82 28 05               A  3281    	JR	Z,L_105
0B0A84                     A  3282    L_104:
0B0A84 AF                  A  3283    	XOR	A,A
0B0A85 C3 E2 0B 0B         A  3284    	JR	L_135
0B0A89                     A  3285    L_105:
                           A  3286    ;  386					strcpy(mosfilename, DEF
                           A  3287    .LINE 386
                           A  3288    
0B0A89 01 32 2B 0B         A  3289    	LD	BC,L__82
0B0A8D C5                  A  3290    	PUSH	BC
0B0A8E 01 9D 21 0B         A  3291    	LD	BC,_mosfilename
0B0A92 C5                  A  3292    	PUSH	BC
0B0A93 CD AB 1E 0B         A  3293    	CALL	_strcpy
0B0A97 C1                  A  3294    	POP	BC
0B0A98 C1                  A  3295    	POP	BC
                           A  3296    ;  387					strcpy(vdpfilename, DEF
                           A  3297    .LINE 387
                           A  3298    
0B0A99 01 3A 2B 0B         A  3299    	LD	BC,L__83
0B0A9D C5                  A  3300    	PUSH	BC
0B0A9E 01 9D 22 0B         A  3301    	LD	BC,_vdpfilename
0B0AA2 C5                  A  3302    	PUSH	BC
0B0AA3 CD AB 1E 0B         A  3303    	CALL	_strcpy
0B0AA7 C1                  A  3304    	POP	BC
0B0AA8 C1                  A  3305    	POP	BC
                           A  3306    ;  388					flashmos = true;
                           A  3307    .LINE 388
                           A  3308    
0B0AA9 3E01                A  3309    	LD	A,%1
0B0AAB 32 97 21 0B         A  3310    	LD	(_flashmos),A
                           A  3311    ;  389					flashvdp = true;
                           A  3312    .LINE 389
                           A  3313    
0B0AAF 32 98 21 0B         A  3314    	LD	(_flashvdp),A
                           A  3315    ;  390					break;
                           A  3316    .LINE 390
                           A  3317    
0B0AB3 C3 AD 0B 0B         A  3318    	JR	L_126
                           A  3319    ;  391				case CMDMOS:
0B0AB7                     A  3320    L_106:
                           A  3321    .LINE 391
                           A  3322    
                           A  3323    ;  392					if(flashmos) return fal
                           A  3324    .LINE 392
                           A  3325    
0B0AB7 3A 97 21 0B         A  3326    	LD	A,(_flashmos)
0B0ABB B7                  A  3327    	OR	A,A
0B0ABC 28 05               A  3328    	JR	Z,L_112
0B0ABE AF                  A  3329    	XOR	A,A
0B0ABF C3 E2 0B 0B         A  3330    	JR	L_135
0B0AC3                     A  3331    L_112:
                           A  3332    ;  393					if((argc > (argcounter+
                           A  3333    .LINE 393
                           A  3334    
0B0AC3 DD07FD              A  3335    	LD	BC,(IX+%FFFFFFFD)
0B0AC6 03                  A  3336    	INC	BC
0B0AC7 DD0FFA              A  3337    	LD	(IX+%FFFFFFFA),BC
0B0ACA DD0706              A  3338    	LD	BC,(IX+%6)
0B0ACD DD27FA              A  3339    	LD	HL,(IX+%FFFFFFFA)
0B0AD0 B7                  A  3340    	OR	A,A
0B0AD1 ED42                A  3341    	SBC	HL,BC
0B0AD3 F2 11 0B 0B         A  3342    	JP	P,L_111
0B0AD7 DD27FA              A  3343    	LD	HL,(IX+%FFFFFFFA)
0B0ADA E5C1                A  3344    	LD	BC,HL
0B0ADC 29                  A  3345    	ADD	HL,HL
0B0ADD 09                  A  3346    	ADD	HL,BC
0B0ADE DD0709              A  3347    	LD	BC,(IX+%9)
0B0AE1 09                  A  3348    	ADD	HL,BC
0B0AE2 ED07                A  3349    	LD	BC,(HL)
0B0AE4 C5                  A  3350    	PUSH	BC
0B0AE5 CD 92 09 0B         A  3351    	CALL	_getCommand
0B0AE9 C1                  A  3352    	POP	BC
0B0AEA CD 70 1B 0B         A  3353    	CALL	__icmpzero
0B0AEE 20 21               A  3354    	JR	NZ,L_111
                           A  3355    ;  394						strcpy(mosfilename,
                           A  3356    .LINE 394
                           A  3357    
0B0AF0 DD27FA              A  3358    	LD	HL,(IX+%FFFFFFFA)
0B0AF3 E5C1                A  3359    	LD	BC,HL
0B0AF5 29                  A  3360    	ADD	HL,HL
0B0AF6 09                  A  3361    	ADD	HL,BC
0B0AF7 DD0709              A  3362    	LD	BC,(IX+%9)
0B0AFA 09                  A  3363    	ADD	HL,BC
0B0AFB ED07                A  3364    	LD	BC,(HL)
0B0AFD C5                  A  3365    	PUSH	BC
0B0AFE 01 9D 21 0B         A  3366    	LD	BC,_mosfilename
0B0B02 C5                  A  3367    	PUSH	BC
0B0B03 CD AB 1E 0B         A  3368    	CALL	_strcpy
0B0B07 C1                  A  3369    	POP	BC
0B0B08 C1                  A  3370    	POP	BC
                           A  3371    ;  395						argcounter++;
                           A  3372    .LINE 395
                           A  3373    
0B0B09 DD07FA              A  3374    	LD	BC,(IX+%FFFFFFFA)
0B0B0C DD0FFD              A  3375    	LD	(IX+%FFFFFFFD),BC
                           A  3376    ;  396					}
                           A  3377    ;  397					else {
                           A  3378    .LINE 397
                           A  3379    
0B0B0F 18 10               A  3380    	JR	L_113
0B0B11                     A  3381    L_111:
                           A  3382    ;  398						strcpy(mosfilename,
                           A  3383    .LINE 398
                           A  3384    
0B0B11 01 47 2B 0B         A  3385    	LD	BC,L__87
0B0B15 C5                  A  3386    	PUSH	BC
0B0B16 01 9D 21 0B         A  3387    	LD	BC,_mosfilename
0B0B1A C5                  A  3388    	PUSH	BC
0B0B1B CD AB 1E 0B         A  3389    	CALL	_strcpy
0B0B1F C1                  A  3390    	POP	BC
0B0B20 C1                  A  3391    	POP	BC
                           A  3392    ;  399					}
0B0B21                     A  3393    L_113:
                           A  3394    .LINE 399
                           A  3395    
                           A  3396    ;  400					flashmos = true;
                           A  3397    .LINE 400
                           A  3398    
0B0B21 3E01                A  3399    	LD	A,%1
0B0B23 32 97 21 0B         A  3400    	LD	(_flashmos),A
                           A  3401    ;  401					break;
                           A  3402    .LINE 401
                           A  3403    
0B0B27 C3 AD 0B 0B         A  3404    	JR	L_126
                           A  3405    ;  402				case CMDVDP:
0B0B2B                     A  3406    L_114:
                           A  3407    .LINE 402
                           A  3408    
                           A  3409    ;  403					if(flashvdp) return fal
                           A  3410    .LINE 403
                           A  3411    
0B0B2B 3A 98 21 0B         A  3412    	LD	A,(_flashvdp)
0B0B2F B7                  A  3413    	OR	A,A
0B0B30 28 05               A  3414    	JR	Z,L_120
0B0B32 AF                  A  3415    	XOR	A,A
0B0B33 C3 E2 0B 0B         A  3416    	JR	L_135
0B0B37                     A  3417    L_120:
                           A  3418    ;  404					if((argc > (argcounter+
                           A  3419    .LINE 404
                           A  3420    
0B0B37 DD07FD              A  3421    	LD	BC,(IX+%FFFFFFFD)
0B0B3A 03                  A  3422    	INC	BC
0B0B3B DD0FF7              A  3423    	LD	(IX+%FFFFFFF7),BC
0B0B3E DD0706              A  3424    	LD	BC,(IX+%6)
0B0B41 DD27F7              A  3425    	LD	HL,(IX+%FFFFFFF7)
0B0B44 B7                  A  3426    	OR	A,A
0B0B45 ED42                A  3427    	SBC	HL,BC
0B0B47 F2 85 0B 0B         A  3428    	JP	P,L_119
0B0B4B DD27F7              A  3429    	LD	HL,(IX+%FFFFFFF7)
0B0B4E E5C1                A  3430    	LD	BC,HL
0B0B50 29                  A  3431    	ADD	HL,HL
0B0B51 09                  A  3432    	ADD	HL,BC
0B0B52 DD0709              A  3433    	LD	BC,(IX+%9)
0B0B55 09                  A  3434    	ADD	HL,BC
0B0B56 ED07                A  3435    	LD	BC,(HL)
0B0B58 C5                  A  3436    	PUSH	BC
0B0B59 CD 92 09 0B         A  3437    	CALL	_getCommand
0B0B5D C1                  A  3438    	POP	BC
0B0B5E CD 70 1B 0B         A  3439    	CALL	__icmpzero
0B0B62 20 21               A  3440    	JR	NZ,L_119
                           A  3441    ;  405						strcpy(vdpfilename,
                           A  3442    .LINE 405
                           A  3443    
0B0B64 DD27F7              A  3444    	LD	HL,(IX+%FFFFFFF7)
0B0B67 E5C1                A  3445    	LD	BC,HL
0B0B69 29                  A  3446    	ADD	HL,HL
0B0B6A 09                  A  3447    	ADD	HL,BC
0B0B6B DD0709              A  3448    	LD	BC,(IX+%9)
0B0B6E 09                  A  3449    	ADD	HL,BC
0B0B6F ED07                A  3450    	LD	BC,(HL)
0B0B71 C5                  A  3451    	PUSH	BC
0B0B72 01 9D 22 0B         A  3452    	LD	BC,_vdpfilename
0B0B76 C5                  A  3453    	PUSH	BC
0B0B77 CD AB 1E 0B         A  3454    	CALL	_strcpy
0B0B7B C1                  A  3455    	POP	BC
0B0B7C C1                  A  3456    	POP	BC
                           A  3457    ;  406						argcounter++;
                           A  3458    .LINE 406
                           A  3459    
0B0B7D DD07F7              A  3460    	LD	BC,(IX+%FFFFFFF7)
0B0B80 DD0FFD              A  3461    	LD	(IX+%FFFFFFFD),BC
                           A  3462    ;  407					}
                           A  3463    ;  408					else {
                           A  3464    .LINE 408
                           A  3465    
0B0B83 18 10               A  3466    	JR	L_121
0B0B85                     A  3467    L_119:
                           A  3468    ;  409						strcpy(vdpfilename,
                           A  3469    .LINE 409
                           A  3470    
0B0B85 01 4F 2B 0B         A  3471    	LD	BC,L__91
0B0B89 C5                  A  3472    	PUSH	BC
0B0B8A 01 9D 22 0B         A  3473    	LD	BC,_vdpfilename
0B0B8E C5                  A  3474    	PUSH	BC
0B0B8F CD AB 1E 0B         A  3475    	CALL	_strcpy
0B0B93 C1                  A  3476    	POP	BC
0B0B94 C1                  A  3477    	POP	BC
                           A  3478    ;  410					}
0B0B95                     A  3479    L_121:
                           A  3480    .LINE 410
                           A  3481    
                           A  3482    ;  411					flashvdp = true;
                           A  3483    .LINE 411
                           A  3484    
0B0B95 3E01                A  3485    	LD	A,%1
0B0B97 32 98 21 0B         A  3486    	LD	(_flashvdp),A
                           A  3487    ;  412					break;
                           A  3488    .LINE 412
                           A  3489    
0B0B9B 18 10               A  3490    	JR	L_126
                           A  3491    ;  413				case CMDSILENT:
0B0B9D                     A  3492    L_122:
                           A  3493    .LINE 413
                           A  3494    
                           A  3495    ;  414					if(silent) return false
                           A  3496    .LINE 414
                           A  3497    
0B0B9D 3A 99 21 0B         A  3498    	LD	A,(_silent)
0B0BA1 B7                  A  3499    	OR	A,A
0B0BA2 28 03               A  3500    	JR	Z,L_124
0B0BA4 AF                  A  3501    	XOR	A,A
0B0BA5 18 3B               A  3502    	JR	L_135
0B0BA7                     A  3503    L_124:
                           A  3504    ;  415					silent = true;
                           A  3505    .LINE 415
                           A  3506    
0B0BA7 3E01                A  3507    	LD	A,%1
0B0BA9 32 99 21 0B         A  3508    	LD	(_silent),A
                           A  3509    ;  416					break;
                           A  3510    ;  417			}
0B0BAD                     A  3511    L_126:
                           A  3512    .LINE 417
                           A  3513    
                           A  3514    ;  418			argcounter++;
                           A  3515    .LINE 418
                           A  3516    
0B0BAD DD07FD              A  3517    	LD	BC,(IX+%FFFFFFFD)
0B0BB0 03                  A  3518    	INC	BC
0B0BB1 DD0FFD              A  3519    	LD	(IX+%FFFFFFFD),BC
                           A  3520    ;  419		}
0B0BB4                     A  3521    L_127:
                           A  3522    .LINE 419
                           A  3523    
0B0BB4 DD0706              A  3524    	LD	BC,(IX+%6)
0B0BB7 DD27FD              A  3525    	LD	HL,(IX+%FFFFFFFD)
0B0BBA B7                  A  3526    	OR	A,A
0B0BBB ED42                A  3527    	SBC	HL,BC
0B0BBD FA 3F 0A 0B         A  3528    	JP	M,L_128
                           A  3529    ;  420		return (flashvdp || flashmos);
                           A  3530    .LINE 420
                           A  3531    
0B0BC1 3A 98 21 0B         A  3532    	LD	A,(_flashvdp)
0B0BC5 B7                  A  3533    	OR	A,A
0B0BC6 20 07               A  3534    	JR	NZ,L_130
0B0BC8 3A 97 21 0B         A  3535    	LD	A,(_flashmos)
0B0BCC B7                  A  3536    	OR	A,A
0B0BCD 28 09               A  3537    	JR	Z,L_131
0B0BCF                     A  3538    L_130:
                           A  3539    ;  421	}
                           A  3540    .LINE 421
                           A  3541    
0B0BCF 01010000            A  3542    	LD	BC,1
0B0BD3 DD0FF4              A  3543    	LD	(IX+%FFFFFFF4),BC
0B0BD6 18 07               A  3544    	JR	L_132
0B0BD8                     A  3545    L_131:
0B0BD8 01000000            A  3546    	LD	BC,0
0B0BDC DD0FF4              A  3547    	LD	(IX+%FFFFFFF4),BC
0B0BDF                     A  3548    L_132:
0B0BDF DD7EF4              A  3549    	LD	A,(IX+%FFFFFFF4)
0B0BE2                     A  3550    L_135:
0B0BE2 DDF9                A  3551    	LD	SP,IX
0B0BE4 DDE1                A  3552    	POP	IX
0B0BE6 C9                  A  3553    	RET	
                           A  3554    
                           A  3555    
                           A  3556    ;**************************** _parseCommands **
                           A  3557    ;Name                         Addr/Register   S
                           A  3558    ;_silent                             STATIC    
                           A  3559    ;_vdpfilename                        STATIC    
                           A  3560    ;_mosfilename                        STATIC    
                           A  3561    ;_strcpy                             IMPORT  --
                           A  3562    ;_flashvdp                           STATIC    
                           A  3563    ;_flashmos                           STATIC    
                           A  3564    ;command                              IX-15    
                           A  3565    ;temp133                              IX-12    
                           A  3566    ;G_4                                   IX-9    
                           A  3567    ;G_1                                   IX-6    
                           A  3568    ;argcounter                            IX-3    
                           A  3569    ;argv                                  IX+9    
                           A  3570    ;argc                                  IX+6    
                           A  3571    
                           A  3572    
                           A  3573    ; Stack Frame Size: 27 (bytes)
                           A  3574    ;       Spill Code: 0 (instruction)
                           A  3575    
                           A  3576    
                           A  3577    .ENDFUNC "parseCommands",421,"_parseCommands"
                           A  3578    	SEGMENT STRSECT
0B2B32                     A  3579    L__82:
0B2B32 4D4F532E 62696E     A  3580    	DB	"MOS.bin"
0B2B39 00                  A  3581    	DB	0
0B2B3A                     A  3582    L__83:
0B2B3A 6669726D 77617265   A  3583    	DB	"firmware.bin"
0B2B42 2E62696E 
0B2B46 00                  A  3584    	DB	0
0B2B47                     A  3585    L__87:
0B2B47 4D4F532E 62696E     A  3586    	DB	"MOS.bin"
0B2B4E 00                  A  3587    	DB	0
0B2B4F                     A  3588    L__91:
0B2B4F 6669726D 77617265   A  3589    	DB	"firmware.bin"
0B2B57 2E62696E 
0B2B5B 00                  A  3590    	DB	0
                           A  3591    	SEGMENT CODE
                           A  3592    ;  422	
                           A  3593    ;  423	bool filesExist(void) {
0B0BE7                     A  3594    _filesExist:
                           A  3595    .DEFINE "_filesExist"
                           A  3596    
                           A  3597    .VALUE _filesExist
                           A  3598    
                           A  3599    .CLASS 2
                           A  3600    
                           A  3601    .TYPE 76
                           A  3602    
                           A  3603    .ENDEF
                           A  3604    
                           A  3605    .BEGFUNC "filesExist",423,"_filesExist"
                           A  3606    
                           A  3607    .LINE 423
                           A  3608    
                           A  3609    .DEFINE "file"
                           A  3610    
                           A  3611    .CLASS 65
                           A  3612    
                           A  3613    .VALUE -1
                           A  3614    
                           A  3615    .TYPE 12
                           A  3616    
                           A  3617    .ENDEF
                           A  3618    
                           A  3619    .DEFINE "filesexist"
                           A  3620    
                           A  3621    .CLASS 65
                           A  3622    
                           A  3623    .VALUE -2
                           A  3624    
                           A  3625    .TYPE 12
                           A  3626    
                           A  3627    .ENDEF
                           A  3628    
0B0BE7 DDE5                A  3629    	PUSH	IX
0B0BE9 DD210000 00         A  3630    	LD	IX,0
0B0BEE DD39                A  3631    	ADD	IX,SP
0B0BF0 3B                  A  3632    	DEC	SP
0B0BF1 3B                  A  3633    	DEC	SP
                           A  3634    ;  424		uint8_t file;
                           A  3635    ;  425		bool filesexist = true;
                           A  3636    .LINE 425
                           A  3637    
0B0BF2 DD36FE01            A  3638    	LD	(IX+%FFFFFFFE),%1
                           A  3639    ;  426	
                           A  3640    ;  427		if(flashmos) {
                           A  3641    .LINE 427
                           A  3642    
0B0BF6 3A 97 21 0B         A  3643    	LD	A,(_flashmos)
0B0BFA B7                  A  3644    	OR	A,A
0B0BFB 28 4C               A  3645    	JR	Z,L_142
                           A  3646    ;  428			file = mos_fopen(mosfilename, f
                           A  3647    .LINE 428
                           A  3648    
0B0BFD 01010000            A  3649    	LD	BC,1
0B0C01 C5                  A  3650    	PUSH	BC
0B0C02 01 9D 21 0B         A  3651    	LD	BC,_mosfilename
0B0C06 C5                  A  3652    	PUSH	BC
0B0C07 CD 33 11 0B         A  3653    	CALL	_mos_fopen
0B0C0B C1                  A  3654    	POP	BC
0B0C0C C1                  A  3655    	POP	BC
0B0C0D DD77FF              A  3656    	LD	(IX+%FFFFFFFF),A
                           A  3657    ;  429			if(!file) {
                           A  3658    .LINE 429
                           A  3659    
0B0C10 B7                  A  3660    	OR	A,A
0B0C11 20 2B               A  3661    	JR	NZ,L_137
                           A  3662    ;  430				printf("Error opening MOS f
                           A  3663    .LINE 430
                           A  3664    
0B0C13 01 B3 17 0B         A  3665    	LD	BC,___print_uputch
0B0C17 ED43 04 28 0B       A  3666    	LD	(___print_xputch),BC
0B0C1C 01 5C 2B 0B         A  3667    	LD	BC,L__99
0B0C20 C5                  A  3668    	PUSH	BC
0B0C21 CD 42 16 0B         A  3669    	CALL	___print_sendstring
0B0C25 C1                  A  3670    	POP	BC
0B0C26 01 9D 21 0B         A  3671    	LD	BC,_mosfilename
0B0C2A C5                  A  3672    	PUSH	BC
0B0C2B CD 42 16 0B         A  3673    	CALL	___print_sendstring
0B0C2F C1                  A  3674    	POP	BC
0B0C30 01 79 2B 0B         A  3675    	LD	BC,L__100
0B0C34 C5                  A  3676    	PUSH	BC
0B0C35 CD 42 16 0B         A  3677    	CALL	___print_sendstring
0B0C39 C1                  A  3678    	POP	BC
                           A  3679    ;  431				filesexist = false;
                           A  3680    .LINE 431
                           A  3681    
0B0C3A DD36FE00            A  3682    	LD	(IX+%FFFFFFFE),%0
                           A  3683    ;  432			}
0B0C3E                     A  3684    L_137:
                           A  3685    .LINE 432
                           A  3686    
                           A  3687    ;  433			mos_fclose(file);
                           A  3688    .LINE 433
                           A  3689    
0B0C3E DD4EFF              A  3690    	LD	C,(IX+%FFFFFFFF)
0B0C41 0600                A  3691    	LD	B,%0
0B0C43 C5                  A  3692    	PUSH	BC
0B0C44 CD 4B 11 0B         A  3693    	CALL	_mos_fclose
0B0C48 C1                  A  3694    	POP	BC
                           A  3695    ;  434		}
0B0C49                     A  3696    L_142:
                           A  3697    .LINE 434
                           A  3698    
                           A  3699    ;  435	
                           A  3700    ;  436		if(flashvdp) {
                           A  3701    .LINE 436
                           A  3702    
0B0C49 3A 98 21 0B         A  3703    	LD	A,(_flashvdp)
0B0C4D B7                  A  3704    	OR	A,A
0B0C4E 28 4C               A  3705    	JR	Z,L_143
                           A  3706    ;  437			file = mos_fopen(vdpfilename, f
                           A  3707    .LINE 437
                           A  3708    
0B0C50 01010000            A  3709    	LD	BC,1
0B0C54 C5                  A  3710    	PUSH	BC
0B0C55 01 9D 22 0B         A  3711    	LD	BC,_vdpfilename
0B0C59 C5                  A  3712    	PUSH	BC
0B0C5A CD 33 11 0B         A  3713    	CALL	_mos_fopen
0B0C5E C1                  A  3714    	POP	BC
0B0C5F C1                  A  3715    	POP	BC
0B0C60 DD77FF              A  3716    	LD	(IX+%FFFFFFFF),A
                           A  3717    ;  438			if(!file) {
                           A  3718    .LINE 438
                           A  3719    
0B0C63 B7                  A  3720    	OR	A,A
0B0C64 20 2B               A  3721    	JR	NZ,L_140
                           A  3722    ;  439				printf("Error opening VDP f
                           A  3723    .LINE 439
                           A  3724    
0B0C66 01 B3 17 0B         A  3725    	LD	BC,___print_uputch
0B0C6A ED43 04 28 0B       A  3726    	LD	(___print_xputch),BC
0B0C6F 01 7D 2B 0B         A  3727    	LD	BC,L__103
0B0C73 C5                  A  3728    	PUSH	BC
0B0C74 CD 42 16 0B         A  3729    	CALL	___print_sendstring
0B0C78 C1                  A  3730    	POP	BC
0B0C79 01 9D 22 0B         A  3731    	LD	BC,_vdpfilename
0B0C7D C5                  A  3732    	PUSH	BC
0B0C7E CD 42 16 0B         A  3733    	CALL	___print_sendstring
0B0C82 C1                  A  3734    	POP	BC
0B0C83 01 9A 2B 0B         A  3735    	LD	BC,L__104
0B0C87 C5                  A  3736    	PUSH	BC
0B0C88 CD 42 16 0B         A  3737    	CALL	___print_sendstring
0B0C8C C1                  A  3738    	POP	BC
                           A  3739    ;  440				filesexist = false;
                           A  3740    .LINE 440
                           A  3741    
0B0C8D DD36FE00            A  3742    	LD	(IX+%FFFFFFFE),%0
                           A  3743    ;  441			}
0B0C91                     A  3744    L_140:
                           A  3745    .LINE 441
                           A  3746    
                           A  3747    ;  442			mos_fclose(file);
                           A  3748    .LINE 442
                           A  3749    
0B0C91 DD4EFF              A  3750    	LD	C,(IX+%FFFFFFFF)
0B0C94 0600                A  3751    	LD	B,%0
0B0C96 C5                  A  3752    	PUSH	BC
0B0C97 CD 4B 11 0B         A  3753    	CALL	_mos_fclose
0B0C9B C1                  A  3754    	POP	BC
                           A  3755    ;  443		}
0B0C9C                     A  3756    L_143:
                           A  3757    .LINE 443
                           A  3758    
                           A  3759    ;  444	
                           A  3760    ;  445		return filesexist;
                           A  3761    .LINE 445
                           A  3762    
0B0C9C DD7EFE              A  3763    	LD	A,(IX+%FFFFFFFE)
                           A  3764    ;  446	}
                           A  3765    .LINE 446
                           A  3766    
0B0C9F DDF9                A  3767    	LD	SP,IX
0B0CA1 DDE1                A  3768    	POP	IX
0B0CA3 C9                  A  3769    	RET	
                           A  3770    
                           A  3771    
                           A  3772    ;**************************** _filesExist *****
                           A  3773    ;Name                         Addr/Register   S
                           A  3774    ;_vdpfilename                        STATIC    
                           A  3775    ;_flashvdp                           STATIC    
                           A  3776    ;_mos_fclose                         IMPORT  --
                           A  3777    ;___print_sendstring                 IMPORT  --
                           A  3778    ;___print_xputch                     IMPORT    
                           A  3779    ;___print_uputch                     IMPORT  --
                           A  3780    ;_mosfilename                        STATIC    
                           A  3781    ;_mos_fopen                          IMPORT  --
                           A  3782    ;_flashmos                           STATIC    
                           A  3783    ;filesexist                            IX-2    
                           A  3784    ;file                                  IX-1    
                           A  3785    
                           A  3786    
                           A  3787    ; Stack Frame Size: 8 (bytes)
                           A  3788    ;       Spill Code: 0 (instruction)
                           A  3789    
                           A  3790    
                           A  3791    .ENDFUNC "filesExist",446,"_filesExist"
                           A  3792    	SEGMENT STRSECT
0B2B5C                     A  3793    L__99:
0B2B5C 4572726F 72206F70   A  3794    	DB	"Error opening MOS firmware \""
0B2B64 656E696E 67204D4F 
0B2B6C 53206669 726D7761 
0B2B74 72652022 
0B2B78 00                  A  3795    	DB	0
0B2B79                     A  3796    L__100:
0B2B79 22                  A  3797    	DB	"\""
0B2B7A 0A0D00              A  3798    	DB	10,13,0
0B2B7D                     A  3799    L__103:
0B2B7D 4572726F 72206F70   A  3800    	DB	"Error opening VDP firmware \""
0B2B85 656E696E 67205644 
0B2B8D 50206669 726D7761 
0B2B95 72652022 
0B2B99 00                  A  3801    	DB	0
0B2B9A                     A  3802    L__104:
0B2B9A 22                  A  3803    	DB	"\""
0B2B9B 0A0D00              A  3804    	DB	10,13,0
                           A  3805    	SEGMENT CODE
                           A  3806    ;  447	
                           A  3807    ;  448	bool firmwareContentOK(void) {
0B0CA4                     A  3808    _firmwareContentOK:
                           A  3809    .DEFINE "_firmwareContentOK"
                           A  3810    
                           A  3811    .VALUE _firmwareContentOK
                           A  3812    
                           A  3813    .CLASS 2
                           A  3814    
                           A  3815    .TYPE 76
                           A  3816    
                           A  3817    .ENDEF
                           A  3818    
                           A  3819    .BEGFUNC "firmwareContentOK",448,"_firmwareCont
                           A  3820    
                           A  3821    .LINE 448
                           A  3822    
                           A  3823    .DEFINE "file"
                           A  3824    
                           A  3825    .CLASS 65
                           A  3826    
                           A  3827    .VALUE -1
                           A  3828    
                           A  3829    .TYPE 12
                           A  3830    
                           A  3831    .ENDEF
                           A  3832    
                           A  3833    .DEFINE "validfirmware"
                           A  3834    
                           A  3835    .CLASS 65
                           A  3836    
                           A  3837    .VALUE -2
                           A  3838    
                           A  3839    .TYPE 12
                           A  3840    
                           A  3841    .ENDEF
                           A  3842    
                           A  3843    .DEFINE "filesize"
                           A  3844    
                           A  3845    .CLASS 65
                           A  3846    
                           A  3847    .VALUE -5
                           A  3848    
                           A  3849    .TYPE 14
                           A  3850    
                           A  3851    .ENDEF
                           A  3852    
                           A  3853    .DEFINE "buffer"
                           A  3854    
                           A  3855    .CLASS 65
                           A  3856    
                           A  3857    .VALUE -41
                           A  3858    
                           A  3859    .DIM 36
                           A  3860    
                           A  3861    .TYPE 108
                           A  3862    
                           A  3863    .ENDEF
                           A  3864    
0B0CA4 DDE5                A  3865    	PUSH	IX
0B0CA6 DD210000 00         A  3866    	LD	IX,0
0B0CAB DD39                A  3867    	ADD	IX,SP
0B0CAD ED22D7              A  3868    	LEA	HL,IX+%FFFFFFD7
0B0CB0 F9                  A  3869    	LD	SP,HL
                           A  3870    ;  449		uint8_t file;
                           A  3871    ;  450		uint24_t filesize;
                           A  3872    ;  451		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  3873    ;  452		bool validfirmware = true;
                           A  3874    .LINE 452
                           A  3875    
0B0CB1 DD36FE01            A  3876    	LD	(IX+%FFFFFFFE),%1
                           A  3877    ;  453	
                           A  3878    ;  454		if(flashmos) {
                           A  3879    .LINE 454
                           A  3880    
0B0CB5 3A 97 21 0B         A  3881    	LD	A,(_flashmos)
0B0CB9 B7                  A  3882    	OR	A,A
0B0CBA CA 6F 0D 0B         A  3883    	JR	Z,L_153
                           A  3884    ;  455			file = mos_fopen(mosfilename, f
                           A  3885    .LINE 455
                           A  3886    
0B0CBE 01010000            A  3887    	LD	BC,1
0B0CC2 C5                  A  3888    	PUSH	BC
0B0CC3 01 9D 21 0B         A  3889    	LD	BC,_mosfilename
0B0CC7 C5                  A  3890    	PUSH	BC
0B0CC8 CD 33 11 0B         A  3891    	CALL	_mos_fopen
0B0CCC C1                  A  3892    	POP	BC
0B0CCD C1                  A  3893    	POP	BC
0B0CCE DD77FF              A  3894    	LD	(IX+%FFFFFFFF),A
                           A  3895    ;  456			mos_fread(file, (char *)BUFFER1
                           A  3896    .LINE 456
                           A  3897    
0B0CD1 01050000            A  3898    	LD	BC,5
0B0CD5 C5                  A  3899    	PUSH	BC
0B0CD6 01000005            A  3900    	LD	BC,327680
0B0CDA C5                  A  3901    	PUSH	BC
0B0CDB DD4EFF              A  3902    	LD	C,(IX+%FFFFFFFF)
0B0CDE 0600                A  3903    	LD	B,%0
0B0CE0 C5                  A  3904    	PUSH	BC
0B0CE1 CD 75 11 0B         A  3905    	CALL	_mos_fread
0B0CE5 C1                  A  3906    	POP	BC
0B0CE6 C1                  A  3907    	POP	BC
0B0CE7 C1                  A  3908    	POP	BC
                           A  3909    ;  457			if(!containsMosHeader((uint8_t 
                           A  3910    .LINE 457
                           A  3911    
0B0CE8 01000005            A  3912    	LD	BC,327680
0B0CEC C5                  A  3913    	PUSH	BC
0B0CED CD 90 02 0B         A  3914    	CALL	_containsMosHeader
0B0CF1 C1                  A  3915    	POP	BC
0B0CF2 B7                  A  3916    	OR	A,A
0B0CF3 20 2B               A  3917    	JR	NZ,L_146
                           A  3918    ;  458				printf("\"%s\" does not con
                           A  3919    .LINE 458
                           A  3920    
0B0CF5 01 B3 17 0B         A  3921    	LD	BC,___print_uputch
0B0CF9 ED43 04 28 0B       A  3922    	LD	(___print_xputch),BC
0B0CFE 01220000            A  3923    	LD	BC,34
0B0D02 C5                  A  3924    	PUSH	BC
0B0D03 CD B3 17 0B         A  3925    	CALL	___print_uputch
0B0D07 C1                  A  3926    	POP	BC
0B0D08 01 9D 21 0B         A  3927    	LD	BC,_mosfilename
0B0D0C C5                  A  3928    	PUSH	BC
0B0D0D CD 42 16 0B         A  3929    	CALL	___print_sendstring
0B0D11 C1                  A  3930    	POP	BC
0B0D12 01 9E 2B 0B         A  3931    	LD	BC,L__108
0B0D16 C5                  A  3932    	PUSH	BC
0B0D17 CD 42 16 0B         A  3933    	CALL	___print_sendstring
0B0D1B C1                  A  3934    	POP	BC
                           A  3935    ;  459				validfirmware = false;
                           A  3936    .LINE 459
                           A  3937    
0B0D1C DD36FE00            A  3938    	LD	(IX+%FFFFFFFE),%0
                           A  3939    ;  460			}
0B0D20                     A  3940    L_146:
                           A  3941    .LINE 460
                           A  3942    
                           A  3943    ;  461			filesize = getFileSize(file);
                           A  3944    .LINE 461
                           A  3945    
0B0D20 DD4EFF              A  3946    	LD	C,(IX+%FFFFFFFF)
0B0D23 0600                A  3947    	LD	B,%0
0B0D25 C5                  A  3948    	PUSH	BC
0B0D26 CD 77 15 0B         A  3949    	CALL	_getFileSize
0B0D2A C1                  A  3950    	POP	BC
0B0D2B DD2FFB              A  3951    	LD	(IX+%FFFFFFFB),HL
                           A  3952    ;  462			if(filesize > FLASHSIZE) {
                           A  3953    .LINE 462
                           A  3954    
0B0D2E E5C1                A  3955    	LD	BC,HL
0B0D30 21000002            A  3956    	LD	HL,131072
0B0D34 B7                  A  3957    	OR	A,A
0B0D35 ED42                A  3958    	SBC	HL,BC
0B0D37 30 2B               A  3959    	JR	NC,L_148
                           A  3960    ;  463				printf("\"%s\" too large fo
                           A  3961    .LINE 463
                           A  3962    
0B0D39 01 B3 17 0B         A  3963    	LD	BC,___print_uputch
0B0D3D ED43 04 28 0B       A  3964    	LD	(___print_xputch),BC
0B0D42 01220000            A  3965    	LD	BC,34
0B0D46 C5                  A  3966    	PUSH	BC
0B0D47 CD B3 17 0B         A  3967    	CALL	___print_uputch
0B0D4B C1                  A  3968    	POP	BC
0B0D4C 01 9D 21 0B         A  3969    	LD	BC,_mosfilename
0B0D50 C5                  A  3970    	PUSH	BC
0B0D51 CD 42 16 0B         A  3971    	CALL	___print_sendstring
0B0D55 C1                  A  3972    	POP	BC
0B0D56 01 CF 2B 0B         A  3973    	LD	BC,L__110
0B0D5A C5                  A  3974    	PUSH	BC
0B0D5B CD 42 16 0B         A  3975    	CALL	___print_sendstring
0B0D5F C1                  A  3976    	POP	BC
                           A  3977    ;  464				validfirmware = false;
                           A  3978    .LINE 464
                           A  3979    
0B0D60 DD36FE00            A  3980    	LD	(IX+%FFFFFFFE),%0
                           A  3981    ;  465			}
0B0D64                     A  3982    L_148:
                           A  3983    .LINE 465
                           A  3984    
                           A  3985    ;  466			mos_fclose(file);
                           A  3986    .LINE 466
                           A  3987    
0B0D64 DD4EFF              A  3988    	LD	C,(IX+%FFFFFFFF)
0B0D67 0600                A  3989    	LD	B,%0
0B0D69 C5                  A  3990    	PUSH	BC
0B0D6A CD 4B 11 0B         A  3991    	CALL	_mos_fclose
0B0D6E C1                  A  3992    	POP	BC
                           A  3993    ;  467		}
0B0D6F                     A  3994    L_153:
                           A  3995    .LINE 467
                           A  3996    
                           A  3997    ;  468		if(flashvdp) {
                           A  3998    .LINE 468
                           A  3999    
0B0D6F 3A 98 21 0B         A  4000    	LD	A,(_flashvdp)
0B0D73 B7                  A  4001    	OR	A,A
0B0D74 28 69               A  4002    	JR	Z,L_154
                           A  4003    ;  469			file = mos_fopen(vdpfilename, f
                           A  4004    .LINE 469
                           A  4005    
0B0D76 01010000            A  4006    	LD	BC,1
0B0D7A C5                  A  4007    	PUSH	BC
0B0D7B 01 9D 22 0B         A  4008    	LD	BC,_vdpfilename
0B0D7F C5                  A  4009    	PUSH	BC
0B0D80 CD 33 11 0B         A  4010    	CALL	_mos_fopen
0B0D84 C1                  A  4011    	POP	BC
0B0D85 C1                  A  4012    	POP	BC
0B0D86 DD77FF              A  4013    	LD	(IX+%FFFFFFFF),A
                           A  4014    ;  470			mos_fread(file, (char *)buffer,
                           A  4015    .LINE 470
                           A  4016    
0B0D89 01240000            A  4017    	LD	BC,36
0B0D8D C5                  A  4018    	PUSH	BC
0B0D8E ED65D7              A  4019    	PEA	IX+%FFFFFFD7
0B0D91 DD4EFF              A  4020    	LD	C,(IX+%FFFFFFFF)
0B0D94 0600                A  4021    	LD	B,%0
0B0D96 C5                  A  4022    	PUSH	BC
0B0D97 CD 75 11 0B         A  4023    	CALL	_mos_fread
0B0D9B C1                  A  4024    	POP	BC
0B0D9C C1                  A  4025    	POP	BC
0B0D9D C1                  A  4026    	POP	BC
                           A  4027    ;  471			if(!containsESP32Header(buffer)
                           A  4028    .LINE 471
                           A  4029    
0B0D9E ED65D7              A  4030    	PEA	IX+%FFFFFFD7
0B0DA1 CD DB 02 0B         A  4031    	CALL	_containsESP32Header
0B0DA5 C1                  A  4032    	POP	BC
0B0DA6 B7                  A  4033    	OR	A,A
0B0DA7 20 2B               A  4034    	JR	NZ,L_151
                           A  4035    ;  472				printf("\"%s\" does not con
                           A  4036    .LINE 472
                           A  4037    
0B0DA9 01 B3 17 0B         A  4038    	LD	BC,___print_uputch
0B0DAD ED43 04 28 0B       A  4039    	LD	(___print_xputch),BC
0B0DB2 01220000            A  4040    	LD	BC,34
0B0DB6 C5                  A  4041    	PUSH	BC
0B0DB7 CD B3 17 0B         A  4042    	CALL	___print_uputch
0B0DBB C1                  A  4043    	POP	BC
0B0DBC 01 9D 22 0B         A  4044    	LD	BC,_vdpfilename
0B0DC0 C5                  A  4045    	PUSH	BC
0B0DC1 CD 42 16 0B         A  4046    	CALL	___print_sendstring
0B0DC5 C1                  A  4047    	POP	BC
0B0DC6 01 F6 2B 0B         A  4048    	LD	BC,L__113
0B0DCA C5                  A  4049    	PUSH	BC
0B0DCB CD 42 16 0B         A  4050    	CALL	___print_sendstring
0B0DCF C1                  A  4051    	POP	BC
                           A  4052    ;  473				validfirmware = false;
                           A  4053    .LINE 473
                           A  4054    
0B0DD0 DD36FE00            A  4055    	LD	(IX+%FFFFFFFE),%0
                           A  4056    ;  474			}
0B0DD4                     A  4057    L_151:
                           A  4058    .LINE 474
                           A  4059    
                           A  4060    ;  475			mos_fclose(file);
                           A  4061    .LINE 475
                           A  4062    
0B0DD4 DD4EFF              A  4063    	LD	C,(IX+%FFFFFFFF)
0B0DD7 0600                A  4064    	LD	B,%0
0B0DD9 C5                  A  4065    	PUSH	BC
0B0DDA CD 4B 11 0B         A  4066    	CALL	_mos_fclose
0B0DDE C1                  A  4067    	POP	BC
                           A  4068    ;  476		}
0B0DDF                     A  4069    L_154:
                           A  4070    .LINE 476
                           A  4071    
                           A  4072    ;  477		return validfirmware;
                           A  4073    .LINE 477
                           A  4074    
0B0DDF DD7EFE              A  4075    	LD	A,(IX+%FFFFFFFE)
                           A  4076    ;  478	}
                           A  4077    .LINE 478
                           A  4078    
0B0DE2 DDF9                A  4079    	LD	SP,IX
0B0DE4 DDE1                A  4080    	POP	IX
0B0DE6 C9                  A  4081    	RET	
                           A  4082    
                           A  4083    
                           A  4084    ;**************************** _firmwareContentO
                           A  4085    ;Name                         Addr/Register   S
                           A  4086    ;_vdpfilename                        STATIC    
                           A  4087    ;_flashvdp                           STATIC    
                           A  4088    ;_mos_fclose                         IMPORT  --
                           A  4089    ;_getFileSize                        IMPORT  --
                           A  4090    ;___print_sendstring                 IMPORT  --
                           A  4091    ;___print_xputch                     IMPORT    
                           A  4092    ;___print_uputch                     IMPORT  --
                           A  4093    ;_mos_fread                          IMPORT  --
                           A  4094    ;_mosfilename                        STATIC    
                           A  4095    ;_mos_fopen                          IMPORT  --
                           A  4096    ;_flashmos                           STATIC    
                           A  4097    ;buffer                               IX-41    
                           A  4098    ;filesize                              IX-5    
                           A  4099    ;validfirmware                         IX-2    
                           A  4100    ;file                                  IX-1    
                           A  4101    
                           A  4102    
                           A  4103    ; Stack Frame Size: 47 (bytes)
                           A  4104    ;       Spill Code: 0 (instruction)
                           A  4105    
                           A  4106    
                           A  4107    .ENDFUNC "firmwareContentOK",478,"_firmwareCont
                           A  4108    	SEGMENT STRSECT
0B2B9E                     A  4109    L__108:
0B2B9E 2220646F 6573206E   A  4110    	DB	"\" does not contain valid MOS ez80 sta
0B2BA6 6F742063 6F6E7461 
0B2BAE 696E2076 616C6964 
0B2BB6 204D4F53 20657A38 
0B2BBE 30207374 61727475 
0B2BC6 7020636F 6465 
0B2BCC 0D0A00              A  4111    	DB	13,10,0
0B2BCF                     A  4112    L__110:
0B2BCF 2220746F 6F206C61   A  4113    	DB	"\" too large for 128KB embedded flash"
0B2BD7 72676520 666F7220 
0B2BDF 3132384B 4220656D 
0B2BE7 62656464 65642066 
0B2BEF 6C617368 
0B2BF3 0D0A00              A  4114    	DB	13,10,0
0B2BF6                     A  4115    L__113:
0B2BF6 2220646F 6573206E   A  4116    	DB	"\" does not contain valid ESP32 code"
0B2BFE 6F742063 6F6E7461 
0B2C06 696E2076 616C6964 
0B2C0E 20455350 33322063 
0B2C16 6F6465 
0B2C19 0D0A00              A  4117    	DB	13,10,0
                           A  4118    	SEGMENT CODE
                           A  4119    ;  479	void showCRC32(void) {
0B0DE7                     A  4120    _showCRC32:
                           A  4121    .DEFINE "_showCRC32"
                           A  4122    
                           A  4123    .VALUE _showCRC32
                           A  4124    
                           A  4125    .CLASS 2
                           A  4126    
                           A  4127    .TYPE 65
                           A  4128    
                           A  4129    .ENDEF
                           A  4130    
                           A  4131    .BEGFUNC "showCRC32",479,"_showCRC32"
                           A  4132    
                           A  4133    .LINE 479
                           A  4134    
                           A  4135    .DEFINE "file"
                           A  4136    
                           A  4137    .CLASS 65
                           A  4138    
                           A  4139    .VALUE -1
                           A  4140    
                           A  4141    .TYPE 12
                           A  4142    
                           A  4143    .ENDEF
                           A  4144    
                           A  4145    .DEFINE "ptr"
                           A  4146    
                           A  4147    .CLASS 65
                           A  4148    
                           A  4149    .VALUE -4
                           A  4150    
                           A  4151    .TYPE 34
                           A  4152    
                           A  4153    .ENDEF
                           A  4154    
                           A  4155    .DEFINE "got"
                           A  4156    
                           A  4157    .CLASS 65
                           A  4158    
                           A  4159    .VALUE -7
                           A  4160    
                           A  4161    .TYPE 14
                           A  4162    
                           A  4163    .ENDEF
                           A  4164    
                           A  4165    .DEFINE "size"
                           A  4166    
                           A  4167    .CLASS 65
                           A  4168    
                           A  4169    .VALUE -10
                           A  4170    
                           A  4171    .TYPE 14
                           A  4172    
                           A  4173    .ENDEF
                           A  4174    
                           A  4175    .DEFINE "vdpcrc"
                           A  4176    
                           A  4177    .CLASS 65
                           A  4178    
                           A  4179    .VALUE -14
                           A  4180    
                           A  4181    .TYPE 15
                           A  4182    
                           A  4183    .ENDEF
                           A  4184    
                           A  4185    .DEFINE "moscrc"
                           A  4186    
                           A  4187    .CLASS 65
                           A  4188    
                           A  4189    .VALUE -18
                           A  4190    
                           A  4191    .TYPE 15
                           A  4192    
                           A  4193    .ENDEF
                           A  4194    
0B0DE7 DDE5                A  4195    	PUSH	IX
0B0DE9 DD210000 00         A  4196    	LD	IX,0
0B0DEE DD39                A  4197    	ADD	IX,SP
0B0DF0 ED22EE              A  4198    	LEA	HL,IX+%FFFFFFEE
0B0DF3 F9                  A  4199    	LD	SP,HL
                           A  4200    ;  480		uint8_t file;
                           A  4201    ;  481		uint24_t got,size;
                           A  4202    ;  482		uint32_t moscrc,vdpcrc;
                           A  4203    ;  483		char* ptr;
                           A  4204    ;  484	
                           A  4205    ;  485		moscrc = 0;
                           A  4206    .LINE 485
                           A  4207    
0B0DF4 01000000            A  4208    	LD	BC,0
0B0DF8 AF                  A  4209    	XOR	A,A
0B0DF9 DD0FEE              A  4210    	LD	(IX+%FFFFFFEE),BC
0B0DFC DD77F1              A  4211    	LD	(IX+%FFFFFFF1),A
                           A  4212    ;  486		vdpcrc = 0;
                           A  4213    .LINE 486
                           A  4214    
0B0DFF AF                  A  4215    	XOR	A,A
0B0E00 DD0FF2              A  4216    	LD	(IX+%FFFFFFF2),BC
0B0E03 DD77F5              A  4217    	LD	(IX+%FFFFFFF5),A
                           A  4218    ;  487	
                           A  4219    ;  488		printf("Calculating CRC");
                           A  4220    .LINE 488
                           A  4221    
0B0E06 01 B3 17 0B         A  4222    	LD	BC,___print_uputch
0B0E0A ED43 04 28 0B       A  4223    	LD	(___print_xputch),BC
0B0E0F 01 1C 2C 0B         A  4224    	LD	BC,L__115
0B0E13 C5                  A  4225    	PUSH	BC
0B0E14 CD 42 16 0B         A  4226    	CALL	___print_sendstring
0B0E18 C1                  A  4227    	POP	BC
                           A  4228    ;  489	
                           A  4229    ;  490		if(flashmos) {
                           A  4230    .LINE 490
                           A  4231    
0B0E19 3A 97 21 0B         A  4232    	LD	A,(_flashmos)
0B0E1D B7                  A  4233    	OR	A,A
0B0E1E 28 7A               A  4234    	JR	Z,L_166
                           A  4235    ;  491			ptr = (char*)BUFFER1;
                           A  4236    .LINE 491
                           A  4237    
0B0E20 01000005            A  4238    	LD	BC,327680
0B0E24 DD0FFC              A  4239    	LD	(IX+%FFFFFFFC),BC
                           A  4240    ;  492			file = mos_fopen(mosfilename, f
                           A  4241    .LINE 492
                           A  4242    
0B0E27 01010000            A  4243    	LD	BC,1
0B0E2B C5                  A  4244    	PUSH	BC
0B0E2C 01 9D 21 0B         A  4245    	LD	BC,_mosfilename
0B0E30 C5                  A  4246    	PUSH	BC
0B0E31 CD 33 11 0B         A  4247    	CALL	_mos_fopen
0B0E35 C1                  A  4248    	POP	BC
0B0E36 C1                  A  4249    	POP	BC
0B0E37 DD77FF              A  4250    	LD	(IX+%FFFFFFFF),A
                           A  4251    ;  493			crc32_initialize();
                           A  4252    .LINE 493
                           A  4253    
0B0E3A CD C5 14 0B         A  4254    	CALL	_crc32_initialize
                           A  4255    ;  494			
                           A  4256    ;  495			// Read file to memory
                           A  4257    ;  496			while((got = mos_fread(file, pt
                           A  4258    .LINE 496
                           A  4259    
0B0E3E 18 22               A  4260    	JR	L_156
0B0E40                     A  4261    L_157:
                           A  4262    ;  497				crc32(ptr, got);
                           A  4263    .LINE 497
                           A  4264    
0B0E40 DD07F9              A  4265    	LD	BC,(IX+%FFFFFFF9)
0B0E43 C5                  A  4266    	PUSH	BC
0B0E44 DD07FC              A  4267    	LD	BC,(IX+%FFFFFFFC)
0B0E47 C5                  A  4268    	PUSH	BC
0B0E48 CD 17 15 0B         A  4269    	CALL	_crc32
0B0E4C C1                  A  4270    	POP	BC
0B0E4D C1                  A  4271    	POP	BC
                           A  4272    ;  498				ptr += got;
                           A  4273    .LINE 498
                           A  4274    
0B0E4E DD07F9              A  4275    	LD	BC,(IX+%FFFFFFF9)
0B0E51 DD27FC              A  4276    	LD	HL,(IX+%FFFFFFFC)
0B0E54 09                  A  4277    	ADD	HL,BC
0B0E55 DD2FFC              A  4278    	LD	(IX+%FFFFFFFC),HL
                           A  4279    ;  499				putch('.');
                           A  4280    .LINE 499
                           A  4281    
0B0E58 012E0000            A  4282    	LD	BC,46
0B0E5C C5                  A  4283    	PUSH	BC
0B0E5D CD E5 00 0B         A  4284    	CALL	_putch
0B0E61 C1                  A  4285    	POP	BC
                           A  4286    ;  500			}		
0B0E62                     A  4287    L_156:
                           A  4288    .LINE 500
                           A  4289    
0B0E62 01004000            A  4290    	LD	BC,16384
0B0E66 C5                  A  4291    	PUSH	BC
0B0E67 DD07FC              A  4292    	LD	BC,(IX+%FFFFFFFC)
0B0E6A C5                  A  4293    	PUSH	BC
0B0E6B DD4EFF              A  4294    	LD	C,(IX+%FFFFFFFF)
0B0E6E 0600                A  4295    	LD	B,%0
0B0E70 C5                  A  4296    	PUSH	BC
0B0E71 CD 75 11 0B         A  4297    	CALL	_mos_fread
0B0E75 C1                  A  4298    	POP	BC
0B0E76 C1                  A  4299    	POP	BC
0B0E77 C1                  A  4300    	POP	BC
0B0E78 DD2FF9              A  4301    	LD	(IX+%FFFFFFF9),HL
0B0E7B E5C1                A  4302    	LD	BC,HL
0B0E7D B7                  A  4303    	OR	A,A
0B0E7E ED62                A  4304    	SBC	HL,HL
0B0E80 B7                  A  4305    	OR	A,A
0B0E81 ED42                A  4306    	SBC	HL,BC
0B0E83 38 BB               A  4307    	JR	C,L_157
                           A  4308    ;  501			moscrc = crc32_finalize();
                           A  4309    .LINE 501
                           A  4310    
0B0E85 CD DA 14 0B         A  4311    	CALL	_crc32_finalize
0B0E89 DD2FEE              A  4312    	LD	(IX+%FFFFFFEE),HL
0B0E8C DD73F1              A  4313    	LD	(IX+%FFFFFFF1),E
                           A  4314    ;  502			mos_fclose(file);
                           A  4315    .LINE 502
                           A  4316    
0B0E8F DD4EFF              A  4317    	LD	C,(IX+%FFFFFFFF)
0B0E92 0600                A  4318    	LD	B,%0
0B0E94 C5                  A  4319    	PUSH	BC
0B0E95 CD 4B 11 0B         A  4320    	CALL	_mos_fclose
0B0E99 C1                  A  4321    	POP	BC
                           A  4322    ;  503		}
0B0E9A                     A  4323    L_166:
                           A  4324    .LINE 503
                           A  4325    
                           A  4326    ;  504		if(flashvdp) {
                           A  4327    .LINE 504
                           A  4328    
0B0E9A 3A 98 21 0B         A  4329    	LD	A,(_flashvdp)
0B0E9E B7                  A  4330    	OR	A,A
0B0E9F 28 67               A  4331    	JR	Z,L_167
                           A  4332    ;  505			file = mos_fopen(vdpfilename, f
                           A  4333    .LINE 505
                           A  4334    
0B0EA1 01010000            A  4335    	LD	BC,1
0B0EA5 C5                  A  4336    	PUSH	BC
0B0EA6 01 9D 22 0B         A  4337    	LD	BC,_vdpfilename
0B0EAA C5                  A  4338    	PUSH	BC
0B0EAB CD 33 11 0B         A  4339    	CALL	_mos_fopen
0B0EAF C1                  A  4340    	POP	BC
0B0EB0 C1                  A  4341    	POP	BC
0B0EB1 DD77FF              A  4342    	LD	(IX+%FFFFFFFF),A
                           A  4343    ;  506			crc32_initialize();
                           A  4344    .LINE 506
                           A  4345    
0B0EB4 CD C5 14 0B         A  4346    	CALL	_crc32_initialize
                           A  4347    ;  507			while(1) {
0B0EB8                     A  4348    L_163:
                           A  4349    .LINE 507
                           A  4350    
                           A  4351    ;  508				size = mos_fread(file, (cha
                           A  4352    .LINE 508
                           A  4353    
0B0EB8 01004000            A  4354    	LD	BC,16384
0B0EBC C5                  A  4355    	PUSH	BC
0B0EBD 01000005            A  4356    	LD	BC,327680
0B0EC1 C5                  A  4357    	PUSH	BC
0B0EC2 DD4EFF              A  4358    	LD	C,(IX+%FFFFFFFF)
0B0EC5 0600                A  4359    	LD	B,%0
0B0EC7 C5                  A  4360    	PUSH	BC
0B0EC8 CD 75 11 0B         A  4361    	CALL	_mos_fread
0B0ECC C1                  A  4362    	POP	BC
0B0ECD C1                  A  4363    	POP	BC
0B0ECE C1                  A  4364    	POP	BC
0B0ECF DD2FF6              A  4365    	LD	(IX+%FFFFFFF6),HL
                           A  4366    ;  509				if(size == 0) break;
                           A  4367    .LINE 509
                           A  4368    
0B0ED2 CD 70 1B 0B         A  4369    	CALL	__icmpzero
0B0ED6 28 1B               A  4370    	JR	Z,L_164
                           A  4371    ;  510				putch('.');
                           A  4372    .LINE 510
                           A  4373    
0B0ED8 012E0000            A  4374    	LD	BC,46
0B0EDC C5                  A  4375    	PUSH	BC
0B0EDD CD E5 00 0B         A  4376    	CALL	_putch
0B0EE1 C1                  A  4377    	POP	BC
                           A  4378    ;  511				crc32((char *)BUFFER1, size
                           A  4379    .LINE 511
                           A  4380    
0B0EE2 DD07F6              A  4381    	LD	BC,(IX+%FFFFFFF6)
0B0EE5 C5                  A  4382    	PUSH	BC
0B0EE6 01000005            A  4383    	LD	BC,327680
0B0EEA C5                  A  4384    	PUSH	BC
0B0EEB CD 17 15 0B         A  4385    	CALL	_crc32
0B0EEF C1                  A  4386    	POP	BC
0B0EF0 C1                  A  4387    	POP	BC
0B0EF1 18 C5               A  4388    	JR	L_163
                           A  4389    ;  512			}
0B0EF3                     A  4390    L_164:
                           A  4391    .LINE 512
                           A  4392    
                           A  4393    ;  513			vdpcrc = crc32_finalize();
                           A  4394    .LINE 513
                           A  4395    
0B0EF3 CD DA 14 0B         A  4396    	CALL	_crc32_finalize
0B0EF7 DD2FF2              A  4397    	LD	(IX+%FFFFFFF2),HL
0B0EFA DD73F5              A  4398    	LD	(IX+%FFFFFFF5),E
                           A  4399    ;  514			mos_fclose(file);
                           A  4400    .LINE 514
                           A  4401    
0B0EFD DD4EFF              A  4402    	LD	C,(IX+%FFFFFFFF)
0B0F00 0600                A  4403    	LD	B,%0
0B0F02 C5                  A  4404    	PUSH	BC
0B0F03 CD 4B 11 0B         A  4405    	CALL	_mos_fclose
0B0F07 C1                  A  4406    	POP	BC
                           A  4407    ;  515		}
0B0F08                     A  4408    L_167:
                           A  4409    .LINE 515
                           A  4410    
                           A  4411    ;  516		printf("\r\n\r\n");
                           A  4412    .LINE 516
                           A  4413    
0B0F08 01 B3 17 0B         A  4414    	LD	BC,___print_uputch
0B0F0C ED43 04 28 0B       A  4415    	LD	(___print_xputch),BC
0B0F11 01 2C 2C 0B         A  4416    	LD	BC,L__120
0B0F15 C5                  A  4417    	PUSH	BC
0B0F16 CD 42 16 0B         A  4418    	CALL	___print_sendstring
0B0F1A C1                  A  4419    	POP	BC
                           A  4420    ;  517		if(flashmos) printf("MOS CRC 0x%04l
                           A  4421    .LINE 517
                           A  4422    
0B0F1B 3A 97 21 0B         A  4423    	LD	A,(_flashmos)
0B0F1F B7                  A  4424    	OR	A,A
0B0F20 28 3F               A  4425    	JR	Z,L_170
0B0F22 01 B3 17 0B         A  4426    	LD	BC,___print_uputch
0B0F26 ED43 04 28 0B       A  4427    	LD	(___print_xputch),BC
0B0F2B 01 31 2C 0B         A  4428    	LD	BC,L__122
0B0F2F C5                  A  4429    	PUSH	BC
0B0F30 CD 42 16 0B         A  4430    	CALL	___print_sendstring
0B0F34 C1                  A  4431    	POP	BC
0B0F35 3E04                A  4432    	LD	A,%4
0B0F37 32 B0 23 0B         A  4433    	LD	(___print_fmt+5),A
0B0F3B 3E60                A  4434    	LD	A,%60
0B0F3D 32 AC 23 0B         A  4435    	LD	(___print_fmt+1),A
0B0F41 3E78                A  4436    	LD	A,%78
0B0F43 32 AF 23 0B         A  4437    	LD	(___print_fmt+4),A
0B0F47 DD4EF1              A  4438    	LD	C,(IX+%FFFFFFF1)
0B0F4A 0600                A  4439    	LD	B,%0
0B0F4C C5                  A  4440    	PUSH	BC
0B0F4D DD07EE              A  4441    	LD	BC,(IX+%FFFFFFEE)
0B0F50 C5                  A  4442    	PUSH	BC
0B0F51 CD 58 1F 0B         A  4443    	CALL	__u_ultoa
0B0F55 C1                  A  4444    	POP	BC
0B0F56 C1                  A  4445    	POP	BC
0B0F57 01 3C 2C 0B         A  4446    	LD	BC,L__123
0B0F5B C5                  A  4447    	PUSH	BC
0B0F5C CD 42 16 0B         A  4448    	CALL	___print_sendstring
0B0F60 C1                  A  4449    	POP	BC
0B0F61                     A  4450    L_170:
                           A  4451    ;  518		if(flashvdp) printf("VDP CRC 0x%04l
                           A  4452    .LINE 518
                           A  4453    
0B0F61 3A 98 21 0B         A  4454    	LD	A,(_flashvdp)
0B0F65 B7                  A  4455    	OR	A,A
0B0F66 28 3F               A  4456    	JR	Z,L_171
0B0F68 01 B3 17 0B         A  4457    	LD	BC,___print_uputch
0B0F6C ED43 04 28 0B       A  4458    	LD	(___print_xputch),BC
0B0F71 01 3F 2C 0B         A  4459    	LD	BC,L__125
0B0F75 C5                  A  4460    	PUSH	BC
0B0F76 CD 42 16 0B         A  4461    	CALL	___print_sendstring
0B0F7A C1                  A  4462    	POP	BC
0B0F7B 3E04                A  4463    	LD	A,%4
0B0F7D 32 B0 23 0B         A  4464    	LD	(___print_fmt+5),A
0B0F81 3E60                A  4465    	LD	A,%60
0B0F83 32 AC 23 0B         A  4466    	LD	(___print_fmt+1),A
0B0F87 3E78                A  4467    	LD	A,%78
0B0F89 32 AF 23 0B         A  4468    	LD	(___print_fmt+4),A
0B0F8D DD4EF5              A  4469    	LD	C,(IX+%FFFFFFF5)
0B0F90 0600                A  4470    	LD	B,%0
0B0F92 C5                  A  4471    	PUSH	BC
0B0F93 DD07F2              A  4472    	LD	BC,(IX+%FFFFFFF2)
0B0F96 C5                  A  4473    	PUSH	BC
0B0F97 CD 58 1F 0B         A  4474    	CALL	__u_ultoa
0B0F9B C1                  A  4475    	POP	BC
0B0F9C C1                  A  4476    	POP	BC
0B0F9D 01 4A 2C 0B         A  4477    	LD	BC,L__126
0B0FA1 C5                  A  4478    	PUSH	BC
0B0FA2 CD 42 16 0B         A  4479    	CALL	___print_sendstring
0B0FA6 C1                  A  4480    	POP	BC
0B0FA7                     A  4481    L_171:
                           A  4482    ;  519		printf("\r\n");
                           A  4483    .LINE 519
                           A  4484    
0B0FA7 01 B3 17 0B         A  4485    	LD	BC,___print_uputch
0B0FAB ED43 04 28 0B       A  4486    	LD	(___print_xputch),BC
0B0FB0 01 4D 2C 0B         A  4487    	LD	BC,L__127
0B0FB4 C5                  A  4488    	PUSH	BC
0B0FB5 CD 42 16 0B         A  4489    	CALL	___print_sendstring
0B0FB9 C1                  A  4490    	POP	BC
                           A  4491    ;  520	}
                           A  4492    .LINE 520
                           A  4493    
0B0FBA DDF9                A  4494    	LD	SP,IX
0B0FBC DDE1                A  4495    	POP	IX
0B0FBE C9                  A  4496    	RET	
                           A  4497    
                           A  4498    
                           A  4499    ;**************************** _showCRC32 ******
                           A  4500    ;Name                         Addr/Register   S
                           A  4501    ;__u_ultoa                           IMPORT  --
                           A  4502    ;___print_fmt                        IMPORT    
                           A  4503    ;_vdpfilename                        STATIC    
                           A  4504    ;_flashvdp                           STATIC    
                           A  4505    ;_mos_fclose                         IMPORT  --
                           A  4506    ;_crc32_finalize                     IMPORT  --
                           A  4507    ;_mos_fread                          IMPORT  --
                           A  4508    ;_putch                              IMPORT  --
                           A  4509    ;_crc32                              IMPORT  --
                           A  4510    ;_crc32_initialize                   IMPORT  --
                           A  4511    ;_mosfilename                        STATIC    
                           A  4512    ;_mos_fopen                          IMPORT  --
                           A  4513    ;_flashmos                           STATIC    
                           A  4514    ;___print_sendstring                 IMPORT  --
                           A  4515    ;___print_xputch                     IMPORT    
                           A  4516    ;___print_uputch                     IMPORT  --
                           A  4517    ;moscrc                               IX-18    
                           A  4518    ;vdpcrc                               IX-14    
                           A  4519    ;size                                 IX-10    
                           A  4520    ;got                                   IX-7    
                           A  4521    ;ptr                                   IX-4    
                           A  4522    ;file                                  IX-1    
                           A  4523    
                           A  4524    
                           A  4525    ; Stack Frame Size: 24 (bytes)
                           A  4526    ;       Spill Code: 0 (instruction)
                           A  4527    
                           A  4528    
                           A  4529    .ENDFUNC "showCRC32",520,"_showCRC32"
                           A  4530    	SEGMENT STRSECT
0B2C1C                     A  4531    L__115:
0B2C1C 43616C63 756C6174   A  4532    	DB	"Calculating CRC"
0B2C24 696E6720 435243 
0B2C2B 00                  A  4533    	DB	0
0B2C2C                     A  4534    L__120:
0B2C2C 0D0A0D0A 00         A  4535    	DB	13,10,13,10,0
0B2C31                     A  4536    L__122:
0B2C31 4D4F5320 43524320   A  4537    	DB	"MOS CRC 0x"
0B2C39 3078 
0B2C3B 00                  A  4538    	DB	0
0B2C3C                     A  4539    L__123:
0B2C3C 0D0A00              A  4540    	DB	13,10,0
0B2C3F                     A  4541    L__125:
0B2C3F 56445020 43524320   A  4542    	DB	"VDP CRC 0x"
0B2C47 3078 
0B2C49 00                  A  4543    	DB	0
0B2C4A                     A  4544    L__126:
0B2C4A 0D0A00              A  4545    	DB	13,10,0
0B2C4D                     A  4546    L__127:
0B2C4D 0D0A00              A  4547    	DB	13,10,0
                           A  4548    	SEGMENT CODE
                           A  4549    ;  521	
                           A  4550    ;  522	int main(int argc, char * argv[]) {	
0B0FBF                     A  4551    _main:
                           A  4552    .DEFINE "_main"
                           A  4553    
                           A  4554    .VALUE _main
                           A  4555    
                           A  4556    .CLASS 2
                           A  4557    
                           A  4558    .TYPE 68
                           A  4559    
                           A  4560    .ENDEF
                           A  4561    
                           A  4562    .BEGFUNC "main",522,"_main"
                           A  4563    
                           A  4564    .LINE 522
                           A  4565    
                           A  4566    .DEFINE "argc"
                           A  4567    
                           A  4568    .CLASS 65
                           A  4569    
                           A  4570    .VALUE 6
                           A  4571    
                           A  4572    .TYPE 4
                           A  4573    
                           A  4574    .ENDEF
                           A  4575    
                           A  4576    .DEFINE "argv"
                           A  4577    
                           A  4578    .CLASS 65
                           A  4579    
                           A  4580    .VALUE 9
                           A  4581    
                           A  4582    .TYPE 290
                           A  4583    
                           A  4584    .ENDEF
                           A  4585    
                           A  4586    .DEFINE "sysvars"
                           A  4587    
                           A  4588    .CLASS 65
                           A  4589    
                           A  4590    .VALUE -3
                           A  4591    
                           A  4592    .TAG "NONAME3"
                           A  4593    
                           A  4594    .TYPE 40
                           A  4595    
                           A  4596    .ENDEF
                           A  4597    
0B0FBF DDE5                A  4598    	PUSH	IX
0B0FC1 DD210000 00         A  4599    	LD	IX,0
0B0FC6 DD39                A  4600    	ADD	IX,SP
0B0FC8 C5                  A  4601    	PUSH	BC
                           A  4602    ;  523		sysvar_t *sysvars;
                           A  4603    ;  524	
                           A  4604    ;  525		// All checks
                           A  4605    ;  526		if(argc == 1) {
                           A  4606    .LINE 526
                           A  4607    
0B0FC9 01010000            A  4608    	LD	BC,1
0B0FCD DD2706              A  4609    	LD	HL,(IX+%6)
0B0FD0 B7                  A  4610    	OR	A,A
0B0FD1 ED42                A  4611    	SBC	HL,BC
0B0FD3 20 0B               A  4612    	JR	NZ,L_175
                           A  4613    ;  527			usage();
                           A  4614    .LINE 527
                           A  4615    
0B0FD5 CD 50 03 0B         A  4616    	CALL	_usage
                           A  4617    ;  528			return 0;
                           A  4618    .LINE 528
                           A  4619    
0B0FD9 B7                  A  4620    	OR	A,A
0B0FDA ED62                A  4621    	SBC	HL,HL
0B0FDC C3 D8 10 0B         A  4622    	JR	L_192
                           A  4623    ;  529		}
0B0FE0                     A  4624    L_175:
                           A  4625    .LINE 529
                           A  4626    
                           A  4627    ;  530		if(!parseCommands(argc, argv)) {
                           A  4628    .LINE 530
                           A  4629    
0B0FE0 DD0709              A  4630    	LD	BC,(IX+%9)
0B0FE3 C5                  A  4631    	PUSH	BC
0B0FE4 DD0706              A  4632    	LD	BC,(IX+%6)
0B0FE7 C5                  A  4633    	PUSH	BC
0B0FE8 CD 27 0A 0B         A  4634    	CALL	_parseCommands
0B0FEC C1                  A  4635    	POP	BC
0B0FED C1                  A  4636    	POP	BC
0B0FEE B7                  A  4637    	OR	A,A
0B0FEF 20 0C               A  4638    	JR	NZ,L_177
                           A  4639    ;  531			usage();
                           A  4640    .LINE 531
                           A  4641    
0B0FF1 CD 50 03 0B         A  4642    	CALL	_usage
                           A  4643    ;  532			return EXIT_INVALIDPARAMETER;
                           A  4644    .LINE 532
                           A  4645    
0B0FF5 21130000            A  4646    	LD	HL,19
0B0FF9 C3 D8 10 0B         A  4647    	JR	L_192
                           A  4648    ;  533		}
0B0FFD                     A  4649    L_177:
                           A  4650    .LINE 533
                           A  4651    
                           A  4652    ;  534		if(!filesExist()) return EXIT_FILEN
                           A  4653    .LINE 534
                           A  4654    
0B0FFD CD E7 0B 0B         A  4655    	CALL	_filesExist
0B1001 B7                  A  4656    	OR	A,A
0B1002 20 08               A  4657    	JR	NZ,L_179
0B1004 21040000            A  4658    	LD	HL,4
0B1008 C3 D8 10 0B         A  4659    	JR	L_192
0B100C                     A  4660    L_179:
                           A  4661    ;  535		if(!firmwareContentOK()) {
                           A  4662    .LINE 535
                           A  4663    
0B100C CD A4 0C 0B         A  4664    	CALL	_firmwareContentOK
0B1010 B7                  A  4665    	OR	A,A
0B1011 20 08               A  4666    	JR	NZ,L_180
                           A  4667    ;  536			return EXIT_INVALIDPARAMETER;
                           A  4668    .LINE 536
                           A  4669    
0B1013 21130000            A  4670    	LD	HL,19
0B1017 C3 D8 10 0B         A  4671    	JR	L_192
                           A  4672    ;  537		}
0B101B                     A  4673    L_180:
                           A  4674    .LINE 537
                           A  4675    
                           A  4676    ;  538	
                           A  4677    ;  539		putch(12); // cls
                           A  4678    .LINE 539
                           A  4679    
0B101B 010C0000            A  4680    	LD	BC,12
0B101F C5                  A  4681    	PUSH	BC
0B1020 CD E5 00 0B         A  4682    	CALL	_putch
0B1024 C1                  A  4683    	POP	BC
                           A  4684    ;  540		print_version();
                           A  4685    .LINE 540
                           A  4686    
0B1025 CD 2F 03 0B         A  4687    	CALL	_print_version
                           A  4688    ;  541	
                           A  4689    ;  542		if(!silent) {
                           A  4690    .LINE 542
                           A  4691    
0B1029 3A 99 21 0B         A  4692    	LD	A,(_silent)
0B102D B7                  A  4693    	OR	A,A
0B102E 20 12               A  4694    	JR	NZ,L_183
                           A  4695    ;  543			showCRC32();
                           A  4696    .LINE 543
                           A  4697    
0B1030 CD E7 0D 0B         A  4698    	CALL	_showCRC32
                           A  4699    ;  544			if(!getResponse()) return 0;
                           A  4700    .LINE 544
                           A  4701    
0B1034 CD 75 03 0B         A  4702    	CALL	_getResponse
0B1038 B7                  A  4703    	OR	A,A
0B1039 20 07               A  4704    	JR	NZ,L_183
0B103B B7                  A  4705    	OR	A,A
0B103C ED62                A  4706    	SBC	HL,HL
0B103E C3 D8 10 0B         A  4707    	JR	L_192
                           A  4708    ;  545		}
0B1042                     A  4709    L_183:
                           A  4710    .LINE 545
                           A  4711    
                           A  4712    ;  546	
                           A  4713    ;  547		printf("Flashing firmware...\r\n");
                           A  4714    .LINE 547
                           A  4715    
0B1042 01 B3 17 0B         A  4716    	LD	BC,___print_uputch
0B1046 ED43 04 28 0B       A  4717    	LD	(___print_xputch),BC
0B104B 01 50 2C 0B         A  4718    	LD	BC,L__135
0B104F C5                  A  4719    	PUSH	BC
0B1050 CD 42 16 0B         A  4720    	CALL	___print_sendstring
0B1054 C1                  A  4721    	POP	BC
                           A  4722    ;  548		delayms(750);
                           A  4723    .LINE 548
                           A  4724    
0B1055 01EE0200            A  4725    	LD	BC,750
0B1059 C5                  A  4726    	PUSH	BC
0B105A CD DF 12 0B         A  4727    	CALL	_delayms
0B105E C1                  A  4728    	POP	BC
                           A  4729    ;  549		return 0;
                           A  4730    .LINE 549
                           A  4731    
0B105F B7                  A  4732    	OR	A,A
0B1060 ED62                A  4733    	SBC	HL,HL
0B1062 18 74               A  4734    	JR	L_192
                           A  4735    ;  550	
                           A  4736    ;  551		sysvars = getsysvars();
                           A  4737    ;  552		while(sysvars->scrheight == 0); // 
0B1064                     A  4738    L_185:
                           A  4739    .LINE 552
                           A  4740    
0B1064 DD31FD              A  4741    	LD	IY,(IX+%FFFFFFFD)
0B1067 FD2711              A  4742    	LD	HL,(IY+%11)
0B106A CD C5 1E 0B         A  4743    	CALL	__scmpzero
0B106E 28 F4               A  4744    	JR	Z,L_185
                           A  4745    ;  553		beep(1);
                           A  4746    .LINE 553
                           A  4747    
0B1070 01010000            A  4748    	LD	BC,1
0B1074 C5                  A  4749    	PUSH	BC
0B1075 CD 0B 01 0B         A  4750    	CALL	_beep
0B1079 C1                  A  4751    	POP	BC
                           A  4752    ;  554		sysvars->scrheight = 0;
                           A  4753    .LINE 554
                           A  4754    
0B107A DD31FD              A  4755    	LD	IY,(IX+%FFFFFFFD)
0B107D FD361100            A  4756    	LD	(IY+%11),%0
0B1081 FD361200            A  4757    	LD	(IY+%12),%0
                           A  4758    ;  555	
                           A  4759    ;  556		update_vdp("firmware.bin");
                           A  4760    .LINE 556
                           A  4761    
0B1085 01 67 2C 0B         A  4762    	LD	BC,L__137
0B1089 C5                  A  4763    	PUSH	BC
0B108A CD F9 03 0B         A  4764    	CALL	_update_vdp
0B108E C1                  A  4765    	POP	BC
                           A  4766    ;  557		echoVDP(1);
                           A  4767    .LINE 557
                           A  4768    
0B108F 01010000            A  4769    	LD	BC,1
0B1093 C5                  A  4770    	PUSH	BC
0B1094 CD 4F 09 0B         A  4771    	CALL	_echoVDP
0B1098 C1                  A  4772    	POP	BC
                           A  4773    ;  558		while(sysvars->scrheight == 0);
0B1099                     A  4774    L_188:
                           A  4775    .LINE 558
                           A  4776    
0B1099 DD31FD              A  4777    	LD	IY,(IX+%FFFFFFFD)
0B109C FD2711              A  4778    	LD	HL,(IY+%11)
0B109F CD C5 1E 0B         A  4779    	CALL	__scmpzero
0B10A3 28 F4               A  4780    	JR	Z,L_188
                           A  4781    ;  559		beep(2);
                           A  4782    .LINE 559
                           A  4783    
0B10A5 01020000            A  4784    	LD	BC,2
0B10A9 C5                  A  4785    	PUSH	BC
0B10AA CD 0B 01 0B         A  4786    	CALL	_beep
0B10AE C1                  A  4787    	POP	BC
                           A  4788    ;  560		update_mos("MOS.bin");
                           A  4789    .LINE 560
                           A  4790    
0B10AF 01 74 2C 0B         A  4791    	LD	BC,L__139
0B10B3 C5                  A  4792    	PUSH	BC
0B10B4 CD 3A 05 0B         A  4793    	CALL	_update_mos
0B10B8 C1                  A  4794    	POP	BC
                           A  4795    ;  561		beep(3);
                           A  4796    .LINE 561
                           A  4797    
0B10B9 01030000            A  4798    	LD	BC,3
0B10BD C5                  A  4799    	PUSH	BC
0B10BE CD 0B 01 0B         A  4800    	CALL	_beep
0B10C2 C1                  A  4801    	POP	BC
                           A  4802    ;  562		printf("Press reset button");
                           A  4803    .LINE 562
                           A  4804    
0B10C3 01 B3 17 0B         A  4805    	LD	BC,___print_uputch
0B10C7 ED43 04 28 0B       A  4806    	LD	(___print_xputch),BC
0B10CC 01 7C 2C 0B         A  4807    	LD	BC,L__140
0B10D0 C5                  A  4808    	PUSH	BC
0B10D1 CD 42 16 0B         A  4809    	CALL	___print_sendstring
0B10D5 C1                  A  4810    	POP	BC
                           A  4811    ;  563		while(1);
0B10D6                     A  4812    L_191:
                           A  4813    .LINE 563
                           A  4814    
0B10D6 18 FE               A  4815    	JR	L_191
                           A  4816    ;  564	}
0B10D8                     A  4817    L_192:
                           A  4818    .LINE 564
                           A  4819    
0B10D8 DDF9                A  4820    	LD	SP,IX
0B10DA DDE1                A  4821    	POP	IX
0B10DC C9                  A  4822    	RET	
                           A  4823    
                           A  4824    
                           A  4825    ;**************************** _main ***********
                           A  4826    ;Name                         Addr/Register   S
                           A  4827    ;_delayms                            IMPORT  --
                           A  4828    ;___print_sendstring                 IMPORT  --
                           A  4829    ;___print_xputch                     IMPORT    
                           A  4830    ;___print_uputch                     IMPORT  --
                           A  4831    ;_silent                             STATIC    
                           A  4832    ;_putch                              IMPORT  --
                           A  4833    ;sysvars                               IX-3    
                           A  4834    ;argv                                  IX+9    
                           A  4835    ;argc                                  IX+6    
                           A  4836    
                           A  4837    
                           A  4838    ; Stack Frame Size: 15 (bytes)
                           A  4839    ;       Spill Code: 0 (instruction)
                           A  4840    
                           A  4841    
                           A  4842    .ENDFUNC "main",564,"_main"
                           A  4843    	SEGMENT STRSECT
0B2C50                     A  4844    L__135:
0B2C50 466C6173 68696E67   A  4845    	DB	"Flashing firmware..."
0B2C58 20666972 6D776172 
0B2C60 652E2E2E 
0B2C64 0D0A00              A  4846    	DB	13,10,0
0B2C67                     A  4847    L__137:
0B2C67 6669726D 77617265   A  4848    	DB	"firmware.bin"
0B2C6F 2E62696E 
0B2C73 00                  A  4849    	DB	0
0B2C74                     A  4850    L__139:
0B2C74 4D4F532E 62696E     A  4851    	DB	"MOS.bin"
0B2C7B 00                  A  4852    	DB	0
0B2C7C                     A  4853    L__140:
0B2C7C 50726573 73207265   A  4854    	DB	"Press reset button"
0B2C84 73657420 62757474 
0B2C8C 6F6E 
0B2C8E 00                  A  4855    	DB	0
                           A  4856    	XREF _memcmp:ROM
                           A  4857    	XREF _strcpy:ROM
                           A  4858    	XREF _getFileSize:ROM
                           A  4859    	XREF _crc32_finalize:ROM
                           A  4860    	XREF _crc32_initialize:ROM
                           A  4861    	XREF _crc32:ROM
                           A  4862    	XREF _delayms:ROM
                           A  4863    	XREF _startVDPupdate:ROM
                           A  4864    	XREF _fastmemcpy:ROM
                           A  4865    	XREF _lockFlashKeyRegister:ROM
                           A  4866    	XREF _enableFlashKeyRegister:ROM
                           A  4867    	XREF _mos_flseek:ROM
                           A  4868    	XREF _mos_fread:ROM
                           A  4869    	XREF _mos_fclose:ROM
                           A  4870    	XREF _mos_fopen:ROM
                           A  4871    	XREF _getsysvars:ROM
                           A  4872    	XREF _getch:ROM
                           A  4873    	XREF _tolower:ROM
                           A  4874    	XREF __u_ultoa:ROM
                           A  4875    	XREF __u_itoa:ROM
                           A  4876    	XREF ___print_sendstring:ROM
                           A  4877    	XREF ___print_xputch:ROM
                           A  4878    	XREF ___print_uputch:ROM
                           A  4879    	XREF ___print_fmt:ROM
                           A  4880    	XREF __lcmpu:ROM
                           A  4881    	XREF __iand:ROM
                           A  4882    	XREF __stoiu:ROM
                           A  4883    	XREF __scmpzero:ROM
                           A  4884    	XREF __icmpzero:ROM
                           A  4885    	XREF __case8D:ROM
                           A  4886    	XREF __seqcaseD:ROM
                           A  4887    	XREF __ishru_b:ROM
                           A  4888    	XREF __ishrs_b:ROM
                           A  4889    	XDEF _main
                           A  4890    	XDEF _showCRC32
                           A  4891    	XDEF _firmwareContentOK
                           A  4892    	XDEF _filesExist
                           A  4893    	XDEF _parseCommands
                           A  4894    	XDEF _silent
                           A  4895    	XDEF _vdpfilename
                           A  4896    	XDEF _flashvdp
                           A  4897    	XDEF _mosfilename
                           A  4898    	XDEF _flashmos
                           A  4899    	XDEF _getCommand
                           A  4900    	XDEF _echoVDP
                           A  4901    	XDEF _update_mos
                           A  4902    	XDEF _update_vdp
                           A  4903    	XDEF _getResponse
                           A  4904    	XDEF _usage
                           A  4905    	XDEF _print_version
                           A  4906    	XDEF _containsESP32Header
                           A  4907    	XDEF _esp32_magicnumbers
                           A  4908    	XDEF _containsMosHeader
                           A  4909    	XDEF _mos_magicnumbers
                           A  4910    	XDEF _vdp_ota_present
                           A  4911    	XDEF _getCharAt
                           A  4912    	XDEF _beep
                           A  4913    	XDEF _putch
                           A  4914    	XDEF _errno
                           A  4915    	END


Errors: 0
Warnings: 0
Lines Assembled: 4916
