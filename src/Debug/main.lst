Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED02-Nov-23     09:01:35     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",51
                           A   144    .DEFINE "clock"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 15
                           A   148    .ENDEF
                           A   149    .DEFINE "vpd_protocol_flags"
                           A   150    .VALUE 4
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "keyascii"
                           A   155    .VALUE 5
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "keymods"
                           A   160    .VALUE 6
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "cursorX"
                           A   165    .VALUE 7
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "cursorY"
                           A   170    .VALUE 8
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "scrchar"
                           A   175    .VALUE 9
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "scrpixel"
                           A   180    .VALUE 10
                           A   181    .CLASS 8
                           A   182    .TYPE 14
                           A   183    .ENDEF
                           A   184    .DEFINE "audioChannel"
                           A   185    .VALUE 13
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "audioSuccess"
                           A   190    .VALUE 14
                           A   191    .CLASS 8
                           A   192    .TYPE 12
                           A   193    .ENDEF
                           A   194    .DEFINE "scrwidth"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 13
                           A   198    .ENDEF
                           A   199    .DEFINE "scrheight"
                           A   200    .VALUE 17
                           A   201    .CLASS 8
                           A   202    .TYPE 13
                           A   203    .ENDEF
                           A   204    .DEFINE "scrcols"
                           A   205    .VALUE 19
                           A   206    .CLASS 8
                           A   207    .TYPE 12
                           A   208    .ENDEF
                           A   209    .DEFINE "scrrows"
                           A   210    .VALUE 20
                           A   211    .CLASS 8
                           A   212    .TYPE 12
                           A   213    .ENDEF
                           A   214    .DEFINE "scrcolours"
                           A   215    .VALUE 21
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "scrpixelIndex"
                           A   220    .VALUE 22
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "keycode"
                           A   225    .VALUE 23
                           A   226    .CLASS 8
                           A   227    .TYPE 12
                           A   228    .ENDEF
                           A   229    .DEFINE "keydown"
                           A   230    .VALUE 24
                           A   231    .CLASS 8
                           A   232    .TYPE 12
                           A   233    .ENDEF
                           A   234    .DEFINE "keycount"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 12
                           A   238    .ENDEF
                           A   239    .DEFINE "rtc"
                           A   240    .VALUE 26
                           A   241    .CLASS 8
                           A   242    .DIM 6
                           A   243    .TYPE 108
                           A   244    .ENDEF
                           A   245    .DEFINE "rtc_spare"
                           A   246    .VALUE 32
                           A   247    .CLASS 8
                           A   248    .DIM 2
                           A   249    .TYPE 108
                           A   250    .ENDEF
                           A   251    .DEFINE "keydelay"
                           A   252    .VALUE 34
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .DEFINE "keyrate"
                           A   257    .VALUE 36
                           A   258    .CLASS 8
                           A   259    .TYPE 13
                           A   260    .ENDEF
                           A   261    .DEFINE "keyled"
                           A   262    .VALUE 38
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "scrmode"
                           A   267    .VALUE 39
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "rtc_enable"
                           A   272    .VALUE 40
                           A   273    .CLASS 8
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    .DEFINE "mouseX"
                           A   277    .VALUE 41
                           A   278    .CLASS 8
                           A   279    .TYPE 13
                           A   280    .ENDEF
                           A   281    .DEFINE "mouseY"
                           A   282    .VALUE 43
                           A   283    .CLASS 8
                           A   284    .TYPE 13
                           A   285    .ENDEF
                           A   286    .DEFINE "mouseButtons"
                           A   287    .VALUE 45
                           A   288    .CLASS 8
                           A   289    .TYPE 12
                           A   290    .ENDEF
                           A   291    .DEFINE "mouseWheel"
                           A   292    .VALUE 46
                           A   293    .CLASS 8
                           A   294    .TYPE 12
                           A   295    .ENDEF
                           A   296    .DEFINE "mouseXDelta"
                           A   297    .VALUE 47
                           A   298    .CLASS 8
                           A   299    .TYPE 13
                           A   300    .ENDEF
                           A   301    .DEFINE "mouseYDelta"
                           A   302    .VALUE 49
                           A   303    .CLASS 8
                           A   304    .TYPE 13
                           A   305    .ENDEF
                           A   306    .ENDREC "NONAME3"
                           A   307    .BEGREC "NONAME4",8
                           A   308    .DEFINE "baudRate"
                           A   309    .VALUE 0
                           A   310    .CLASS 8
                           A   311    .TYPE 4
                           A   312    .ENDEF
                           A   313    .DEFINE "dataBits"
                           A   314    .VALUE 3
                           A   315    .CLASS 8
                           A   316    .TYPE 12
                           A   317    .ENDEF
                           A   318    .DEFINE "stopBits"
                           A   319    .VALUE 4
                           A   320    .CLASS 8
                           A   321    .TYPE 12
                           A   322    .ENDEF
                           A   323    .DEFINE "parity"
                           A   324    .VALUE 5
                           A   325    .CLASS 8
                           A   326    .TYPE 12
                           A   327    .ENDEF
                           A   328    .DEFINE "flowcontrol"
                           A   329    .VALUE 6
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "eir"
                           A   334    .VALUE 7
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .ENDREC "NONAME4"
                           A   339    .BEGREC "NONAME5",15
                           A   340    .DEFINE "fs"
                           A   341    .VALUE 0
                           A   342    .CLASS 8
                           A   343    .TYPE 46
                           A   344    .ENDEF
                           A   345    .DEFINE "id"
                           A   346    .VALUE 3
                           A   347    .CLASS 8
                           A   348    .TYPE 13
                           A   349    .ENDEF
                           A   350    .DEFINE "attr"
                           A   351    .VALUE 5
                           A   352    .CLASS 8
                           A   353    .TYPE 12
                           A   354    .ENDEF
                           A   355    .DEFINE "stat"
                           A   356    .VALUE 6
                           A   357    .CLASS 8
                           A   358    .TYPE 12
                           A   359    .ENDEF
                           A   360    .DEFINE "sclust"
                           A   361    .VALUE 7
                           A   362    .CLASS 8
                           A   363    .TYPE 15
                           A   364    .ENDEF
                           A   365    .DEFINE "objsize"
                           A   366    .VALUE 11
                           A   367    .CLASS 8
                           A   368    .TYPE 15
                           A   369    .ENDEF
                           A   370    .ENDREC "NONAME5"
                           A   371    .BEGREC "NONAME6",36
                           A   372    .DEFINE "obj"
                           A   373    .VALUE 0
                           A   374    .CLASS 8
                           A   375    .TAG "NONAME5"
                           A   376    .TYPE 8
                           A   377    .ENDEF
                           A   378    .DEFINE "flag"
                           A   379    .VALUE 15
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .DEFINE "err"
                           A   384    .VALUE 16
                           A   385    .CLASS 8
                           A   386    .TYPE 12
                           A   387    .ENDEF
                           A   388    .DEFINE "fptr"
                           A   389    .VALUE 17
                           A   390    .CLASS 8
                           A   391    .TYPE 15
                           A   392    .ENDEF
                           A   393    .DEFINE "clust"
                           A   394    .VALUE 21
                           A   395    .CLASS 8
                           A   396    .TYPE 15
                           A   397    .ENDEF
                           A   398    .DEFINE "sect"
                           A   399    .VALUE 25
                           A   400    .CLASS 8
                           A   401    .TYPE 15
                           A   402    .ENDEF
                           A   403    .DEFINE "dir_sect"
                           A   404    .VALUE 29
                           A   405    .CLASS 8
                           A   406    .TYPE 15
                           A   407    .ENDEF
                           A   408    .DEFINE "dir_ptr"
                           A   409    .VALUE 33
                           A   410    .CLASS 8
                           A   411    .TYPE 46
                           A   412    .ENDEF
                           A   413    .ENDREC "NONAME6"
                           A   414    	SEGMENT BSS
0B20F6                     A   415    _errno:
0B20F6                     A   416    	DS	3
                           A   417    .DEFINE "errno"
                           A   418    .ALIAS "_errno"
                           A   419    .CLASS 83
                           A   420    .VALUE _errno
                           A   421    .TYPE 4
                           A   422    .ENDEF
                           A   423    	SEGMENT DATA
0B20EA                     A   424    _flashmos:
0B20EA 00                  A   425    	DB	0
                           A   426    .DEFINE "flashmos"
                           A   427    .ALIAS "_flashmos"
                           A   428    .CLASS 69
                           A   429    .VALUE _flashmos
                           A   430    .TYPE 12
                           A   431    .ENDEF
                           A   432    	SEGMENT BSS
0B20F9                     A   433    _mosfilename:
0B20F9                     A   434    	DS	256
                           A   435    .DEFINE "mosfilename"
                           A   436    .ALIAS "_mosfilename"
                           A   437    .CLASS 83
                           A   438    .VALUE _mosfilename
                           A   439    .DIM 256
                           A   440    .TYPE 98
                           A   441    .ENDEF
0B21F9                     A   442    _moscrc:
0B21F9                     A   443    	DS	4*1
                           A   444    .DEFINE "moscrc"
                           A   445    .ALIAS "_moscrc"
                           A   446    .CLASS 83
                           A   447    .VALUE _moscrc
                           A   448    .TYPE 15
                           A   449    .ENDEF
                           A   450    	SEGMENT DATA
0B20EB                     A   451    _flashvdp:
0B20EB 00                  A   452    	DB	0
                           A   453    .DEFINE "flashvdp"
                           A   454    .ALIAS "_flashvdp"
                           A   455    .CLASS 69
                           A   456    .VALUE _flashvdp
                           A   457    .TYPE 12
                           A   458    .ENDEF
                           A   459    	SEGMENT BSS
0B21FD                     A   460    _vdpfilename:
0B21FD                     A   461    	DS	256
                           A   462    .DEFINE "vdpfilename"
                           A   463    .ALIAS "_vdpfilename"
                           A   464    .CLASS 83
                           A   465    .VALUE _vdpfilename
                           A   466    .DIM 256
                           A   467    .TYPE 98
                           A   468    .ENDEF
0B22FD                     A   469    _vdpcrc:
0B22FD                     A   470    	DS	4*1
                           A   471    .DEFINE "vdpcrc"
                           A   472    .ALIAS "_vdpcrc"
                           A   473    .CLASS 83
                           A   474    .VALUE _vdpcrc
                           A   475    .TYPE 15
                           A   476    .ENDEF
                           A   477    	SEGMENT DATA
0B20EC                     A   478    _silent:
0B20EC 00                  A   479    	DB	0
                           A   480    .DEFINE "silent"
                           A   481    .ALIAS "_silent"
                           A   482    .CLASS 69
                           A   483    .VALUE _silent
                           A   484    .TYPE 12
                           A   485    .ENDEF
                           A   486    ;    1	/*
                           A   487    ;    2	 * Title:			Agon firmware upgra
                           A   488    ;    3	 * Author:			Jeroen Venema
                           A   489    ;    4	 * Created:			17/12/2022
                           A   490    ;    5	 * Last Updated:	14/10/2023
                           A   491    ;    6	 * 
                           A   492    ;    7	 * Modinfo:
                           A   493    ;    8	 * 17/12/2022:		Initial version
                           A   494    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   495    ;   10	 *                  Sends cls just befo
                           A   496    ;   11	 * 07/06/2023:		Included faster crc
                           A   497    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   498    ;   13	 */
                           A   499    ;   14	
                           A   500    ;   15	#include <ez80.h>
                           A   501    ;   16	#include <stdio.h>
                           A   502    ;   17	#include <stdlib.h>
                           A   503    ;   18	#include <ERRNO.H>
                           A   504    ;   19	#include <ctype.h>
                           A   505    ;   20	#include "mos-interface.h"
                           A   506    ;   21	#include "flash.h"
                           A   507    ;   22	#include "agontimer.h"
                           A   508    ;   23	#include "crc32.h"
                           A   509    ;   24	#include "filesize.h"
                           A   510    ;   25	#include "./stdint.h"
                           A   511    ;   26	#include <string.h>
                           A   512    ;   27	
                           A   513    ;   28	#define UNLOCKMATCHLENGTH 9
                           A   514    ;   29	#define EXIT_FILENOTFOUND	4
                           A   515    ;   30	#define EXIT_INVALIDPARAMETER	19
                           A   516    ;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
                           A   517    ;   32	#define DEFAULT_VDPFIRMWARE	"firmware.b
                           A   518    ;   33	
                           A   519    ;   34	#define CMDUNKNOWN	0
                           A   520    ;   35	#define CMDALL		1
                           A   521    ;   36	#define CMDMOS		2
                           A   522    ;   37	#define CMDVDP		3
                           A   523    ;   38	#define CMDSILENT	4
                           A   524    ;   39	
                           A   525    ;   40	int errno; // needed by standard librar
                           A   526    ;   41	enum states{firmware,retry,systemreset}
                           A   527    ;   42	
                           A   528    ;   43	bool		flashmos = false;
                           A   529    ;   44	char		mosfilename[256];
                           A   530    ;   45	uint32_t	moscrc;
                           A   531    ;   46	bool		flashvdp = false;
                           A   532    ;   47	char		vdpfilename[256];
                           A   533    ;   48	uint32_t	vdpcrc;
                           A   534    ;   49	bool		silent = false;
                           A   535    	SEGMENT CODE
                           A   536    ;   50	
                           A   537    ;   51	// separate putch function that doesn't
                           A   538    ;   52	// UART0 initialization done by MOS fir
                           A   539    ;   53	// This utility doesn't run without MOS
                           A   540    ;   54	int putch(int c)
                           A   541    ;   55	{
0B00E5                     A   542    _putch:
                           A   543    .DEFINE "_putch"
                           A   544    
                           A   545    .VALUE _putch
                           A   546    
                           A   547    .CLASS 2
                           A   548    
                           A   549    .TYPE 68
                           A   550    
                           A   551    .ENDEF
                           A   552    
                           A   553    .BEGFUNC "putch",55,"_putch"
                           A   554    
                           A   555    .LINE 55
                           A   556    
                           A   557    .DEFINE "c"
                           A   558    
                           A   559    .CLASS 65
                           A   560    
                           A   561    .VALUE 6
                           A   562    
                           A   563    .TYPE 4
                           A   564    
0B00E5 DDE5                A   565    	PUSH	IX
0B00E7 DD210000 00         A   566    	LD	IX,0
0B00EC DD39                A   567    	ADD	IX,SP
                           A   568    .ENDEF
                           A   569    
                           A   570    ;   56		UINT8 lsr,temt;
                           A   571    ;   57		
                           A   572    ;   58		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   573    L_1:
                           A   574    .LINE 58
                           A   575    
0B00EE ED38C5              A   576    	IN0	A,(197)
0B00F1 E640                A   577    	AND	A,%40
0B00F3 B7ED62              A   578    	UEXT	HL
0B00F6 6F                  A   579    	LD	L,A
0B00F7 CD CC 1A 0B         A   580    	CALL	__icmpzero
0B00FB 28 F1               A   581    	JR	Z,L_1
                           A   582    ;   59		UART0_THR = c;
                           A   583    .LINE 59
                           A   584    
0B00FD DD7E06              A   585    	LD	A,(IX+%6)
0B0100 ED39C0              A   586    	OUT0	(192),A
                           A   587    ;   60		return c;
                           A   588    .LINE 60
                           A   589    
0B0103 DD2706              A   590    	LD	HL,(IX+%6)
                           A   591    ;   61	}
                           A   592    .LINE 61
                           A   593    
0B0106 DDF9                A   594    	LD	SP,IX
0B0108 DDE1                A   595    	POP	IX
0B010A C9                  A   596    	RET	
                           A   597    
                           A   598    
                           A   599    ;**************************** _putch **********
                           A   600    ;Name                         Addr/Register   S
                           A   601    ;c                                     IX+6    
                           A   602    
                           A   603    
                           A   604    ; Stack Frame Size: 9 (bytes)
                           A   605    ;       Spill Code: 0 (instruction)
                           A   606    
                           A   607    
                           A   608    .ENDFUNC "putch",61,"_putch"
                           A   609    ;   62	
                           A   610    ;   63	void beep(unsigned int number) {
0B010B                     A   611    _beep:
                           A   612    .DEFINE "_beep"
                           A   613    
                           A   614    .VALUE _beep
                           A   615    
                           A   616    .CLASS 2
                           A   617    
                           A   618    .TYPE 65
                           A   619    
                           A   620    .ENDEF
                           A   621    
                           A   622    .BEGFUNC "beep",63,"_beep"
                           A   623    
                           A   624    .LINE 63
                           A   625    
                           A   626    .DEFINE "number"
                           A   627    
                           A   628    .CLASS 65
                           A   629    
                           A   630    .VALUE 6
                           A   631    
                           A   632    .TYPE 14
                           A   633    
                           A   634    .ENDEF
                           A   635    
0B010B DDE5                A   636    	PUSH	IX
0B010D DD210000 00         A   637    	LD	IX,0
0B0112 DD39                A   638    	ADD	IX,SP
                           A   639    ;   64		while(number--) {
                           A   640    .LINE 64
                           A   641    
0B0114 18 14               A   642    	JR	L_5
0B0116                     A   643    L_6:
                           A   644    ;   65			putch(7);
                           A   645    .LINE 65
                           A   646    
0B0116 01070000            A   647    	LD	BC,7
0B011A C5                  A   648    	PUSH	BC
0B011B CD E5 00 0B         A   649    	CALL	_putch
0B011F C1                  A   650    	POP	BC
                           A   651    ;   66			delayms(250);
                           A   652    .LINE 66
                           A   653    
0B0120 01FA0000            A   654    	LD	BC,250
0B0124 C5                  A   655    	PUSH	BC
0B0125 CD 3B 12 0B         A   656    	CALL	_delayms
0B0129 C1                  A   657    	POP	BC
                           A   658    ;   67		}
0B012A                     A   659    L_5:
                           A   660    .LINE 67
                           A   661    
0B012A DD2706              A   662    	LD	HL,(IX+%6)
0B012D DD3106              A   663    	LD	IY,(IX+%6)
0B0130 ED33FF              A   664    	LEA	IY,IY+%FFFFFFFF
0B0133 DD3E06              A   665    	LD	(IX+%6),IY
0B0136 CD CC 1A 0B         A   666    	CALL	__icmpzero
0B013A 20 DA               A   667    	JR	NZ,L_6
                           A   668    ;   68	}
                           A   669    .LINE 68
                           A   670    
0B013C DDF9                A   671    	LD	SP,IX
0B013E DDE1                A   672    	POP	IX
0B0140 C9                  A   673    	RET	
                           A   674    
                           A   675    
                           A   676    ;**************************** _beep ***********
                           A   677    ;Name                         Addr/Register   S
                           A   678    ;_delayms                            IMPORT  --
                           A   679    ;_putch                              IMPORT  --
                           A   680    ;number                                IX+6    
                           A   681    
                           A   682    
                           A   683    ; Stack Frame Size: 9 (bytes)
                           A   684    ;       Spill Code: 0 (instruction)
                           A   685    
                           A   686    
                           A   687    .ENDFUNC "beep",68,"_beep"
                           A   688    ;   69	
                           A   689    ;   70	uint8_t getCharAt(uint16_t x, uint16_t 
0B0141                     A   690    _getCharAt:
                           A   691    .DEFINE "_getCharAt"
                           A   692    
                           A   693    .VALUE _getCharAt
                           A   694    
                           A   695    .CLASS 2
                           A   696    
                           A   697    .TYPE 76
                           A   698    
                           A   699    .ENDEF
                           A   700    
                           A   701    .BEGFUNC "getCharAt",70,"_getCharAt"
                           A   702    
                           A   703    .LINE 70
                           A   704    
                           A   705    .DEFINE "x"
                           A   706    
                           A   707    .CLASS 65
                           A   708    
                           A   709    .VALUE 6
                           A   710    
                           A   711    .TYPE 13
                           A   712    
                           A   713    .ENDEF
                           A   714    
                           A   715    .DEFINE "y"
                           A   716    
                           A   717    .CLASS 65
                           A   718    
                           A   719    .VALUE 9
                           A   720    
                           A   721    .TYPE 13
                           A   722    
                           A   723    .ENDEF
                           A   724    
                           A   725    .DEFINE "sysvars"
                           A   726    
                           A   727    .CLASS 65
                           A   728    
                           A   729    .VALUE -3
                           A   730    
                           A   731    .TAG "NONAME3"
                           A   732    
                           A   733    .TYPE 40
                           A   734    
                           A   735    .ENDEF
                           A   736    
0B0141 DDE5                A   737    	PUSH	IX
0B0143 DD210000 00         A   738    	LD	IX,0
0B0148 DD39                A   739    	ADD	IX,SP
0B014A C5                  A   740    	PUSH	BC
                           A   741    ;   71		sysvar_t *sysvars = getsysvars();
                           A   742    .LINE 71
                           A   743    
0B014B CD 5F 10 0B         A   744    	CALL	_getsysvars
0B014F DD2FFD              A   745    	LD	(IX+%FFFFFFFD),HL
                           A   746    ;   72		delayms(20);
                           A   747    .LINE 72
                           A   748    
0B0152 01140000            A   749    	LD	BC,20
0B0156 C5                  A   750    	PUSH	BC
0B0157 CD 3B 12 0B         A   751    	CALL	_delayms
0B015B C1                  A   752    	POP	BC
                           A   753    ;   73		putch(23);
                           A   754    .LINE 73
                           A   755    
0B015C 01170000            A   756    	LD	BC,23
0B0160 C5                  A   757    	PUSH	BC
0B0161 CD E5 00 0B         A   758    	CALL	_putch
0B0165 C1                  A   759    	POP	BC
                           A   760    ;   74		putch(0);
                           A   761    .LINE 74
                           A   762    
0B0166 01000000            A   763    	LD	BC,0
0B016A C5                  A   764    	PUSH	BC
0B016B CD E5 00 0B         A   765    	CALL	_putch
0B016F C1                  A   766    	POP	BC
                           A   767    ;   75		putch(131);
                           A   768    .LINE 75
                           A   769    
0B0170 01830000            A   770    	LD	BC,131
0B0174 C5                  A   771    	PUSH	BC
0B0175 CD E5 00 0B         A   772    	CALL	_putch
0B0179 C1                  A   773    	POP	BC
                           A   774    ;   76		putch(x & 0xFF);
                           A   775    .LINE 76
                           A   776    
0B017A DD0706              A   777    	LD	BC,(IX+%6)
0B017D CD 09 17 0B         A   778    	CALL	__stoiu
0B0181 7D                  A   779    	LD	A,L
0B0182 B7ED62              A   780    	UEXT	HL
0B0185 6F                  A   781    	LD	L,A
0B0186 E5                  A   782    	PUSH	HL
0B0187 CD E5 00 0B         A   783    	CALL	_putch
0B018B C1                  A   784    	POP	BC
                           A   785    ;   77		putch((x >> 8) & 0xFF);
                           A   786    .LINE 77
                           A   787    
0B018C DD0706              A   788    	LD	BC,(IX+%6)
0B018F CD 09 17 0B         A   789    	CALL	__stoiu
0B0193 3E08                A   790    	LD	A,%8
0B0195 CD 3E 15 0B         A   791    	CALL	__ishrs_b
0B0199 7D                  A   792    	LD	A,L
0B019A B7ED62              A   793    	UEXT	HL
0B019D 6F                  A   794    	LD	L,A
0B019E E5                  A   795    	PUSH	HL
0B019F CD E5 00 0B         A   796    	CALL	_putch
0B01A3 C1                  A   797    	POP	BC
                           A   798    ;   78		putch(y & 0xFF);
                           A   799    .LINE 78
                           A   800    
0B01A4 DD0709              A   801    	LD	BC,(IX+%9)
0B01A7 CD 09 17 0B         A   802    	CALL	__stoiu
0B01AB 7D                  A   803    	LD	A,L
0B01AC B7ED62              A   804    	UEXT	HL
0B01AF 6F                  A   805    	LD	L,A
0B01B0 E5                  A   806    	PUSH	HL
0B01B1 CD E5 00 0B         A   807    	CALL	_putch
0B01B5 C1                  A   808    	POP	BC
                           A   809    ;   79		putch((y >> 8) & 0xFF);
                           A   810    .LINE 79
                           A   811    
0B01B6 DD0709              A   812    	LD	BC,(IX+%9)
0B01B9 CD 09 17 0B         A   813    	CALL	__stoiu
0B01BD 3E08                A   814    	LD	A,%8
0B01BF CD 3E 15 0B         A   815    	CALL	__ishrs_b
0B01C3 7D                  A   816    	LD	A,L
0B01C4 B7ED62              A   817    	UEXT	HL
0B01C7 6F                  A   818    	LD	L,A
0B01C8 E5                  A   819    	PUSH	HL
0B01C9 CD E5 00 0B         A   820    	CALL	_putch
0B01CD C1                  A   821    	POP	BC
                           A   822    ;   80		delayms(100);
                           A   823    .LINE 80
                           A   824    
0B01CE 01640000            A   825    	LD	BC,100
0B01D2 C5                  A   826    	PUSH	BC
0B01D3 CD 3B 12 0B         A   827    	CALL	_delayms
0B01D7 C1                  A   828    	POP	BC
                           A   829    ;   81		return sysvars->scrchar;
                           A   830    .LINE 81
                           A   831    
0B01D8 DD31FD              A   832    	LD	IY,(IX+%FFFFFFFD)
0B01DB FD7E09              A   833    	LD	A,(IY+%9)
                           A   834    ;   82	}
                           A   835    .LINE 82
                           A   836    
0B01DE DDF9                A   837    	LD	SP,IX
0B01E0 DDE1                A   838    	POP	IX
0B01E2 C9                  A   839    	RET	
                           A   840    
                           A   841    
                           A   842    ;**************************** _getCharAt ******
                           A   843    ;Name                         Addr/Register   S
                           A   844    ;_putch                              IMPORT  --
                           A   845    ;_delayms                            IMPORT  --
                           A   846    ;_getsysvars                         IMPORT  --
                           A   847    ;sysvars                               IX-3    
                           A   848    ;y                                     IX+9    
                           A   849    ;x                                     IX+6    
                           A   850    
                           A   851    
                           A   852    ; Stack Frame Size: 15 (bytes)
                           A   853    ;       Spill Code: 0 (instruction)
                           A   854    
                           A   855    
                           A   856    .ENDFUNC "getCharAt",82,"_getCharAt"
                           A   857    ;   83	
                           A   858    ;   84	bool vdp_ota_present(void) {
0B01E3                     A   859    _vdp_ota_present:
                           A   860    .DEFINE "_vdp_ota_present"
                           A   861    
                           A   862    .VALUE _vdp_ota_present
                           A   863    
                           A   864    .CLASS 2
                           A   865    
                           A   866    .TYPE 76
                           A   867    
                           A   868    .ENDEF
                           A   869    
                           A   870    .BEGFUNC "vdp_ota_present",84,"_vdp_ota_present
                           A   871    
                           A   872    .LINE 84
                           A   873    
                           A   874    .DEFINE "n"
                           A   875    
                           A   876    .CLASS 65
                           A   877    
                           A   878    .VALUE -2
                           A   879    
                           A   880    .TYPE 13
                           A   881    
                           A   882    .ENDEF
                           A   883    
                           A   884    .DEFINE "test"
                           A   885    
                           A   886    .CLASS 65
                           A   887    
                           A   888    .VALUE -11
                           A   889    
                           A   890    .DIM 9
                           A   891    
                           A   892    .TYPE 98
                           A   893    
                           A   894    .ENDEF
                           A   895    
0B01E3 DDE5                A   896    	PUSH	IX
0B01E5 DD210000 00         A   897    	LD	IX,0
0B01EA DD39                A   898    	ADD	IX,SP
0B01EC ED22F5              A   899    	LEA	HL,IX+%FFFFFFF5
0B01EF F9                  A   900    	LD	SP,HL
                           A   901    ;   85		char test[UNLOCKMATCHLENGTH];
                           A   902    ;   86		uint16_t n;
                           A   903    ;   87	
                           A   904    ;   88		putch(23);
                           A   905    .LINE 88
                           A   906    
0B01F0 01170000            A   907    	LD	BC,23
0B01F4 C5                  A   908    	PUSH	BC
0B01F5 CD E5 00 0B         A   909    	CALL	_putch
0B01F9 C1                  A   910    	POP	BC
                           A   911    ;   89		putch(0);
                           A   912    .LINE 89
                           A   913    
0B01FA 01000000            A   914    	LD	BC,0
0B01FE C5                  A   915    	PUSH	BC
0B01FF CD E5 00 0B         A   916    	CALL	_putch
0B0203 C1                  A   917    	POP	BC
                           A   918    ;   90		putch(0xA1);
                           A   919    .LINE 90
                           A   920    
0B0204 01A10000            A   921    	LD	BC,161
0B0208 C5                  A   922    	PUSH	BC
0B0209 CD E5 00 0B         A   923    	CALL	_putch
0B020D C1                  A   924    	POP	BC
                           A   925    ;   91		putch(0);
                           A   926    .LINE 91
                           A   927    
0B020E 01000000            A   928    	LD	BC,0
0B0212 C5                  A   929    	PUSH	BC
0B0213 CD E5 00 0B         A   930    	CALL	_putch
0B0217 C1                  A   931    	POP	BC
                           A   932    ;   92		printf("unlock");
                           A   933    .LINE 92
                           A   934    
0B0218 01 0F 17 0B         A   935    	LD	BC,___print_uputch
0B021C ED43 04 28 0B       A   936    	LD	(___print_xputch),BC
0B0221 01 87 28 0B         A   937    	LD	BC,L__5
0B0225 C5                  A   938    	PUSH	BC
0B0226 CD 9E 15 0B         A   939    	CALL	___print_sendstring
0B022A C1                  A   940    	POP	BC
                           A   941    ;   93	
                           A   942    ;   94		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   943    .LINE 94
                           A   944    
0B022B DD36FE00            A   945    	LD	(IX+%FFFFFFFE),%0
0B022F DD36FF00            A   946    	LD	(IX+%FFFFFFFF),%0
0B0233 18 2A               A   947    	JR	L_12
0B0235                     A   948    L_10:
0B0235 01030000            A   949    	LD	BC,3
0B0239 C5                  A   950    	PUSH	BC
0B023A DD31FE              A   951    	LD	IY,(IX+%FFFFFFFE)
0B023D ED0308              A   952    	LEA	BC,IY+%8
0B0240 C5                  A   953    	PUSH	BC
0B0241 CD 41 01 0B         A   954    	CALL	_getCharAt
0B0245 C1                  A   955    	POP	BC
0B0246 C1                  A   956    	POP	BC
0B0247 DD07FE              A   957    	LD	BC,(IX+%FFFFFFFE)
0B024A CD 09 17 0B         A   958    	CALL	__stoiu
0B024E E5C1                A   959    	LD	BC,HL
0B0250 ED22F5              A   960    	LEA	HL,IX+%FFFFFFF5
0B0253 09                  A   961    	ADD	HL,BC
0B0254 77                  A   962    	LD	(HL),A
0B0255 DD27FE              A   963    	LD	HL,(IX+%FFFFFFFE)
0B0258 23                  A   964    	INC	HL
0B0259 DD75FE              A   965    	LD	(IX+%FFFFFFFE),L
0B025C DD74FF              A   966    	LD	(IX+%FFFFFFFF),H
0B025F                     A   967    L_12:
0B025F 49010A00            A   968    	LD.LIS	BC,10
0B0263 DD27FE              A   969    	LD	HL,(IX+%FFFFFFFE)
0B0266 B7                  A   970    	OR	A,A
0B0267 40ED42              A   971    	SBC.SIS	HL,BC
0B026A 38 C9               A   972    	JR	C,L_10
                           A   973    ;   95		// 3 - line on-screen
                           A   974    ;   96		if(memcmp(test, "unlocked!",UNLOCKM
                           A   975    .LINE 96
                           A   976    
0B026C 01090000            A   977    	LD	BC,9
0B0270 C5                  A   978    	PUSH	BC
0B0271 01 8E 28 0B         A   979    	LD	BC,L__7
0B0275 C5                  A   980    	PUSH	BC
0B0276 ED65F5              A   981    	PEA	IX+%FFFFFFF5
0B0279 CD A2 1A 0B         A   982    	CALL	_memcmp
0B027D C1                  A   983    	POP	BC
0B027E C1                  A   984    	POP	BC
0B027F C1                  A   985    	POP	BC
0B0280 CD CC 1A 0B         A   986    	CALL	__icmpzero
0B0284 20 04               A   987    	JR	NZ,L_14
0B0286 3E01                A   988    	LD	A,%1
0B0288 18 01               A   989    	JR	L_16
                           A   990    ;   97		else return false;
0B028A                     A   991    L_14:
                           A   992    .LINE 97
                           A   993    
0B028A AF                  A   994    	XOR	A,A
                           A   995    ;   98	}
0B028B                     A   996    L_16:
                           A   997    .LINE 98
                           A   998    
0B028B DDF9                A   999    	LD	SP,IX
0B028D DDE1                A  1000    	POP	IX
0B028F C9                  A  1001    	RET	
                           A  1002    
                           A  1003    
                           A  1004    ;**************************** _vdp_ota_present 
                           A  1005    ;Name                         Addr/Register   S
                           A  1006    ;_memcmp                             IMPORT  --
                           A  1007    ;___print_sendstring                 IMPORT  --
                           A  1008    ;___print_xputch                     IMPORT    
                           A  1009    ;___print_uputch                     IMPORT  --
                           A  1010    ;_putch                              IMPORT  --
                           A  1011    ;test                                 IX-11    
                           A  1012    ;n                                     IX-2    
                           A  1013    
                           A  1014    
                           A  1015    ; Stack Frame Size: 17 (bytes)
                           A  1016    ;       Spill Code: 0 (instruction)
                           A  1017    
                           A  1018    
                           A  1019    .ENDFUNC "vdp_ota_present",98,"_vdp_ota_present
                           A  1020    	SEGMENT STRSECT
0B2887                     A  1021    L__5:
0B2887 756E6C6F 636B       A  1022    	DB	"unlock"
0B288D 00                  A  1023    	DB	0
0B288E                     A  1024    L__7:
0B288E 756E6C6F 636B6564   A  1025    	DB	"unlocked!"
0B2896 21 
0B2897 00                  A  1026    	DB	0
                           A  1027    	SEGMENT DATA
0B20ED                     A  1028    _mos_magicnumbers:
0B20ED F3                  A  1029    	DB	243
0B20EE ED                  A  1030    	DB	237
0B20EF 7D                  A  1031    	DB	125
0B20F0 5B                  A  1032    	DB	91
0B20F1 C3                  A  1033    	DB	195
                           A  1034    .DEFINE "mos_magicnumbers"
                           A  1035    .ALIAS "_mos_magicnumbers"
                           A  1036    .CLASS 69
                           A  1037    .VALUE _mos_magicnumbers
                           A  1038    .DIM 5
                           A  1039    .TYPE 108
                           A  1040    .ENDEF
                           A  1041    ;   99	
                           A  1042    ;  100	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A  1043    	SEGMENT CODE
                           A  1044    ;  101	#define MOS_MAGICLENGTH 5
                           A  1045    ;  102	bool containsMosHeader(uint8_t *filesta
0B0290                     A  1046    _containsMosHeader:
                           A  1047    .DEFINE "_containsMosHeader"
                           A  1048    
                           A  1049    .VALUE _containsMosHeader
                           A  1050    
                           A  1051    .CLASS 2
                           A  1052    
                           A  1053    .TYPE 76
                           A  1054    
                           A  1055    .ENDEF
                           A  1056    
                           A  1057    .BEGFUNC "containsMosHeader",102,"_containsMosH
                           A  1058    
                           A  1059    .LINE 102
                           A  1060    
                           A  1061    .DEFINE "filestart"
                           A  1062    
                           A  1063    .CLASS 65
                           A  1064    
                           A  1065    .VALUE 6
                           A  1066    
                           A  1067    .TYPE 44
                           A  1068    
                           A  1069    .ENDEF
                           A  1070    
                           A  1071    .DEFINE "n"
                           A  1072    
                           A  1073    .CLASS 65
                           A  1074    
                           A  1075    .VALUE -1
                           A  1076    
                           A  1077    .TYPE 12
                           A  1078    
                           A  1079    .ENDEF
                           A  1080    
                           A  1081    .DEFINE "match"
                           A  1082    
                           A  1083    .CLASS 65
                           A  1084    
                           A  1085    .VALUE -2
                           A  1086    
                           A  1087    .TYPE 12
                           A  1088    
                           A  1089    .ENDEF
                           A  1090    
0B0290 DDE5                A  1091    	PUSH	IX
0B0292 DD210000 00         A  1092    	LD	IX,0
0B0297 DD39                A  1093    	ADD	IX,SP
0B0299 3B                  A  1094    	DEC	SP
0B029A 3B                  A  1095    	DEC	SP
                           A  1096    ;  103		uint8_t n;
                           A  1097    ;  104		bool match = true;
                           A  1098    .LINE 104
                           A  1099    
0B029B DD36FE01            A  1100    	LD	(IX+%FFFFFFFE),%1
                           A  1101    ;  105	
                           A  1102    ;  106		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A  1103    .LINE 106
                           A  1104    
0B029F DD36FF00            A  1105    	LD	(IX+%FFFFFFFF),%0
0B02A3 18 27               A  1106    	JR	L_21
0B02A5                     A  1107    L_19:
0B02A5 DD7EFF              A  1108    	LD	A,(IX+%FFFFFFFF)
0B02A8 B7ED62              A  1109    	UEXT	HL
0B02AB 6F                  A  1110    	LD	L,A
0B02AC 01 ED 20 0B         A  1111    	LD	BC,_mos_magicnumbers
0B02B0 09                  A  1112    	ADD	HL,BC
0B02B1 E5FDE1              A  1113    	LD	IY,HL
0B02B4 DD7EFF              A  1114    	LD	A,(IX+%FFFFFFFF)
0B02B7 B7ED62              A  1115    	UEXT	HL
0B02BA 6F                  A  1116    	LD	L,A
0B02BB DD0706              A  1117    	LD	BC,(IX+%6)
0B02BE 09                  A  1118    	ADD	HL,BC
0B02BF FD7E00              A  1119    	LD	A,(IY)
0B02C2 BE                  A  1120    	CP	A,(HL)
0B02C3 28 04               A  1121    	JR	Z,L_20
0B02C5 DD36FE00            A  1122    	LD	(IX+%FFFFFFFE),%0
0B02C9                     A  1123    L_20:
0B02C9 DD34FF              A  1124    	INC	(IX+%FFFFFFFF)
0B02CC                     A  1125    L_21:
0B02CC DD7EFF              A  1126    	LD	A,(IX+%FFFFFFFF)
0B02CF FE05                A  1127    	CP	A,%5
0B02D1 38 D2               A  1128    	JR	C,L_19
                           A  1129    ;  107		return match;
                           A  1130    .LINE 107
                           A  1131    
0B02D3 DD7EFE              A  1132    	LD	A,(IX+%FFFFFFFE)
                           A  1133    ;  108	}
                           A  1134    .LINE 108
                           A  1135    
0B02D6 DDF9                A  1136    	LD	SP,IX
0B02D8 DDE1                A  1137    	POP	IX
0B02DA C9                  A  1138    	RET	
                           A  1139    
                           A  1140    
                           A  1141    ;**************************** _containsMosHeade
                           A  1142    ;Name                         Addr/Register   S
                           A  1143    ;_mos_magicnumbers                   STATIC    
                           A  1144    ;match                                 IX-2    
                           A  1145    ;n                                     IX-1    
                           A  1146    ;filestart                             IX+6    
                           A  1147    
                           A  1148    
                           A  1149    ; Stack Frame Size: 11 (bytes)
                           A  1150    ;       Spill Code: 0 (instruction)
                           A  1151    
                           A  1152    
                           A  1153    .ENDFUNC "containsMosHeader",108,"_containsMosH
                           A  1154    	SEGMENT DATA
0B20F2                     A  1155    _esp32_magicnumbers:
0B20F2 32                  A  1156    	DB	50
0B20F3 54                  A  1157    	DB	84
0B20F4 CD                  A  1158    	DB	205
0B20F5 AB                  A  1159    	DB	171
                           A  1160    .DEFINE "esp32_magicnumbers"
                           A  1161    .ALIAS "_esp32_magicnumbers"
                           A  1162    .CLASS 69
                           A  1163    .VALUE _esp32_magicnumbers
                           A  1164    .DIM 4
                           A  1165    .TYPE 108
                           A  1166    .ENDEF
                           A  1167    ;  109	
                           A  1168    ;  110	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A  1169    	SEGMENT CODE
                           A  1170    ;  111	#define ESP32_MAGICLENGTH 4
                           A  1171    ;  112	#define ESP32_MAGICSTART 0x20
                           A  1172    ;  113	bool containsESP32Header(uint8_t *files
0B02DB                     A  1173    _containsESP32Header:
                           A  1174    .DEFINE "_containsESP32Header"
                           A  1175    
                           A  1176    .VALUE _containsESP32Header
                           A  1177    
                           A  1178    .CLASS 2
                           A  1179    
                           A  1180    .TYPE 76
                           A  1181    
                           A  1182    .ENDEF
                           A  1183    
                           A  1184    .BEGFUNC "containsESP32Header",113,"_containsES
                           A  1185    
                           A  1186    .LINE 113
                           A  1187    
                           A  1188    .DEFINE "filestart"
                           A  1189    
                           A  1190    .CLASS 65
                           A  1191    
                           A  1192    .VALUE 6
                           A  1193    
                           A  1194    .TYPE 44
                           A  1195    
                           A  1196    .ENDEF
                           A  1197    
                           A  1198    .DEFINE "n"
                           A  1199    
                           A  1200    .CLASS 65
                           A  1201    
                           A  1202    .VALUE -1
                           A  1203    
                           A  1204    .TYPE 12
                           A  1205    
                           A  1206    .ENDEF
                           A  1207    
                           A  1208    .DEFINE "match"
                           A  1209    
                           A  1210    .CLASS 65
                           A  1211    
                           A  1212    .VALUE -2
                           A  1213    
                           A  1214    .TYPE 12
                           A  1215    
                           A  1216    .ENDEF
                           A  1217    
0B02DB DDE5                A  1218    	PUSH	IX
0B02DD DD210000 00         A  1219    	LD	IX,0
0B02E2 DD39                A  1220    	ADD	IX,SP
0B02E4 3B                  A  1221    	DEC	SP
0B02E5 3B                  A  1222    	DEC	SP
                           A  1223    ;  114		uint8_t n;
                           A  1224    ;  115		bool match = true;
                           A  1225    .LINE 115
                           A  1226    
0B02E6 DD36FE01            A  1227    	LD	(IX+%FFFFFFFE),%1
                           A  1228    ;  116	
                           A  1229    ;  117		filestart += ESP32_MAGICSTART; // s
                           A  1230    .LINE 117
                           A  1231    
0B02EA DD3106              A  1232    	LD	IY,(IX+%6)
0B02ED ED3320              A  1233    	LEA	IY,IY+%20
0B02F0 DD3E06              A  1234    	LD	(IX+%6),IY
                           A  1235    ;  118		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A  1236    .LINE 118
                           A  1237    
0B02F3 DD36FF00            A  1238    	LD	(IX+%FFFFFFFF),%0
0B02F7 18 27               A  1239    	JR	L_28
0B02F9                     A  1240    L_26:
                           A  1241    ;  119			if(esp32_magicnumbers[n] != fil
                           A  1242    .LINE 119
                           A  1243    
0B02F9 DD7EFF              A  1244    	LD	A,(IX+%FFFFFFFF)
0B02FC B7ED62              A  1245    	UEXT	HL
0B02FF 6F                  A  1246    	LD	L,A
0B0300 01 F2 20 0B         A  1247    	LD	BC,_esp32_magicnumbers
0B0304 09                  A  1248    	ADD	HL,BC
0B0305 E5FDE1              A  1249    	LD	IY,HL
0B0308 DD7EFF              A  1250    	LD	A,(IX+%FFFFFFFF)
0B030B B7ED62              A  1251    	UEXT	HL
0B030E 6F                  A  1252    	LD	L,A
0B030F DD0706              A  1253    	LD	BC,(IX+%6)
0B0312 09                  A  1254    	ADD	HL,BC
0B0313 FD7E00              A  1255    	LD	A,(IY)
0B0316 BE                  A  1256    	CP	A,(HL)
0B0317 28 04               A  1257    	JR	Z,L_27
0B0319 DD36FE00            A  1258    	LD	(IX+%FFFFFFFE),%0
                           A  1259    ;  120		}
0B031D                     A  1260    L_27:
                           A  1261    .LINE 120
                           A  1262    
0B031D DD34FF              A  1263    	INC	(IX+%FFFFFFFF)
0B0320                     A  1264    L_28:
0B0320 DD7EFF              A  1265    	LD	A,(IX+%FFFFFFFF)
0B0323 FE04                A  1266    	CP	A,%4
0B0325 38 D2               A  1267    	JR	C,L_26
                           A  1268    ;  121		return match;
                           A  1269    .LINE 121
                           A  1270    
0B0327 DD7EFE              A  1271    	LD	A,(IX+%FFFFFFFE)
                           A  1272    ;  122	}
                           A  1273    .LINE 122
                           A  1274    
0B032A DDF9                A  1275    	LD	SP,IX
0B032C DDE1                A  1276    	POP	IX
0B032E C9                  A  1277    	RET	
                           A  1278    
                           A  1279    
                           A  1280    ;**************************** _containsESP32Hea
                           A  1281    ;Name                         Addr/Register   S
                           A  1282    ;_esp32_magicnumbers                 STATIC    
                           A  1283    ;match                                 IX-2    
                           A  1284    ;n                                     IX-1    
                           A  1285    ;filestart                             IX+6    
                           A  1286    
                           A  1287    
                           A  1288    ; Stack Frame Size: 11 (bytes)
                           A  1289    ;       Spill Code: 0 (instruction)
                           A  1290    
                           A  1291    
                           A  1292    .ENDFUNC "containsESP32Header",122,"_containsES
                           A  1293    ;  123	
                           A  1294    ;  124	void print_version(void) {
0B032F                     A  1295    _print_version:
                           A  1296    .DEFINE "_print_version"
                           A  1297    
                           A  1298    .VALUE _print_version
                           A  1299    
                           A  1300    .CLASS 2
                           A  1301    
                           A  1302    .TYPE 65
                           A  1303    
                           A  1304    .ENDEF
                           A  1305    
                           A  1306    .BEGFUNC "print_version",124,"_print_version"
                           A  1307    
0B032F DDE5                A  1308    	PUSH	IX
0B0331 DD210000 00         A  1309    	LD	IX,0
0B0336 DD39                A  1310    	ADD	IX,SP
                           A  1311    ;  125		printf("Agon firmware upgrade utili
                           A  1312    .LINE 125
                           A  1313    
0B0338 01 0F 17 0B         A  1314    	LD	BC,___print_uputch
0B033C ED43 04 28 0B       A  1315    	LD	(___print_xputch),BC
0B0341 01 98 28 0B         A  1316    	LD	BC,L__16
0B0345 C5                  A  1317    	PUSH	BC
0B0346 CD 9E 15 0B         A  1318    	CALL	___print_sendstring
0B034A C1                  A  1319    	POP	BC
                           A  1320    ;  126	}
                           A  1321    .LINE 126
                           A  1322    
0B034B DDF9                A  1323    	LD	SP,IX
0B034D DDE1                A  1324    	POP	IX
0B034F C9                  A  1325    	RET	
                           A  1326    
                           A  1327    
                           A  1328    ;**************************** _print_version **
                           A  1329    ;Name                         Addr/Register   S
                           A  1330    ;___print_sendstring                 IMPORT  --
                           A  1331    ;___print_xputch                     IMPORT    
                           A  1332    ;___print_uputch                     IMPORT  --
                           A  1333    
                           A  1334    
                           A  1335    ; Stack Frame Size: 6 (bytes)
                           A  1336    ;       Spill Code: 0 (instruction)
                           A  1337    
                           A  1338    
                           A  1339    .ENDFUNC "print_version",126,"_print_version"
                           A  1340    	SEGMENT STRSECT
0B2898                     A  1341    L__16:
0B2898 41676F6E 20666972   A  1342    	DB	"Agon firmware upgrade utility v1.6"
0B28A0 6D776172 65207570 
0B28A8 67726164 65207574 
0B28B0 696C6974 79207631 
0B28B8 2E36 
0B28BA 0A0D0A0D 00         A  1343    	DB	10,13,10,13,0
                           A  1344    	SEGMENT CODE
                           A  1345    ;  127	
                           A  1346    ;  128	void usage(void) {
0B0350                     A  1347    _usage:
                           A  1348    .DEFINE "_usage"
                           A  1349    
                           A  1350    .VALUE _usage
                           A  1351    
                           A  1352    .CLASS 2
                           A  1353    
                           A  1354    .TYPE 65
                           A  1355    
                           A  1356    .ENDEF
                           A  1357    
                           A  1358    .BEGFUNC "usage",128,"_usage"
                           A  1359    
0B0350 DDE5                A  1360    	PUSH	IX
0B0352 DD210000 00         A  1361    	LD	IX,0
0B0357 DD39                A  1362    	ADD	IX,SP
                           A  1363    ;  129		print_version();
                           A  1364    .LINE 129
                           A  1365    
0B0359 CD 2F 03 0B         A  1366    	CALL	_print_version
                           A  1367    ;  130		printf("Usage: FLASH [full | [mos <
                           A  1368    .LINE 130
                           A  1369    
0B035D 01 0F 17 0B         A  1370    	LD	BC,___print_uputch
0B0361 ED43 04 28 0B       A  1371    	LD	(___print_xputch),BC
0B0366 01 BF 28 0B         A  1372    	LD	BC,L__18
0B036A C5                  A  1373    	PUSH	BC
0B036B CD 9E 15 0B         A  1374    	CALL	___print_sendstring
0B036F C1                  A  1375    	POP	BC
                           A  1376    ;  131	}
                           A  1377    .LINE 131
                           A  1378    
0B0370 DDF9                A  1379    	LD	SP,IX
0B0372 DDE1                A  1380    	POP	IX
0B0374 C9                  A  1381    	RET	
                           A  1382    
                           A  1383    
                           A  1384    ;**************************** _usage **********
                           A  1385    ;Name                         Addr/Register   S
                           A  1386    ;___print_sendstring                 IMPORT  --
                           A  1387    ;___print_xputch                     IMPORT    
                           A  1388    ;___print_uputch                     IMPORT  --
                           A  1389    
                           A  1390    
                           A  1391    ; Stack Frame Size: 6 (bytes)
                           A  1392    ;       Spill Code: 0 (instruction)
                           A  1393    
                           A  1394    
                           A  1395    .ENDFUNC "usage",131,"_usage"
                           A  1396    	SEGMENT STRSECT
0B28BF                     A  1397    L__18:
0B28BF 55736167 653A2046   A  1398    	DB	"Usage: FLASH [full | [mos <filename>] 
0B28C7 4C415348 205B6675 
0B28CF 6C6C207C 205B6D6F 
0B28D7 73203C66 696C656E 
0B28DF 616D653E 5D205B76 
0B28E7 6470203C 66696C65 
0B28EF 6E616D65 3E5D5D20 
0B28F7 3C2D737C 2D73696C 
0B28FF 656E743E 
0B2903 0A0D00              A  1399    	DB	10,13,0
                           A  1400    	SEGMENT CODE
                           A  1401    ;  132	
                           A  1402    ;  133	typedef enum {
                           A  1403    ;  134		MOS,
                           A  1404    ;  135		VDP
                           A  1405    ;  136	} flashtype;
                           A  1406    ;  137	
                           A  1407    ;  138	bool getResponse(void) {
0B0375                     A  1408    _getResponse:
                           A  1409    .DEFINE "_getResponse"
                           A  1410    
                           A  1411    .VALUE _getResponse
                           A  1412    
                           A  1413    .CLASS 2
                           A  1414    
                           A  1415    .TYPE 76
                           A  1416    
                           A  1417    .ENDEF
                           A  1418    
                           A  1419    .BEGFUNC "getResponse",138,"_getResponse"
                           A  1420    
                           A  1421    .LINE 138
                           A  1422    
                           A  1423    .DEFINE "response"
                           A  1424    
                           A  1425    .CLASS 65
                           A  1426    
                           A  1427    .VALUE -1
                           A  1428    
                           A  1429    .TYPE 12
                           A  1430    
                           A  1431    .ENDEF
                           A  1432    
0B0375 DDE5                A  1433    	PUSH	IX
0B0377 DD210000 00         A  1434    	LD	IX,0
0B037C DD39                A  1435    	ADD	IX,SP
0B037E 3B                  A  1436    	DEC	SP
                           A  1437    ;  139		uint8_t response = 0;
                           A  1438    .LINE 139
                           A  1439    
0B037F DD36FF00            A  1440    	LD	(IX+%FFFFFFFF),%0
                           A  1441    ;  140	
                           A  1442    ;  141		printf("Flash firmware (y/n)?");
                           A  1443    .LINE 141
                           A  1444    
0B0383 01 0F 17 0B         A  1445    	LD	BC,___print_uputch
0B0387 ED43 04 28 0B       A  1446    	LD	(___print_xputch),BC
0B038C 01 06 29 0B         A  1447    	LD	BC,L__20
0B0390 C5                  A  1448    	PUSH	BC
0B0391 CD 9E 15 0B         A  1449    	CALL	___print_sendstring
0B0395 C1                  A  1450    	POP	BC
                           A  1451    ;  142		while((response != 'y') && (respons
                           A  1452    .LINE 142
                           A  1453    
0B0396 18 13               A  1454    	JR	L_34
0B0398                     A  1455    L_35:
0B0398 CD 39 10 0B         A  1456    	CALL	_getch
0B039C 47                  A  1457    	LD	B,A
0B039D 78                  A  1458    	LD	A,B
0B039E 17ED62              A  1459    	SEXT	HL
0B03A1 68                  A  1460    	LD	L,B
0B03A2 E5                  A  1461    	PUSH	HL
0B03A3 CD 59 1E 0B         A  1462    	CALL	_tolower
0B03A7 C1                  A  1463    	POP	BC
0B03A8 DD75FF              A  1464    	LD	(IX+%FFFFFFFF),L
0B03AB                     A  1465    L_34:
0B03AB DD7EFF              A  1466    	LD	A,(IX+%FFFFFFFF)
0B03AE FE79                A  1467    	CP	A,%79
0B03B0 28 07               A  1468    	JR	Z,L_38
0B03B2 DD7EFF              A  1469    	LD	A,(IX+%FFFFFFFF)
0B03B5 FE6E                A  1470    	CP	A,%6E
0B03B7 20 DF               A  1471    	JR	NZ,L_35
0B03B9                     A  1472    L_38:
                           A  1473    ;  143		if(response == 'n') printf("\r\nUse
                           A  1474    .LINE 143
                           A  1475    
0B03B9 DD7EFF              A  1476    	LD	A,(IX+%FFFFFFFF)
0B03BC FE6E                A  1477    	CP	A,%6E
0B03BE 20 15               A  1478    	JR	NZ,L_37
0B03C0 01 0F 17 0B         A  1479    	LD	BC,___print_uputch
0B03C4 ED43 04 28 0B       A  1480    	LD	(___print_xputch),BC
0B03C9 01 1C 29 0B         A  1481    	LD	BC,L__24
0B03CD C5                  A  1482    	PUSH	BC
0B03CE CD 9E 15 0B         A  1483    	CALL	___print_sendstring
0B03D2 C1                  A  1484    	POP	BC
                           A  1485    ;  144		else printf("\r\n\r\n");
                           A  1486    .LINE 144
                           A  1487    
0B03D3 18 13               A  1488    	JR	L_39
0B03D5                     A  1489    L_37:
0B03D5 01 0F 17 0B         A  1490    	LD	BC,___print_uputch
0B03D9 ED43 04 28 0B       A  1491    	LD	(___print_xputch),BC
0B03DE 01 2D 29 0B         A  1492    	LD	BC,L__25
0B03E2 C5                  A  1493    	PUSH	BC
0B03E3 CD 9E 15 0B         A  1494    	CALL	___print_sendstring
0B03E7 C1                  A  1495    	POP	BC
0B03E8                     A  1496    L_39:
                           A  1497    ;  145		return response == 'y';
                           A  1498    .LINE 145
                           A  1499    
0B03E8 DD7EFF              A  1500    	LD	A,(IX+%FFFFFFFF)
0B03EB FE79                A  1501    	CP	A,%79
0B03ED 20 04               A  1502    	JR	NZ,L__27
0B03EF 3E01                A  1503    	LD	A,%1
0B03F1 18 01               A  1504    	JR	L__28
0B03F3                     A  1505    L__27:
0B03F3 AF                  A  1506    	XOR	A,A
0B03F4                     A  1507    L__28:
                           A  1508    ;  146	}
                           A  1509    .LINE 146
                           A  1510    
0B03F4 DDF9                A  1511    	LD	SP,IX
0B03F6 DDE1                A  1512    	POP	IX
0B03F8 C9                  A  1513    	RET	
                           A  1514    
                           A  1515    
                           A  1516    ;**************************** _getResponse ****
                           A  1517    ;Name                         Addr/Register   S
                           A  1518    ;_getch                              IMPORT  --
                           A  1519    ;_tolower                            IMPORT  --
                           A  1520    ;___print_sendstring                 IMPORT  --
                           A  1521    ;___print_xputch                     IMPORT    
                           A  1522    ;___print_uputch                     IMPORT  --
                           A  1523    ;response                              IX-1    
                           A  1524    
                           A  1525    
                           A  1526    ; Stack Frame Size: 7 (bytes)
                           A  1527    ;       Spill Code: 0 (instruction)
                           A  1528    
                           A  1529    
                           A  1530    .ENDFUNC "getResponse",146,"_getResponse"
                           A  1531    	SEGMENT STRSECT
0B2906                     A  1532    L__20:
0B2906 466C6173 68206669   A  1533    	DB	"Flash firmware (y/n)?"
0B290E 726D7761 72652028 
0B2916 792F6E29 3F 
0B291B 00                  A  1534    	DB	0
0B291C                     A  1535    L__24:
0B291C 0D0A                A  1536    	DB	13,10
0B291E 55736572 2061626F   A  1537    	DB	"User abort"
0B2926 7274 
0B2928 0A0D0A0D 00         A  1538    	DB	10,13,10,13,0
0B292D                     A  1539    L__25:
0B292D 0D0A0D0A 00         A  1540    	DB	13,10,13,10,0
                           A  1541    	SEGMENT CODE
                           A  1542    ;  147	
                           A  1543    ;  148	uint8_t update_vdp(char *filename) {
0B03F9                     A  1544    _update_vdp:
                           A  1545    .DEFINE "_update_vdp"
                           A  1546    
                           A  1547    .VALUE _update_vdp
                           A  1548    
                           A  1549    .CLASS 2
                           A  1550    
                           A  1551    .TYPE 76
                           A  1552    
                           A  1553    .ENDEF
                           A  1554    
                           A  1555    .BEGFUNC "update_vdp",148,"_update_vdp"
                           A  1556    
                           A  1557    .LINE 148
                           A  1558    
                           A  1559    .DEFINE "filename"
                           A  1560    
                           A  1561    .CLASS 65
                           A  1562    
                           A  1563    .VALUE 6
                           A  1564    
                           A  1565    .TYPE 34
                           A  1566    
                           A  1567    .ENDEF
                           A  1568    
                           A  1569    .DEFINE "file"
                           A  1570    
                           A  1571    .CLASS 65
                           A  1572    
                           A  1573    .VALUE -1
                           A  1574    
                           A  1575    .TYPE 12
                           A  1576    
                           A  1577    .ENDEF
                           A  1578    
                           A  1579    .DEFINE "filesize"
                           A  1580    
                           A  1581    .CLASS 65
                           A  1582    
                           A  1583    .VALUE -4
                           A  1584    
                           A  1585    .TYPE 14
                           A  1586    
                           A  1587    .ENDEF
                           A  1588    
0B03F9 DDE5                A  1589    	PUSH	IX
0B03FB DD210000 00         A  1590    	LD	IX,0
0B0400 DD39                A  1591    	ADD	IX,SP
0B0402 C5                  A  1592    	PUSH	BC
0B0403 3B                  A  1593    	DEC	SP
                           A  1594    ;  149		uint8_t file;
                           A  1595    ;  150		uint24_t filesize;
                           A  1596    ;  151		uint24_t size, n;
                           A  1597    ;  152	
                           A  1598    ;  153		putch(12); // cls
                           A  1599    .LINE 153
                           A  1600    
0B0404 010C0000            A  1601    	LD	BC,12
0B0408 C5                  A  1602    	PUSH	BC
0B0409 CD E5 00 0B         A  1603    	CALL	_putch
0B040D C1                  A  1604    	POP	BC
                           A  1605    ;  154		print_version();	
                           A  1606    .LINE 154
                           A  1607    
0B040E CD 2F 03 0B         A  1608    	CALL	_print_version
                           A  1609    ;  155		printf("Unlocking VDP updater...\r\
                           A  1610    .LINE 155
                           A  1611    
0B0412 01 0F 17 0B         A  1612    	LD	BC,___print_uputch
0B0416 ED43 04 28 0B       A  1613    	LD	(___print_xputch),BC
0B041B 01 32 29 0B         A  1614    	LD	BC,L__30
0B041F C5                  A  1615    	PUSH	BC
0B0420 CD 9E 15 0B         A  1616    	CALL	___print_sendstring
0B0424 C1                  A  1617    	POP	BC
                           A  1618    ;  156		
                           A  1619    ;  157		if(!vdp_ota_present()) {
                           A  1620    .LINE 157
                           A  1621    
0B0425 CD E3 01 0B         A  1622    	CALL	_vdp_ota_present
0B0429 B7                  A  1623    	OR	A,A
0B042A 20 20               A  1624    	JR	NZ,L_42
                           A  1625    ;  158			printf(" failed - incompatible 
                           A  1626    .LINE 158
                           A  1627    
0B042C 01 0F 17 0B         A  1628    	LD	BC,___print_uputch
0B0430 ED43 04 28 0B       A  1629    	LD	(___print_xputch),BC
0B0435 01 4D 29 0B         A  1630    	LD	BC,L__32
0B0439 C5                  A  1631    	PUSH	BC
0B043A CD 9E 15 0B         A  1632    	CALL	___print_sendstring
0B043E C1                  A  1633    	POP	BC
                           A  1634    ;  159			beep(5);
                           A  1635    .LINE 159
                           A  1636    
0B043F 01050000            A  1637    	LD	BC,5
0B0443 C5                  A  1638    	PUSH	BC
0B0444 CD 0B 01 0B         A  1639    	CALL	_beep
0B0448 C1                  A  1640    	POP	BC
                           A  1641    ;  160			return 0;
                           A  1642    .LINE 160
                           A  1643    
0B0449 AF                  A  1644    	XOR	A,A
0B044A 18 4E               A  1645    	JR	L_43
                           A  1646    ;  161		}
0B044C                     A  1647    L_42:
                           A  1648    .LINE 161
                           A  1649    
                           A  1650    ;  162	
                           A  1651    ;  163		file = mos_fopen(filename, fa_read)
                           A  1652    .LINE 163
                           A  1653    
0B044C 01010000            A  1654    	LD	BC,1
0B0450 C5                  A  1655    	PUSH	BC
0B0451 DD0706              A  1656    	LD	BC,(IX+%6)
0B0454 C5                  A  1657    	PUSH	BC
0B0455 CD 8F 10 0B         A  1658    	CALL	_mos_fopen
0B0459 C1                  A  1659    	POP	BC
0B045A C1                  A  1660    	POP	BC
0B045B DD77FF              A  1661    	LD	(IX+%FFFFFFFF),A
                           A  1662    ;  164		// Do actual work here
                           A  1663    ;  165		printf("Updating VDP firmware\r\n")
                           A  1664    .LINE 165
                           A  1665    
0B045E 01 0F 17 0B         A  1666    	LD	BC,___print_uputch
0B0462 ED43 04 28 0B       A  1667    	LD	(___print_xputch),BC
0B0467 01 6A 29 0B         A  1668    	LD	BC,L__33
0B046B C5                  A  1669    	PUSH	BC
0B046C CD 9E 15 0B         A  1670    	CALL	___print_sendstring
0B0470 C1                  A  1671    	POP	BC
                           A  1672    ;  166		filesize = getFileSize(file);	
                           A  1673    .LINE 166
                           A  1674    
0B0471 DD4EFF              A  1675    	LD	C,(IX+%FFFFFFFF)
0B0474 0600                A  1676    	LD	B,%0
0B0476 C5                  A  1677    	PUSH	BC
0B0477 CD D3 14 0B         A  1678    	CALL	_getFileSize
0B047B C1                  A  1679    	POP	BC
0B047C DD2FFC              A  1680    	LD	(IX+%FFFFFFFC),HL
                           A  1681    ;  167		startVDPupdate(file, filesize);
                           A  1682    .LINE 167
                           A  1683    
0B047F E5C1                A  1684    	LD	BC,HL
0B0481 C5                  A  1685    	PUSH	BC
0B0482 DD4EFF              A  1686    	LD	C,(IX+%FFFFFFFF)
0B0485 0600                A  1687    	LD	B,%0
0B0487 C5                  A  1688    	PUSH	BC
0B0488 CD B6 11 0B         A  1689    	CALL	_startVDPupdate
0B048C C1                  A  1690    	POP	BC
0B048D C1                  A  1691    	POP	BC
                           A  1692    ;  168		mos_fclose(file);
                           A  1693    .LINE 168
                           A  1694    
0B048E DD4EFF              A  1695    	LD	C,(IX+%FFFFFFFF)
0B0491 0600                A  1696    	LD	B,%0
0B0493 C5                  A  1697    	PUSH	BC
0B0494 CD A7 10 0B         A  1698    	CALL	_mos_fclose
0B0498 C1                  A  1699    	POP	BC
                           A  1700    ;  169		return 0;
                           A  1701    .LINE 169
                           A  1702    
0B0499 AF                  A  1703    	XOR	A,A
                           A  1704    ;  170	}
0B049A                     A  1705    L_43:
                           A  1706    .LINE 170
                           A  1707    
0B049A DDF9                A  1708    	LD	SP,IX
0B049C DDE1                A  1709    	POP	IX
0B049E C9                  A  1710    	RET	
                           A  1711    
                           A  1712    
                           A  1713    ;**************************** _update_vdp *****
                           A  1714    ;Name                         Addr/Register   S
                           A  1715    ;_mos_fclose                         IMPORT  --
                           A  1716    ;_startVDPupdate                     IMPORT  --
                           A  1717    ;_getFileSize                        IMPORT  --
                           A  1718    ;_mos_fopen                          IMPORT  --
                           A  1719    ;___print_sendstring                 IMPORT  --
                           A  1720    ;___print_xputch                     IMPORT    
                           A  1721    ;___print_uputch                     IMPORT  --
                           A  1722    ;_putch                              IMPORT  --
                           A  1723    ;filesize                              IX-4    
                           A  1724    ;file                                  IX-1    
                           A  1725    ;filename                              IX+6    
                           A  1726    
                           A  1727    
                           A  1728    ; Stack Frame Size: 13 (bytes)
                           A  1729    ;       Spill Code: 0 (instruction)
                           A  1730    
                           A  1731    
                           A  1732    .ENDFUNC "update_vdp",170,"_update_vdp"
                           A  1733    	SEGMENT STRSECT
0B2932                     A  1734    L__30:
0B2932 556E6C6F 636B696E   A  1735    	DB	"Unlocking VDP updater..."
0B293A 67205644 50207570 
0B2942 64617465 722E2E2E 
0B294A 0D0A00              A  1736    	DB	13,10,0
0B294D                     A  1737    L__32:
0B294D 20666169 6C656420   A  1738    	DB	" failed - incompatible VDP"
0B2955 2D20696E 636F6D70 
0B295D 61746962 6C652056 
0B2965 4450 
0B2967 0D0A00              A  1739    	DB	13,10,0
0B296A                     A  1740    L__33:
0B296A 55706461 74696E67   A  1741    	DB	"Updating VDP firmware"
0B2972 20564450 20666972 
0B297A 6D776172 65 
0B297F 0D0A00              A  1742    	DB	13,10,0
                           A  1743    	SEGMENT CODE
                           A  1744    ;  171	
                           A  1745    ;  172	bool update_mos(char *filename) {
0B049F                     A  1746    _update_mos:
                           A  1747    .DEFINE "_update_mos"
                           A  1748    
                           A  1749    .VALUE _update_mos
                           A  1750    
                           A  1751    .CLASS 2
                           A  1752    
                           A  1753    .TYPE 76
                           A  1754    
                           A  1755    .ENDEF
                           A  1756    
                           A  1757    .BEGFUNC "update_mos",172,"_update_mos"
                           A  1758    
                           A  1759    .LINE 172
                           A  1760    
                           A  1761    .DEFINE "filename"
                           A  1762    
                           A  1763    .CLASS 65
                           A  1764    
                           A  1765    .VALUE 6
                           A  1766    
                           A  1767    .TYPE 34
                           A  1768    
                           A  1769    .ENDEF
                           A  1770    
                           A  1771    .DEFINE "counter"
                           A  1772    
                           A  1773    .CLASS 65
                           A  1774    
                           A  1775    .VALUE -3
                           A  1776    
                           A  1777    .TYPE 14
                           A  1778    
                           A  1779    .ENDEF
                           A  1780    
                           A  1781    .DEFINE "attempt"
                           A  1782    
                           A  1783    .CLASS 65
                           A  1784    
                           A  1785    .VALUE -6
                           A  1786    
                           A  1787    .TYPE 4
                           A  1788    
                           A  1789    .ENDEF
                           A  1790    
                           A  1791    .DEFINE "pagemax"
                           A  1792    
                           A  1793    .CLASS 65
                           A  1794    
                           A  1795    .VALUE -9
                           A  1796    
                           A  1797    .TYPE 14
                           A  1798    
                           A  1799    .ENDEF
                           A  1800    
                           A  1801    .DEFINE "success"
                           A  1802    
                           A  1803    .CLASS 65
                           A  1804    
                           A  1805    .VALUE -10
                           A  1806    
                           A  1807    .TYPE 12
                           A  1808    
                           A  1809    .ENDEF
                           A  1810    
                           A  1811    .DEFINE "addressto"
                           A  1812    
                           A  1813    .CLASS 65
                           A  1814    
                           A  1815    .VALUE -13
                           A  1816    
                           A  1817    .TYPE 14
                           A  1818    
                           A  1819    .ENDEF
                           A  1820    
                           A  1821    .DEFINE "addressfrom"
                           A  1822    
                           A  1823    .CLASS 65
                           A  1824    
                           A  1825    .VALUE -16
                           A  1826    
                           A  1827    .TYPE 14
                           A  1828    
                           A  1829    .ENDEF
                           A  1830    
                           A  1831    .DEFINE "file"
                           A  1832    
                           A  1833    .CLASS 65
                           A  1834    
                           A  1835    .VALUE -17
                           A  1836    
                           A  1837    .TYPE 12
                           A  1838    
                           A  1839    .ENDEF
                           A  1840    
                           A  1841    .DEFINE "ptr"
                           A  1842    
                           A  1843    .CLASS 65
                           A  1844    
                           A  1845    .VALUE -20
                           A  1846    
                           A  1847    .TYPE 34
                           A  1848    
                           A  1849    .ENDEF
                           A  1850    
                           A  1851    .DEFINE "filesize"
                           A  1852    
                           A  1853    .CLASS 65
                           A  1854    
                           A  1855    .VALUE -23
                           A  1856    
                           A  1857    .TYPE 14
                           A  1858    
                           A  1859    .ENDEF
                           A  1860    
                           A  1861    .DEFINE "got"
                           A  1862    
                           A  1863    .CLASS 65
                           A  1864    
                           A  1865    .VALUE -26
                           A  1866    
                           A  1867    .TYPE 14
                           A  1868    
                           A  1869    .ENDEF
                           A  1870    
                           A  1871    .DEFINE "value"
                           A  1872    
                           A  1873    .CLASS 65
                           A  1874    
                           A  1875    .VALUE -27
                           A  1876    
                           A  1877    .TYPE 12
                           A  1878    
                           A  1879    .ENDEF
                           A  1880    
                           A  1881    .DEFINE "lastpagebytes"
                           A  1882    
                           A  1883    .CLASS 65
                           A  1884    
                           A  1885    .VALUE -30
                           A  1886    
                           A  1887    .TYPE 14
                           A  1888    
                           A  1889    .ENDEF
                           A  1890    
                           A  1891    .DEFINE "crcresult"
                           A  1892    
                           A  1893    .CLASS 65
                           A  1894    
                           A  1895    .VALUE -34
                           A  1896    
                           A  1897    .TYPE 15
                           A  1898    
                           A  1899    .ENDEF
                           A  1900    
0B049F DDE5                A  1901    	PUSH	IX
0B04A1 DD210000 00         A  1902    	LD	IX,0
0B04A6 DD39                A  1903    	ADD	IX,SP
0B04A8 ED22DB              A  1904    	LEA	HL,IX+%FFFFFFDB
0B04AB F9                  A  1905    	LD	SP,HL
                           A  1906    ;  173		uint32_t crcresult;
                           A  1907    ;  174		uint24_t got;
                           A  1908    ;  175		uint8_t file;
                           A  1909    ;  176		char* ptr = (char*)BUFFER1;
                           A  1910    .LINE 176
                           A  1911    
0B04AC 01000005            A  1912    	LD	BC,327680
0B04B0 DD0FEC              A  1913    	LD	(IX+%FFFFFFEC),BC
                           A  1914    ;  177		uint8_t value;
                           A  1915    ;  178		uint24_t counter,pagemax, lastpageb
                           A  1916    ;  179		uint24_t addressto,addressfrom;
                           A  1917    ;  180		uint24_t filesize;
                           A  1918    ;  181		int attempt;
                           A  1919    ;  182		bool success = false;
                           A  1920    .LINE 182
                           A  1921    
0B04B3 DD36F600            A  1922    	LD	(IX+%FFFFFFF6),%0
                           A  1923    ;  183	
                           A  1924    ;  184		putch(12); // cls
                           A  1925    .LINE 184
                           A  1926    
0B04B7 010C0000            A  1927    	LD	BC,12
0B04BB C5                  A  1928    	PUSH	BC
0B04BC CD E5 00 0B         A  1929    	CALL	_putch
0B04C0 C1                  A  1930    	POP	BC
                           A  1931    ;  185		print_version();	
                           A  1932    .LINE 185
                           A  1933    
0B04C1 CD 2F 03 0B         A  1934    	CALL	_print_version
                           A  1935    ;  186		
                           A  1936    ;  187		printf("Programming MOS firmware to
                           A  1937    .LINE 187
                           A  1938    
0B04C5 01 0F 17 0B         A  1939    	LD	BC,___print_uputch
0B04C9 ED43 04 28 0B       A  1940    	LD	(___print_xputch),BC
0B04CE 01 82 29 0B         A  1941    	LD	BC,L__35
0B04D2 C5                  A  1942    	PUSH	BC
0B04D3 CD 9E 15 0B         A  1943    	CALL	___print_sendstring
0B04D7 C1                  A  1944    	POP	BC
                           A  1945    ;  188		printf("Reading MOS firmware");
                           A  1946    .LINE 188
                           A  1947    
0B04D8 01 0F 17 0B         A  1948    	LD	BC,___print_uputch
0B04DC ED43 04 28 0B       A  1949    	LD	(___print_xputch),BC
0B04E1 01 B0 29 0B         A  1950    	LD	BC,L__36
0B04E5 C5                  A  1951    	PUSH	BC
0B04E6 CD 9E 15 0B         A  1952    	CALL	___print_sendstring
0B04EA C1                  A  1953    	POP	BC
                           A  1954    ;  189		file = mos_fopen(filename, fa_read)
                           A  1955    .LINE 189
                           A  1956    
0B04EB 01010000            A  1957    	LD	BC,1
0B04EF C5                  A  1958    	PUSH	BC
0B04F0 DD0706              A  1959    	LD	BC,(IX+%6)
0B04F3 C5                  A  1960    	PUSH	BC
0B04F4 CD 8F 10 0B         A  1961    	CALL	_mos_fopen
0B04F8 C1                  A  1962    	POP	BC
0B04F9 C1                  A  1963    	POP	BC
0B04FA DD77EF              A  1964    	LD	(IX+%FFFFFFEF),A
                           A  1965    ;  190		filesize = getFileSize(file);
                           A  1966    .LINE 190
                           A  1967    
0B04FD DD4EEF              A  1968    	LD	C,(IX+%FFFFFFEF)
0B0500 0600                A  1969    	LD	B,%0
0B0502 C5                  A  1970    	PUSH	BC
0B0503 CD D3 14 0B         A  1971    	CALL	_getFileSize
0B0507 C1                  A  1972    	POP	BC
0B0508 DD2FE9              A  1973    	LD	(IX+%FFFFFFE9),HL
                           A  1974    ;  191		// Read file to memory
                           A  1975    ;  192		crc32_initialize();
                           A  1976    .LINE 192
                           A  1977    
0B050B CD 21 14 0B         A  1978    	CALL	_crc32_initialize
                           A  1979    ;  193		while((got = mos_fread(file, ptr, B
                           A  1980    .LINE 193
                           A  1981    
0B050F 18 22               A  1982    	JR	L_44
0B0511                     A  1983    L_45:
                           A  1984    ;  194			crc32(ptr, got);
                           A  1985    .LINE 194
                           A  1986    
0B0511 DD07E6              A  1987    	LD	BC,(IX+%FFFFFFE6)
0B0514 C5                  A  1988    	PUSH	BC
0B0515 DD07EC              A  1989    	LD	BC,(IX+%FFFFFFEC)
0B0518 C5                  A  1990    	PUSH	BC
0B0519 CD 73 14 0B         A  1991    	CALL	_crc32
0B051D C1                  A  1992    	POP	BC
0B051E C1                  A  1993    	POP	BC
                           A  1994    ;  195			ptr += got;
                           A  1995    .LINE 195
                           A  1996    
0B051F DD07E6              A  1997    	LD	BC,(IX+%FFFFFFE6)
0B0522 DD27EC              A  1998    	LD	HL,(IX+%FFFFFFEC)
0B0525 09                  A  1999    	ADD	HL,BC
0B0526 DD2FEC              A  2000    	LD	(IX+%FFFFFFEC),HL
                           A  2001    ;  196			putch('.');
                           A  2002    .LINE 196
                           A  2003    
0B0529 012E0000            A  2004    	LD	BC,46
0B052D C5                  A  2005    	PUSH	BC
0B052E CD E5 00 0B         A  2006    	CALL	_putch
0B0532 C1                  A  2007    	POP	BC
                           A  2008    ;  197		}
0B0533                     A  2009    L_44:
                           A  2010    .LINE 197
                           A  2011    
0B0533 01004000            A  2012    	LD	BC,16384
0B0537 C5                  A  2013    	PUSH	BC
0B0538 DD07EC              A  2014    	LD	BC,(IX+%FFFFFFEC)
0B053B C5                  A  2015    	PUSH	BC
0B053C DD4EEF              A  2016    	LD	C,(IX+%FFFFFFEF)
0B053F 0600                A  2017    	LD	B,%0
0B0541 C5                  A  2018    	PUSH	BC
0B0542 CD D1 10 0B         A  2019    	CALL	_mos_fread
0B0546 C1                  A  2020    	POP	BC
0B0547 C1                  A  2021    	POP	BC
0B0548 C1                  A  2022    	POP	BC
0B0549 DD2FE6              A  2023    	LD	(IX+%FFFFFFE6),HL
0B054C E5C1                A  2024    	LD	BC,HL
0B054E B7                  A  2025    	OR	A,A
0B054F ED62                A  2026    	SBC	HL,HL
0B0551 B7                  A  2027    	OR	A,A
0B0552 ED42                A  2028    	SBC	HL,BC
0B0554 38 BB               A  2029    	JR	C,L_45
                           A  2030    ;  198		crcresult = crc32_finalize();
                           A  2031    .LINE 198
                           A  2032    
0B0556 CD 36 14 0B         A  2033    	CALL	_crc32_finalize
0B055A DD2FDE              A  2034    	LD	(IX+%FFFFFFDE),HL
0B055D DD73E1              A  2035    	LD	(IX+%FFFFFFE1),E
                           A  2036    ;  199		printf("\r\n");
                           A  2037    .LINE 199
                           A  2038    
0B0560 01 0F 17 0B         A  2039    	LD	BC,___print_uputch
0B0564 ED43 04 28 0B       A  2040    	LD	(___print_xputch),BC
0B0569 01 C5 29 0B         A  2041    	LD	BC,L__38
0B056D C5                  A  2042    	PUSH	BC
0B056E CD 9E 15 0B         A  2043    	CALL	___print_sendstring
0B0572 C1                  A  2044    	POP	BC
                           A  2045    ;  200		// Final memory check to given crc3
                           A  2046    ;  201		if(crcresult != moscrc) {
                           A  2047    .LINE 201
                           A  2048    
0B0573 2A F9 21 0B         A  2049    	LD	HL,(_moscrc)
0B0577 3A FC 21 0B         A  2050    	LD	A,(_moscrc+3)
0B057B 5F                  A  2051    	LD	E,A
0B057C DD07DE              A  2052    	LD	BC,(IX+%FFFFFFDE)
0B057F DD7EE1              A  2053    	LD	A,(IX+%FFFFFFE1)
0B0582 CD F1 1D 0B         A  2054    	CALL	__lcmpu
0B0586 28 18               A  2055    	JR	Z,L_48
                           A  2056    ;  202			printf("Error reading file to m
                           A  2057    .LINE 202
                           A  2058    
0B0588 01 0F 17 0B         A  2059    	LD	BC,___print_uputch
0B058C ED43 04 28 0B       A  2060    	LD	(___print_xputch),BC
0B0591 01 C8 29 0B         A  2061    	LD	BC,L__40
0B0595 C5                  A  2062    	PUSH	BC
0B0596 CD 9E 15 0B         A  2063    	CALL	___print_sendstring
0B059A C1                  A  2064    	POP	BC
                           A  2065    ;  203			return false;
                           A  2066    .LINE 203
                           A  2067    
0B059B AF                  A  2068    	XOR	A,A
0B059C C3 0E 08 0B         A  2069    	JR	L_77
                           A  2070    ;  204		}
0B05A0                     A  2071    L_48:
                           A  2072    .LINE 204
                           A  2073    
                           A  2074    ;  205		printf("\r\n");	
                           A  2075    .LINE 205
                           A  2076    
0B05A0 01 0F 17 0B         A  2077    	LD	BC,___print_uputch
0B05A4 ED43 04 28 0B       A  2078    	LD	(___print_xputch),BC
0B05A9 01 E7 29 0B         A  2079    	LD	BC,L__41
0B05AD C5                  A  2080    	PUSH	BC
0B05AE CD 9E 15 0B         A  2081    	CALL	___print_sendstring
0B05B2 C1                  A  2082    	POP	BC
                           A  2083    ;  206		// Actual work here	
                           A  2084    ;  207		di();								
                           A  2085    .LINE 207
                           A  2086    
0B05B3 F3                  A  2087    	di
                           A  2088    ;  208	
                           A  2089    ;  209		attempt = 0;
                           A  2090    .LINE 209
                           A  2091    
0B05B4 01000000            A  2092    	LD	BC,0
0B05B8 DD0FFA              A  2093    	LD	(IX+%FFFFFFFA),BC
                           A  2094    ;  210		while((!success) && (attempt < 3)) 
                           A  2095    .LINE 210
                           A  2096    
0B05BB C3 E4 07 0B         A  2097    	JR	L_74
0B05BF                     A  2098    L_75:
                           A  2099    ;  211			// start address in flash
                           A  2100    ;  212			addressto = FLASHSTART;
                           A  2101    .LINE 212
                           A  2102    
0B05BF 01000000            A  2103    	LD	BC,0
0B05C3 DD0FF3              A  2104    	LD	(IX+%FFFFFFF3),BC
                           A  2105    ;  213			addressfrom = BUFFER1;
                           A  2106    .LINE 213
                           A  2107    
0B05C6 01000005            A  2108    	LD	BC,327680
0B05CA DD0FF0              A  2109    	LD	(IX+%FFFFFFF0),BC
                           A  2110    ;  214			// Write attempt#
                           A  2111    ;  215			if(attempt > 0) printf("Retry a
                           A  2112    .LINE 215
                           A  2113    
0B05CD DD07FA              A  2114    	LD	BC,(IX+%FFFFFFFA)
0B05D0 B7                  A  2115    	OR	A,A
0B05D1 ED62                A  2116    	SBC	HL,HL
0B05D3 B7                  A  2117    	OR	A,A
0B05D4 ED42                A  2118    	SBC	HL,BC
0B05D6 F2 0B 06 0B         A  2119    	JP	P,L_51
0B05DA 01 0F 17 0B         A  2120    	LD	BC,___print_uputch
0B05DE ED43 04 28 0B       A  2121    	LD	(___print_xputch),BC
0B05E3 01 EA 29 0B         A  2122    	LD	BC,L__43
0B05E7 C5                  A  2123    	PUSH	BC
0B05E8 CD 9E 15 0B         A  2124    	CALL	___print_sendstring
0B05EC C1                  A  2125    	POP	BC
0B05ED DD07FA              A  2126    	LD	BC,(IX+%FFFFFFFA)
0B05F0 CD A7 1D 0B         A  2127    	CALL	__itol
0B05F4 C5D1                A  2128    	LD	DE,BC
0B05F6 4F                  A  2129    	LD	C,A
0B05F7 0600                A  2130    	LD	B,%0
0B05F9 C5                  A  2131    	PUSH	BC
0B05FA D5                  A  2132    	PUSH	DE
0B05FB CD 95 17 0B         A  2133    	CALL	__u_itoa
0B05FF C1                  A  2134    	POP	BC
0B0600 C1                  A  2135    	POP	BC
0B0601 01 FA 29 0B         A  2136    	LD	BC,L__44
0B0605 C5                  A  2137    	PUSH	BC
0B0606 CD 9E 15 0B         A  2138    	CALL	___print_sendstring
0B060A C1                  A  2139    	POP	BC
0B060B                     A  2140    L_51:
                           A  2141    ;  216			// Unprotect and erase flash
                           A  2142    ;  217			printf("Erasing flash... ");
                           A  2143    .LINE 217
                           A  2144    
0B060B 01 0F 17 0B         A  2145    	LD	BC,___print_uputch
0B060F ED43 04 28 0B       A  2146    	LD	(___print_xputch),BC
0B0614 01 FD 29 0B         A  2147    	LD	BC,L__45
0B0618 C5                  A  2148    	PUSH	BC
0B0619 CD 9E 15 0B         A  2149    	CALL	___print_sendstring
0B061D C1                  A  2150    	POP	BC
                           A  2151    ;  218			enableFlashKeyRegister();	// 
                           A  2152    .LINE 218
                           A  2153    
0B061E CD 6A 11 0B         A  2154    	CALL	_enableFlashKeyRegister
                           A  2155    ;  219			FLASH_PROT = 0;				// 
                           A  2156    .LINE 219
                           A  2157    
0B0622 AF                  A  2158    	XOR	A,A
0B0623 ED39FA              A  2159    	OUT0	(250),A
                           A  2160    ;  220			enableFlashKeyRegister();	// 
                           A  2161    .LINE 220
                           A  2162    
0B0626 CD 6A 11 0B         A  2163    	CALL	_enableFlashKeyRegister
                           A  2164    ;  221			FLASH_FDIV = 0x5F;			// 
                           A  2165    .LINE 221
                           A  2166    
0B062A 3E5F                A  2167    	LD	A,%5F
0B062C ED39F9              A  2168    	OUT0	(249),A
                           A  2169    ;  222			
                           A  2170    ;  223			for(counter = 0; counter < FLAS
                           A  2171    .LINE 223
                           A  2172    
0B062F 01000000            A  2173    	LD	BC,0
0B0633 DD0FFD              A  2174    	LD	(IX+%FFFFFFFD),BC
0B0636 18 1C               A  2175    	JR	L_57
0B0638                     A  2176    L_55:
                           A  2177    ;  224			{
                           A  2178    ;  225				FLASH_PAGE = counter;
                           A  2179    .LINE 225
                           A  2180    
0B0638 DD7EFD              A  2181    	LD	A,(IX+%FFFFFFFD)
0B063B ED39FC              A  2182    	OUT0	(252),A
                           A  2183    ;  226				FLASH_PGCTL = 0x02;			
                           A  2184    .LINE 226
                           A  2185    
0B063E 3E02                A  2186    	LD	A,%2
0B0640 ED39FF              A  2187    	OUT0	(255),A
                           A  2188    ;  227	
                           A  2189    ;  228				do
0B0643                     A  2190    L_53:
                           A  2191    .LINE 228
                           A  2192    
                           A  2193    ;  229				{
                           A  2194    ;  230					value = FLASH_PGCTL;
                           A  2195    .LINE 230
                           A  2196    
0B0643 ED38FF              A  2197    	IN0	A,(255)
0B0646 DD77E5              A  2198    	LD	(IX+%FFFFFFE5),A
                           A  2199    ;  231				}
                           A  2200    ;  232				while(value & 0x02);// wait
                           A  2201    .LINE 232
                           A  2202    
0B0649 E602                A  2203    	AND	A,%2
0B064B 20 F6               A  2204    	JR	NZ,L_53
0B064D DD07FD              A  2205    	LD	BC,(IX+%FFFFFFFD)
0B0650 03                  A  2206    	INC	BC
0B0651 DD0FFD              A  2207    	LD	(IX+%FFFFFFFD),BC
                           A  2208    ;  233			}
0B0654                     A  2209    L_57:
                           A  2210    .LINE 233
                           A  2211    
0B0654 01800000            A  2212    	LD	BC,128
0B0658 DD27FD              A  2213    	LD	HL,(IX+%FFFFFFFD)
0B065B B7                  A  2214    	OR	A,A
0B065C ED42                A  2215    	SBC	HL,BC
0B065E 38 D8               A  2216    	JR	C,L_55
                           A  2217    ;  234			printf("\r\n");
                           A  2218    .LINE 234
                           A  2219    
0B0660 01 0F 17 0B         A  2220    	LD	BC,___print_uputch
0B0664 ED43 04 28 0B       A  2221    	LD	(___print_xputch),BC
0B0669 01 0F 2A 0B         A  2222    	LD	BC,L__48
0B066D C5                  A  2223    	PUSH	BC
0B066E CD 9E 15 0B         A  2224    	CALL	___print_sendstring
0B0672 C1                  A  2225    	POP	BC
                           A  2226    ;  235					
                           A  2227    ;  236			// determine number of pages to
                           A  2228    ;  237			pagemax = filesize/PAGESIZE;
                           A  2229    .LINE 237
                           A  2230    
0B0673 DD27E9              A  2231    	LD	HL,(IX+%FFFFFFE9)
0B0676 3E0A                A  2232    	LD	A,%A
0B0678 CD 82 1D 0B         A  2233    	CALL	__ishru_b
0B067C DD2FF7              A  2234    	LD	(IX+%FFFFFFF7),HL
                           A  2235    ;  238			if(filesize%PAGESIZE) // last p
                           A  2236    .LINE 238
                           A  2237    
0B067F 01FF0300            A  2238    	LD	BC,1023
0B0683 DD27E9              A  2239    	LD	HL,(IX+%FFFFFFE9)
0B0686 CD 2E 1E 0B         A  2240    	CALL	__iand
0B068A DD2FDB              A  2241    	LD	(IX+%FFFFFFDB),HL
0B068D CD CC 1A 0B         A  2242    	CALL	__icmpzero
0B0691 28 0F               A  2243    	JR	Z,L_60
                           A  2244    ;  239			{
                           A  2245    ;  240				pagemax += 1;
                           A  2246    .LINE 240
                           A  2247    
0B0693 DD07F7              A  2248    	LD	BC,(IX+%FFFFFFF7)
0B0696 03                  A  2249    	INC	BC
0B0697 DD0FF7              A  2250    	LD	(IX+%FFFFFFF7),BC
                           A  2251    ;  241				lastpagebytes = filesize%PA
                           A  2252    .LINE 241
                           A  2253    
0B069A DD07DB              A  2254    	LD	BC,(IX+%FFFFFFDB)
0B069D DD0FE2              A  2255    	LD	(IX+%FFFFFFE2),BC
                           A  2256    ;  242			}
                           A  2257    ;  243			else lastpagebytes = PAGESIZE; 
                           A  2258    .LINE 243
                           A  2259    
0B06A0 18 07               A  2260    	JR	L_68
0B06A2                     A  2261    L_60:
0B06A2 01000400            A  2262    	LD	BC,1024
0B06A6 DD0FE2              A  2263    	LD	(IX+%FFFFFFE2),BC
0B06A9                     A  2264    L_68:
                           A  2265    ;  244			
                           A  2266    ;  245			// write out each page to flash
                           A  2267    ;  246			for(counter = 0; counter < page
                           A  2268    .LINE 246
                           A  2269    
0B06A9 01000000            A  2270    	LD	BC,0
0B06AD DD0FFD              A  2271    	LD	(IX+%FFFFFFFD),BC
0B06B0 C3 5C 07 0B         A  2272    	JR	L_67
0B06B4                     A  2273    L_65:
                           A  2274    ;  247			{
                           A  2275    ;  248				printf("\rWriting flash pag
                           A  2276    .LINE 248
                           A  2277    
0B06B4 01 0F 17 0B         A  2278    	LD	BC,___print_uputch
0B06B8 ED43 04 28 0B       A  2279    	LD	(___print_xputch),BC
0B06BD 01 12 2A 0B         A  2280    	LD	BC,L__50
0B06C1 C5                  A  2281    	PUSH	BC
0B06C2 CD 9E 15 0B         A  2282    	CALL	___print_sendstring
0B06C6 C1                  A  2283    	POP	BC
0B06C7 3E03                A  2284    	LD	A,%3
0B06C9 32 14 23 0B         A  2285    	LD	(___print_fmt+5),A
0B06CD 3E40                A  2286    	LD	A,%40
0B06CF 32 10 23 0B         A  2287    	LD	(___print_fmt+1),A
0B06D3 DD07FD              A  2288    	LD	BC,(IX+%FFFFFFFD)
0B06D6 03                  A  2289    	INC	BC
0B06D7 AF                  A  2290    	XOR	A,A
0B06D8 C5D1                A  2291    	LD	DE,BC
0B06DA 4F                  A  2292    	LD	C,A
0B06DB 0600                A  2293    	LD	B,%0
0B06DD C5                  A  2294    	PUSH	BC
0B06DE D5                  A  2295    	PUSH	DE
0B06DF CD 95 17 0B         A  2296    	CALL	__u_itoa
0B06E3 C1                  A  2297    	POP	BC
0B06E4 C1                  A  2298    	POP	BC
0B06E5 012F0000            A  2299    	LD	BC,47
0B06E9 C5                  A  2300    	PUSH	BC
0B06EA CD 0F 17 0B         A  2301    	CALL	___print_uputch
0B06EE C1                  A  2302    	POP	BC
0B06EF 3E03                A  2303    	LD	A,%3
0B06F1 32 14 23 0B         A  2304    	LD	(___print_fmt+5),A
0B06F5 3E40                A  2305    	LD	A,%40
0B06F7 32 10 23 0B         A  2306    	LD	(___print_fmt+1),A
0B06FB DD07F7              A  2307    	LD	BC,(IX+%FFFFFFF7)
0B06FE AF                  A  2308    	XOR	A,A
0B06FF C5D1                A  2309    	LD	DE,BC
0B0701 4F                  A  2310    	LD	C,A
0B0702 0600                A  2311    	LD	B,%0
0B0704 C5                  A  2312    	PUSH	BC
0B0705 D5                  A  2313    	PUSH	DE
0B0706 CD 95 17 0B         A  2314    	CALL	__u_itoa
0B070A C1                  A  2315    	POP	BC
0B070B C1                  A  2316    	POP	BC
                           A  2317    ;  249				
                           A  2318    ;  250				if(counter == (pagemax - 1)
                           A  2319    .LINE 250
                           A  2320    
0B070C DD31F7              A  2321    	LD	IY,(IX+%FFFFFFF7)
0B070F ED23FF              A  2322    	LEA	HL,IY+%FFFFFFFF
0B0712 DD07FD              A  2323    	LD	BC,(IX+%FFFFFFFD)
0B0715 B7                  A  2324    	OR	A,A
0B0716 ED42                A  2325    	SBC	HL,BC
0B0718 20 15               A  2326    	JR	NZ,L_63
                           A  2327    ;  251					fastmemcpy(addressto,ad
                           A  2328    .LINE 251
                           A  2329    
0B071A DD07E2              A  2330    	LD	BC,(IX+%FFFFFFE2)
0B071D C5                  A  2331    	PUSH	BC
0B071E DD07F0              A  2332    	LD	BC,(IX+%FFFFFFF0)
0B0721 C5                  A  2333    	PUSH	BC
0B0722 DD07F3              A  2334    	LD	BC,(IX+%FFFFFFF3)
0B0725 C5                  A  2335    	PUSH	BC
0B0726 CD 97 11 0B         A  2336    	CALL	_fastmemcpy
0B072A C1                  A  2337    	POP	BC
0B072B C1                  A  2338    	POP	BC
0B072C C1                  A  2339    	POP	BC
                           A  2340    ;  252					//printf("Fake copy to 
                           A  2341    ;  253				else 
                           A  2342    .LINE 253
                           A  2343    
0B072D 18 14               A  2344    	JR	L_64
0B072F                     A  2345    L_63:
                           A  2346    ;  254					fastmemcpy(addressto,ad
                           A  2347    .LINE 254
                           A  2348    
0B072F 01000400            A  2349    	LD	BC,1024
0B0733 C5                  A  2350    	PUSH	BC
0B0734 DD07F0              A  2351    	LD	BC,(IX+%FFFFFFF0)
0B0737 C5                  A  2352    	PUSH	BC
0B0738 DD07F3              A  2353    	LD	BC,(IX+%FFFFFFF3)
0B073B C5                  A  2354    	PUSH	BC
0B073C CD 97 11 0B         A  2355    	CALL	_fastmemcpy
0B0740 C1                  A  2356    	POP	BC
0B0741 C1                  A  2357    	POP	BC
0B0742 C1                  A  2358    	POP	BC
0B0743                     A  2359    L_64:
                           A  2360    ;  255					//printf("Fake copy to 
                           A  2361    ;  256			
                           A  2362    ;  257				addressto += PAGESIZE;
                           A  2363    .LINE 257
                           A  2364    
0B0743 01000400            A  2365    	LD	BC,1024
0B0747 DD27F3              A  2366    	LD	HL,(IX+%FFFFFFF3)
0B074A 09                  A  2367    	ADD	HL,BC
0B074B DD2FF3              A  2368    	LD	(IX+%FFFFFFF3),HL
                           A  2369    ;  258				addressfrom += PAGESIZE;
                           A  2370    .LINE 258
                           A  2371    
0B074E DD27F0              A  2372    	LD	HL,(IX+%FFFFFFF0)
0B0751 09                  A  2373    	ADD	HL,BC
0B0752 DD2FF0              A  2374    	LD	(IX+%FFFFFFF0),HL
0B0755 DD07FD              A  2375    	LD	BC,(IX+%FFFFFFFD)
0B0758 03                  A  2376    	INC	BC
0B0759 DD0FFD              A  2377    	LD	(IX+%FFFFFFFD),BC
                           A  2378    ;  259			}
0B075C                     A  2379    L_67:
                           A  2380    .LINE 259
                           A  2381    
0B075C DD07F7              A  2382    	LD	BC,(IX+%FFFFFFF7)
0B075F DD27FD              A  2383    	LD	HL,(IX+%FFFFFFFD)
0B0762 B7                  A  2384    	OR	A,A
0B0763 ED42                A  2385    	SBC	HL,BC
0B0765 DA B4 06 0B         A  2386    	JR	C,L_65
                           A  2387    ;  260			lockFlashKeyRegister();	// lock
                           A  2388    .LINE 260
                           A  2389    
0B0769 CD 82 11 0B         A  2390    	CALL	_lockFlashKeyRegister
                           A  2391    ;  261			printf("\r\nCalculating Flash C
                           A  2392    .LINE 261
                           A  2393    
0B076D 01 0F 17 0B         A  2394    	LD	BC,___print_uputch
0B0771 ED43 04 28 0B       A  2395    	LD	(___print_xputch),BC
0B0776 01 27 2A 0B         A  2396    	LD	BC,L__53
0B077A C5                  A  2397    	PUSH	BC
0B077B CD 9E 15 0B         A  2398    	CALL	___print_sendstring
0B077F C1                  A  2399    	POP	BC
                           A  2400    ;  262			crc32_initialize();
                           A  2401    .LINE 262
                           A  2402    
0B0780 CD 21 14 0B         A  2403    	CALL	_crc32_initialize
                           A  2404    ;  263			crc32(FLASHSTART, filesize);
                           A  2405    .LINE 263
                           A  2406    
0B0784 DD07E9              A  2407    	LD	BC,(IX+%FFFFFFE9)
0B0787 C5                  A  2408    	PUSH	BC
0B0788 01000000            A  2409    	LD	BC,0
0B078C C5                  A  2410    	PUSH	BC
0B078D CD 73 14 0B         A  2411    	CALL	_crc32
0B0791 C1                  A  2412    	POP	BC
0B0792 C1                  A  2413    	POP	BC
                           A  2414    ;  264			crcresult = crc32_finalize();
                           A  2415    .LINE 264
                           A  2416    
0B0793 CD 36 14 0B         A  2417    	CALL	_crc32_finalize
0B0797 E5C1                A  2418    	LD	BC,HL
0B0799 DD0FDE              A  2419    	LD	(IX+%FFFFFFDE),BC
0B079C DD73E1              A  2420    	LD	(IX+%FFFFFFE1),E
                           A  2421    ;  265			if(crcresult == moscrc) {
                           A  2422    .LINE 265
                           A  2423    
0B079F 2A F9 21 0B         A  2424    	LD	HL,(_moscrc)
0B07A3 3A FC 21 0B         A  2425    	LD	A,(_moscrc+3)
0B07A7 5F                  A  2426    	LD	E,A
0B07A8 DD7EE1              A  2427    	LD	A,(IX+%FFFFFFE1)
0B07AB CD F1 1D 0B         A  2428    	CALL	__lcmpu
0B07AF 20 19               A  2429    	JR	NZ,L_71
                           A  2430    ;  266				printf("OK\r\n");
                           A  2431    .LINE 266
                           A  2432    
0B07B1 01 0F 17 0B         A  2433    	LD	BC,___print_uputch
0B07B5 ED43 04 28 0B       A  2434    	LD	(___print_xputch),BC
0B07BA 01 42 2A 0B         A  2435    	LD	BC,L__55
0B07BE C5                  A  2436    	PUSH	BC
0B07BF CD 9E 15 0B         A  2437    	CALL	___print_sendstring
0B07C3 C1                  A  2438    	POP	BC
                           A  2439    ;  267				success = true;
                           A  2440    .LINE 267
                           A  2441    
0B07C4 DD36F601            A  2442    	LD	(IX+%FFFFFFF6),%1
                           A  2443    ;  268			}
                           A  2444    ;  269			else {
                           A  2445    .LINE 269
                           A  2446    
0B07C8 18 13               A  2447    	JR	L_73
0B07CA                     A  2448    L_71:
                           A  2449    ;  270				printf("ERROR\r\n");
                           A  2450    .LINE 270
                           A  2451    
0B07CA 01 0F 17 0B         A  2452    	LD	BC,___print_uputch
0B07CE ED43 04 28 0B       A  2453    	LD	(___print_xputch),BC
0B07D3 01 47 2A 0B         A  2454    	LD	BC,L__56
0B07D7 C5                  A  2455    	PUSH	BC
0B07D8 CD 9E 15 0B         A  2456    	CALL	___print_sendstring
0B07DC C1                  A  2457    	POP	BC
                           A  2458    ;  271			}
0B07DD                     A  2459    L_73:
                           A  2460    .LINE 271
                           A  2461    
                           A  2462    ;  272			attempt++;
                           A  2463    .LINE 272
                           A  2464    
0B07DD DD07FA              A  2465    	LD	BC,(IX+%FFFFFFFA)
0B07E0 03                  A  2466    	INC	BC
0B07E1 DD0FFA              A  2467    	LD	(IX+%FFFFFFFA),BC
                           A  2468    ;  273		}
0B07E4                     A  2469    L_74:
                           A  2470    .LINE 273
                           A  2471    
0B07E4 DD7EF6              A  2472    	LD	A,(IX+%FFFFFFF6)
0B07E7 B7                  A  2473    	OR	A,A
0B07E8 20 0E               A  2474    	JR	NZ,L_76
0B07EA 01030000            A  2475    	LD	BC,3
0B07EE DD27FA              A  2476    	LD	HL,(IX+%FFFFFFFA)
0B07F1 B7                  A  2477    	OR	A,A
0B07F2 ED42                A  2478    	SBC	HL,BC
0B07F4 FA BF 05 0B         A  2479    	JP	M,L_75
0B07F8                     A  2480    L_76:
                           A  2481    ;  274		printf("\r\n");
                           A  2482    .LINE 274
                           A  2483    
0B07F8 01 0F 17 0B         A  2484    	LD	BC,___print_uputch
0B07FC ED43 04 28 0B       A  2485    	LD	(___print_xputch),BC
0B0801 01 4F 2A 0B         A  2486    	LD	BC,L__59
0B0805 C5                  A  2487    	PUSH	BC
0B0806 CD 9E 15 0B         A  2488    	CALL	___print_sendstring
0B080A C1                  A  2489    	POP	BC
                           A  2490    ;  275		return success;
                           A  2491    .LINE 275
                           A  2492    
0B080B DD7EF6              A  2493    	LD	A,(IX+%FFFFFFF6)
                           A  2494    ;  276	}
0B080E                     A  2495    L_77:
                           A  2496    .LINE 276
                           A  2497    
0B080E DDF9                A  2498    	LD	SP,IX
0B0810 DDE1                A  2499    	POP	IX
0B0812 C9                  A  2500    	RET	
                           A  2501    
                           A  2502    
                           A  2503    ;**************************** _update_mos *****
                           A  2504    ;Name                         Addr/Register   S
                           A  2505    ;_lockFlashKeyRegister               IMPORT  --
                           A  2506    ;_fastmemcpy                         IMPORT  --
                           A  2507    ;___print_fmt                        IMPORT    
                           A  2508    ;_enableFlashKeyRegister             IMPORT  --
                           A  2509    ;__u_itoa                            IMPORT  --
                           A  2510    ;_moscrc                             STATIC    
                           A  2511    ;_crc32_finalize                     IMPORT  --
                           A  2512    ;_mos_fread                          IMPORT  --
                           A  2513    ;_crc32                              IMPORT  --
                           A  2514    ;_crc32_initialize                   IMPORT  --
                           A  2515    ;_getFileSize                        IMPORT  --
                           A  2516    ;_mos_fopen                          IMPORT  --
                           A  2517    ;___print_sendstring                 IMPORT  --
                           A  2518    ;___print_xputch                     IMPORT    
                           A  2519    ;___print_uputch                     IMPORT  --
                           A  2520    ;_putch                              IMPORT  --
                           A  2521    ;G_0                                  IX-37    
                           A  2522    ;crcresult                            IX-34    
                           A  2523    ;lastpagebytes                        IX-30    
                           A  2524    ;value                                IX-27    
                           A  2525    ;got                                  IX-26    
                           A  2526    ;filesize                             IX-23    
                           A  2527    ;ptr                                  IX-20    
                           A  2528    ;file                                 IX-17    
                           A  2529    ;addressfrom                          IX-16    
                           A  2530    ;addressto                            IX-13    
                           A  2531    ;success                              IX-10    
                           A  2532    ;pagemax                               IX-9    
                           A  2533    ;attempt                               IX-6    
                           A  2534    ;counter                               IX-3    
                           A  2535    ;filename                              IX+6    
                           A  2536    
                           A  2537    
                           A  2538    ; Stack Frame Size: 46 (bytes)
                           A  2539    ;       Spill Code: 0 (instruction)
                           A  2540    
                           A  2541    
                           A  2542    .ENDFUNC "update_mos",276,"_update_mos"
                           A  2543    	SEGMENT STRSECT
0B2982                     A  2544    L__35:
0B2982 50726F67 72616D6D   A  2545    	DB	"Programming MOS firmware to ez80 flash
0B298A 696E6720 4D4F5320 
0B2992 6669726D 77617265 
0B299A 20746F20 657A3830 
0B29A2 20666C61 73682E2E 
0B29AA 2E 
0B29AB 0D0A0D0A 00         A  2546    	DB	13,10,13,10,0
0B29B0                     A  2547    L__36:
0B29B0 52656164 696E6720   A  2548    	DB	"Reading MOS firmware"
0B29B8 4D4F5320 6669726D 
0B29C0 77617265 
0B29C4 00                  A  2549    	DB	0
0B29C5                     A  2550    L__38:
0B29C5 0D0A00              A  2551    	DB	13,10,0
0B29C8                     A  2552    L__40:
0B29C8 4572726F 72207265   A  2553    	DB	"Error reading file to memory"
0B29D0 6164696E 67206669 
0B29D8 6C652074 6F206D65 
0B29E0 6D6F7279 
0B29E4 0D0A00              A  2554    	DB	13,10,0
0B29E7                     A  2555    L__41:
0B29E7 0D0A00              A  2556    	DB	13,10,0
0B29EA                     A  2557    L__43:
0B29EA 52657472 79206174   A  2558    	DB	"Retry attempt #"
0B29F2 74656D70 742023 
0B29F9 00                  A  2559    	DB	0
0B29FA                     A  2560    L__44:
0B29FA 0D0A00              A  2561    	DB	13,10,0
0B29FD                     A  2562    L__45:
0B29FD 45726173 696E6720   A  2563    	DB	"Erasing flash... "
0B2A05 666C6173 682E2E2E 
0B2A0D 20 
0B2A0E 00                  A  2564    	DB	0
0B2A0F                     A  2565    L__48:
0B2A0F 0D0A00              A  2566    	DB	13,10,0
0B2A12                     A  2567    L__50:
0B2A12 0D                  A  2568    	DB	13
0B2A13 57726974 696E6720   A  2569    	DB	"Writing flash page "
0B2A1B 666C6173 68207061 
0B2A23 676520 
0B2A26 00                  A  2570    	DB	0
0B2A27                     A  2571    L__53:
0B2A27 0D0A                A  2572    	DB	13,10
0B2A29 43616C63 756C6174   A  2573    	DB	"Calculating Flash CRC - "
0B2A31 696E6720 466C6173 
0B2A39 68204352 43202D20 
0B2A41 00                  A  2574    	DB	0
0B2A42                     A  2575    L__55:
0B2A42 4F4B                A  2576    	DB	"OK"
0B2A44 0D0A00              A  2577    	DB	13,10,0
0B2A47                     A  2578    L__56:
0B2A47 4552524F 52         A  2579    	DB	"ERROR"
0B2A4C 0D0A00              A  2580    	DB	13,10,0
0B2A4F                     A  2581    L__59:
0B2A4F 0D0A00              A  2582    	DB	13,10,0
                           A  2583    	SEGMENT CODE
                           A  2584    ;  277	
                           A  2585    ;  278	void echoVDP(uint8_t value) {
0B0813                     A  2586    _echoVDP:
                           A  2587    .DEFINE "_echoVDP"
                           A  2588    
                           A  2589    .VALUE _echoVDP
                           A  2590    
                           A  2591    .CLASS 2
                           A  2592    
                           A  2593    .TYPE 65
                           A  2594    
                           A  2595    .ENDEF
                           A  2596    
                           A  2597    .BEGFUNC "echoVDP",278,"_echoVDP"
                           A  2598    
                           A  2599    .LINE 278
                           A  2600    
                           A  2601    .DEFINE "value"
                           A  2602    
                           A  2603    .CLASS 65
                           A  2604    
                           A  2605    .VALUE 6
                           A  2606    
                           A  2607    .TYPE 12
                           A  2608    
                           A  2609    .ENDEF
                           A  2610    
0B0813 DDE5                A  2611    	PUSH	IX
0B0815 DD210000 00         A  2612    	LD	IX,0
0B081A DD39                A  2613    	ADD	IX,SP
                           A  2614    ;  279		putch(23);
                           A  2615    .LINE 279
                           A  2616    
0B081C 01170000            A  2617    	LD	BC,23
0B0820 C5                  A  2618    	PUSH	BC
0B0821 CD E5 00 0B         A  2619    	CALL	_putch
0B0825 C1                  A  2620    	POP	BC
                           A  2621    ;  280		putch(0);
                           A  2622    .LINE 280
                           A  2623    
0B0826 01000000            A  2624    	LD	BC,0
0B082A C5                  A  2625    	PUSH	BC
0B082B CD E5 00 0B         A  2626    	CALL	_putch
0B082F C1                  A  2627    	POP	BC
                           A  2628    ;  281		putch(0x80);
                           A  2629    .LINE 281
                           A  2630    
0B0830 01800000            A  2631    	LD	BC,128
0B0834 C5                  A  2632    	PUSH	BC
0B0835 CD E5 00 0B         A  2633    	CALL	_putch
0B0839 C1                  A  2634    	POP	BC
                           A  2635    ;  282		putch(value);
                           A  2636    .LINE 282
                           A  2637    
0B083A DD7E06              A  2638    	LD	A,(IX+%6)
0B083D B7ED62              A  2639    	UEXT	HL
0B0840 6F                  A  2640    	LD	L,A
0B0841 E5                  A  2641    	PUSH	HL
0B0842 CD E5 00 0B         A  2642    	CALL	_putch
0B0846 C1                  A  2643    	POP	BC
                           A  2644    ;  283		delayms(100);
                           A  2645    .LINE 283
                           A  2646    
0B0847 01640000            A  2647    	LD	BC,100
0B084B C5                  A  2648    	PUSH	BC
0B084C CD 3B 12 0B         A  2649    	CALL	_delayms
0B0850 C1                  A  2650    	POP	BC
                           A  2651    ;  284	}
                           A  2652    .LINE 284
                           A  2653    
0B0851 DDF9                A  2654    	LD	SP,IX
0B0853 DDE1                A  2655    	POP	IX
0B0855 C9                  A  2656    	RET	
                           A  2657    
                           A  2658    
                           A  2659    ;**************************** _echoVDP ********
                           A  2660    ;Name                         Addr/Register   S
                           A  2661    ;_delayms                            IMPORT  --
                           A  2662    ;_putch                              IMPORT  --
                           A  2663    ;value                                 IX+6    
                           A  2664    
                           A  2665    
                           A  2666    ; Stack Frame Size: 9 (bytes)
                           A  2667    ;       Spill Code: 0 (instruction)
                           A  2668    
                           A  2669    
                           A  2670    .ENDFUNC "echoVDP",284,"_echoVDP"
                           A  2671    ;  285	
                           A  2672    ;  286	int getCommand(const char *command) {
0B0856                     A  2673    _getCommand:
                           A  2674    .DEFINE "_getCommand"
                           A  2675    
                           A  2676    .VALUE _getCommand
                           A  2677    
                           A  2678    .CLASS 2
                           A  2679    
                           A  2680    .TYPE 68
                           A  2681    
                           A  2682    .ENDEF
                           A  2683    
                           A  2684    .BEGFUNC "getCommand",286,"_getCommand"
                           A  2685    
                           A  2686    .LINE 286
                           A  2687    
                           A  2688    .DEFINE "command"
                           A  2689    
                           A  2690    .CLASS 65
                           A  2691    
                           A  2692    .VALUE 6
                           A  2693    
                           A  2694    .TYPE 194
                           A  2695    
                           A  2696    .ENDEF
                           A  2697    
0B0856 DDE5                A  2698    	PUSH	IX
0B0858 DD210000 00         A  2699    	LD	IX,0
0B085D DD39                A  2700    	ADD	IX,SP
                           A  2701    ;  287		if(memcmp(command, "all", 4) == 0) 
                           A  2702    .LINE 287
                           A  2703    
0B085F 01040000            A  2704    	LD	BC,4
0B0863 C5                  A  2705    	PUSH	BC
0B0864 01 52 2A 0B         A  2706    	LD	BC,L__62
0B0868 C5                  A  2707    	PUSH	BC
0B0869 DD0706              A  2708    	LD	BC,(IX+%6)
0B086C C5                  A  2709    	PUSH	BC
0B086D CD A2 1A 0B         A  2710    	CALL	_memcmp
0B0871 C1                  A  2711    	POP	BC
0B0872 C1                  A  2712    	POP	BC
0B0873 C1                  A  2713    	POP	BC
0B0874 CD CC 1A 0B         A  2714    	CALL	__icmpzero
0B0878 20 06               A  2715    	JR	NZ,L_81
0B087A 21010000            A  2716    	LD	HL,1
0B087E 18 66               A  2717    	JR	L_87
0B0880                     A  2718    L_81:
                           A  2719    ;  288		if(memcmp(command, "mos", 3) == 0) 
                           A  2720    .LINE 288
                           A  2721    
0B0880 01030000            A  2722    	LD	BC,3
0B0884 C5                  A  2723    	PUSH	BC
0B0885 01 56 2A 0B         A  2724    	LD	BC,L__64
0B0889 C5                  A  2725    	PUSH	BC
0B088A DD0706              A  2726    	LD	BC,(IX+%6)
0B088D C5                  A  2727    	PUSH	BC
0B088E CD A2 1A 0B         A  2728    	CALL	_memcmp
0B0892 C1                  A  2729    	POP	BC
0B0893 C1                  A  2730    	POP	BC
0B0894 C1                  A  2731    	POP	BC
0B0895 CD CC 1A 0B         A  2732    	CALL	__icmpzero
0B0899 20 06               A  2733    	JR	NZ,L_83
0B089B 21020000            A  2734    	LD	HL,2
0B089F 18 45               A  2735    	JR	L_87
0B08A1                     A  2736    L_83:
                           A  2737    ;  289		if(memcmp(command, "vdp", 3) == 0) 
                           A  2738    .LINE 289
                           A  2739    
0B08A1 01030000            A  2740    	LD	BC,3
0B08A5 C5                  A  2741    	PUSH	BC
0B08A6 01 5A 2A 0B         A  2742    	LD	BC,L__66
0B08AA C5                  A  2743    	PUSH	BC
0B08AB DD0706              A  2744    	LD	BC,(IX+%6)
0B08AE C5                  A  2745    	PUSH	BC
0B08AF CD A2 1A 0B         A  2746    	CALL	_memcmp
0B08B3 C1                  A  2747    	POP	BC
0B08B4 C1                  A  2748    	POP	BC
0B08B5 C1                  A  2749    	POP	BC
0B08B6 CD CC 1A 0B         A  2750    	CALL	__icmpzero
0B08BA 20 06               A  2751    	JR	NZ,L_85
0B08BC 21030000            A  2752    	LD	HL,3
0B08C0 18 24               A  2753    	JR	L_87
0B08C2                     A  2754    L_85:
                           A  2755    ;  290		if(memcmp(command, "silent", 6) == 
                           A  2756    .LINE 290
                           A  2757    
0B08C2 01060000            A  2758    	LD	BC,6
0B08C6 C5                  A  2759    	PUSH	BC
0B08C7 01 5E 2A 0B         A  2760    	LD	BC,L__68
0B08CB C5                  A  2761    	PUSH	BC
0B08CC DD0706              A  2762    	LD	BC,(IX+%6)
0B08CF C5                  A  2763    	PUSH	BC
0B08D0 CD A2 1A 0B         A  2764    	CALL	_memcmp
0B08D4 C1                  A  2765    	POP	BC
0B08D5 C1                  A  2766    	POP	BC
0B08D6 C1                  A  2767    	POP	BC
0B08D7 CD CC 1A 0B         A  2768    	CALL	__icmpzero
0B08DB 20 06               A  2769    	JR	NZ,L_86
0B08DD 21040000            A  2770    	LD	HL,4
0B08E1 18 03               A  2771    	JR	L_87
0B08E3                     A  2772    L_86:
                           A  2773    ;  291		return CMDUNKNOWN;
                           A  2774    .LINE 291
                           A  2775    
0B08E3 B7                  A  2776    	OR	A,A
0B08E4 ED62                A  2777    	SBC	HL,HL
                           A  2778    ;  292	}
0B08E6                     A  2779    L_87:
                           A  2780    .LINE 292
                           A  2781    
0B08E6 DDF9                A  2782    	LD	SP,IX
0B08E8 DDE1                A  2783    	POP	IX
0B08EA C9                  A  2784    	RET	
                           A  2785    
                           A  2786    
                           A  2787    ;**************************** _getCommand *****
                           A  2788    ;Name                         Addr/Register   S
                           A  2789    ;_memcmp                             IMPORT  --
                           A  2790    ;command                               IX+6    
                           A  2791    
                           A  2792    
                           A  2793    ; Stack Frame Size: 9 (bytes)
                           A  2794    ;       Spill Code: 0 (instruction)
                           A  2795    
                           A  2796    
                           A  2797    .ENDFUNC "getCommand",292,"_getCommand"
                           A  2798    	SEGMENT STRSECT
0B2A52                     A  2799    L__62:
0B2A52 616C6C              A  2800    	DB	"all"
0B2A55 00                  A  2801    	DB	0
0B2A56                     A  2802    L__64:
0B2A56 6D6F73              A  2803    	DB	"mos"
0B2A59 00                  A  2804    	DB	0
0B2A5A                     A  2805    L__66:
0B2A5A 766470              A  2806    	DB	"vdp"
0B2A5D 00                  A  2807    	DB	0
0B2A5E                     A  2808    L__68:
0B2A5E 73696C65 6E74       A  2809    	DB	"silent"
0B2A64 00                  A  2810    	DB	0
                           A  2811    	SEGMENT CODE
                           A  2812    ;  293	
                           A  2813    ;  294	bool parseCommands(int argc, char *argv
0B08EB                     A  2814    _parseCommands:
                           A  2815    .DEFINE "_parseCommands"
                           A  2816    
                           A  2817    .VALUE _parseCommands
                           A  2818    
                           A  2819    .CLASS 2
                           A  2820    
                           A  2821    .TYPE 76
                           A  2822    
                           A  2823    .ENDEF
                           A  2824    
                           A  2825    .BEGFUNC "parseCommands",294,"_parseCommands"
                           A  2826    
                           A  2827    .LINE 294
                           A  2828    
                           A  2829    .DEFINE "argc"
                           A  2830    
                           A  2831    .CLASS 65
                           A  2832    
                           A  2833    .VALUE 6
                           A  2834    
                           A  2835    .TYPE 4
                           A  2836    
                           A  2837    .ENDEF
                           A  2838    
                           A  2839    .DEFINE "argv"
                           A  2840    
                           A  2841    .CLASS 65
                           A  2842    
                           A  2843    .VALUE 9
                           A  2844    
                           A  2845    .TYPE 290
                           A  2846    
                           A  2847    .ENDEF
                           A  2848    
                           A  2849    .DEFINE "argcounter"
                           A  2850    
                           A  2851    .CLASS 65
                           A  2852    
                           A  2853    .VALUE -3
                           A  2854    
                           A  2855    .TYPE 4
                           A  2856    
                           A  2857    .ENDEF
                           A  2858    
                           A  2859    .DEFINE "command"
                           A  2860    
                           A  2861    .CLASS 65
                           A  2862    
                           A  2863    .VALUE -15
                           A  2864    
                           A  2865    .TYPE 4
                           A  2866    
                           A  2867    .ENDEF
                           A  2868    
0B08EB DDE5                A  2869    	PUSH	IX
0B08ED DD210000 00         A  2870    	LD	IX,0
0B08F2 DD39                A  2871    	ADD	IX,SP
0B08F4 ED22F1              A  2872    	LEA	HL,IX+%FFFFFFF1
0B08F7 F9                  A  2873    	LD	SP,HL
                           A  2874    ;  295		int argcounter;
                           A  2875    ;  296		int command;
                           A  2876    ;  297	
                           A  2877    ;  298		argcounter = 1;
                           A  2878    .LINE 298
                           A  2879    
0B08F8 01010000            A  2880    	LD	BC,1
0B08FC DD0FFD              A  2881    	LD	(IX+%FFFFFFFD),BC
                           A  2882    ;  299		while(argcounter < argc) {
                           A  2883    .LINE 299
                           A  2884    
0B08FF C3 78 0A 0B         A  2885    	JR	L_114
0B0903                     A  2886    L_115:
                           A  2887    ;  300			command = getCommand(argv[argco
                           A  2888    .LINE 300
                           A  2889    
0B0903 DD27FD              A  2890    	LD	HL,(IX+%FFFFFFFD)
0B0906 E5C1                A  2891    	LD	BC,HL
0B0908 29                  A  2892    	ADD	HL,HL
0B0909 09                  A  2893    	ADD	HL,BC
0B090A DD0709              A  2894    	LD	BC,(IX+%9)
0B090D 09                  A  2895    	ADD	HL,BC
0B090E ED07                A  2896    	LD	BC,(HL)
0B0910 C5                  A  2897    	PUSH	BC
0B0911 CD 56 08 0B         A  2898    	CALL	_getCommand
0B0915 C1                  A  2899    	POP	BC
0B0916 DD2FF1              A  2900    	LD	(IX+%FFFFFFF1),HL
                           A  2901    ;  301			switch(command) {
                           A  2902    .LINE 301
                           A  2903    
0B0919 CD 63 15 0B         A  2904    	CALL	__seqcaseD
0B091D E9                  A  2905    	JP	(HL)
0B091E                     A  2906    L__71:
0B091E 0500                A  2907    	DW	5
0B0920 0000                A  2908    	DW	0
0B0922 00                  A  2909    	DB	0
0B0923 35090B              A  2910    	DW24	L_88	
                           A  2911    
0B0926 3A090B              A  2912    	DW24	L_89	
                           A  2913    
0B0929 7B090B              A  2914    	DW24	L_93	
                           A  2915    
0B092C EF090B              A  2916    	DW24	L_101	
                           A  2917    
0B092F 610A0B              A  2918    	DW24	L_109	
                           A  2919    
0B0932 710A0B              A  2920    	DW24	L_113	
                           A  2921    
                           A  2922    ;  302				case CMDUNKNOWN:
0B0935                     A  2923    L_88:
                           A  2924    .LINE 302
                           A  2925    
                           A  2926    ;  303					return false;
                           A  2927    .LINE 303
                           A  2928    
0B0935 AF                  A  2929    	XOR	A,A
0B0936 C3 A6 0A 0B         A  2930    	JR	L_122
                           A  2931    ;  304					break;
                           A  2932    ;  305				case CMDALL:
0B093A                     A  2933    L_89:
                           A  2934    .LINE 305
                           A  2935    
                           A  2936    ;  306					if(flashmos || flashvdp
                           A  2937    .LINE 306
                           A  2938    
0B093A 3A EA 20 0B         A  2939    	LD	A,(_flashmos)
0B093E B7                  A  2940    	OR	A,A
0B093F 20 07               A  2941    	JR	NZ,L_91
0B0941 3A EB 20 0B         A  2942    	LD	A,(_flashvdp)
0B0945 B7                  A  2943    	OR	A,A
0B0946 28 05               A  2944    	JR	Z,L_92
0B0948                     A  2945    L_91:
0B0948 AF                  A  2946    	XOR	A,A
0B0949 C3 A6 0A 0B         A  2947    	JR	L_122
0B094D                     A  2948    L_92:
                           A  2949    ;  307					strcpy(mosfilename, DEF
                           A  2950    .LINE 307
                           A  2951    
0B094D 01 65 2A 0B         A  2952    	LD	BC,L__74
0B0951 C5                  A  2953    	PUSH	BC
0B0952 01 F9 20 0B         A  2954    	LD	BC,_mosfilename
0B0956 C5                  A  2955    	PUSH	BC
0B0957 CD 07 1E 0B         A  2956    	CALL	_strcpy
0B095B C1                  A  2957    	POP	BC
0B095C C1                  A  2958    	POP	BC
                           A  2959    ;  308					strcpy(vdpfilename, DEF
                           A  2960    .LINE 308
                           A  2961    
0B095D 01 6D 2A 0B         A  2962    	LD	BC,L__75
0B0961 C5                  A  2963    	PUSH	BC
0B0962 01 FD 21 0B         A  2964    	LD	BC,_vdpfilename
0B0966 C5                  A  2965    	PUSH	BC
0B0967 CD 07 1E 0B         A  2966    	CALL	_strcpy
0B096B C1                  A  2967    	POP	BC
0B096C C1                  A  2968    	POP	BC
                           A  2969    ;  309					flashmos = true;
                           A  2970    .LINE 309
                           A  2971    
0B096D 3E01                A  2972    	LD	A,%1
0B096F 32 EA 20 0B         A  2973    	LD	(_flashmos),A
                           A  2974    ;  310					flashvdp = true;
                           A  2975    .LINE 310
                           A  2976    
0B0973 32 EB 20 0B         A  2977    	LD	(_flashvdp),A
                           A  2978    ;  311					break;
                           A  2979    .LINE 311
                           A  2980    
0B0977 C3 71 0A 0B         A  2981    	JR	L_113
                           A  2982    ;  312				case CMDMOS:
0B097B                     A  2983    L_93:
                           A  2984    .LINE 312
                           A  2985    
                           A  2986    ;  313					if(flashmos) return fal
                           A  2987    .LINE 313
                           A  2988    
0B097B 3A EA 20 0B         A  2989    	LD	A,(_flashmos)
0B097F B7                  A  2990    	OR	A,A
0B0980 28 05               A  2991    	JR	Z,L_99
0B0982 AF                  A  2992    	XOR	A,A
0B0983 C3 A6 0A 0B         A  2993    	JR	L_122
0B0987                     A  2994    L_99:
                           A  2995    ;  314					if((argc > (argcounter+
                           A  2996    .LINE 314
                           A  2997    
0B0987 DD07FD              A  2998    	LD	BC,(IX+%FFFFFFFD)
0B098A 03                  A  2999    	INC	BC
0B098B DD0FFA              A  3000    	LD	(IX+%FFFFFFFA),BC
0B098E DD0706              A  3001    	LD	BC,(IX+%6)
0B0991 DD27FA              A  3002    	LD	HL,(IX+%FFFFFFFA)
0B0994 B7                  A  3003    	OR	A,A
0B0995 ED42                A  3004    	SBC	HL,BC
0B0997 F2 D5 09 0B         A  3005    	JP	P,L_98
0B099B DD27FA              A  3006    	LD	HL,(IX+%FFFFFFFA)
0B099E E5C1                A  3007    	LD	BC,HL
0B09A0 29                  A  3008    	ADD	HL,HL
0B09A1 09                  A  3009    	ADD	HL,BC
0B09A2 DD0709              A  3010    	LD	BC,(IX+%9)
0B09A5 09                  A  3011    	ADD	HL,BC
0B09A6 ED07                A  3012    	LD	BC,(HL)
0B09A8 C5                  A  3013    	PUSH	BC
0B09A9 CD 56 08 0B         A  3014    	CALL	_getCommand
0B09AD C1                  A  3015    	POP	BC
0B09AE CD CC 1A 0B         A  3016    	CALL	__icmpzero
0B09B2 20 21               A  3017    	JR	NZ,L_98
                           A  3018    ;  315						strcpy(mosfilename,
                           A  3019    .LINE 315
                           A  3020    
0B09B4 DD27FA              A  3021    	LD	HL,(IX+%FFFFFFFA)
0B09B7 E5C1                A  3022    	LD	BC,HL
0B09B9 29                  A  3023    	ADD	HL,HL
0B09BA 09                  A  3024    	ADD	HL,BC
0B09BB DD0709              A  3025    	LD	BC,(IX+%9)
0B09BE 09                  A  3026    	ADD	HL,BC
0B09BF ED07                A  3027    	LD	BC,(HL)
0B09C1 C5                  A  3028    	PUSH	BC
0B09C2 01 F9 20 0B         A  3029    	LD	BC,_mosfilename
0B09C6 C5                  A  3030    	PUSH	BC
0B09C7 CD 07 1E 0B         A  3031    	CALL	_strcpy
0B09CB C1                  A  3032    	POP	BC
0B09CC C1                  A  3033    	POP	BC
                           A  3034    ;  316						argcounter++;
                           A  3035    .LINE 316
                           A  3036    
0B09CD DD07FA              A  3037    	LD	BC,(IX+%FFFFFFFA)
0B09D0 DD0FFD              A  3038    	LD	(IX+%FFFFFFFD),BC
                           A  3039    ;  317					}
                           A  3040    ;  318					else {
                           A  3041    .LINE 318
                           A  3042    
0B09D3 18 10               A  3043    	JR	L_100
0B09D5                     A  3044    L_98:
                           A  3045    ;  319						strcpy(mosfilename,
                           A  3046    .LINE 319
                           A  3047    
0B09D5 01 7A 2A 0B         A  3048    	LD	BC,L__79
0B09D9 C5                  A  3049    	PUSH	BC
0B09DA 01 F9 20 0B         A  3050    	LD	BC,_mosfilename
0B09DE C5                  A  3051    	PUSH	BC
0B09DF CD 07 1E 0B         A  3052    	CALL	_strcpy
0B09E3 C1                  A  3053    	POP	BC
0B09E4 C1                  A  3054    	POP	BC
                           A  3055    ;  320					}
0B09E5                     A  3056    L_100:
                           A  3057    .LINE 320
                           A  3058    
                           A  3059    ;  321					flashmos = true;
                           A  3060    .LINE 321
                           A  3061    
0B09E5 3E01                A  3062    	LD	A,%1
0B09E7 32 EA 20 0B         A  3063    	LD	(_flashmos),A
                           A  3064    ;  322					break;
                           A  3065    .LINE 322
                           A  3066    
0B09EB C3 71 0A 0B         A  3067    	JR	L_113
                           A  3068    ;  323				case CMDVDP:
0B09EF                     A  3069    L_101:
                           A  3070    .LINE 323
                           A  3071    
                           A  3072    ;  324					if(flashvdp) return fal
                           A  3073    .LINE 324
                           A  3074    
0B09EF 3A EB 20 0B         A  3075    	LD	A,(_flashvdp)
0B09F3 B7                  A  3076    	OR	A,A
0B09F4 28 05               A  3077    	JR	Z,L_107
0B09F6 AF                  A  3078    	XOR	A,A
0B09F7 C3 A6 0A 0B         A  3079    	JR	L_122
0B09FB                     A  3080    L_107:
                           A  3081    ;  325					if((argc > (argcounter+
                           A  3082    .LINE 325
                           A  3083    
0B09FB DD07FD              A  3084    	LD	BC,(IX+%FFFFFFFD)
0B09FE 03                  A  3085    	INC	BC
0B09FF DD0FF7              A  3086    	LD	(IX+%FFFFFFF7),BC
0B0A02 DD0706              A  3087    	LD	BC,(IX+%6)
0B0A05 DD27F7              A  3088    	LD	HL,(IX+%FFFFFFF7)
0B0A08 B7                  A  3089    	OR	A,A
0B0A09 ED42                A  3090    	SBC	HL,BC
0B0A0B F2 49 0A 0B         A  3091    	JP	P,L_106
0B0A0F DD27F7              A  3092    	LD	HL,(IX+%FFFFFFF7)
0B0A12 E5C1                A  3093    	LD	BC,HL
0B0A14 29                  A  3094    	ADD	HL,HL
0B0A15 09                  A  3095    	ADD	HL,BC
0B0A16 DD0709              A  3096    	LD	BC,(IX+%9)
0B0A19 09                  A  3097    	ADD	HL,BC
0B0A1A ED07                A  3098    	LD	BC,(HL)
0B0A1C C5                  A  3099    	PUSH	BC
0B0A1D CD 56 08 0B         A  3100    	CALL	_getCommand
0B0A21 C1                  A  3101    	POP	BC
0B0A22 CD CC 1A 0B         A  3102    	CALL	__icmpzero
0B0A26 20 21               A  3103    	JR	NZ,L_106
                           A  3104    ;  326						strcpy(vdpfilename,
                           A  3105    .LINE 326
                           A  3106    
0B0A28 DD27F7              A  3107    	LD	HL,(IX+%FFFFFFF7)
0B0A2B E5C1                A  3108    	LD	BC,HL
0B0A2D 29                  A  3109    	ADD	HL,HL
0B0A2E 09                  A  3110    	ADD	HL,BC
0B0A2F DD0709              A  3111    	LD	BC,(IX+%9)
0B0A32 09                  A  3112    	ADD	HL,BC
0B0A33 ED07                A  3113    	LD	BC,(HL)
0B0A35 C5                  A  3114    	PUSH	BC
0B0A36 01 FD 21 0B         A  3115    	LD	BC,_vdpfilename
0B0A3A C5                  A  3116    	PUSH	BC
0B0A3B CD 07 1E 0B         A  3117    	CALL	_strcpy
0B0A3F C1                  A  3118    	POP	BC
0B0A40 C1                  A  3119    	POP	BC
                           A  3120    ;  327						argcounter++;
                           A  3121    .LINE 327
                           A  3122    
0B0A41 DD07F7              A  3123    	LD	BC,(IX+%FFFFFFF7)
0B0A44 DD0FFD              A  3124    	LD	(IX+%FFFFFFFD),BC
                           A  3125    ;  328					}
                           A  3126    ;  329					else {
                           A  3127    .LINE 329
                           A  3128    
0B0A47 18 10               A  3129    	JR	L_108
0B0A49                     A  3130    L_106:
                           A  3131    ;  330						strcpy(vdpfilename,
                           A  3132    .LINE 330
                           A  3133    
0B0A49 01 82 2A 0B         A  3134    	LD	BC,L__83
0B0A4D C5                  A  3135    	PUSH	BC
0B0A4E 01 FD 21 0B         A  3136    	LD	BC,_vdpfilename
0B0A52 C5                  A  3137    	PUSH	BC
0B0A53 CD 07 1E 0B         A  3138    	CALL	_strcpy
0B0A57 C1                  A  3139    	POP	BC
0B0A58 C1                  A  3140    	POP	BC
                           A  3141    ;  331					}
0B0A59                     A  3142    L_108:
                           A  3143    .LINE 331
                           A  3144    
                           A  3145    ;  332					flashvdp = true;
                           A  3146    .LINE 332
                           A  3147    
0B0A59 3E01                A  3148    	LD	A,%1
0B0A5B 32 EB 20 0B         A  3149    	LD	(_flashvdp),A
                           A  3150    ;  333					break;
                           A  3151    .LINE 333
                           A  3152    
0B0A5F 18 10               A  3153    	JR	L_113
                           A  3154    ;  334				case CMDSILENT:
0B0A61                     A  3155    L_109:
                           A  3156    .LINE 334
                           A  3157    
                           A  3158    ;  335					if(silent) return false
                           A  3159    .LINE 335
                           A  3160    
0B0A61 3A EC 20 0B         A  3161    	LD	A,(_silent)
0B0A65 B7                  A  3162    	OR	A,A
0B0A66 28 03               A  3163    	JR	Z,L_111
0B0A68 AF                  A  3164    	XOR	A,A
0B0A69 18 3B               A  3165    	JR	L_122
0B0A6B                     A  3166    L_111:
                           A  3167    ;  336					silent = true;
                           A  3168    .LINE 336
                           A  3169    
0B0A6B 3E01                A  3170    	LD	A,%1
0B0A6D 32 EC 20 0B         A  3171    	LD	(_silent),A
                           A  3172    ;  337					break;
                           A  3173    ;  338			}
0B0A71                     A  3174    L_113:
                           A  3175    .LINE 338
                           A  3176    
                           A  3177    ;  339			argcounter++;
                           A  3178    .LINE 339
                           A  3179    
0B0A71 DD07FD              A  3180    	LD	BC,(IX+%FFFFFFFD)
0B0A74 03                  A  3181    	INC	BC
0B0A75 DD0FFD              A  3182    	LD	(IX+%FFFFFFFD),BC
                           A  3183    ;  340		}
0B0A78                     A  3184    L_114:
                           A  3185    .LINE 340
                           A  3186    
0B0A78 DD0706              A  3187    	LD	BC,(IX+%6)
0B0A7B DD27FD              A  3188    	LD	HL,(IX+%FFFFFFFD)
0B0A7E B7                  A  3189    	OR	A,A
0B0A7F ED42                A  3190    	SBC	HL,BC
0B0A81 FA 03 09 0B         A  3191    	JP	M,L_115
                           A  3192    ;  341		return (flashvdp || flashmos);
                           A  3193    .LINE 341
                           A  3194    
0B0A85 3A EB 20 0B         A  3195    	LD	A,(_flashvdp)
0B0A89 B7                  A  3196    	OR	A,A
0B0A8A 20 07               A  3197    	JR	NZ,L_117
0B0A8C 3A EA 20 0B         A  3198    	LD	A,(_flashmos)
0B0A90 B7                  A  3199    	OR	A,A
0B0A91 28 09               A  3200    	JR	Z,L_118
0B0A93                     A  3201    L_117:
                           A  3202    ;  342	}
                           A  3203    .LINE 342
                           A  3204    
0B0A93 01010000            A  3205    	LD	BC,1
0B0A97 DD0FF4              A  3206    	LD	(IX+%FFFFFFF4),BC
0B0A9A 18 07               A  3207    	JR	L_119
0B0A9C                     A  3208    L_118:
0B0A9C 01000000            A  3209    	LD	BC,0
0B0AA0 DD0FF4              A  3210    	LD	(IX+%FFFFFFF4),BC
0B0AA3                     A  3211    L_119:
0B0AA3 DD7EF4              A  3212    	LD	A,(IX+%FFFFFFF4)
0B0AA6                     A  3213    L_122:
0B0AA6 DDF9                A  3214    	LD	SP,IX
0B0AA8 DDE1                A  3215    	POP	IX
0B0AAA C9                  A  3216    	RET	
                           A  3217    
                           A  3218    
                           A  3219    ;**************************** _parseCommands **
                           A  3220    ;Name                         Addr/Register   S
                           A  3221    ;_silent                             STATIC    
                           A  3222    ;_vdpfilename                        STATIC    
                           A  3223    ;_mosfilename                        STATIC    
                           A  3224    ;_strcpy                             IMPORT  --
                           A  3225    ;_flashvdp                           STATIC    
                           A  3226    ;_flashmos                           STATIC    
                           A  3227    ;command                              IX-15    
                           A  3228    ;temp120                              IX-12    
                           A  3229    ;G_4                                   IX-9    
                           A  3230    ;G_1                                   IX-6    
                           A  3231    ;argcounter                            IX-3    
                           A  3232    ;argv                                  IX+9    
                           A  3233    ;argc                                  IX+6    
                           A  3234    
                           A  3235    
                           A  3236    ; Stack Frame Size: 27 (bytes)
                           A  3237    ;       Spill Code: 0 (instruction)
                           A  3238    
                           A  3239    
                           A  3240    .ENDFUNC "parseCommands",342,"_parseCommands"
                           A  3241    	SEGMENT STRSECT
0B2A65                     A  3242    L__74:
0B2A65 4D4F532E 62696E     A  3243    	DB	"MOS.bin"
0B2A6C 00                  A  3244    	DB	0
0B2A6D                     A  3245    L__75:
0B2A6D 6669726D 77617265   A  3246    	DB	"firmware.bin"
0B2A75 2E62696E 
0B2A79 00                  A  3247    	DB	0
0B2A7A                     A  3248    L__79:
0B2A7A 4D4F532E 62696E     A  3249    	DB	"MOS.bin"
0B2A81 00                  A  3250    	DB	0
0B2A82                     A  3251    L__83:
0B2A82 6669726D 77617265   A  3252    	DB	"firmware.bin"
0B2A8A 2E62696E 
0B2A8E 00                  A  3253    	DB	0
                           A  3254    	SEGMENT CODE
                           A  3255    ;  343	
                           A  3256    ;  344	bool filesExist(void) {
0B0AAB                     A  3257    _filesExist:
                           A  3258    .DEFINE "_filesExist"
                           A  3259    
                           A  3260    .VALUE _filesExist
                           A  3261    
                           A  3262    .CLASS 2
                           A  3263    
                           A  3264    .TYPE 76
                           A  3265    
                           A  3266    .ENDEF
                           A  3267    
                           A  3268    .BEGFUNC "filesExist",344,"_filesExist"
                           A  3269    
                           A  3270    .LINE 344
                           A  3271    
                           A  3272    .DEFINE "file"
                           A  3273    
                           A  3274    .CLASS 65
                           A  3275    
                           A  3276    .VALUE -1
                           A  3277    
                           A  3278    .TYPE 12
                           A  3279    
                           A  3280    .ENDEF
                           A  3281    
                           A  3282    .DEFINE "filesexist"
                           A  3283    
                           A  3284    .CLASS 65
                           A  3285    
                           A  3286    .VALUE -2
                           A  3287    
                           A  3288    .TYPE 12
                           A  3289    
                           A  3290    .ENDEF
                           A  3291    
0B0AAB DDE5                A  3292    	PUSH	IX
0B0AAD DD210000 00         A  3293    	LD	IX,0
0B0AB2 DD39                A  3294    	ADD	IX,SP
0B0AB4 3B                  A  3295    	DEC	SP
0B0AB5 3B                  A  3296    	DEC	SP
                           A  3297    ;  345		uint8_t file;
                           A  3298    ;  346		bool filesexist = true;
                           A  3299    .LINE 346
                           A  3300    
0B0AB6 DD36FE01            A  3301    	LD	(IX+%FFFFFFFE),%1
                           A  3302    ;  347	
                           A  3303    ;  348		if(flashmos) {
                           A  3304    .LINE 348
                           A  3305    
0B0ABA 3A EA 20 0B         A  3306    	LD	A,(_flashmos)
0B0ABE B7                  A  3307    	OR	A,A
0B0ABF 28 4C               A  3308    	JR	Z,L_129
                           A  3309    ;  349			file = mos_fopen(mosfilename, f
                           A  3310    .LINE 349
                           A  3311    
0B0AC1 01010000            A  3312    	LD	BC,1
0B0AC5 C5                  A  3313    	PUSH	BC
0B0AC6 01 F9 20 0B         A  3314    	LD	BC,_mosfilename
0B0ACA C5                  A  3315    	PUSH	BC
0B0ACB CD 8F 10 0B         A  3316    	CALL	_mos_fopen
0B0ACF C1                  A  3317    	POP	BC
0B0AD0 C1                  A  3318    	POP	BC
0B0AD1 DD77FF              A  3319    	LD	(IX+%FFFFFFFF),A
                           A  3320    ;  350			if(!file) {
                           A  3321    .LINE 350
                           A  3322    
0B0AD4 B7                  A  3323    	OR	A,A
0B0AD5 20 2B               A  3324    	JR	NZ,L_124
                           A  3325    ;  351				printf("Error opening MOS f
                           A  3326    .LINE 351
                           A  3327    
0B0AD7 01 0F 17 0B         A  3328    	LD	BC,___print_uputch
0B0ADB ED43 04 28 0B       A  3329    	LD	(___print_xputch),BC
0B0AE0 01 8F 2A 0B         A  3330    	LD	BC,L__91
0B0AE4 C5                  A  3331    	PUSH	BC
0B0AE5 CD 9E 15 0B         A  3332    	CALL	___print_sendstring
0B0AE9 C1                  A  3333    	POP	BC
0B0AEA 01 F9 20 0B         A  3334    	LD	BC,_mosfilename
0B0AEE C5                  A  3335    	PUSH	BC
0B0AEF CD 9E 15 0B         A  3336    	CALL	___print_sendstring
0B0AF3 C1                  A  3337    	POP	BC
0B0AF4 01 AC 2A 0B         A  3338    	LD	BC,L__92
0B0AF8 C5                  A  3339    	PUSH	BC
0B0AF9 CD 9E 15 0B         A  3340    	CALL	___print_sendstring
0B0AFD C1                  A  3341    	POP	BC
                           A  3342    ;  352				filesexist = false;
                           A  3343    .LINE 352
                           A  3344    
0B0AFE DD36FE00            A  3345    	LD	(IX+%FFFFFFFE),%0
                           A  3346    ;  353			}
0B0B02                     A  3347    L_124:
                           A  3348    .LINE 353
                           A  3349    
                           A  3350    ;  354			mos_fclose(file);
                           A  3351    .LINE 354
                           A  3352    
0B0B02 DD4EFF              A  3353    	LD	C,(IX+%FFFFFFFF)
0B0B05 0600                A  3354    	LD	B,%0
0B0B07 C5                  A  3355    	PUSH	BC
0B0B08 CD A7 10 0B         A  3356    	CALL	_mos_fclose
0B0B0C C1                  A  3357    	POP	BC
                           A  3358    ;  355		}
0B0B0D                     A  3359    L_129:
                           A  3360    .LINE 355
                           A  3361    
                           A  3362    ;  356	
                           A  3363    ;  357		if(flashvdp) {
                           A  3364    .LINE 357
                           A  3365    
0B0B0D 3A EB 20 0B         A  3366    	LD	A,(_flashvdp)
0B0B11 B7                  A  3367    	OR	A,A
0B0B12 28 4C               A  3368    	JR	Z,L_130
                           A  3369    ;  358			file = mos_fopen(vdpfilename, f
                           A  3370    .LINE 358
                           A  3371    
0B0B14 01010000            A  3372    	LD	BC,1
0B0B18 C5                  A  3373    	PUSH	BC
0B0B19 01 FD 21 0B         A  3374    	LD	BC,_vdpfilename
0B0B1D C5                  A  3375    	PUSH	BC
0B0B1E CD 8F 10 0B         A  3376    	CALL	_mos_fopen
0B0B22 C1                  A  3377    	POP	BC
0B0B23 C1                  A  3378    	POP	BC
0B0B24 DD77FF              A  3379    	LD	(IX+%FFFFFFFF),A
                           A  3380    ;  359			if(!file) {
                           A  3381    .LINE 359
                           A  3382    
0B0B27 B7                  A  3383    	OR	A,A
0B0B28 20 2B               A  3384    	JR	NZ,L_127
                           A  3385    ;  360				printf("Error opening VDP f
                           A  3386    .LINE 360
                           A  3387    
0B0B2A 01 0F 17 0B         A  3388    	LD	BC,___print_uputch
0B0B2E ED43 04 28 0B       A  3389    	LD	(___print_xputch),BC
0B0B33 01 B0 2A 0B         A  3390    	LD	BC,L__95
0B0B37 C5                  A  3391    	PUSH	BC
0B0B38 CD 9E 15 0B         A  3392    	CALL	___print_sendstring
0B0B3C C1                  A  3393    	POP	BC
0B0B3D 01 FD 21 0B         A  3394    	LD	BC,_vdpfilename
0B0B41 C5                  A  3395    	PUSH	BC
0B0B42 CD 9E 15 0B         A  3396    	CALL	___print_sendstring
0B0B46 C1                  A  3397    	POP	BC
0B0B47 01 CD 2A 0B         A  3398    	LD	BC,L__96
0B0B4B C5                  A  3399    	PUSH	BC
0B0B4C CD 9E 15 0B         A  3400    	CALL	___print_sendstring
0B0B50 C1                  A  3401    	POP	BC
                           A  3402    ;  361				filesexist = false;
                           A  3403    .LINE 361
                           A  3404    
0B0B51 DD36FE00            A  3405    	LD	(IX+%FFFFFFFE),%0
                           A  3406    ;  362			}
0B0B55                     A  3407    L_127:
                           A  3408    .LINE 362
                           A  3409    
                           A  3410    ;  363			mos_fclose(file);
                           A  3411    .LINE 363
                           A  3412    
0B0B55 DD4EFF              A  3413    	LD	C,(IX+%FFFFFFFF)
0B0B58 0600                A  3414    	LD	B,%0
0B0B5A C5                  A  3415    	PUSH	BC
0B0B5B CD A7 10 0B         A  3416    	CALL	_mos_fclose
0B0B5F C1                  A  3417    	POP	BC
                           A  3418    ;  364		}
0B0B60                     A  3419    L_130:
                           A  3420    .LINE 364
                           A  3421    
                           A  3422    ;  365	
                           A  3423    ;  366		return filesexist;
                           A  3424    .LINE 366
                           A  3425    
0B0B60 DD7EFE              A  3426    	LD	A,(IX+%FFFFFFFE)
                           A  3427    ;  367	}
                           A  3428    .LINE 367
                           A  3429    
0B0B63 DDF9                A  3430    	LD	SP,IX
0B0B65 DDE1                A  3431    	POP	IX
0B0B67 C9                  A  3432    	RET	
                           A  3433    
                           A  3434    
                           A  3435    ;**************************** _filesExist *****
                           A  3436    ;Name                         Addr/Register   S
                           A  3437    ;_vdpfilename                        STATIC    
                           A  3438    ;_flashvdp                           STATIC    
                           A  3439    ;_mos_fclose                         IMPORT  --
                           A  3440    ;___print_sendstring                 IMPORT  --
                           A  3441    ;___print_xputch                     IMPORT    
                           A  3442    ;___print_uputch                     IMPORT  --
                           A  3443    ;_mosfilename                        STATIC    
                           A  3444    ;_mos_fopen                          IMPORT  --
                           A  3445    ;_flashmos                           STATIC    
                           A  3446    ;filesexist                            IX-2    
                           A  3447    ;file                                  IX-1    
                           A  3448    
                           A  3449    
                           A  3450    ; Stack Frame Size: 8 (bytes)
                           A  3451    ;       Spill Code: 0 (instruction)
                           A  3452    
                           A  3453    
                           A  3454    .ENDFUNC "filesExist",367,"_filesExist"
                           A  3455    	SEGMENT STRSECT
0B2A8F                     A  3456    L__91:
0B2A8F 4572726F 72206F70   A  3457    	DB	"Error opening MOS firmware \""
0B2A97 656E696E 67204D4F 
0B2A9F 53206669 726D7761 
0B2AA7 72652022 
0B2AAB 00                  A  3458    	DB	0
0B2AAC                     A  3459    L__92:
0B2AAC 22                  A  3460    	DB	"\""
0B2AAD 0A0D00              A  3461    	DB	10,13,0
0B2AB0                     A  3462    L__95:
0B2AB0 4572726F 72206F70   A  3463    	DB	"Error opening VDP firmware \""
0B2AB8 656E696E 67205644 
0B2AC0 50206669 726D7761 
0B2AC8 72652022 
0B2ACC 00                  A  3464    	DB	0
0B2ACD                     A  3465    L__96:
0B2ACD 22                  A  3466    	DB	"\""
0B2ACE 0A0D00              A  3467    	DB	10,13,0
                           A  3468    	SEGMENT CODE
                           A  3469    ;  368	
                           A  3470    ;  369	bool firmwareContentOK(void) {
0B0B68                     A  3471    _firmwareContentOK:
                           A  3472    .DEFINE "_firmwareContentOK"
                           A  3473    
                           A  3474    .VALUE _firmwareContentOK
                           A  3475    
                           A  3476    .CLASS 2
                           A  3477    
                           A  3478    .TYPE 76
                           A  3479    
                           A  3480    .ENDEF
                           A  3481    
                           A  3482    .BEGFUNC "firmwareContentOK",369,"_firmwareCont
                           A  3483    
                           A  3484    .LINE 369
                           A  3485    
                           A  3486    .DEFINE "file"
                           A  3487    
                           A  3488    .CLASS 65
                           A  3489    
                           A  3490    .VALUE -1
                           A  3491    
                           A  3492    .TYPE 12
                           A  3493    
                           A  3494    .ENDEF
                           A  3495    
                           A  3496    .DEFINE "validfirmware"
                           A  3497    
                           A  3498    .CLASS 65
                           A  3499    
                           A  3500    .VALUE -2
                           A  3501    
                           A  3502    .TYPE 12
                           A  3503    
                           A  3504    .ENDEF
                           A  3505    
                           A  3506    .DEFINE "filesize"
                           A  3507    
                           A  3508    .CLASS 65
                           A  3509    
                           A  3510    .VALUE -5
                           A  3511    
                           A  3512    .TYPE 14
                           A  3513    
                           A  3514    .ENDEF
                           A  3515    
                           A  3516    .DEFINE "buffer"
                           A  3517    
                           A  3518    .CLASS 65
                           A  3519    
                           A  3520    .VALUE -41
                           A  3521    
                           A  3522    .DIM 36
                           A  3523    
                           A  3524    .TYPE 108
                           A  3525    
                           A  3526    .ENDEF
                           A  3527    
0B0B68 DDE5                A  3528    	PUSH	IX
0B0B6A DD210000 00         A  3529    	LD	IX,0
0B0B6F DD39                A  3530    	ADD	IX,SP
0B0B71 ED22D7              A  3531    	LEA	HL,IX+%FFFFFFD7
0B0B74 F9                  A  3532    	LD	SP,HL
                           A  3533    ;  370		uint8_t file;
                           A  3534    ;  371		uint24_t filesize;
                           A  3535    ;  372		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  3536    ;  373		bool validfirmware = true;
                           A  3537    .LINE 373
                           A  3538    
0B0B75 DD36FE01            A  3539    	LD	(IX+%FFFFFFFE),%1
                           A  3540    ;  374	
                           A  3541    ;  375		if(flashmos) {
                           A  3542    .LINE 375
                           A  3543    
0B0B79 3A EA 20 0B         A  3544    	LD	A,(_flashmos)
0B0B7D B7                  A  3545    	OR	A,A
0B0B7E CA 33 0C 0B         A  3546    	JR	Z,L_140
                           A  3547    ;  376			file = mos_fopen(mosfilename, f
                           A  3548    .LINE 376
                           A  3549    
0B0B82 01010000            A  3550    	LD	BC,1
0B0B86 C5                  A  3551    	PUSH	BC
0B0B87 01 F9 20 0B         A  3552    	LD	BC,_mosfilename
0B0B8B C5                  A  3553    	PUSH	BC
0B0B8C CD 8F 10 0B         A  3554    	CALL	_mos_fopen
0B0B90 C1                  A  3555    	POP	BC
0B0B91 C1                  A  3556    	POP	BC
0B0B92 DD77FF              A  3557    	LD	(IX+%FFFFFFFF),A
                           A  3558    ;  377			mos_fread(file, (char *)BUFFER1
                           A  3559    .LINE 377
                           A  3560    
0B0B95 01050000            A  3561    	LD	BC,5
0B0B99 C5                  A  3562    	PUSH	BC
0B0B9A 01000005            A  3563    	LD	BC,327680
0B0B9E C5                  A  3564    	PUSH	BC
0B0B9F DD4EFF              A  3565    	LD	C,(IX+%FFFFFFFF)
0B0BA2 0600                A  3566    	LD	B,%0
0B0BA4 C5                  A  3567    	PUSH	BC
0B0BA5 CD D1 10 0B         A  3568    	CALL	_mos_fread
0B0BA9 C1                  A  3569    	POP	BC
0B0BAA C1                  A  3570    	POP	BC
0B0BAB C1                  A  3571    	POP	BC
                           A  3572    ;  378			if(!containsMosHeader((uint8_t 
                           A  3573    .LINE 378
                           A  3574    
0B0BAC 01000005            A  3575    	LD	BC,327680
0B0BB0 C5                  A  3576    	PUSH	BC
0B0BB1 CD 90 02 0B         A  3577    	CALL	_containsMosHeader
0B0BB5 C1                  A  3578    	POP	BC
0B0BB6 B7                  A  3579    	OR	A,A
0B0BB7 20 2B               A  3580    	JR	NZ,L_133
                           A  3581    ;  379				printf("\"%s\" does not con
                           A  3582    .LINE 379
                           A  3583    
0B0BB9 01 0F 17 0B         A  3584    	LD	BC,___print_uputch
0B0BBD ED43 04 28 0B       A  3585    	LD	(___print_xputch),BC
0B0BC2 01220000            A  3586    	LD	BC,34
0B0BC6 C5                  A  3587    	PUSH	BC
0B0BC7 CD 0F 17 0B         A  3588    	CALL	___print_uputch
0B0BCB C1                  A  3589    	POP	BC
0B0BCC 01 F9 20 0B         A  3590    	LD	BC,_mosfilename
0B0BD0 C5                  A  3591    	PUSH	BC
0B0BD1 CD 9E 15 0B         A  3592    	CALL	___print_sendstring
0B0BD5 C1                  A  3593    	POP	BC
0B0BD6 01 D1 2A 0B         A  3594    	LD	BC,L__100
0B0BDA C5                  A  3595    	PUSH	BC
0B0BDB CD 9E 15 0B         A  3596    	CALL	___print_sendstring
0B0BDF C1                  A  3597    	POP	BC
                           A  3598    ;  380				validfirmware = false;
                           A  3599    .LINE 380
                           A  3600    
0B0BE0 DD36FE00            A  3601    	LD	(IX+%FFFFFFFE),%0
                           A  3602    ;  381			}
0B0BE4                     A  3603    L_133:
                           A  3604    .LINE 381
                           A  3605    
                           A  3606    ;  382			filesize = getFileSize(file);
                           A  3607    .LINE 382
                           A  3608    
0B0BE4 DD4EFF              A  3609    	LD	C,(IX+%FFFFFFFF)
0B0BE7 0600                A  3610    	LD	B,%0
0B0BE9 C5                  A  3611    	PUSH	BC
0B0BEA CD D3 14 0B         A  3612    	CALL	_getFileSize
0B0BEE C1                  A  3613    	POP	BC
0B0BEF DD2FFB              A  3614    	LD	(IX+%FFFFFFFB),HL
                           A  3615    ;  383			if(filesize > FLASHSIZE) {
                           A  3616    .LINE 383
                           A  3617    
0B0BF2 E5C1                A  3618    	LD	BC,HL
0B0BF4 21000002            A  3619    	LD	HL,131072
0B0BF8 B7                  A  3620    	OR	A,A
0B0BF9 ED42                A  3621    	SBC	HL,BC
0B0BFB 30 2B               A  3622    	JR	NC,L_135
                           A  3623    ;  384				printf("\"%s\" too large fo
                           A  3624    .LINE 384
                           A  3625    
0B0BFD 01 0F 17 0B         A  3626    	LD	BC,___print_uputch
0B0C01 ED43 04 28 0B       A  3627    	LD	(___print_xputch),BC
0B0C06 01220000            A  3628    	LD	BC,34
0B0C0A C5                  A  3629    	PUSH	BC
0B0C0B CD 0F 17 0B         A  3630    	CALL	___print_uputch
0B0C0F C1                  A  3631    	POP	BC
0B0C10 01 F9 20 0B         A  3632    	LD	BC,_mosfilename
0B0C14 C5                  A  3633    	PUSH	BC
0B0C15 CD 9E 15 0B         A  3634    	CALL	___print_sendstring
0B0C19 C1                  A  3635    	POP	BC
0B0C1A 01 02 2B 0B         A  3636    	LD	BC,L__102
0B0C1E C5                  A  3637    	PUSH	BC
0B0C1F CD 9E 15 0B         A  3638    	CALL	___print_sendstring
0B0C23 C1                  A  3639    	POP	BC
                           A  3640    ;  385				validfirmware = false;
                           A  3641    .LINE 385
                           A  3642    
0B0C24 DD36FE00            A  3643    	LD	(IX+%FFFFFFFE),%0
                           A  3644    ;  386			}
0B0C28                     A  3645    L_135:
                           A  3646    .LINE 386
                           A  3647    
                           A  3648    ;  387			mos_fclose(file);
                           A  3649    .LINE 387
                           A  3650    
0B0C28 DD4EFF              A  3651    	LD	C,(IX+%FFFFFFFF)
0B0C2B 0600                A  3652    	LD	B,%0
0B0C2D C5                  A  3653    	PUSH	BC
0B0C2E CD A7 10 0B         A  3654    	CALL	_mos_fclose
0B0C32 C1                  A  3655    	POP	BC
                           A  3656    ;  388		}
0B0C33                     A  3657    L_140:
                           A  3658    .LINE 388
                           A  3659    
                           A  3660    ;  389		if(flashvdp) {
                           A  3661    .LINE 389
                           A  3662    
0B0C33 3A EB 20 0B         A  3663    	LD	A,(_flashvdp)
0B0C37 B7                  A  3664    	OR	A,A
0B0C38 28 69               A  3665    	JR	Z,L_141
                           A  3666    ;  390			file = mos_fopen(vdpfilename, f
                           A  3667    .LINE 390
                           A  3668    
0B0C3A 01010000            A  3669    	LD	BC,1
0B0C3E C5                  A  3670    	PUSH	BC
0B0C3F 01 FD 21 0B         A  3671    	LD	BC,_vdpfilename
0B0C43 C5                  A  3672    	PUSH	BC
0B0C44 CD 8F 10 0B         A  3673    	CALL	_mos_fopen
0B0C48 C1                  A  3674    	POP	BC
0B0C49 C1                  A  3675    	POP	BC
0B0C4A DD77FF              A  3676    	LD	(IX+%FFFFFFFF),A
                           A  3677    ;  391			mos_fread(file, (char *)buffer,
                           A  3678    .LINE 391
                           A  3679    
0B0C4D 01240000            A  3680    	LD	BC,36
0B0C51 C5                  A  3681    	PUSH	BC
0B0C52 ED65D7              A  3682    	PEA	IX+%FFFFFFD7
0B0C55 DD4EFF              A  3683    	LD	C,(IX+%FFFFFFFF)
0B0C58 0600                A  3684    	LD	B,%0
0B0C5A C5                  A  3685    	PUSH	BC
0B0C5B CD D1 10 0B         A  3686    	CALL	_mos_fread
0B0C5F C1                  A  3687    	POP	BC
0B0C60 C1                  A  3688    	POP	BC
0B0C61 C1                  A  3689    	POP	BC
                           A  3690    ;  392			if(!containsESP32Header(buffer)
                           A  3691    .LINE 392
                           A  3692    
0B0C62 ED65D7              A  3693    	PEA	IX+%FFFFFFD7
0B0C65 CD DB 02 0B         A  3694    	CALL	_containsESP32Header
0B0C69 C1                  A  3695    	POP	BC
0B0C6A B7                  A  3696    	OR	A,A
0B0C6B 20 2B               A  3697    	JR	NZ,L_138
                           A  3698    ;  393				printf("\"%s\" does not con
                           A  3699    .LINE 393
                           A  3700    
0B0C6D 01 0F 17 0B         A  3701    	LD	BC,___print_uputch
0B0C71 ED43 04 28 0B       A  3702    	LD	(___print_xputch),BC
0B0C76 01220000            A  3703    	LD	BC,34
0B0C7A C5                  A  3704    	PUSH	BC
0B0C7B CD 0F 17 0B         A  3705    	CALL	___print_uputch
0B0C7F C1                  A  3706    	POP	BC
0B0C80 01 FD 21 0B         A  3707    	LD	BC,_vdpfilename
0B0C84 C5                  A  3708    	PUSH	BC
0B0C85 CD 9E 15 0B         A  3709    	CALL	___print_sendstring
0B0C89 C1                  A  3710    	POP	BC
0B0C8A 01 29 2B 0B         A  3711    	LD	BC,L__105
0B0C8E C5                  A  3712    	PUSH	BC
0B0C8F CD 9E 15 0B         A  3713    	CALL	___print_sendstring
0B0C93 C1                  A  3714    	POP	BC
                           A  3715    ;  394				validfirmware = false;
                           A  3716    .LINE 394
                           A  3717    
0B0C94 DD36FE00            A  3718    	LD	(IX+%FFFFFFFE),%0
                           A  3719    ;  395			}
0B0C98                     A  3720    L_138:
                           A  3721    .LINE 395
                           A  3722    
                           A  3723    ;  396			mos_fclose(file);
                           A  3724    .LINE 396
                           A  3725    
0B0C98 DD4EFF              A  3726    	LD	C,(IX+%FFFFFFFF)
0B0C9B 0600                A  3727    	LD	B,%0
0B0C9D C5                  A  3728    	PUSH	BC
0B0C9E CD A7 10 0B         A  3729    	CALL	_mos_fclose
0B0CA2 C1                  A  3730    	POP	BC
                           A  3731    ;  397		}
0B0CA3                     A  3732    L_141:
                           A  3733    .LINE 397
                           A  3734    
                           A  3735    ;  398		return validfirmware;
                           A  3736    .LINE 398
                           A  3737    
0B0CA3 DD7EFE              A  3738    	LD	A,(IX+%FFFFFFFE)
                           A  3739    ;  399	}
                           A  3740    .LINE 399
                           A  3741    
0B0CA6 DDF9                A  3742    	LD	SP,IX
0B0CA8 DDE1                A  3743    	POP	IX
0B0CAA C9                  A  3744    	RET	
                           A  3745    
                           A  3746    
                           A  3747    ;**************************** _firmwareContentO
                           A  3748    ;Name                         Addr/Register   S
                           A  3749    ;_vdpfilename                        STATIC    
                           A  3750    ;_flashvdp                           STATIC    
                           A  3751    ;_mos_fclose                         IMPORT  --
                           A  3752    ;_getFileSize                        IMPORT  --
                           A  3753    ;___print_sendstring                 IMPORT  --
                           A  3754    ;___print_xputch                     IMPORT    
                           A  3755    ;___print_uputch                     IMPORT  --
                           A  3756    ;_mos_fread                          IMPORT  --
                           A  3757    ;_mosfilename                        STATIC    
                           A  3758    ;_mos_fopen                          IMPORT  --
                           A  3759    ;_flashmos                           STATIC    
                           A  3760    ;buffer                               IX-41    
                           A  3761    ;filesize                              IX-5    
                           A  3762    ;validfirmware                         IX-2    
                           A  3763    ;file                                  IX-1    
                           A  3764    
                           A  3765    
                           A  3766    ; Stack Frame Size: 47 (bytes)
                           A  3767    ;       Spill Code: 0 (instruction)
                           A  3768    
                           A  3769    
                           A  3770    .ENDFUNC "firmwareContentOK",399,"_firmwareCont
                           A  3771    	SEGMENT STRSECT
0B2AD1                     A  3772    L__100:
0B2AD1 2220646F 6573206E   A  3773    	DB	"\" does not contain valid MOS ez80 sta
0B2AD9 6F742063 6F6E7461 
0B2AE1 696E2076 616C6964 
0B2AE9 204D4F53 20657A38 
0B2AF1 30207374 61727475 
0B2AF9 7020636F 6465 
0B2AFF 0D0A00              A  3774    	DB	13,10,0
0B2B02                     A  3775    L__102:
0B2B02 2220746F 6F206C61   A  3776    	DB	"\" too large for 128KB embedded flash"
0B2B0A 72676520 666F7220 
0B2B12 3132384B 4220656D 
0B2B1A 62656464 65642066 
0B2B22 6C617368 
0B2B26 0D0A00              A  3777    	DB	13,10,0
0B2B29                     A  3778    L__105:
0B2B29 2220646F 6573206E   A  3779    	DB	"\" does not contain valid ESP32 code"
0B2B31 6F742063 6F6E7461 
0B2B39 696E2076 616C6964 
0B2B41 20455350 33322063 
0B2B49 6F6465 
0B2B4C 0D0A00              A  3780    	DB	13,10,0
                           A  3781    	SEGMENT CODE
                           A  3782    ;  400	
                           A  3783    ;  401	void showCRC32(void) {
0B0CAB                     A  3784    _showCRC32:
                           A  3785    .DEFINE "_showCRC32"
                           A  3786    
                           A  3787    .VALUE _showCRC32
                           A  3788    
                           A  3789    .CLASS 2
                           A  3790    
                           A  3791    .TYPE 65
                           A  3792    
                           A  3793    .ENDEF
                           A  3794    
                           A  3795    .BEGFUNC "showCRC32",401,"_showCRC32"
                           A  3796    
0B0CAB DDE5                A  3797    	PUSH	IX
0B0CAD DD210000 00         A  3798    	LD	IX,0
0B0CB2 DD39                A  3799    	ADD	IX,SP
                           A  3800    ;  402		if(flashmos) printf("MOS CRC 0x%04l
                           A  3801    .LINE 402
                           A  3802    
0B0CB4 3A EA 20 0B         A  3803    	LD	A,(_flashmos)
0B0CB8 B7                  A  3804    	OR	A,A
0B0CB9 28 43               A  3805    	JR	Z,L_145
0B0CBB 01 0F 17 0B         A  3806    	LD	BC,___print_uputch
0B0CBF ED43 04 28 0B       A  3807    	LD	(___print_xputch),BC
0B0CC4 01 4F 2B 0B         A  3808    	LD	BC,L__108
0B0CC8 C5                  A  3809    	PUSH	BC
0B0CC9 CD 9E 15 0B         A  3810    	CALL	___print_sendstring
0B0CCD C1                  A  3811    	POP	BC
0B0CCE 3E04                A  3812    	LD	A,%4
0B0CD0 32 14 23 0B         A  3813    	LD	(___print_fmt+5),A
0B0CD4 3E60                A  3814    	LD	A,%60
0B0CD6 32 10 23 0B         A  3815    	LD	(___print_fmt+1),A
0B0CDA 3E78                A  3816    	LD	A,%78
0B0CDC 32 13 23 0B         A  3817    	LD	(___print_fmt+4),A
0B0CE0 3A FC 21 0B         A  3818    	LD	A,(_moscrc+3)
0B0CE4 4F                  A  3819    	LD	C,A
0B0CE5 0600                A  3820    	LD	B,%0
0B0CE7 C5                  A  3821    	PUSH	BC
0B0CE8 ED4B F9 21 0B       A  3822    	LD	BC,(_moscrc)
0B0CED C5                  A  3823    	PUSH	BC
0B0CEE CD B4 1E 0B         A  3824    	CALL	__u_ultoa
0B0CF2 C1                  A  3825    	POP	BC
0B0CF3 C1                  A  3826    	POP	BC
0B0CF4 01 5A 2B 0B         A  3827    	LD	BC,L__109
0B0CF8 C5                  A  3828    	PUSH	BC
0B0CF9 CD 9E 15 0B         A  3829    	CALL	___print_sendstring
0B0CFD C1                  A  3830    	POP	BC
0B0CFE                     A  3831    L_145:
                           A  3832    ;  403		if(flashvdp) printf("VDP CRC 0x%04l
                           A  3833    .LINE 403
                           A  3834    
0B0CFE 3A EB 20 0B         A  3835    	LD	A,(_flashvdp)
0B0D02 B7                  A  3836    	OR	A,A
0B0D03 28 43               A  3837    	JR	Z,L_146
0B0D05 01 0F 17 0B         A  3838    	LD	BC,___print_uputch
0B0D09 ED43 04 28 0B       A  3839    	LD	(___print_xputch),BC
0B0D0E 01 5D 2B 0B         A  3840    	LD	BC,L__111
0B0D12 C5                  A  3841    	PUSH	BC
0B0D13 CD 9E 15 0B         A  3842    	CALL	___print_sendstring
0B0D17 C1                  A  3843    	POP	BC
0B0D18 3E04                A  3844    	LD	A,%4
0B0D1A 32 14 23 0B         A  3845    	LD	(___print_fmt+5),A
0B0D1E 3E60                A  3846    	LD	A,%60
0B0D20 32 10 23 0B         A  3847    	LD	(___print_fmt+1),A
0B0D24 3E78                A  3848    	LD	A,%78
0B0D26 32 13 23 0B         A  3849    	LD	(___print_fmt+4),A
0B0D2A 3A 00 23 0B         A  3850    	LD	A,(_vdpcrc+3)
0B0D2E 4F                  A  3851    	LD	C,A
0B0D2F 0600                A  3852    	LD	B,%0
0B0D31 C5                  A  3853    	PUSH	BC
0B0D32 ED4B FD 22 0B       A  3854    	LD	BC,(_vdpcrc)
0B0D37 C5                  A  3855    	PUSH	BC
0B0D38 CD B4 1E 0B         A  3856    	CALL	__u_ultoa
0B0D3C C1                  A  3857    	POP	BC
0B0D3D C1                  A  3858    	POP	BC
0B0D3E 01 68 2B 0B         A  3859    	LD	BC,L__112
0B0D42 C5                  A  3860    	PUSH	BC
0B0D43 CD 9E 15 0B         A  3861    	CALL	___print_sendstring
0B0D47 C1                  A  3862    	POP	BC
0B0D48                     A  3863    L_146:
                           A  3864    ;  404		printf("\r\n");
                           A  3865    .LINE 404
                           A  3866    
0B0D48 01 0F 17 0B         A  3867    	LD	BC,___print_uputch
0B0D4C ED43 04 28 0B       A  3868    	LD	(___print_xputch),BC
0B0D51 01 6B 2B 0B         A  3869    	LD	BC,L__113
0B0D55 C5                  A  3870    	PUSH	BC
0B0D56 CD 9E 15 0B         A  3871    	CALL	___print_sendstring
0B0D5A C1                  A  3872    	POP	BC
                           A  3873    ;  405	}
                           A  3874    .LINE 405
                           A  3875    
0B0D5B DDF9                A  3876    	LD	SP,IX
0B0D5D DDE1                A  3877    	POP	IX
0B0D5F C9                  A  3878    	RET	
                           A  3879    
                           A  3880    
                           A  3881    ;**************************** _showCRC32 ******
                           A  3882    ;Name                         Addr/Register   S
                           A  3883    ;_vdpcrc                             STATIC    
                           A  3884    ;_flashvdp                           STATIC    
                           A  3885    ;_moscrc                             STATIC    
                           A  3886    ;__u_ultoa                           IMPORT  --
                           A  3887    ;___print_fmt                        IMPORT    
                           A  3888    ;___print_sendstring                 IMPORT  --
                           A  3889    ;___print_xputch                     IMPORT    
                           A  3890    ;___print_uputch                     IMPORT  --
                           A  3891    ;_flashmos                           STATIC    
                           A  3892    
                           A  3893    
                           A  3894    ; Stack Frame Size: 6 (bytes)
                           A  3895    ;       Spill Code: 0 (instruction)
                           A  3896    
                           A  3897    
                           A  3898    .ENDFUNC "showCRC32",405,"_showCRC32"
                           A  3899    	SEGMENT STRSECT
0B2B4F                     A  3900    L__108:
0B2B4F 4D4F5320 43524320   A  3901    	DB	"MOS CRC 0x"
0B2B57 3078 
0B2B59 00                  A  3902    	DB	0
0B2B5A                     A  3903    L__109:
0B2B5A 0D0A00              A  3904    	DB	13,10,0
0B2B5D                     A  3905    L__111:
0B2B5D 56445020 43524320   A  3906    	DB	"VDP CRC 0x"
0B2B65 3078 
0B2B67 00                  A  3907    	DB	0
0B2B68                     A  3908    L__112:
0B2B68 0D0A00              A  3909    	DB	13,10,0
0B2B6B                     A  3910    L__113:
0B2B6B 0D0A00              A  3911    	DB	13,10,0
                           A  3912    	SEGMENT CODE
                           A  3913    ;  406	
                           A  3914    ;  407	void calculateCRC32(void) {
0B0D60                     A  3915    _calculateCRC32:
                           A  3916    .DEFINE "_calculateCRC32"
                           A  3917    
                           A  3918    .VALUE _calculateCRC32
                           A  3919    
                           A  3920    .CLASS 2
                           A  3921    
                           A  3922    .TYPE 65
                           A  3923    
                           A  3924    .ENDEF
                           A  3925    
                           A  3926    .BEGFUNC "calculateCRC32",407,"_calculateCRC32"
                           A  3927    
                           A  3928    .LINE 407
                           A  3929    
                           A  3930    .DEFINE "file"
                           A  3931    
                           A  3932    .CLASS 65
                           A  3933    
                           A  3934    .VALUE -1
                           A  3935    
                           A  3936    .TYPE 12
                           A  3937    
                           A  3938    .ENDEF
                           A  3939    
                           A  3940    .DEFINE "ptr"
                           A  3941    
                           A  3942    .CLASS 65
                           A  3943    
                           A  3944    .VALUE -4
                           A  3945    
                           A  3946    .TYPE 34
                           A  3947    
                           A  3948    .ENDEF
                           A  3949    
                           A  3950    .DEFINE "got"
                           A  3951    
                           A  3952    .CLASS 65
                           A  3953    
                           A  3954    .VALUE -7
                           A  3955    
                           A  3956    .TYPE 14
                           A  3957    
                           A  3958    .ENDEF
                           A  3959    
                           A  3960    .DEFINE "size"
                           A  3961    
                           A  3962    .CLASS 65
                           A  3963    
                           A  3964    .VALUE -10
                           A  3965    
                           A  3966    .TYPE 14
                           A  3967    
                           A  3968    .ENDEF
                           A  3969    
0B0D60 DDE5                A  3970    	PUSH	IX
0B0D62 DD210000 00         A  3971    	LD	IX,0
0B0D67 DD39                A  3972    	ADD	IX,SP
0B0D69 C5                  A  3973    	PUSH	BC
0B0D6A C5                  A  3974    	PUSH	BC
0B0D6B C5                  A  3975    	PUSH	BC
0B0D6C 3B                  A  3976    	DEC	SP
                           A  3977    ;  408		uint8_t file;
                           A  3978    ;  409		uint24_t got,size;
                           A  3979    ;  410		char* ptr;
                           A  3980    ;  411	
                           A  3981    ;  412		moscrc = 0;
                           A  3982    .LINE 412
                           A  3983    
0B0D6D 01000000            A  3984    	LD	BC,0
0B0D71 AF                  A  3985    	XOR	A,A
0B0D72 ED43 F9 21 0B       A  3986    	LD	(_moscrc),BC
0B0D77 32 FC 21 0B         A  3987    	LD	(_moscrc+3),A
                           A  3988    ;  413		vdpcrc = 0;
                           A  3989    .LINE 413
                           A  3990    
0B0D7B AF                  A  3991    	XOR	A,A
0B0D7C ED43 FD 22 0B       A  3992    	LD	(_vdpcrc),BC
0B0D81 32 00 23 0B         A  3993    	LD	(_vdpcrc+3),A
                           A  3994    ;  414	
                           A  3995    ;  415		printf("Calculating CRC");
                           A  3996    .LINE 415
                           A  3997    
0B0D85 01 0F 17 0B         A  3998    	LD	BC,___print_uputch
0B0D89 ED43 04 28 0B       A  3999    	LD	(___print_xputch),BC
0B0D8E 01 6E 2B 0B         A  4000    	LD	BC,L__115
0B0D92 C5                  A  4001    	PUSH	BC
0B0D93 CD 9E 15 0B         A  4002    	CALL	___print_sendstring
0B0D97 C1                  A  4003    	POP	BC
                           A  4004    ;  416	
                           A  4005    ;  417		if(flashmos) {
                           A  4006    .LINE 417
                           A  4007    
0B0D98 3A EA 20 0B         A  4008    	LD	A,(_flashmos)
0B0D9C B7                  A  4009    	OR	A,A
0B0D9D 28 7D               A  4010    	JR	Z,L_158
                           A  4011    ;  418			ptr = (char*)BUFFER1;
                           A  4012    .LINE 418
                           A  4013    
0B0D9F 01000005            A  4014    	LD	BC,327680
0B0DA3 DD0FFC              A  4015    	LD	(IX+%FFFFFFFC),BC
                           A  4016    ;  419			file = mos_fopen(mosfilename, f
                           A  4017    .LINE 419
                           A  4018    
0B0DA6 01010000            A  4019    	LD	BC,1
0B0DAA C5                  A  4020    	PUSH	BC
0B0DAB 01 F9 20 0B         A  4021    	LD	BC,_mosfilename
0B0DAF C5                  A  4022    	PUSH	BC
0B0DB0 CD 8F 10 0B         A  4023    	CALL	_mos_fopen
0B0DB4 C1                  A  4024    	POP	BC
0B0DB5 C1                  A  4025    	POP	BC
0B0DB6 DD77FF              A  4026    	LD	(IX+%FFFFFFFF),A
                           A  4027    ;  420			crc32_initialize();
                           A  4028    .LINE 420
                           A  4029    
0B0DB9 CD 21 14 0B         A  4030    	CALL	_crc32_initialize
                           A  4031    ;  421			
                           A  4032    ;  422			// Read file to memory
                           A  4033    ;  423			while((got = mos_fread(file, pt
                           A  4034    .LINE 423
                           A  4035    
0B0DBD 18 22               A  4036    	JR	L_148
0B0DBF                     A  4037    L_149:
                           A  4038    ;  424				crc32(ptr, got);
                           A  4039    .LINE 424
                           A  4040    
0B0DBF DD07F9              A  4041    	LD	BC,(IX+%FFFFFFF9)
0B0DC2 C5                  A  4042    	PUSH	BC
0B0DC3 DD07FC              A  4043    	LD	BC,(IX+%FFFFFFFC)
0B0DC6 C5                  A  4044    	PUSH	BC
0B0DC7 CD 73 14 0B         A  4045    	CALL	_crc32
0B0DCB C1                  A  4046    	POP	BC
0B0DCC C1                  A  4047    	POP	BC
                           A  4048    ;  425				ptr += got;
                           A  4049    .LINE 425
                           A  4050    
0B0DCD DD07F9              A  4051    	LD	BC,(IX+%FFFFFFF9)
0B0DD0 DD27FC              A  4052    	LD	HL,(IX+%FFFFFFFC)
0B0DD3 09                  A  4053    	ADD	HL,BC
0B0DD4 DD2FFC              A  4054    	LD	(IX+%FFFFFFFC),HL
                           A  4055    ;  426				putch('.');
                           A  4056    .LINE 426
                           A  4057    
0B0DD7 012E0000            A  4058    	LD	BC,46
0B0DDB C5                  A  4059    	PUSH	BC
0B0DDC CD E5 00 0B         A  4060    	CALL	_putch
0B0DE0 C1                  A  4061    	POP	BC
                           A  4062    ;  427			}		
0B0DE1                     A  4063    L_148:
                           A  4064    .LINE 427
                           A  4065    
0B0DE1 01004000            A  4066    	LD	BC,16384
0B0DE5 C5                  A  4067    	PUSH	BC
0B0DE6 DD07FC              A  4068    	LD	BC,(IX+%FFFFFFFC)
0B0DE9 C5                  A  4069    	PUSH	BC
0B0DEA DD4EFF              A  4070    	LD	C,(IX+%FFFFFFFF)
0B0DED 0600                A  4071    	LD	B,%0
0B0DEF C5                  A  4072    	PUSH	BC
0B0DF0 CD D1 10 0B         A  4073    	CALL	_mos_fread
0B0DF4 C1                  A  4074    	POP	BC
0B0DF5 C1                  A  4075    	POP	BC
0B0DF6 C1                  A  4076    	POP	BC
0B0DF7 DD2FF9              A  4077    	LD	(IX+%FFFFFFF9),HL
0B0DFA E5C1                A  4078    	LD	BC,HL
0B0DFC B7                  A  4079    	OR	A,A
0B0DFD ED62                A  4080    	SBC	HL,HL
0B0DFF B7                  A  4081    	OR	A,A
0B0E00 ED42                A  4082    	SBC	HL,BC
0B0E02 38 BB               A  4083    	JR	C,L_149
                           A  4084    ;  428			moscrc = crc32_finalize();
                           A  4085    .LINE 428
                           A  4086    
0B0E04 CD 36 14 0B         A  4087    	CALL	_crc32_finalize
0B0E08 22 F9 21 0B         A  4088    	LD	(_moscrc),HL
0B0E0C 7B                  A  4089    	LD	A,E
0B0E0D 32 FC 21 0B         A  4090    	LD	(_moscrc+3),A
                           A  4091    ;  429			mos_fclose(file);
                           A  4092    .LINE 429
                           A  4093    
0B0E11 DD4EFF              A  4094    	LD	C,(IX+%FFFFFFFF)
0B0E14 0600                A  4095    	LD	B,%0
0B0E16 C5                  A  4096    	PUSH	BC
0B0E17 CD A7 10 0B         A  4097    	CALL	_mos_fclose
0B0E1B C1                  A  4098    	POP	BC
                           A  4099    ;  430		}
0B0E1C                     A  4100    L_158:
                           A  4101    .LINE 430
                           A  4102    
                           A  4103    ;  431		if(flashvdp) {
                           A  4104    .LINE 431
                           A  4105    
0B0E1C 3A EB 20 0B         A  4106    	LD	A,(_flashvdp)
0B0E20 B7                  A  4107    	OR	A,A
0B0E21 28 6A               A  4108    	JR	Z,L_159
                           A  4109    ;  432			file = mos_fopen(vdpfilename, f
                           A  4110    .LINE 432
                           A  4111    
0B0E23 01010000            A  4112    	LD	BC,1
0B0E27 C5                  A  4113    	PUSH	BC
0B0E28 01 FD 21 0B         A  4114    	LD	BC,_vdpfilename
0B0E2C C5                  A  4115    	PUSH	BC
0B0E2D CD 8F 10 0B         A  4116    	CALL	_mos_fopen
0B0E31 C1                  A  4117    	POP	BC
0B0E32 C1                  A  4118    	POP	BC
0B0E33 DD77FF              A  4119    	LD	(IX+%FFFFFFFF),A
                           A  4120    ;  433			crc32_initialize();
                           A  4121    .LINE 433
                           A  4122    
0B0E36 CD 21 14 0B         A  4123    	CALL	_crc32_initialize
                           A  4124    ;  434			while(1) {
0B0E3A                     A  4125    L_155:
                           A  4126    .LINE 434
                           A  4127    
                           A  4128    ;  435				size = mos_fread(file, (cha
                           A  4129    .LINE 435
                           A  4130    
0B0E3A 01004000            A  4131    	LD	BC,16384
0B0E3E C5                  A  4132    	PUSH	BC
0B0E3F 01000005            A  4133    	LD	BC,327680
0B0E43 C5                  A  4134    	PUSH	BC
0B0E44 DD4EFF              A  4135    	LD	C,(IX+%FFFFFFFF)
0B0E47 0600                A  4136    	LD	B,%0
0B0E49 C5                  A  4137    	PUSH	BC
0B0E4A CD D1 10 0B         A  4138    	CALL	_mos_fread
0B0E4E C1                  A  4139    	POP	BC
0B0E4F C1                  A  4140    	POP	BC
0B0E50 C1                  A  4141    	POP	BC
0B0E51 DD2FF6              A  4142    	LD	(IX+%FFFFFFF6),HL
                           A  4143    ;  436				if(size == 0) break;
                           A  4144    .LINE 436
                           A  4145    
0B0E54 CD CC 1A 0B         A  4146    	CALL	__icmpzero
0B0E58 28 1B               A  4147    	JR	Z,L_156
                           A  4148    ;  437				putch('.');
                           A  4149    .LINE 437
                           A  4150    
0B0E5A 012E0000            A  4151    	LD	BC,46
0B0E5E C5                  A  4152    	PUSH	BC
0B0E5F CD E5 00 0B         A  4153    	CALL	_putch
0B0E63 C1                  A  4154    	POP	BC
                           A  4155    ;  438				crc32((char *)BUFFER1, size
                           A  4156    .LINE 438
                           A  4157    
0B0E64 DD07F6              A  4158    	LD	BC,(IX+%FFFFFFF6)
0B0E67 C5                  A  4159    	PUSH	BC
0B0E68 01000005            A  4160    	LD	BC,327680
0B0E6C C5                  A  4161    	PUSH	BC
0B0E6D CD 73 14 0B         A  4162    	CALL	_crc32
0B0E71 C1                  A  4163    	POP	BC
0B0E72 C1                  A  4164    	POP	BC
0B0E73 18 C5               A  4165    	JR	L_155
                           A  4166    ;  439			}
0B0E75                     A  4167    L_156:
                           A  4168    .LINE 439
                           A  4169    
                           A  4170    ;  440			vdpcrc = crc32_finalize();
                           A  4171    .LINE 440
                           A  4172    
0B0E75 CD 36 14 0B         A  4173    	CALL	_crc32_finalize
0B0E79 22 FD 22 0B         A  4174    	LD	(_vdpcrc),HL
0B0E7D 7B                  A  4175    	LD	A,E
0B0E7E 32 00 23 0B         A  4176    	LD	(_vdpcrc+3),A
                           A  4177    ;  441			mos_fclose(file);
                           A  4178    .LINE 441
                           A  4179    
0B0E82 DD4EFF              A  4180    	LD	C,(IX+%FFFFFFFF)
0B0E85 0600                A  4181    	LD	B,%0
0B0E87 C5                  A  4182    	PUSH	BC
0B0E88 CD A7 10 0B         A  4183    	CALL	_mos_fclose
0B0E8C C1                  A  4184    	POP	BC
                           A  4185    ;  442		}
0B0E8D                     A  4186    L_159:
                           A  4187    .LINE 442
                           A  4188    
                           A  4189    ;  443		printf("\r\n\r\n");
                           A  4190    .LINE 443
                           A  4191    
0B0E8D 01 0F 17 0B         A  4192    	LD	BC,___print_uputch
0B0E91 ED43 04 28 0B       A  4193    	LD	(___print_xputch),BC
0B0E96 01 7E 2B 0B         A  4194    	LD	BC,L__120
0B0E9A C5                  A  4195    	PUSH	BC
0B0E9B CD 9E 15 0B         A  4196    	CALL	___print_sendstring
0B0E9F C1                  A  4197    	POP	BC
                           A  4198    ;  444	}
                           A  4199    .LINE 444
                           A  4200    
0B0EA0 DDF9                A  4201    	LD	SP,IX
0B0EA2 DDE1                A  4202    	POP	IX
0B0EA4 C9                  A  4203    	RET	
                           A  4204    
                           A  4205    
                           A  4206    ;**************************** _calculateCRC32 *
                           A  4207    ;Name                         Addr/Register   S
                           A  4208    ;_vdpfilename                        STATIC    
                           A  4209    ;_flashvdp                           STATIC    
                           A  4210    ;_mos_fclose                         IMPORT  --
                           A  4211    ;_crc32_finalize                     IMPORT  --
                           A  4212    ;_mos_fread                          IMPORT  --
                           A  4213    ;_putch                              IMPORT  --
                           A  4214    ;_crc32                              IMPORT  --
                           A  4215    ;_crc32_initialize                   IMPORT  --
                           A  4216    ;_mosfilename                        STATIC    
                           A  4217    ;_mos_fopen                          IMPORT  --
                           A  4218    ;_flashmos                           STATIC    
                           A  4219    ;___print_sendstring                 IMPORT  --
                           A  4220    ;___print_xputch                     IMPORT    
                           A  4221    ;___print_uputch                     IMPORT  --
                           A  4222    ;_vdpcrc                             STATIC    
                           A  4223    ;_moscrc                             STATIC    
                           A  4224    ;size                                 IX-10    
                           A  4225    ;got                                   IX-7    
                           A  4226    ;ptr                                   IX-4    
                           A  4227    ;file                                  IX-1    
                           A  4228    
                           A  4229    
                           A  4230    ; Stack Frame Size: 16 (bytes)
                           A  4231    ;       Spill Code: 0 (instruction)
                           A  4232    
                           A  4233    
                           A  4234    .ENDFUNC "calculateCRC32",444,"_calculateCRC32"
                           A  4235    	SEGMENT STRSECT
0B2B6E                     A  4236    L__115:
0B2B6E 43616C63 756C6174   A  4237    	DB	"Calculating CRC"
0B2B76 696E6720 435243 
0B2B7D 00                  A  4238    	DB	0
0B2B7E                     A  4239    L__120:
0B2B7E 0D0A0D0A 00         A  4240    	DB	13,10,13,10,0
                           A  4241    	SEGMENT CODE
                           A  4242    ;  445	
                           A  4243    ;  446	int main(int argc, char * argv[]) {	
0B0EA5                     A  4244    _main:
                           A  4245    .DEFINE "_main"
                           A  4246    
                           A  4247    .VALUE _main
                           A  4248    
                           A  4249    .CLASS 2
                           A  4250    
                           A  4251    .TYPE 68
                           A  4252    
                           A  4253    .ENDEF
                           A  4254    
                           A  4255    .BEGFUNC "main",446,"_main"
                           A  4256    
                           A  4257    .LINE 446
                           A  4258    
                           A  4259    .DEFINE "argc"
                           A  4260    
                           A  4261    .CLASS 65
                           A  4262    
                           A  4263    .VALUE 6
                           A  4264    
                           A  4265    .TYPE 4
                           A  4266    
                           A  4267    .ENDEF
                           A  4268    
                           A  4269    .DEFINE "argv"
                           A  4270    
                           A  4271    .CLASS 65
                           A  4272    
                           A  4273    .VALUE 9
                           A  4274    
                           A  4275    .TYPE 290
                           A  4276    
                           A  4277    .ENDEF
                           A  4278    
                           A  4279    .DEFINE "n"
                           A  4280    
                           A  4281    .CLASS 65
                           A  4282    
                           A  4283    .VALUE -3
                           A  4284    
                           A  4285    .TYPE 4
                           A  4286    
                           A  4287    .ENDEF
                           A  4288    
                           A  4289    .DEFINE "sysvars"
                           A  4290    
                           A  4291    .CLASS 65
                           A  4292    
                           A  4293    .VALUE -6
                           A  4294    
                           A  4295    .TAG "NONAME3"
                           A  4296    
                           A  4297    .TYPE 40
                           A  4298    
                           A  4299    .ENDEF
                           A  4300    
0B0EA5 DDE5                A  4301    	PUSH	IX
0B0EA7 DD210000 00         A  4302    	LD	IX,0
0B0EAC DD39                A  4303    	ADD	IX,SP
0B0EAE C5                  A  4304    	PUSH	BC
0B0EAF C5                  A  4305    	PUSH	BC
                           A  4306    ;  447		sysvar_t *sysvars;
                           A  4307    ;  448		int n;
                           A  4308    ;  449		sysvars = getsysvars();
                           A  4309    .LINE 449
                           A  4310    
0B0EB0 CD 5F 10 0B         A  4311    	CALL	_getsysvars
0B0EB4 DD2FFA              A  4312    	LD	(IX+%FFFFFFFA),HL
                           A  4313    ;  450	
                           A  4314    ;  451		// All checks
                           A  4315    ;  452		if(argc == 1) {
                           A  4316    .LINE 452
                           A  4317    
0B0EB7 01010000            A  4318    	LD	BC,1
0B0EBB DD2706              A  4319    	LD	HL,(IX+%6)
0B0EBE B7                  A  4320    	OR	A,A
0B0EBF ED42                A  4321    	SBC	HL,BC
0B0EC1 20 0B               A  4322    	JR	NZ,L_163
                           A  4323    ;  453			usage();
                           A  4324    .LINE 453
                           A  4325    
0B0EC3 CD 50 03 0B         A  4326    	CALL	_usage
                           A  4327    ;  454			return 0;
                           A  4328    .LINE 454
                           A  4329    
0B0EC7 B7                  A  4330    	OR	A,A
0B0EC8 ED62                A  4331    	SBC	HL,HL
0B0ECA C3 34 10 0B         A  4332    	JR	L_192
                           A  4333    ;  455		}
0B0ECE                     A  4334    L_163:
                           A  4335    .LINE 455
                           A  4336    
                           A  4337    ;  456		if(!parseCommands(argc, argv)) {
                           A  4338    .LINE 456
                           A  4339    
0B0ECE DD0709              A  4340    	LD	BC,(IX+%9)
0B0ED1 C5                  A  4341    	PUSH	BC
0B0ED2 DD0706              A  4342    	LD	BC,(IX+%6)
0B0ED5 C5                  A  4343    	PUSH	BC
0B0ED6 CD EB 08 0B         A  4344    	CALL	_parseCommands
0B0EDA C1                  A  4345    	POP	BC
0B0EDB C1                  A  4346    	POP	BC
0B0EDC B7                  A  4347    	OR	A,A
0B0EDD 20 0C               A  4348    	JR	NZ,L_165
                           A  4349    ;  457			usage();
                           A  4350    .LINE 457
                           A  4351    
0B0EDF CD 50 03 0B         A  4352    	CALL	_usage
                           A  4353    ;  458			return EXIT_INVALIDPARAMETER;
                           A  4354    .LINE 458
                           A  4355    
0B0EE3 21130000            A  4356    	LD	HL,19
0B0EE7 C3 34 10 0B         A  4357    	JR	L_192
                           A  4358    ;  459		}
0B0EEB                     A  4359    L_165:
                           A  4360    .LINE 459
                           A  4361    
                           A  4362    ;  460		if(!filesExist()) return EXIT_FILEN
                           A  4363    .LINE 460
                           A  4364    
0B0EEB CD AB 0A 0B         A  4365    	CALL	_filesExist
0B0EEF B7                  A  4366    	OR	A,A
0B0EF0 20 08               A  4367    	JR	NZ,L_167
0B0EF2 21040000            A  4368    	LD	HL,4
0B0EF6 C3 34 10 0B         A  4369    	JR	L_192
0B0EFA                     A  4370    L_167:
                           A  4371    ;  461		if(!firmwareContentOK()) {
                           A  4372    .LINE 461
                           A  4373    
0B0EFA CD 68 0B 0B         A  4374    	CALL	_firmwareContentOK
0B0EFE B7                  A  4375    	OR	A,A
0B0EFF 20 08               A  4376    	JR	NZ,L_168
                           A  4377    ;  462			return EXIT_INVALIDPARAMETER;
                           A  4378    .LINE 462
                           A  4379    
0B0F01 21130000            A  4380    	LD	HL,19
0B0F05 C3 34 10 0B         A  4381    	JR	L_192
                           A  4382    ;  463		}
0B0F09                     A  4383    L_168:
                           A  4384    .LINE 463
                           A  4385    
                           A  4386    ;  464	
                           A  4387    ;  465		calculateCRC32();
                           A  4388    .LINE 465
                           A  4389    
0B0F09 CD 60 0D 0B         A  4390    	CALL	_calculateCRC32
                           A  4391    ;  466		// Skip showing CRC32 and user inpu
                           A  4392    ;  467		if(!silent) {
                           A  4393    .LINE 467
                           A  4394    
0B0F0D 3A EC 20 0B         A  4395    	LD	A,(_silent)
0B0F11 B7                  A  4396    	OR	A,A
0B0F12 20 20               A  4397    	JR	NZ,L_179
                           A  4398    ;  468			putch(12);
                           A  4399    .LINE 468
                           A  4400    
0B0F14 010C0000            A  4401    	LD	BC,12
0B0F18 C5                  A  4402    	PUSH	BC
0B0F19 CD E5 00 0B         A  4403    	CALL	_putch
0B0F1D C1                  A  4404    	POP	BC
                           A  4405    ;  469			print_version();
                           A  4406    .LINE 469
                           A  4407    
0B0F1E CD 2F 03 0B         A  4408    	CALL	_print_version
                           A  4409    ;  470			showCRC32();
                           A  4410    .LINE 470
                           A  4411    
0B0F22 CD AB 0C 0B         A  4412    	CALL	_showCRC32
                           A  4413    ;  471			if(!getResponse()) return 0;
                           A  4414    .LINE 471
                           A  4415    
0B0F26 CD 75 03 0B         A  4416    	CALL	_getResponse
0B0F2A B7                  A  4417    	OR	A,A
0B0F2B 20 07               A  4418    	JR	NZ,L_179
0B0F2D B7                  A  4419    	OR	A,A
0B0F2E ED62                A  4420    	SBC	HL,HL
0B0F30 C3 34 10 0B         A  4421    	JR	L_192
                           A  4422    ;  472		}
0B0F34                     A  4423    L_179:
                           A  4424    .LINE 472
                           A  4425    
                           A  4426    ;  473	
                           A  4427    ;  474		if(flashvdp) {
                           A  4428    .LINE 474
                           A  4429    
0B0F34 3A EB 20 0B         A  4430    	LD	A,(_flashvdp)
0B0F38 B7                  A  4431    	OR	A,A
0B0F39 28 3E               A  4432    	JR	Z,L_190
                           A  4433    ;  475			while(sysvars->scrheight == 0);
0B0F3B                     A  4434    L_172:
                           A  4435    .LINE 475
                           A  4436    
0B0F3B DD31FA              A  4437    	LD	IY,(IX+%FFFFFFFA)
0B0F3E FD2711              A  4438    	LD	HL,(IY+%11)
0B0F41 CD 21 1E 0B         A  4439    	CALL	__scmpzero
0B0F45 28 F4               A  4440    	JR	Z,L_172
                           A  4441    ;  476			//beep(1);
                           A  4442    ;  477			sysvars->scrheight = 0;
                           A  4443    .LINE 477
                           A  4444    
0B0F47 DD31FA              A  4445    	LD	IY,(IX+%FFFFFFFA)
0B0F4A FD361100            A  4446    	LD	(IY+%11),%0
0B0F4E FD361200            A  4447    	LD	(IY+%12),%0
                           A  4448    ;  478			if(flashvdp) update_vdp(vdpfile
                           A  4449    .LINE 478
                           A  4450    
0B0F52 3A EB 20 0B         A  4451    	LD	A,(_flashvdp)
0B0F56 B7                  A  4452    	OR	A,A
0B0F57 28 0A               A  4453    	JR	Z,L_175
0B0F59 01 FD 21 0B         A  4454    	LD	BC,_vdpfilename
0B0F5D C5                  A  4455    	PUSH	BC
0B0F5E CD F9 03 0B         A  4456    	CALL	_update_vdp
0B0F62 C1                  A  4457    	POP	BC
0B0F63                     A  4458    L_175:
                           A  4459    ;  479			echoVDP(1);
                           A  4460    .LINE 479
                           A  4461    
0B0F63 01010000            A  4462    	LD	BC,1
0B0F67 C5                  A  4463    	PUSH	BC
0B0F68 CD 13 08 0B         A  4464    	CALL	_echoVDP
0B0F6C C1                  A  4465    	POP	BC
                           A  4466    ;  480			while(sysvars->scrheight == 0);
0B0F6D                     A  4467    L_177:
                           A  4468    .LINE 480
                           A  4469    
0B0F6D DD31FA              A  4470    	LD	IY,(IX+%FFFFFFFA)
0B0F70 FD2711              A  4471    	LD	HL,(IY+%11)
0B0F73 CD 21 1E 0B         A  4472    	CALL	__scmpzero
0B0F77 28 F4               A  4473    	JR	Z,L_177
                           A  4474    ;  481		}
0B0F79                     A  4475    L_190:
                           A  4476    .LINE 481
                           A  4477    
                           A  4478    ;  482		if(flashmos) {
                           A  4479    .LINE 482
                           A  4480    
0B0F79 3A EA 20 0B         A  4481    	LD	A,(_flashmos)
0B0F7D B7                  A  4482    	OR	A,A
0B0F7E CA 31 10 0B         A  4483    	JR	Z,L_191
                           A  4484    ;  483			//beep(2);
                           A  4485    ;  484			if(update_mos(mosfilename)) {
                           A  4486    .LINE 484
                           A  4487    
0B0F82 01 F9 20 0B         A  4488    	LD	BC,_mosfilename
0B0F86 C5                  A  4489    	PUSH	BC
0B0F87 CD 9F 04 0B         A  4490    	CALL	_update_mos
0B0F8B C1                  A  4491    	POP	BC
0B0F8C B7                  A  4492    	OR	A,A
0B0F8D 28 7A               A  4493    	JR	Z,L_188
                           A  4494    ;  485				printf("\r\nDone\r\n\r\n");
                           A  4495    .LINE 485
                           A  4496    
0B0F8F 01 0F 17 0B         A  4497    	LD	BC,___print_uputch
0B0F93 ED43 04 28 0B       A  4498    	LD	(___print_xputch),BC
0B0F98 01 83 2B 0B         A  4499    	LD	BC,L__134
0B0F9C C5                  A  4500    	PUSH	BC
0B0F9D CD 9E 15 0B         A  4501    	CALL	___print_sendstring
0B0FA1 C1                  A  4502    	POP	BC
                           A  4503    ;  486				//beep(3);
                           A  4504    ;  487				//printf("Press reset butto
                           A  4505    ;  488				//while(1);
                           A  4506    ;  489				printf("System reset in ");
                           A  4507    .LINE 489
                           A  4508    
0B0FA2 01 0F 17 0B         A  4509    	LD	BC,___print_uputch
0B0FA6 ED43 04 28 0B       A  4510    	LD	(___print_xputch),BC
0B0FAB 01 8E 2B 0B         A  4511    	LD	BC,L__135
0B0FAF C5                  A  4512    	PUSH	BC
0B0FB0 CD 9E 15 0B         A  4513    	CALL	___print_sendstring
0B0FB4 C1                  A  4514    	POP	BC
                           A  4515    ;  490				for(n = 3; n > 0; n--) {
                           A  4516    .LINE 490
                           A  4517    
0B0FB5 01030000            A  4518    	LD	BC,3
0B0FB9 DD0FFD              A  4519    	LD	(IX+%FFFFFFFD),BC
0B0FBC 18 38               A  4520    	JR	L_183
0B0FBE                     A  4521    L_181:
                           A  4522    ;  491					printf("%d...", n);
                           A  4523    .LINE 491
                           A  4524    
0B0FBE 01 0F 17 0B         A  4525    	LD	BC,___print_uputch
0B0FC2 ED43 04 28 0B       A  4526    	LD	(___print_xputch),BC
0B0FC7 DD07FD              A  4527    	LD	BC,(IX+%FFFFFFFD)
0B0FCA CD A7 1D 0B         A  4528    	CALL	__itol
0B0FCE C5D1                A  4529    	LD	DE,BC
0B0FD0 4F                  A  4530    	LD	C,A
0B0FD1 0600                A  4531    	LD	B,%0
0B0FD3 C5                  A  4532    	PUSH	BC
0B0FD4 D5                  A  4533    	PUSH	DE
0B0FD5 CD 95 17 0B         A  4534    	CALL	__u_itoa
0B0FD9 C1                  A  4535    	POP	BC
0B0FDA C1                  A  4536    	POP	BC
0B0FDB 01 9F 2B 0B         A  4537    	LD	BC,L__136
0B0FDF C5                  A  4538    	PUSH	BC
0B0FE0 CD 9E 15 0B         A  4539    	CALL	___print_sendstring
0B0FE4 C1                  A  4540    	POP	BC
                           A  4541    ;  492					delayms(1000);
                           A  4542    .LINE 492
                           A  4543    
0B0FE5 01E80300            A  4544    	LD	BC,1000
0B0FE9 C5                  A  4545    	PUSH	BC
0B0FEA CD 3B 12 0B         A  4546    	CALL	_delayms
0B0FEE C1                  A  4547    	POP	BC
0B0FEF DD07FD              A  4548    	LD	BC,(IX+%FFFFFFFD)
0B0FF2 0B                  A  4549    	DEC	BC
0B0FF3 DD0FFD              A  4550    	LD	(IX+%FFFFFFFD),BC
                           A  4551    ;  493				}
0B0FF6                     A  4552    L_183:
                           A  4553    .LINE 493
                           A  4554    
0B0FF6 DD07FD              A  4555    	LD	BC,(IX+%FFFFFFFD)
0B0FF9 B7                  A  4556    	OR	A,A
0B0FFA ED62                A  4557    	SBC	HL,HL
0B0FFC B7                  A  4558    	OR	A,A
0B0FFD ED42                A  4559    	SBC	HL,BC
0B0FFF FA BE 0F 0B         A  4560    	JP	M,L_181
                           A  4561    ;  494				reset();
                           A  4562    .LINE 494
                           A  4563    
0B1003 CD 95 11 0B         A  4564    	CALL	_reset
                           A  4565    ;  495			}
                           A  4566    ;  496			else {
                           A  4567    .LINE 496
                           A  4568    
0B1007 18 28               A  4569    	JR	L_191
0B1009                     A  4570    L_188:
                           A  4571    ;  497				printf("\r\nMultiple errors
                           A  4572    .LINE 497
                           A  4573    
0B1009 01 0F 17 0B         A  4574    	LD	BC,___print_uputch
0B100D ED43 04 28 0B       A  4575    	LD	(___print_xputch),BC
0B1012 01 A3 2B 0B         A  4576    	LD	BC,L__138
0B1016 C5                  A  4577    	PUSH	BC
0B1017 CD 9E 15 0B         A  4578    	CALL	___print_sendstring
0B101B C1                  A  4579    	POP	BC
                           A  4580    ;  498				printf("System needs bare-m
                           A  4581    .LINE 498
                           A  4582    
0B101C 01 0F 17 0B         A  4583    	LD	BC,___print_uputch
0B1020 ED43 04 28 0B       A  4584    	LD	(___print_xputch),BC
0B1025 01 D3 2B 0B         A  4585    	LD	BC,L__139
0B1029 C5                  A  4586    	PUSH	BC
0B102A CD 9E 15 0B         A  4587    	CALL	___print_sendstring
0B102E C1                  A  4588    	POP	BC
                           A  4589    ;  499				while(1); // nothing alive 
0B102F                     A  4590    L_186:
                           A  4591    .LINE 499
                           A  4592    
0B102F 18 FE               A  4593    	JR	L_186
                           A  4594    ;  500			}
                           A  4595    ;  501		}
0B1031                     A  4596    L_191:
                           A  4597    .LINE 501
                           A  4598    
                           A  4599    ;  502		return 0;
                           A  4600    .LINE 502
                           A  4601    
0B1031 B7                  A  4602    	OR	A,A
0B1032 ED62                A  4603    	SBC	HL,HL
                           A  4604    ;  503	}
0B1034                     A  4605    L_192:
                           A  4606    .LINE 503
                           A  4607    
0B1034 DDF9                A  4608    	LD	SP,IX
0B1036 DDE1                A  4609    	POP	IX
0B1038 C9                  A  4610    	RET	
                           A  4611    
                           A  4612    
                           A  4613    ;**************************** _main ***********
                           A  4614    ;Name                         Addr/Register   S
                           A  4615    ;_reset                              IMPORT  --
                           A  4616    ;_delayms                            IMPORT  --
                           A  4617    ;__u_itoa                            IMPORT  --
                           A  4618    ;___print_sendstring                 IMPORT  --
                           A  4619    ;___print_xputch                     IMPORT    
                           A  4620    ;___print_uputch                     IMPORT  --
                           A  4621    ;_mosfilename                        STATIC    
                           A  4622    ;_flashmos                           STATIC    
                           A  4623    ;_vdpfilename                        STATIC    
                           A  4624    ;_flashvdp                           STATIC    
                           A  4625    ;_putch                              IMPORT  --
                           A  4626    ;_silent                             STATIC    
                           A  4627    ;_getsysvars                         IMPORT  --
                           A  4628    ;sysvars                               IX-6    
                           A  4629    ;n                                     IX-3    
                           A  4630    ;argv                                  IX+9    
                           A  4631    ;argc                                  IX+6    
                           A  4632    
                           A  4633    
                           A  4634    ; Stack Frame Size: 18 (bytes)
                           A  4635    ;       Spill Code: 0 (instruction)
                           A  4636    
                           A  4637    
                           A  4638    .ENDFUNC "main",503,"_main"
                           A  4639    	SEGMENT STRSECT
0B2B83                     A  4640    L__134:
0B2B83 0D0A                A  4641    	DB	13,10
0B2B85 446F6E65            A  4642    	DB	"Done"
0B2B89 0D0A0D0A 00         A  4643    	DB	13,10,13,10,0
0B2B8E                     A  4644    L__135:
0B2B8E 53797374 656D2072   A  4645    	DB	"System reset in "
0B2B96 65736574 20696E20 
0B2B9E 00                  A  4646    	DB	0
0B2B9F                     A  4647    L__136:
0B2B9F 2E2E2E              A  4648    	DB	"..."
0B2BA2 00                  A  4649    	DB	0
0B2BA3                     A  4650    L__138:
0B2BA3 0D0A                A  4651    	DB	13,10
0B2BA5 4D756C74 69706C65   A  4652    	DB	"Multiple errors occured during flash w
0B2BAD 20657272 6F727320 
0B2BB5 6F636375 72656420 
0B2BBD 64757269 6E672066 
0B2BC5 6C617368 20777269 
0B2BCD 74652E 
0B2BD0 0D0A00              A  4653    	DB	13,10,0
0B2BD3                     A  4654    L__139:
0B2BD3 53797374 656D206E   A  4655    	DB	"System needs bare-metal recovery."
0B2BDB 65656473 20626172 
0B2BE3 652D6D65 74616C20 
0B2BEB 7265636F 76657279 
0B2BF3 2E 
0B2BF4 0D0A00              A  4656    	DB	13,10,0
                           A  4657    	XREF _memcmp:ROM
                           A  4658    	XREF _strcpy:ROM
                           A  4659    	XREF _getFileSize:ROM
                           A  4660    	XREF _crc32_finalize:ROM
                           A  4661    	XREF _crc32_initialize:ROM
                           A  4662    	XREF _crc32:ROM
                           A  4663    	XREF _delayms:ROM
                           A  4664    	XREF _startVDPupdate:ROM
                           A  4665    	XREF _reset:ROM
                           A  4666    	XREF _fastmemcpy:ROM
                           A  4667    	XREF _lockFlashKeyRegister:ROM
                           A  4668    	XREF _enableFlashKeyRegister:ROM
                           A  4669    	XREF _mos_fread:ROM
                           A  4670    	XREF _mos_fclose:ROM
                           A  4671    	XREF _mos_fopen:ROM
                           A  4672    	XREF _getsysvars:ROM
                           A  4673    	XREF _getch:ROM
                           A  4674    	XREF _tolower:ROM
                           A  4675    	XREF __u_ultoa:ROM
                           A  4676    	XREF __u_itoa:ROM
                           A  4677    	XREF ___print_sendstring:ROM
                           A  4678    	XREF ___print_xputch:ROM
                           A  4679    	XREF ___print_uputch:ROM
                           A  4680    	XREF ___print_fmt:ROM
                           A  4681    	XREF __lcmpu:ROM
                           A  4682    	XREF __iand:ROM
                           A  4683    	XREF __stoiu:ROM
                           A  4684    	XREF __itol:ROM
                           A  4685    	XREF __scmpzero:ROM
                           A  4686    	XREF __icmpzero:ROM
                           A  4687    	XREF __seqcaseD:ROM
                           A  4688    	XREF __ishru_b:ROM
                           A  4689    	XREF __ishrs_b:ROM
                           A  4690    	XDEF _main
                           A  4691    	XDEF _calculateCRC32
                           A  4692    	XDEF _showCRC32
                           A  4693    	XDEF _firmwareContentOK
                           A  4694    	XDEF _filesExist
                           A  4695    	XDEF _parseCommands
                           A  4696    	XDEF _getCommand
                           A  4697    	XDEF _echoVDP
                           A  4698    	XDEF _update_mos
                           A  4699    	XDEF _update_vdp
                           A  4700    	XDEF _getResponse
                           A  4701    	XDEF _usage
                           A  4702    	XDEF _print_version
                           A  4703    	XDEF _containsESP32Header
                           A  4704    	XDEF _esp32_magicnumbers
                           A  4705    	XDEF _containsMosHeader
                           A  4706    	XDEF _mos_magicnumbers
                           A  4707    	XDEF _vdp_ota_present
                           A  4708    	XDEF _getCharAt
                           A  4709    	XDEF _beep
                           A  4710    	XDEF _putch
                           A  4711    	XDEF _silent
                           A  4712    	XDEF _vdpcrc
                           A  4713    	XDEF _vdpfilename
                           A  4714    	XDEF _flashvdp
                           A  4715    	XDEF _moscrc
                           A  4716    	XDEF _mosfilename
                           A  4717    	XDEF _flashmos
                           A  4718    	XDEF _errno
                           A  4719    	END


Errors: 0
Warnings: 0
Lines Assembled: 4720
