Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED01-Nov-23     20:16:42     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",51
                           A   144    .DEFINE "clock"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 15
                           A   148    .ENDEF
                           A   149    .DEFINE "vpd_protocol_flags"
                           A   150    .VALUE 4
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "keyascii"
                           A   155    .VALUE 5
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "keymods"
                           A   160    .VALUE 6
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "cursorX"
                           A   165    .VALUE 7
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "cursorY"
                           A   170    .VALUE 8
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "scrchar"
                           A   175    .VALUE 9
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "scrpixel"
                           A   180    .VALUE 10
                           A   181    .CLASS 8
                           A   182    .TYPE 14
                           A   183    .ENDEF
                           A   184    .DEFINE "audioChannel"
                           A   185    .VALUE 13
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "audioSuccess"
                           A   190    .VALUE 14
                           A   191    .CLASS 8
                           A   192    .TYPE 12
                           A   193    .ENDEF
                           A   194    .DEFINE "scrwidth"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 13
                           A   198    .ENDEF
                           A   199    .DEFINE "scrheight"
                           A   200    .VALUE 17
                           A   201    .CLASS 8
                           A   202    .TYPE 13
                           A   203    .ENDEF
                           A   204    .DEFINE "scrcols"
                           A   205    .VALUE 19
                           A   206    .CLASS 8
                           A   207    .TYPE 12
                           A   208    .ENDEF
                           A   209    .DEFINE "scrrows"
                           A   210    .VALUE 20
                           A   211    .CLASS 8
                           A   212    .TYPE 12
                           A   213    .ENDEF
                           A   214    .DEFINE "scrcolours"
                           A   215    .VALUE 21
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "scrpixelIndex"
                           A   220    .VALUE 22
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "keycode"
                           A   225    .VALUE 23
                           A   226    .CLASS 8
                           A   227    .TYPE 12
                           A   228    .ENDEF
                           A   229    .DEFINE "keydown"
                           A   230    .VALUE 24
                           A   231    .CLASS 8
                           A   232    .TYPE 12
                           A   233    .ENDEF
                           A   234    .DEFINE "keycount"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 12
                           A   238    .ENDEF
                           A   239    .DEFINE "rtc"
                           A   240    .VALUE 26
                           A   241    .CLASS 8
                           A   242    .DIM 6
                           A   243    .TYPE 108
                           A   244    .ENDEF
                           A   245    .DEFINE "rtc_spare"
                           A   246    .VALUE 32
                           A   247    .CLASS 8
                           A   248    .DIM 2
                           A   249    .TYPE 108
                           A   250    .ENDEF
                           A   251    .DEFINE "keydelay"
                           A   252    .VALUE 34
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .DEFINE "keyrate"
                           A   257    .VALUE 36
                           A   258    .CLASS 8
                           A   259    .TYPE 13
                           A   260    .ENDEF
                           A   261    .DEFINE "keyled"
                           A   262    .VALUE 38
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "scrmode"
                           A   267    .VALUE 39
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "rtc_enable"
                           A   272    .VALUE 40
                           A   273    .CLASS 8
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    .DEFINE "mouseX"
                           A   277    .VALUE 41
                           A   278    .CLASS 8
                           A   279    .TYPE 13
                           A   280    .ENDEF
                           A   281    .DEFINE "mouseY"
                           A   282    .VALUE 43
                           A   283    .CLASS 8
                           A   284    .TYPE 13
                           A   285    .ENDEF
                           A   286    .DEFINE "mouseButtons"
                           A   287    .VALUE 45
                           A   288    .CLASS 8
                           A   289    .TYPE 12
                           A   290    .ENDEF
                           A   291    .DEFINE "mouseWheel"
                           A   292    .VALUE 46
                           A   293    .CLASS 8
                           A   294    .TYPE 12
                           A   295    .ENDEF
                           A   296    .DEFINE "mouseXDelta"
                           A   297    .VALUE 47
                           A   298    .CLASS 8
                           A   299    .TYPE 13
                           A   300    .ENDEF
                           A   301    .DEFINE "mouseYDelta"
                           A   302    .VALUE 49
                           A   303    .CLASS 8
                           A   304    .TYPE 13
                           A   305    .ENDEF
                           A   306    .ENDREC "NONAME3"
                           A   307    .BEGREC "NONAME4",8
                           A   308    .DEFINE "baudRate"
                           A   309    .VALUE 0
                           A   310    .CLASS 8
                           A   311    .TYPE 4
                           A   312    .ENDEF
                           A   313    .DEFINE "dataBits"
                           A   314    .VALUE 3
                           A   315    .CLASS 8
                           A   316    .TYPE 12
                           A   317    .ENDEF
                           A   318    .DEFINE "stopBits"
                           A   319    .VALUE 4
                           A   320    .CLASS 8
                           A   321    .TYPE 12
                           A   322    .ENDEF
                           A   323    .DEFINE "parity"
                           A   324    .VALUE 5
                           A   325    .CLASS 8
                           A   326    .TYPE 12
                           A   327    .ENDEF
                           A   328    .DEFINE "flowcontrol"
                           A   329    .VALUE 6
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "eir"
                           A   334    .VALUE 7
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .ENDREC "NONAME4"
                           A   339    .BEGREC "NONAME5",15
                           A   340    .DEFINE "fs"
                           A   341    .VALUE 0
                           A   342    .CLASS 8
                           A   343    .TYPE 46
                           A   344    .ENDEF
                           A   345    .DEFINE "id"
                           A   346    .VALUE 3
                           A   347    .CLASS 8
                           A   348    .TYPE 13
                           A   349    .ENDEF
                           A   350    .DEFINE "attr"
                           A   351    .VALUE 5
                           A   352    .CLASS 8
                           A   353    .TYPE 12
                           A   354    .ENDEF
                           A   355    .DEFINE "stat"
                           A   356    .VALUE 6
                           A   357    .CLASS 8
                           A   358    .TYPE 12
                           A   359    .ENDEF
                           A   360    .DEFINE "sclust"
                           A   361    .VALUE 7
                           A   362    .CLASS 8
                           A   363    .TYPE 15
                           A   364    .ENDEF
                           A   365    .DEFINE "objsize"
                           A   366    .VALUE 11
                           A   367    .CLASS 8
                           A   368    .TYPE 15
                           A   369    .ENDEF
                           A   370    .ENDREC "NONAME5"
                           A   371    .BEGREC "NONAME6",36
                           A   372    .DEFINE "obj"
                           A   373    .VALUE 0
                           A   374    .CLASS 8
                           A   375    .TAG "NONAME5"
                           A   376    .TYPE 8
                           A   377    .ENDEF
                           A   378    .DEFINE "flag"
                           A   379    .VALUE 15
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .DEFINE "err"
                           A   384    .VALUE 16
                           A   385    .CLASS 8
                           A   386    .TYPE 12
                           A   387    .ENDEF
                           A   388    .DEFINE "fptr"
                           A   389    .VALUE 17
                           A   390    .CLASS 8
                           A   391    .TYPE 15
                           A   392    .ENDEF
                           A   393    .DEFINE "clust"
                           A   394    .VALUE 21
                           A   395    .CLASS 8
                           A   396    .TYPE 15
                           A   397    .ENDEF
                           A   398    .DEFINE "sect"
                           A   399    .VALUE 25
                           A   400    .CLASS 8
                           A   401    .TYPE 15
                           A   402    .ENDEF
                           A   403    .DEFINE "dir_sect"
                           A   404    .VALUE 29
                           A   405    .CLASS 8
                           A   406    .TYPE 15
                           A   407    .ENDEF
                           A   408    .DEFINE "dir_ptr"
                           A   409    .VALUE 33
                           A   410    .CLASS 8
                           A   411    .TYPE 46
                           A   412    .ENDEF
                           A   413    .ENDREC "NONAME6"
                           A   414    	SEGMENT BSS
0B27E9                     A   415    _errno:
0B27E9                     A   416    	DS	3
                           A   417    .DEFINE "errno"
                           A   418    .ALIAS "_errno"
                           A   419    .CLASS 83
                           A   420    .VALUE _errno
                           A   421    .TYPE 4
                           A   422    .ENDEF
                           A   423    ;    1	/*
                           A   424    ;    2	 * Title:			Agon firmware upgra
                           A   425    ;    3	 * Author:			Jeroen Venema
                           A   426    ;    4	 * Created:			17/12/2022
                           A   427    ;    5	 * Last Updated:	14/10/2023
                           A   428    ;    6	 * 
                           A   429    ;    7	 * Modinfo:
                           A   430    ;    8	 * 17/12/2022:		Initial version
                           A   431    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   432    ;   10	 *                  Sends cls just befo
                           A   433    ;   11	 * 07/06/2023:		Included faster crc
                           A   434    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   435    ;   13	 */
                           A   436    ;   14	
                           A   437    ;   15	#include <ez80.h>
                           A   438    ;   16	#include <stdio.h>
                           A   439    ;   17	#include <stdlib.h>
                           A   440    ;   18	#include <ERRNO.H>
                           A   441    ;   19	#include <ctype.h>
                           A   442    ;   20	#include "mos-interface.h"
                           A   443    ;   21	#include "flash.h"
                           A   444    ;   22	#include "agontimer.h"
                           A   445    ;   23	#include "crc32.h"
                           A   446    ;   24	#include "filesize.h"
                           A   447    ;   25	#include "./stdint.h"
                           A   448    ;   26	#include <string.h>
                           A   449    ;   27	
                           A   450    ;   28	#define UNLOCKMATCHLENGTH 9
                           A   451    ;   29	#define EXIT_FILENOTFOUND	4
                           A   452    ;   30	#define EXIT_INVALIDPARAMETER	19
                           A   453    ;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
                           A   454    ;   32	#define DEFAULT_VDPFIRMWARE	"firmware.b
                           A   455    ;   33	
                           A   456    ;   34	#define CMDUNKNOWN	0
                           A   457    ;   35	#define CMDALL		1
                           A   458    ;   36	#define CMDMOS		2
                           A   459    ;   37	#define CMDVDP		3
                           A   460    ;   38	
                           A   461    ;   39	int errno; // needed by standard librar
                           A   462    	SEGMENT CODE
                           A   463    ;   40	enum states{firmware,retry,systemreset}
                           A   464    ;   41	
                           A   465    ;   42	// separate putch function that doesn't
                           A   466    ;   43	// UART0 initialization done by MOS fir
                           A   467    ;   44	// This utility doesn't run without MOS
                           A   468    ;   45	int putch(int c)
                           A   469    ;   46	{
0B00E5                     A   470    _putch:
                           A   471    .DEFINE "_putch"
                           A   472    
                           A   473    .VALUE _putch
                           A   474    
                           A   475    .CLASS 2
                           A   476    
                           A   477    .TYPE 68
                           A   478    
                           A   479    .ENDEF
                           A   480    
                           A   481    .BEGFUNC "putch",46,"_putch"
                           A   482    
                           A   483    .LINE 46
                           A   484    
                           A   485    .DEFINE "c"
                           A   486    
                           A   487    .CLASS 65
                           A   488    
                           A   489    .VALUE 6
                           A   490    
                           A   491    .TYPE 4
                           A   492    
0B00E5 DDE5                A   493    	PUSH	IX
0B00E7 DD210000 00         A   494    	LD	IX,0
0B00EC DD39                A   495    	ADD	IX,SP
                           A   496    .ENDEF
                           A   497    
                           A   498    ;   47		UINT8 lsr,temt;
                           A   499    ;   48		
                           A   500    ;   49		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   501    L_1:
                           A   502    .LINE 49
                           A   503    
0B00EE ED38C5              A   504    	IN0	A,(197)
0B00F1 E640                A   505    	AND	A,%40
0B00F3 B7ED62              A   506    	UEXT	HL
0B00F6 6F                  A   507    	LD	L,A
0B00F7 CD 63 18 0B         A   508    	CALL	__icmpzero
0B00FB 28 F1               A   509    	JR	Z,L_1
                           A   510    ;   50		UART0_THR = c;
                           A   511    .LINE 50
                           A   512    
0B00FD DD7E06              A   513    	LD	A,(IX+%6)
0B0100 ED39C0              A   514    	OUT0	(192),A
                           A   515    ;   51		return c;
                           A   516    .LINE 51
                           A   517    
0B0103 DD2706              A   518    	LD	HL,(IX+%6)
                           A   519    ;   52	}
                           A   520    .LINE 52
                           A   521    
0B0106 DDF9                A   522    	LD	SP,IX
0B0108 DDE1                A   523    	POP	IX
0B010A C9                  A   524    	RET	
                           A   525    
                           A   526    
                           A   527    ;**************************** _putch **********
                           A   528    ;Name                         Addr/Register   S
                           A   529    ;c                                     IX+6    
                           A   530    
                           A   531    
                           A   532    ; Stack Frame Size: 9 (bytes)
                           A   533    ;       Spill Code: 0 (instruction)
                           A   534    
                           A   535    
                           A   536    .ENDFUNC "putch",52,"_putch"
                           A   537    ;   53	
                           A   538    ;   54	void beep(unsigned int number) {
0B010B                     A   539    _beep:
                           A   540    .DEFINE "_beep"
                           A   541    
                           A   542    .VALUE _beep
                           A   543    
                           A   544    .CLASS 2
                           A   545    
                           A   546    .TYPE 65
                           A   547    
                           A   548    .ENDEF
                           A   549    
                           A   550    .BEGFUNC "beep",54,"_beep"
                           A   551    
                           A   552    .LINE 54
                           A   553    
                           A   554    .DEFINE "number"
                           A   555    
                           A   556    .CLASS 65
                           A   557    
                           A   558    .VALUE 6
                           A   559    
                           A   560    .TYPE 14
                           A   561    
                           A   562    .ENDEF
                           A   563    
0B010B DDE5                A   564    	PUSH	IX
0B010D DD210000 00         A   565    	LD	IX,0
0B0112 DD39                A   566    	ADD	IX,SP
                           A   567    ;   55		while(number--) {
                           A   568    .LINE 55
                           A   569    
0B0114 18 14               A   570    	JR	L_5
0B0116                     A   571    L_6:
                           A   572    ;   56			putch(7);
                           A   573    .LINE 56
                           A   574    
0B0116 01070000            A   575    	LD	BC,7
0B011A C5                  A   576    	PUSH	BC
0B011B CD E5 00 0B         A   577    	CALL	_putch
0B011F C1                  A   578    	POP	BC
                           A   579    ;   57			delayms(250);
                           A   580    .LINE 57
                           A   581    
0B0120 01FA0000            A   582    	LD	BC,250
0B0124 C5                  A   583    	PUSH	BC
0B0125 CD D2 0F 0B         A   584    	CALL	_delayms
0B0129 C1                  A   585    	POP	BC
                           A   586    ;   58		}
0B012A                     A   587    L_5:
                           A   588    .LINE 58
                           A   589    
0B012A DD2706              A   590    	LD	HL,(IX+%6)
0B012D DD3106              A   591    	LD	IY,(IX+%6)
0B0130 ED33FF              A   592    	LEA	IY,IY+%FFFFFFFF
0B0133 DD3E06              A   593    	LD	(IX+%6),IY
0B0136 CD 63 18 0B         A   594    	CALL	__icmpzero
0B013A 20 DA               A   595    	JR	NZ,L_6
                           A   596    ;   59	}
                           A   597    .LINE 59
                           A   598    
0B013C DDF9                A   599    	LD	SP,IX
0B013E DDE1                A   600    	POP	IX
0B0140 C9                  A   601    	RET	
                           A   602    
                           A   603    
                           A   604    ;**************************** _beep ***********
                           A   605    ;Name                         Addr/Register   S
                           A   606    ;_delayms                            IMPORT  --
                           A   607    ;_putch                              IMPORT  --
                           A   608    ;number                                IX+6    
                           A   609    
                           A   610    
                           A   611    ; Stack Frame Size: 9 (bytes)
                           A   612    ;       Spill Code: 0 (instruction)
                           A   613    
                           A   614    
                           A   615    .ENDFUNC "beep",59,"_beep"
                           A   616    ;   60	
                           A   617    ;   61	uint8_t getCharAt(uint16_t x, uint16_t 
0B0141                     A   618    _getCharAt:
                           A   619    .DEFINE "_getCharAt"
                           A   620    
                           A   621    .VALUE _getCharAt
                           A   622    
                           A   623    .CLASS 2
                           A   624    
                           A   625    .TYPE 76
                           A   626    
                           A   627    .ENDEF
                           A   628    
                           A   629    .BEGFUNC "getCharAt",61,"_getCharAt"
                           A   630    
                           A   631    .LINE 61
                           A   632    
                           A   633    .DEFINE "x"
                           A   634    
                           A   635    .CLASS 65
                           A   636    
                           A   637    .VALUE 6
                           A   638    
                           A   639    .TYPE 13
                           A   640    
                           A   641    .ENDEF
                           A   642    
                           A   643    .DEFINE "y"
                           A   644    
                           A   645    .CLASS 65
                           A   646    
                           A   647    .VALUE 9
                           A   648    
                           A   649    .TYPE 13
                           A   650    
                           A   651    .ENDEF
                           A   652    
                           A   653    .DEFINE "sysvars"
                           A   654    
                           A   655    .CLASS 65
                           A   656    
                           A   657    .VALUE -3
                           A   658    
                           A   659    .TAG "NONAME3"
                           A   660    
                           A   661    .TYPE 40
                           A   662    
                           A   663    .ENDEF
                           A   664    
0B0141 DDE5                A   665    	PUSH	IX
0B0143 DD210000 00         A   666    	LD	IX,0
0B0148 DD39                A   667    	ADD	IX,SP
0B014A C5                  A   668    	PUSH	BC
                           A   669    ;   62		sysvar_t *sysvars = getsysvars();
                           A   670    .LINE 62
                           A   671    
0B014B CD F6 0D 0B         A   672    	CALL	_getsysvars
0B014F DD2FFD              A   673    	LD	(IX+%FFFFFFFD),HL
                           A   674    ;   63		delayms(20);
                           A   675    .LINE 63
                           A   676    
0B0152 01140000            A   677    	LD	BC,20
0B0156 C5                  A   678    	PUSH	BC
0B0157 CD D2 0F 0B         A   679    	CALL	_delayms
0B015B C1                  A   680    	POP	BC
                           A   681    ;   64		putch(23);
                           A   682    .LINE 64
                           A   683    
0B015C 01170000            A   684    	LD	BC,23
0B0160 C5                  A   685    	PUSH	BC
0B0161 CD E5 00 0B         A   686    	CALL	_putch
0B0165 C1                  A   687    	POP	BC
                           A   688    ;   65		putch(0);
                           A   689    .LINE 65
                           A   690    
0B0166 01000000            A   691    	LD	BC,0
0B016A C5                  A   692    	PUSH	BC
0B016B CD E5 00 0B         A   693    	CALL	_putch
0B016F C1                  A   694    	POP	BC
                           A   695    ;   66		putch(131);
                           A   696    .LINE 66
                           A   697    
0B0170 01830000            A   698    	LD	BC,131
0B0174 C5                  A   699    	PUSH	BC
0B0175 CD E5 00 0B         A   700    	CALL	_putch
0B0179 C1                  A   701    	POP	BC
                           A   702    ;   67		putch(x & 0xFF);
                           A   703    .LINE 67
                           A   704    
0B017A DD0706              A   705    	LD	BC,(IX+%6)
0B017D CD A0 14 0B         A   706    	CALL	__stoiu
0B0181 7D                  A   707    	LD	A,L
0B0182 B7ED62              A   708    	UEXT	HL
0B0185 6F                  A   709    	LD	L,A
0B0186 E5                  A   710    	PUSH	HL
0B0187 CD E5 00 0B         A   711    	CALL	_putch
0B018B C1                  A   712    	POP	BC
                           A   713    ;   68		putch((x >> 8) & 0xFF);
                           A   714    .LINE 68
                           A   715    
0B018C DD0706              A   716    	LD	BC,(IX+%6)
0B018F CD A0 14 0B         A   717    	CALL	__stoiu
0B0193 3E08                A   718    	LD	A,%8
0B0195 CD D5 12 0B         A   719    	CALL	__ishrs_b
0B0199 7D                  A   720    	LD	A,L
0B019A B7ED62              A   721    	UEXT	HL
0B019D 6F                  A   722    	LD	L,A
0B019E E5                  A   723    	PUSH	HL
0B019F CD E5 00 0B         A   724    	CALL	_putch
0B01A3 C1                  A   725    	POP	BC
                           A   726    ;   69		putch(y & 0xFF);
                           A   727    .LINE 69
                           A   728    
0B01A4 DD0709              A   729    	LD	BC,(IX+%9)
0B01A7 CD A0 14 0B         A   730    	CALL	__stoiu
0B01AB 7D                  A   731    	LD	A,L
0B01AC B7ED62              A   732    	UEXT	HL
0B01AF 6F                  A   733    	LD	L,A
0B01B0 E5                  A   734    	PUSH	HL
0B01B1 CD E5 00 0B         A   735    	CALL	_putch
0B01B5 C1                  A   736    	POP	BC
                           A   737    ;   70		putch((y >> 8) & 0xFF);
                           A   738    .LINE 70
                           A   739    
0B01B6 DD0709              A   740    	LD	BC,(IX+%9)
0B01B9 CD A0 14 0B         A   741    	CALL	__stoiu
0B01BD 3E08                A   742    	LD	A,%8
0B01BF CD D5 12 0B         A   743    	CALL	__ishrs_b
0B01C3 7D                  A   744    	LD	A,L
0B01C4 B7ED62              A   745    	UEXT	HL
0B01C7 6F                  A   746    	LD	L,A
0B01C8 E5                  A   747    	PUSH	HL
0B01C9 CD E5 00 0B         A   748    	CALL	_putch
0B01CD C1                  A   749    	POP	BC
                           A   750    ;   71		delayms(100);
                           A   751    .LINE 71
                           A   752    
0B01CE 01640000            A   753    	LD	BC,100
0B01D2 C5                  A   754    	PUSH	BC
0B01D3 CD D2 0F 0B         A   755    	CALL	_delayms
0B01D7 C1                  A   756    	POP	BC
                           A   757    ;   72		return sysvars->scrchar;
                           A   758    .LINE 72
                           A   759    
0B01D8 DD31FD              A   760    	LD	IY,(IX+%FFFFFFFD)
0B01DB FD7E09              A   761    	LD	A,(IY+%9)
                           A   762    ;   73	}
                           A   763    .LINE 73
                           A   764    
0B01DE DDF9                A   765    	LD	SP,IX
0B01E0 DDE1                A   766    	POP	IX
0B01E2 C9                  A   767    	RET	
                           A   768    
                           A   769    
                           A   770    ;**************************** _getCharAt ******
                           A   771    ;Name                         Addr/Register   S
                           A   772    ;_putch                              IMPORT  --
                           A   773    ;_delayms                            IMPORT  --
                           A   774    ;_getsysvars                         IMPORT  --
                           A   775    ;sysvars                               IX-3    
                           A   776    ;y                                     IX+9    
                           A   777    ;x                                     IX+6    
                           A   778    
                           A   779    
                           A   780    ; Stack Frame Size: 15 (bytes)
                           A   781    ;       Spill Code: 0 (instruction)
                           A   782    
                           A   783    
                           A   784    .ENDFUNC "getCharAt",73,"_getCharAt"
                           A   785    ;   74	
                           A   786    ;   75	bool vdp_ota_present(void) {
0B01E3                     A   787    _vdp_ota_present:
                           A   788    .DEFINE "_vdp_ota_present"
                           A   789    
                           A   790    .VALUE _vdp_ota_present
                           A   791    
                           A   792    .CLASS 2
                           A   793    
                           A   794    .TYPE 76
                           A   795    
                           A   796    .ENDEF
                           A   797    
                           A   798    .BEGFUNC "vdp_ota_present",75,"_vdp_ota_present
                           A   799    
                           A   800    .LINE 75
                           A   801    
                           A   802    .DEFINE "n"
                           A   803    
                           A   804    .CLASS 65
                           A   805    
                           A   806    .VALUE -2
                           A   807    
                           A   808    .TYPE 13
                           A   809    
                           A   810    .ENDEF
                           A   811    
                           A   812    .DEFINE "test"
                           A   813    
                           A   814    .CLASS 65
                           A   815    
                           A   816    .VALUE -11
                           A   817    
                           A   818    .DIM 9
                           A   819    
                           A   820    .TYPE 98
                           A   821    
                           A   822    .ENDEF
                           A   823    
0B01E3 DDE5                A   824    	PUSH	IX
0B01E5 DD210000 00         A   825    	LD	IX,0
0B01EA DD39                A   826    	ADD	IX,SP
0B01EC ED22F5              A   827    	LEA	HL,IX+%FFFFFFF5
0B01EF F9                  A   828    	LD	SP,HL
                           A   829    ;   76		char test[UNLOCKMATCHLENGTH];
                           A   830    ;   77		uint16_t n;
                           A   831    ;   78	
                           A   832    ;   79		putch(23);
                           A   833    .LINE 79
                           A   834    
0B01F0 01170000            A   835    	LD	BC,23
0B01F4 C5                  A   836    	PUSH	BC
0B01F5 CD E5 00 0B         A   837    	CALL	_putch
0B01F9 C1                  A   838    	POP	BC
                           A   839    ;   80		putch(0);
                           A   840    .LINE 80
                           A   841    
0B01FA 01000000            A   842    	LD	BC,0
0B01FE C5                  A   843    	PUSH	BC
0B01FF CD E5 00 0B         A   844    	CALL	_putch
0B0203 C1                  A   845    	POP	BC
                           A   846    ;   81		putch(0xA1);
                           A   847    .LINE 81
                           A   848    
0B0204 01A10000            A   849    	LD	BC,161
0B0208 C5                  A   850    	PUSH	BC
0B0209 CD E5 00 0B         A   851    	CALL	_putch
0B020D C1                  A   852    	POP	BC
                           A   853    ;   82		putch(0);
                           A   854    .LINE 82
                           A   855    
0B020E 01000000            A   856    	LD	BC,0
0B0212 C5                  A   857    	PUSH	BC
0B0213 CD E5 00 0B         A   858    	CALL	_putch
0B0217 C1                  A   859    	POP	BC
                           A   860    ;   83		printf("unlock");
                           A   861    .LINE 83
                           A   862    
0B0218 01 A6 14 0B         A   863    	LD	BC,___print_uputch
0B021C ED43 04 24 0B       A   864    	LD	(___print_xputch),BC
0B0221 01 87 24 0B         A   865    	LD	BC,L__5
0B0225 C5                  A   866    	PUSH	BC
0B0226 CD 35 13 0B         A   867    	CALL	___print_sendstring
0B022A C1                  A   868    	POP	BC
                           A   869    ;   84	
                           A   870    ;   85		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   871    .LINE 85
                           A   872    
0B022B DD36FE00            A   873    	LD	(IX+%FFFFFFFE),%0
0B022F DD36FF00            A   874    	LD	(IX+%FFFFFFFF),%0
0B0233 18 2A               A   875    	JR	L_12
0B0235                     A   876    L_10:
0B0235 01030000            A   877    	LD	BC,3
0B0239 C5                  A   878    	PUSH	BC
0B023A DD31FE              A   879    	LD	IY,(IX+%FFFFFFFE)
0B023D ED0308              A   880    	LEA	BC,IY+%8
0B0240 C5                  A   881    	PUSH	BC
0B0241 CD 41 01 0B         A   882    	CALL	_getCharAt
0B0245 C1                  A   883    	POP	BC
0B0246 C1                  A   884    	POP	BC
0B0247 DD07FE              A   885    	LD	BC,(IX+%FFFFFFFE)
0B024A CD A0 14 0B         A   886    	CALL	__stoiu
0B024E E5C1                A   887    	LD	BC,HL
0B0250 ED22F5              A   888    	LEA	HL,IX+%FFFFFFF5
0B0253 09                  A   889    	ADD	HL,BC
0B0254 77                  A   890    	LD	(HL),A
0B0255 DD27FE              A   891    	LD	HL,(IX+%FFFFFFFE)
0B0258 23                  A   892    	INC	HL
0B0259 DD75FE              A   893    	LD	(IX+%FFFFFFFE),L
0B025C DD74FF              A   894    	LD	(IX+%FFFFFFFF),H
0B025F                     A   895    L_12:
0B025F 49010A00            A   896    	LD.LIS	BC,10
0B0263 DD27FE              A   897    	LD	HL,(IX+%FFFFFFFE)
0B0266 B7                  A   898    	OR	A,A
0B0267 40ED42              A   899    	SBC.SIS	HL,BC
0B026A 38 C9               A   900    	JR	C,L_10
                           A   901    ;   86		// 3 - line on-screen
                           A   902    ;   87		if(memcmp(test, "unlocked!",UNLOCKM
                           A   903    .LINE 87
                           A   904    
0B026C 01090000            A   905    	LD	BC,9
0B0270 C5                  A   906    	PUSH	BC
0B0271 01 8E 24 0B         A   907    	LD	BC,L__7
0B0275 C5                  A   908    	PUSH	BC
0B0276 ED65F5              A   909    	PEA	IX+%FFFFFFF5
0B0279 CD 39 18 0B         A   910    	CALL	_memcmp
0B027D C1                  A   911    	POP	BC
0B027E C1                  A   912    	POP	BC
0B027F C1                  A   913    	POP	BC
0B0280 CD 63 18 0B         A   914    	CALL	__icmpzero
0B0284 20 04               A   915    	JR	NZ,L_14
0B0286 3E01                A   916    	LD	A,%1
0B0288 18 01               A   917    	JR	L_16
                           A   918    ;   88		else return false;
0B028A                     A   919    L_14:
                           A   920    .LINE 88
                           A   921    
0B028A AF                  A   922    	XOR	A,A
                           A   923    ;   89	}
0B028B                     A   924    L_16:
                           A   925    .LINE 89
                           A   926    
0B028B DDF9                A   927    	LD	SP,IX
0B028D DDE1                A   928    	POP	IX
0B028F C9                  A   929    	RET	
                           A   930    
                           A   931    
                           A   932    ;**************************** _vdp_ota_present 
                           A   933    ;Name                         Addr/Register   S
                           A   934    ;_memcmp                             IMPORT  --
                           A   935    ;___print_sendstring                 IMPORT  --
                           A   936    ;___print_xputch                     IMPORT    
                           A   937    ;___print_uputch                     IMPORT  --
                           A   938    ;_putch                              IMPORT  --
                           A   939    ;test                                 IX-11    
                           A   940    ;n                                     IX-2    
                           A   941    
                           A   942    
                           A   943    ; Stack Frame Size: 17 (bytes)
                           A   944    ;       Spill Code: 0 (instruction)
                           A   945    
                           A   946    
                           A   947    .ENDFUNC "vdp_ota_present",89,"_vdp_ota_present
                           A   948    	SEGMENT STRSECT
0B2487                     A   949    L__5:
0B2487 756E6C6F 636B       A   950    	DB	"unlock"
0B248D 00                  A   951    	DB	0
0B248E                     A   952    L__7:
0B248E 756E6C6F 636B6564   A   953    	DB	"unlocked!"
0B2496 21 
0B2497 00                  A   954    	DB	0
                           A   955    	SEGMENT DATA
0B1E81                     A   956    _mos_magicnumbers:
0B1E81 F3                  A   957    	DB	243
0B1E82 ED                  A   958    	DB	237
0B1E83 7D                  A   959    	DB	125
0B1E84 5B                  A   960    	DB	91
0B1E85 C3                  A   961    	DB	195
                           A   962    .DEFINE "mos_magicnumbers"
                           A   963    .ALIAS "_mos_magicnumbers"
                           A   964    .CLASS 69
                           A   965    .VALUE _mos_magicnumbers
                           A   966    .DIM 5
                           A   967    .TYPE 108
                           A   968    .ENDEF
                           A   969    ;   90	
                           A   970    ;   91	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   971    	SEGMENT CODE
                           A   972    ;   92	#define MOS_MAGICLENGTH 5
                           A   973    ;   93	bool containsMosHeader(uint8_t *filesta
0B0290                     A   974    _containsMosHeader:
                           A   975    .DEFINE "_containsMosHeader"
                           A   976    
                           A   977    .VALUE _containsMosHeader
                           A   978    
                           A   979    .CLASS 2
                           A   980    
                           A   981    .TYPE 76
                           A   982    
                           A   983    .ENDEF
                           A   984    
                           A   985    .BEGFUNC "containsMosHeader",93,"_containsMosHe
                           A   986    
                           A   987    .LINE 93
                           A   988    
                           A   989    .DEFINE "filestart"
                           A   990    
                           A   991    .CLASS 65
                           A   992    
                           A   993    .VALUE 6
                           A   994    
                           A   995    .TYPE 44
                           A   996    
                           A   997    .ENDEF
                           A   998    
                           A   999    .DEFINE "n"
                           A  1000    
                           A  1001    .CLASS 65
                           A  1002    
                           A  1003    .VALUE -1
                           A  1004    
                           A  1005    .TYPE 12
                           A  1006    
                           A  1007    .ENDEF
                           A  1008    
                           A  1009    .DEFINE "match"
                           A  1010    
                           A  1011    .CLASS 65
                           A  1012    
                           A  1013    .VALUE -2
                           A  1014    
                           A  1015    .TYPE 12
                           A  1016    
                           A  1017    .ENDEF
                           A  1018    
0B0290 DDE5                A  1019    	PUSH	IX
0B0292 DD210000 00         A  1020    	LD	IX,0
0B0297 DD39                A  1021    	ADD	IX,SP
0B0299 3B                  A  1022    	DEC	SP
0B029A 3B                  A  1023    	DEC	SP
                           A  1024    ;   94		uint8_t n;
                           A  1025    ;   95		bool match = true;
                           A  1026    .LINE 95
                           A  1027    
0B029B DD36FE01            A  1028    	LD	(IX+%FFFFFFFE),%1
                           A  1029    ;   96	
                           A  1030    ;   97		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A  1031    .LINE 97
                           A  1032    
0B029F DD36FF00            A  1033    	LD	(IX+%FFFFFFFF),%0
0B02A3 18 27               A  1034    	JR	L_21
0B02A5                     A  1035    L_19:
0B02A5 DD7EFF              A  1036    	LD	A,(IX+%FFFFFFFF)
0B02A8 B7ED62              A  1037    	UEXT	HL
0B02AB 6F                  A  1038    	LD	L,A
0B02AC 01 81 1E 0B         A  1039    	LD	BC,_mos_magicnumbers
0B02B0 09                  A  1040    	ADD	HL,BC
0B02B1 E5FDE1              A  1041    	LD	IY,HL
0B02B4 DD7EFF              A  1042    	LD	A,(IX+%FFFFFFFF)
0B02B7 B7ED62              A  1043    	UEXT	HL
0B02BA 6F                  A  1044    	LD	L,A
0B02BB DD0706              A  1045    	LD	BC,(IX+%6)
0B02BE 09                  A  1046    	ADD	HL,BC
0B02BF FD7E00              A  1047    	LD	A,(IY)
0B02C2 BE                  A  1048    	CP	A,(HL)
0B02C3 28 04               A  1049    	JR	Z,L_20
0B02C5 DD36FE00            A  1050    	LD	(IX+%FFFFFFFE),%0
0B02C9                     A  1051    L_20:
0B02C9 DD34FF              A  1052    	INC	(IX+%FFFFFFFF)
0B02CC                     A  1053    L_21:
0B02CC DD7EFF              A  1054    	LD	A,(IX+%FFFFFFFF)
0B02CF FE05                A  1055    	CP	A,%5
0B02D1 38 D2               A  1056    	JR	C,L_19
                           A  1057    ;   98		return match;
                           A  1058    .LINE 98
                           A  1059    
0B02D3 DD7EFE              A  1060    	LD	A,(IX+%FFFFFFFE)
                           A  1061    ;   99	}
                           A  1062    .LINE 99
                           A  1063    
0B02D6 DDF9                A  1064    	LD	SP,IX
0B02D8 DDE1                A  1065    	POP	IX
0B02DA C9                  A  1066    	RET	
                           A  1067    
                           A  1068    
                           A  1069    ;**************************** _containsMosHeade
                           A  1070    ;Name                         Addr/Register   S
                           A  1071    ;_mos_magicnumbers                   STATIC    
                           A  1072    ;match                                 IX-2    
                           A  1073    ;n                                     IX-1    
                           A  1074    ;filestart                             IX+6    
                           A  1075    
                           A  1076    
                           A  1077    ; Stack Frame Size: 11 (bytes)
                           A  1078    ;       Spill Code: 0 (instruction)
                           A  1079    
                           A  1080    
                           A  1081    .ENDFUNC "containsMosHeader",99,"_containsMosHe
                           A  1082    	SEGMENT DATA
0B1E86                     A  1083    _esp32_magicnumbers:
0B1E86 32                  A  1084    	DB	50
0B1E87 54                  A  1085    	DB	84
0B1E88 CD                  A  1086    	DB	205
0B1E89 AB                  A  1087    	DB	171
                           A  1088    .DEFINE "esp32_magicnumbers"
                           A  1089    .ALIAS "_esp32_magicnumbers"
                           A  1090    .CLASS 69
                           A  1091    .VALUE _esp32_magicnumbers
                           A  1092    .DIM 4
                           A  1093    .TYPE 108
                           A  1094    .ENDEF
                           A  1095    ;  100	
                           A  1096    ;  101	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A  1097    	SEGMENT CODE
                           A  1098    ;  102	#define ESP32_MAGICLENGTH 4
                           A  1099    ;  103	#define ESP32_MAGICSTART 0x20
                           A  1100    ;  104	bool containsESP32Header(uint8_t *files
0B02DB                     A  1101    _containsESP32Header:
                           A  1102    .DEFINE "_containsESP32Header"
                           A  1103    
                           A  1104    .VALUE _containsESP32Header
                           A  1105    
                           A  1106    .CLASS 2
                           A  1107    
                           A  1108    .TYPE 76
                           A  1109    
                           A  1110    .ENDEF
                           A  1111    
                           A  1112    .BEGFUNC "containsESP32Header",104,"_containsES
                           A  1113    
                           A  1114    .LINE 104
                           A  1115    
                           A  1116    .DEFINE "filestart"
                           A  1117    
                           A  1118    .CLASS 65
                           A  1119    
                           A  1120    .VALUE 6
                           A  1121    
                           A  1122    .TYPE 44
                           A  1123    
                           A  1124    .ENDEF
                           A  1125    
                           A  1126    .DEFINE "n"
                           A  1127    
                           A  1128    .CLASS 65
                           A  1129    
                           A  1130    .VALUE -1
                           A  1131    
                           A  1132    .TYPE 12
                           A  1133    
                           A  1134    .ENDEF
                           A  1135    
                           A  1136    .DEFINE "match"
                           A  1137    
                           A  1138    .CLASS 65
                           A  1139    
                           A  1140    .VALUE -2
                           A  1141    
                           A  1142    .TYPE 12
                           A  1143    
                           A  1144    .ENDEF
                           A  1145    
0B02DB DDE5                A  1146    	PUSH	IX
0B02DD DD210000 00         A  1147    	LD	IX,0
0B02E2 DD39                A  1148    	ADD	IX,SP
0B02E4 3B                  A  1149    	DEC	SP
0B02E5 3B                  A  1150    	DEC	SP
                           A  1151    ;  105		uint8_t n;
                           A  1152    ;  106		bool match = true;
                           A  1153    .LINE 106
                           A  1154    
0B02E6 DD36FE01            A  1155    	LD	(IX+%FFFFFFFE),%1
                           A  1156    ;  107	
                           A  1157    ;  108		filestart += ESP32_MAGICSTART; // s
                           A  1158    .LINE 108
                           A  1159    
0B02EA DD3106              A  1160    	LD	IY,(IX+%6)
0B02ED ED3320              A  1161    	LEA	IY,IY+%20
0B02F0 DD3E06              A  1162    	LD	(IX+%6),IY
                           A  1163    ;  109		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A  1164    .LINE 109
                           A  1165    
0B02F3 DD36FF00            A  1166    	LD	(IX+%FFFFFFFF),%0
0B02F7 18 27               A  1167    	JR	L_28
0B02F9                     A  1168    L_26:
                           A  1169    ;  110			if(esp32_magicnumbers[n] != fil
                           A  1170    .LINE 110
                           A  1171    
0B02F9 DD7EFF              A  1172    	LD	A,(IX+%FFFFFFFF)
0B02FC B7ED62              A  1173    	UEXT	HL
0B02FF 6F                  A  1174    	LD	L,A
0B0300 01 86 1E 0B         A  1175    	LD	BC,_esp32_magicnumbers
0B0304 09                  A  1176    	ADD	HL,BC
0B0305 E5FDE1              A  1177    	LD	IY,HL
0B0308 DD7EFF              A  1178    	LD	A,(IX+%FFFFFFFF)
0B030B B7ED62              A  1179    	UEXT	HL
0B030E 6F                  A  1180    	LD	L,A
0B030F DD0706              A  1181    	LD	BC,(IX+%6)
0B0312 09                  A  1182    	ADD	HL,BC
0B0313 FD7E00              A  1183    	LD	A,(IY)
0B0316 BE                  A  1184    	CP	A,(HL)
0B0317 28 04               A  1185    	JR	Z,L_27
0B0319 DD36FE00            A  1186    	LD	(IX+%FFFFFFFE),%0
                           A  1187    ;  111		}
0B031D                     A  1188    L_27:
                           A  1189    .LINE 111
                           A  1190    
0B031D DD34FF              A  1191    	INC	(IX+%FFFFFFFF)
0B0320                     A  1192    L_28:
0B0320 DD7EFF              A  1193    	LD	A,(IX+%FFFFFFFF)
0B0323 FE04                A  1194    	CP	A,%4
0B0325 38 D2               A  1195    	JR	C,L_26
                           A  1196    ;  112		return match;
                           A  1197    .LINE 112
                           A  1198    
0B0327 DD7EFE              A  1199    	LD	A,(IX+%FFFFFFFE)
                           A  1200    ;  113	}
                           A  1201    .LINE 113
                           A  1202    
0B032A DDF9                A  1203    	LD	SP,IX
0B032C DDE1                A  1204    	POP	IX
0B032E C9                  A  1205    	RET	
                           A  1206    
                           A  1207    
                           A  1208    ;**************************** _containsESP32Hea
                           A  1209    ;Name                         Addr/Register   S
                           A  1210    ;_esp32_magicnumbers                 STATIC    
                           A  1211    ;match                                 IX-2    
                           A  1212    ;n                                     IX-1    
                           A  1213    ;filestart                             IX+6    
                           A  1214    
                           A  1215    
                           A  1216    ; Stack Frame Size: 11 (bytes)
                           A  1217    ;       Spill Code: 0 (instruction)
                           A  1218    
                           A  1219    
                           A  1220    .ENDFUNC "containsESP32Header",113,"_containsES
                           A  1221    ;  114	
                           A  1222    ;  115	void print_version(void) {
0B032F                     A  1223    _print_version:
                           A  1224    .DEFINE "_print_version"
                           A  1225    
                           A  1226    .VALUE _print_version
                           A  1227    
                           A  1228    .CLASS 2
                           A  1229    
                           A  1230    .TYPE 65
                           A  1231    
                           A  1232    .ENDEF
                           A  1233    
                           A  1234    .BEGFUNC "print_version",115,"_print_version"
                           A  1235    
0B032F DDE5                A  1236    	PUSH	IX
0B0331 DD210000 00         A  1237    	LD	IX,0
0B0336 DD39                A  1238    	ADD	IX,SP
                           A  1239    ;  116		printf("Agon firmware upgrade utili
                           A  1240    .LINE 116
                           A  1241    
0B0338 01 A6 14 0B         A  1242    	LD	BC,___print_uputch
0B033C ED43 04 24 0B       A  1243    	LD	(___print_xputch),BC
0B0341 01 98 24 0B         A  1244    	LD	BC,L__16
0B0345 C5                  A  1245    	PUSH	BC
0B0346 CD 35 13 0B         A  1246    	CALL	___print_sendstring
0B034A C1                  A  1247    	POP	BC
                           A  1248    ;  117	}
                           A  1249    .LINE 117
                           A  1250    
0B034B DDF9                A  1251    	LD	SP,IX
0B034D DDE1                A  1252    	POP	IX
0B034F C9                  A  1253    	RET	
                           A  1254    
                           A  1255    
                           A  1256    ;**************************** _print_version **
                           A  1257    ;Name                         Addr/Register   S
                           A  1258    ;___print_sendstring                 IMPORT  --
                           A  1259    ;___print_xputch                     IMPORT    
                           A  1260    ;___print_uputch                     IMPORT  --
                           A  1261    
                           A  1262    
                           A  1263    ; Stack Frame Size: 6 (bytes)
                           A  1264    ;       Spill Code: 0 (instruction)
                           A  1265    
                           A  1266    
                           A  1267    .ENDFUNC "print_version",117,"_print_version"
                           A  1268    	SEGMENT STRSECT
0B2498                     A  1269    L__16:
0B2498 41676F6E 20666972   A  1270    	DB	"Agon firmware upgrade utility v1.6"
0B24A0 6D776172 65207570 
0B24A8 67726164 65207574 
0B24B0 696C6974 79207631 
0B24B8 2E36 
0B24BA 0A0D0A0D 00         A  1271    	DB	10,13,10,13,0
                           A  1272    	SEGMENT CODE
                           A  1273    ;  118	
                           A  1274    ;  119	void usage(void) {
0B0350                     A  1275    _usage:
                           A  1276    .DEFINE "_usage"
                           A  1277    
                           A  1278    .VALUE _usage
                           A  1279    
                           A  1280    .CLASS 2
                           A  1281    
                           A  1282    .TYPE 65
                           A  1283    
                           A  1284    .ENDEF
                           A  1285    
                           A  1286    .BEGFUNC "usage",119,"_usage"
                           A  1287    
0B0350 DDE5                A  1288    	PUSH	IX
0B0352 DD210000 00         A  1289    	LD	IX,0
0B0357 DD39                A  1290    	ADD	IX,SP
                           A  1291    ;  120		print_version();
                           A  1292    .LINE 120
                           A  1293    
0B0359 CD 2F 03 0B         A  1294    	CALL	_print_version
                           A  1295    ;  121		printf("Usage: FLASH [full | [mos <
                           A  1296    .LINE 121
                           A  1297    
0B035D 01 A6 14 0B         A  1298    	LD	BC,___print_uputch
0B0361 ED43 04 24 0B       A  1299    	LD	(___print_xputch),BC
0B0366 01 BF 24 0B         A  1300    	LD	BC,L__18
0B036A C5                  A  1301    	PUSH	BC
0B036B CD 35 13 0B         A  1302    	CALL	___print_sendstring
0B036F C1                  A  1303    	POP	BC
                           A  1304    ;  122	}
                           A  1305    .LINE 122
                           A  1306    
0B0370 DDF9                A  1307    	LD	SP,IX
0B0372 DDE1                A  1308    	POP	IX
0B0374 C9                  A  1309    	RET	
                           A  1310    
                           A  1311    
                           A  1312    ;**************************** _usage **********
                           A  1313    ;Name                         Addr/Register   S
                           A  1314    ;___print_sendstring                 IMPORT  --
                           A  1315    ;___print_xputch                     IMPORT    
                           A  1316    ;___print_uputch                     IMPORT  --
                           A  1317    
                           A  1318    
                           A  1319    ; Stack Frame Size: 6 (bytes)
                           A  1320    ;       Spill Code: 0 (instruction)
                           A  1321    
                           A  1322    
                           A  1323    .ENDFUNC "usage",122,"_usage"
                           A  1324    	SEGMENT STRSECT
0B24BF                     A  1325    L__18:
0B24BF 55736167 653A2046   A  1326    	DB	"Usage: FLASH [full | [mos <filename>] 
0B24C7 4C415348 205B6675 
0B24CF 6C6C207C 205B6D6F 
0B24D7 73203C66 696C656E 
0B24DF 616D653E 5D205B76 
0B24E7 6470203C 66696C65 
0B24EF 6E616D65 3E5D5D20 
0B24F7 3C2D737C 2D73696C 
0B24FF 656E743E 
0B2503 0A0D00              A  1327    	DB	10,13,0
                           A  1328    	SEGMENT CODE
                           A  1329    ;  123	
                           A  1330    ;  124	typedef enum {
                           A  1331    ;  125		MOS,
                           A  1332    ;  126		VDP
                           A  1333    ;  127	} flashtype;
                           A  1334    ;  128	
                           A  1335    ;  129	bool getResponse(flashtype t, uint32_t 
0B0375                     A  1336    _getResponse:
                           A  1337    .DEFINE "_getResponse"
                           A  1338    
                           A  1339    .VALUE _getResponse
                           A  1340    
                           A  1341    .CLASS 2
                           A  1342    
                           A  1343    .TYPE 76
                           A  1344    
                           A  1345    .ENDEF
                           A  1346    
                           A  1347    .BEGFUNC "getResponse",129,"_getResponse"
                           A  1348    
                           A  1349    .LINE 129
                           A  1350    
                           A  1351    .DEFINE "t"
                           A  1352    
                           A  1353    .CLASS 65
                           A  1354    
                           A  1355    .VALUE 6
                           A  1356    
                           A  1357    .TYPE 4
                           A  1358    
                           A  1359    .ENDEF
                           A  1360    
                           A  1361    .DEFINE "crc"
                           A  1362    
                           A  1363    .CLASS 65
                           A  1364    
                           A  1365    .VALUE 9
                           A  1366    
                           A  1367    .TYPE 15
                           A  1368    
                           A  1369    .ENDEF
                           A  1370    
                           A  1371    .DEFINE "response"
                           A  1372    
                           A  1373    .CLASS 65
                           A  1374    
                           A  1375    .VALUE -1
                           A  1376    
                           A  1377    .TYPE 12
                           A  1378    
                           A  1379    .ENDEF
                           A  1380    
0B0375 DDE5                A  1381    	PUSH	IX
0B0377 DD210000 00         A  1382    	LD	IX,0
0B037C DD39                A  1383    	ADD	IX,SP
0B037E 3B                  A  1384    	DEC	SP
                           A  1385    ;  130		uint8_t response = 0;
                           A  1386    .LINE 130
                           A  1387    
0B037F DD36FF00            A  1388    	LD	(IX+%FFFFFFFF),%0
                           A  1389    ;  131	
                           A  1390    ;  132		switch(t) {
                           A  1391    .LINE 132
                           A  1392    
0B0383 DD2706              A  1393    	LD	HL,(IX+%6)
0B0386 CD 45 1B 0B         A  1394    	CALL	__case8D
0B038A E9                  A  1395    	JP	(HL)
0B038B                     A  1396    L__20:
0B038B 0200                A  1397    	DW	2
0B038D 00                  A  1398    	DB	0
0B038E 98030B              A  1399    	DW24	L_33	
                           A  1400    
0B0391 01                  A  1401    	DB	1
0B0392 D9030B              A  1402    	DW24	L_34	
                           A  1403    
0B0395 2D040B              A  1404    	DW24	L_36	
                           A  1405    
                           A  1406    ;  133			case MOS:
0B0398                     A  1407    L_33:
                           A  1408    .LINE 133
                           A  1409    
                           A  1410    ;  134				printf("\r\n\r\n0x%04lX - f
                           A  1411    .LINE 134
                           A  1412    
0B0398 01 A6 14 0B         A  1413    	LD	BC,___print_uputch
0B039C ED43 04 24 0B       A  1414    	LD	(___print_xputch),BC
0B03A1 01 06 25 0B         A  1415    	LD	BC,L__21
0B03A5 C5                  A  1416    	PUSH	BC
0B03A6 CD 35 13 0B         A  1417    	CALL	___print_sendstring
0B03AA C1                  A  1418    	POP	BC
0B03AB 3E04                A  1419    	LD	A,%4
0B03AD 32 FF 29 0B         A  1420    	LD	(___print_fmt+5),A
0B03B1 3E60                A  1421    	LD	A,%60
0B03B3 32 FB 29 0B         A  1422    	LD	(___print_fmt+1),A
0B03B7 3E78                A  1423    	LD	A,%78
0B03B9 32 FE 29 0B         A  1424    	LD	(___print_fmt+4),A
0B03BD DD4E0C              A  1425    	LD	C,(IX+%C)
0B03C0 0600                A  1426    	LD	B,%0
0B03C2 C5                  A  1427    	PUSH	BC
0B03C3 DD0709              A  1428    	LD	BC,(IX+%9)
0B03C6 C5                  A  1429    	PUSH	BC
0B03C7 CD 4B 1C 0B         A  1430    	CALL	__u_ultoa
0B03CB C1                  A  1431    	POP	BC
0B03CC C1                  A  1432    	POP	BC
0B03CD 01 0D 25 0B         A  1433    	LD	BC,L__22
0B03D1 C5                  A  1434    	PUSH	BC
0B03D2 CD 35 13 0B         A  1435    	CALL	___print_sendstring
0B03D6 C1                  A  1436    	POP	BC
                           A  1437    ;  135				break;
                           A  1438    .LINE 135
                           A  1439    
0B03D7 18 54               A  1440    	JR	L_36
                           A  1441    ;  136			case VDP:
0B03D9                     A  1442    L_34:
                           A  1443    .LINE 136
                           A  1444    
                           A  1445    ;  137				printf("\r\n\r\n0x%04lX - f
                           A  1446    .LINE 137
                           A  1447    
0B03D9 01 A6 14 0B         A  1448    	LD	BC,___print_uputch
0B03DD ED43 04 24 0B       A  1449    	LD	(___print_xputch),BC
0B03E2 01 24 25 0B         A  1450    	LD	BC,L__23
0B03E6 C5                  A  1451    	PUSH	BC
0B03E7 CD 35 13 0B         A  1452    	CALL	___print_sendstring
0B03EB C1                  A  1453    	POP	BC
0B03EC 3E04                A  1454    	LD	A,%4
0B03EE 32 FF 29 0B         A  1455    	LD	(___print_fmt+5),A
0B03F2 3E60                A  1456    	LD	A,%60
0B03F4 32 FB 29 0B         A  1457    	LD	(___print_fmt+1),A
0B03F8 3E78                A  1458    	LD	A,%78
0B03FA 32 FE 29 0B         A  1459    	LD	(___print_fmt+4),A
0B03FE DD4E0C              A  1460    	LD	C,(IX+%C)
0B0401 0600                A  1461    	LD	B,%0
0B0403 C5                  A  1462    	PUSH	BC
0B0404 DD0709              A  1463    	LD	BC,(IX+%9)
0B0407 C5                  A  1464    	PUSH	BC
0B0408 CD 4B 1C 0B         A  1465    	CALL	__u_ultoa
0B040C C1                  A  1466    	POP	BC
0B040D C1                  A  1467    	POP	BC
0B040E 01 2B 25 0B         A  1468    	LD	BC,L__24
0B0412 C5                  A  1469    	PUSH	BC
0B0413 CD 35 13 0B         A  1470    	CALL	___print_sendstring
0B0417 C1                  A  1471    	POP	BC
                           A  1472    ;  138				break;
                           A  1473    .LINE 138
                           A  1474    
0B0418 18 13               A  1475    	JR	L_36
                           A  1476    ;  139		}
                           A  1477    ;  140	
                           A  1478    ;  141		while((response != 'y') && (respons
0B041A                     A  1479    L_37:
                           A  1480    .LINE 141
                           A  1481    
0B041A CD D0 0D 0B         A  1482    	CALL	_getch
0B041E 47                  A  1483    	LD	B,A
0B041F 78                  A  1484    	LD	A,B
0B0420 17ED62              A  1485    	SEXT	HL
0B0423 68                  A  1486    	LD	L,B
0B0424 E5                  A  1487    	PUSH	HL
0B0425 CD F0 1B 0B         A  1488    	CALL	_tolower
0B0429 C1                  A  1489    	POP	BC
0B042A DD75FF              A  1490    	LD	(IX+%FFFFFFFF),L
0B042D                     A  1491    L_36:
0B042D DD7EFF              A  1492    	LD	A,(IX+%FFFFFFFF)
0B0430 FE79                A  1493    	CP	A,%79
0B0432 28 07               A  1494    	JR	Z,L_41
0B0434 DD7EFF              A  1495    	LD	A,(IX+%FFFFFFFF)
0B0437 FE6E                A  1496    	CP	A,%6E
0B0439 20 DF               A  1497    	JR	NZ,L_37
0B043B                     A  1498    L_41:
                           A  1499    ;  142		if(response == 'n') printf("\r\nUse
                           A  1500    .LINE 142
                           A  1501    
0B043B DD7EFF              A  1502    	LD	A,(IX+%FFFFFFFF)
0B043E FE6E                A  1503    	CP	A,%6E
0B0440 20 15               A  1504    	JR	NZ,L_40
0B0442 01 A6 14 0B         A  1505    	LD	BC,___print_uputch
0B0446 ED43 04 24 0B       A  1506    	LD	(___print_xputch),BC
0B044B 01 42 25 0B         A  1507    	LD	BC,L__28
0B044F C5                  A  1508    	PUSH	BC
0B0450 CD 35 13 0B         A  1509    	CALL	___print_sendstring
0B0454 C1                  A  1510    	POP	BC
                           A  1511    ;  143		else printf("\r\n\r\n");
                           A  1512    .LINE 143
                           A  1513    
0B0455 18 13               A  1514    	JR	L_42
0B0457                     A  1515    L_40:
0B0457 01 A6 14 0B         A  1516    	LD	BC,___print_uputch
0B045B ED43 04 24 0B       A  1517    	LD	(___print_xputch),BC
0B0460 01 53 25 0B         A  1518    	LD	BC,L__29
0B0464 C5                  A  1519    	PUSH	BC
0B0465 CD 35 13 0B         A  1520    	CALL	___print_sendstring
0B0469 C1                  A  1521    	POP	BC
0B046A                     A  1522    L_42:
                           A  1523    ;  144		return response == 'y';
                           A  1524    .LINE 144
                           A  1525    
0B046A DD7EFF              A  1526    	LD	A,(IX+%FFFFFFFF)
0B046D FE79                A  1527    	CP	A,%79
0B046F 20 04               A  1528    	JR	NZ,L__31
0B0471 3E01                A  1529    	LD	A,%1
0B0473 18 01               A  1530    	JR	L__32
0B0475                     A  1531    L__31:
0B0475 AF                  A  1532    	XOR	A,A
0B0476                     A  1533    L__32:
                           A  1534    ;  145	}
                           A  1535    .LINE 145
                           A  1536    
0B0476 DDF9                A  1537    	LD	SP,IX
0B0478 DDE1                A  1538    	POP	IX
0B047A C9                  A  1539    	RET	
                           A  1540    
                           A  1541    
                           A  1542    ;**************************** _getResponse ****
                           A  1543    ;Name                         Addr/Register   S
                           A  1544    ;_getch                              IMPORT  --
                           A  1545    ;_tolower                            IMPORT  --
                           A  1546    ;__u_ultoa                           IMPORT  --
                           A  1547    ;___print_fmt                        IMPORT    
                           A  1548    ;___print_sendstring                 IMPORT  --
                           A  1549    ;___print_xputch                     IMPORT    
                           A  1550    ;___print_uputch                     IMPORT  --
                           A  1551    ;response                              IX-1    
                           A  1552    ;crc                                   IX+9    
                           A  1553    ;t                                     IX+6    
                           A  1554    
                           A  1555    
                           A  1556    ; Stack Frame Size: 16 (bytes)
                           A  1557    ;       Spill Code: 0 (instruction)
                           A  1558    
                           A  1559    
                           A  1560    .ENDFUNC "getResponse",145,"_getResponse"
                           A  1561    	SEGMENT STRSECT
0B2506                     A  1562    L__21:
0B2506 0D0A0D0A            A  1563    	DB	13,10,13,10
0B250A 3078                A  1564    	DB	"0x"
0B250C 00                  A  1565    	DB	0
0B250D                     A  1566    L__22:
0B250D 202D2066 6C617368   A  1567    	DB	" - flash to MOS (y/n)?"
0B2515 20746F20 4D4F5320 
0B251D 28792F6E 293F 
0B2523 00                  A  1568    	DB	0
0B2524                     A  1569    L__23:
0B2524 0D0A0D0A            A  1570    	DB	13,10,13,10
0B2528 3078                A  1571    	DB	"0x"
0B252A 00                  A  1572    	DB	0
0B252B                     A  1573    L__24:
0B252B 202D2066 6C617368   A  1574    	DB	" - flash to VDP (y/n)?"
0B2533 20746F20 56445020 
0B253B 28792F6E 293F 
0B2541 00                  A  1575    	DB	0
0B2542                     A  1576    L__28:
0B2542 0D0A                A  1577    	DB	13,10
0B2544 55736572 2061626F   A  1578    	DB	"User abort"
0B254C 7274 
0B254E 0A0D0A0D 00         A  1579    	DB	10,13,10,13,0
0B2553                     A  1580    L__29:
0B2553 0D0A0D0A 00         A  1581    	DB	13,10,13,10,0
                           A  1582    	SEGMENT CODE
                           A  1583    ;  146	
                           A  1584    ;  147	uint8_t update_vdp(char *filename) {
0B047B                     A  1585    _update_vdp:
                           A  1586    .DEFINE "_update_vdp"
                           A  1587    
                           A  1588    .VALUE _update_vdp
                           A  1589    
                           A  1590    .CLASS 2
                           A  1591    
                           A  1592    .TYPE 76
                           A  1593    
                           A  1594    .ENDEF
                           A  1595    
                           A  1596    .BEGFUNC "update_vdp",147,"_update_vdp"
                           A  1597    
                           A  1598    .LINE 147
                           A  1599    
                           A  1600    .DEFINE "filename"
                           A  1601    
                           A  1602    .CLASS 65
                           A  1603    
                           A  1604    .VALUE 6
                           A  1605    
                           A  1606    .TYPE 34
                           A  1607    
                           A  1608    .ENDEF
                           A  1609    
                           A  1610    .DEFINE "file"
                           A  1611    
                           A  1612    .CLASS 65
                           A  1613    
                           A  1614    .VALUE -1
                           A  1615    
                           A  1616    .TYPE 12
                           A  1617    
                           A  1618    .ENDEF
                           A  1619    
                           A  1620    .DEFINE "filesize"
                           A  1621    
                           A  1622    .CLASS 65
                           A  1623    
                           A  1624    .VALUE -4
                           A  1625    
                           A  1626    .TYPE 14
                           A  1627    
                           A  1628    .ENDEF
                           A  1629    
                           A  1630    .DEFINE "buffer"
                           A  1631    
                           A  1632    .CLASS 65
                           A  1633    
                           A  1634    .VALUE -40
                           A  1635    
                           A  1636    .DIM 36
                           A  1637    
                           A  1638    .TYPE 108
                           A  1639    
                           A  1640    .ENDEF
                           A  1641    
0B047B DDE5                A  1642    	PUSH	IX
0B047D DD210000 00         A  1643    	LD	IX,0
0B0482 DD39                A  1644    	ADD	IX,SP
0B0484 ED22D8              A  1645    	LEA	HL,IX+%FFFFFFD8
0B0487 F9                  A  1646    	LD	SP,HL
                           A  1647    ;  148		uint8_t file;
                           A  1648    ;  149		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1649    ;  150		uint24_t filesize;
                           A  1650    ;  151		//uint32_t crcresult;
                           A  1651    ;  152		uint24_t size, n;
                           A  1652    ;  153		uint8_t response;
                           A  1653    ;  154	
                           A  1654    ;  155		putch(12); // cls
                           A  1655    .LINE 155
                           A  1656    
0B0488 010C0000            A  1657    	LD	BC,12
0B048C C5                  A  1658    	PUSH	BC
0B048D CD E5 00 0B         A  1659    	CALL	_putch
0B0491 C1                  A  1660    	POP	BC
                           A  1661    ;  156		print_version();	
                           A  1662    .LINE 156
                           A  1663    
0B0492 CD 2F 03 0B         A  1664    	CALL	_print_version
                           A  1665    ;  157		printf("Unlocking VDP updater...\r\
                           A  1666    .LINE 157
                           A  1667    
0B0496 01 A6 14 0B         A  1668    	LD	BC,___print_uputch
0B049A ED43 04 24 0B       A  1669    	LD	(___print_xputch),BC
0B049F 01 58 25 0B         A  1670    	LD	BC,L__34
0B04A3 C5                  A  1671    	PUSH	BC
0B04A4 CD 35 13 0B         A  1672    	CALL	___print_sendstring
0B04A8 C1                  A  1673    	POP	BC
                           A  1674    ;  158		
                           A  1675    ;  159		if(!vdp_ota_present()) {
                           A  1676    .LINE 159
                           A  1677    
0B04A9 CD E3 01 0B         A  1678    	CALL	_vdp_ota_present
0B04AD B7                  A  1679    	OR	A,A
0B04AE 20 22               A  1680    	JR	NZ,L_45
                           A  1681    ;  160			printf(" failed - incompatible 
                           A  1682    .LINE 160
                           A  1683    
0B04B0 01 A6 14 0B         A  1684    	LD	BC,___print_uputch
0B04B4 ED43 04 24 0B       A  1685    	LD	(___print_xputch),BC
0B04B9 01 73 25 0B         A  1686    	LD	BC,L__36
0B04BD C5                  A  1687    	PUSH	BC
0B04BE CD 35 13 0B         A  1688    	CALL	___print_sendstring
0B04C2 C1                  A  1689    	POP	BC
                           A  1690    ;  161			beep(5);
                           A  1691    .LINE 161
                           A  1692    
0B04C3 01050000            A  1693    	LD	BC,5
0B04C7 C5                  A  1694    	PUSH	BC
0B04C8 CD 0B 01 0B         A  1695    	CALL	_beep
0B04CC C1                  A  1696    	POP	BC
                           A  1697    ;  162			return 0;
                           A  1698    .LINE 162
                           A  1699    
0B04CD AF                  A  1700    	XOR	A,A
0B04CE C3 B7 05 0B         A  1701    	JR	L_50
                           A  1702    ;  163		}
0B04D2                     A  1703    L_45:
                           A  1704    .LINE 163
                           A  1705    
                           A  1706    ;  164		//vdp_ota_present();
                           A  1707    ;  165	
                           A  1708    ;  166		file = mos_fopen(filename, fa_read)
                           A  1709    .LINE 166
                           A  1710    
0B04D2 01010000            A  1711    	LD	BC,1
0B04D6 C5                  A  1712    	PUSH	BC
0B04D7 DD0706              A  1713    	LD	BC,(IX+%6)
0B04DA C5                  A  1714    	PUSH	BC
0B04DB CD 26 0E 0B         A  1715    	CALL	_mos_fopen
0B04DF C1                  A  1716    	POP	BC
0B04E0 C1                  A  1717    	POP	BC
0B04E1 DD77FF              A  1718    	LD	(IX+%FFFFFFFF),A
                           A  1719    ;  167		if(!file) {
                           A  1720    .LINE 167
                           A  1721    
0B04E4 B7                  A  1722    	OR	A,A
0B04E5 20 2C               A  1723    	JR	NZ,L_47
                           A  1724    ;  168			printf("Error opening \"%s\"\n\
                           A  1725    .LINE 168
                           A  1726    
0B04E7 01 A6 14 0B         A  1727    	LD	BC,___print_uputch
0B04EB ED43 04 24 0B       A  1728    	LD	(___print_xputch),BC
0B04F0 01 90 25 0B         A  1729    	LD	BC,L__38
0B04F4 C5                  A  1730    	PUSH	BC
0B04F5 CD 35 13 0B         A  1731    	CALL	___print_sendstring
0B04F9 C1                  A  1732    	POP	BC
0B04FA DD0706              A  1733    	LD	BC,(IX+%6)
0B04FD C5                  A  1734    	PUSH	BC
0B04FE CD 35 13 0B         A  1735    	CALL	___print_sendstring
0B0502 C1                  A  1736    	POP	BC
0B0503 01 A0 25 0B         A  1737    	LD	BC,L__39
0B0507 C5                  A  1738    	PUSH	BC
0B0508 CD 35 13 0B         A  1739    	CALL	___print_sendstring
0B050C C1                  A  1740    	POP	BC
                           A  1741    ;  169			return EXIT_FILENOTFOUND;
                           A  1742    .LINE 169
                           A  1743    
0B050D 3E04                A  1744    	LD	A,%4
0B050F C3 B7 05 0B         A  1745    	JR	L_50
                           A  1746    ;  170		}
0B0513                     A  1747    L_47:
                           A  1748    .LINE 170
                           A  1749    
                           A  1750    ;  171	
                           A  1751    ;  172		mos_fread(file, (char *)buffer, ESP
                           A  1752    .LINE 172
                           A  1753    
0B0513 01240000            A  1754    	LD	BC,36
0B0517 C5                  A  1755    	PUSH	BC
0B0518 ED65D8              A  1756    	PEA	IX+%FFFFFFD8
0B051B DD4EFF              A  1757    	LD	C,(IX+%FFFFFFFF)
0B051E 0600                A  1758    	LD	B,%0
0B0520 C5                  A  1759    	PUSH	BC
0B0521 CD 68 0E 0B         A  1760    	CALL	_mos_fread
0B0525 C1                  A  1761    	POP	BC
0B0526 C1                  A  1762    	POP	BC
0B0527 C1                  A  1763    	POP	BC
                           A  1764    ;  173		if(!containsESP32Header(buffer)) {
                           A  1765    .LINE 173
                           A  1766    
0B0528 ED65D8              A  1767    	PEA	IX+%FFFFFFD8
0B052B CD DB 02 0B         A  1768    	CALL	_containsESP32Header
0B052F C1                  A  1769    	POP	BC
0B0530 B7                  A  1770    	OR	A,A
0B0531 20 22               A  1771    	JR	NZ,L_49
                           A  1772    ;  174			printf("File does not contain v
                           A  1773    .LINE 174
                           A  1774    
0B0533 01 A6 14 0B         A  1775    	LD	BC,___print_uputch
0B0537 ED43 04 24 0B       A  1776    	LD	(___print_xputch),BC
0B053C 01 A4 25 0B         A  1777    	LD	BC,L__41
0B0540 C5                  A  1778    	PUSH	BC
0B0541 CD 35 13 0B         A  1779    	CALL	___print_sendstring
0B0545 C1                  A  1780    	POP	BC
                           A  1781    ;  175			mos_fclose(file);
                           A  1782    .LINE 175
                           A  1783    
0B0546 DD4EFF              A  1784    	LD	C,(IX+%FFFFFFFF)
0B0549 0600                A  1785    	LD	B,%0
0B054B C5                  A  1786    	PUSH	BC
0B054C CD 3E 0E 0B         A  1787    	CALL	_mos_fclose
0B0550 C1                  A  1788    	POP	BC
                           A  1789    ;  176			return EXIT_INVALIDPARAMETER;
                           A  1790    .LINE 176
                           A  1791    
0B0551 3E13                A  1792    	LD	A,%13
0B0553 18 62               A  1793    	JR	L_50
                           A  1794    ;  177		}
0B0555                     A  1795    L_49:
                           A  1796    .LINE 177
                           A  1797    
                           A  1798    ;  178		//printf("\r\nValid ESP32 code\r\nC
                           A  1799    ;  179		printf("\r\nValid ESP32 code\r\n");
                           A  1800    .LINE 179
                           A  1801    
0B0555 01 A6 14 0B         A  1802    	LD	BC,___print_uputch
0B0559 ED43 04 24 0B       A  1803    	LD	(___print_xputch),BC
0B055E 01 CD 25 0B         A  1804    	LD	BC,L__42
0B0562 C5                  A  1805    	PUSH	BC
0B0563 CD 35 13 0B         A  1806    	CALL	___print_sendstring
0B0567 C1                  A  1807    	POP	BC
                           A  1808    ;  180		//crc32_initialize();
                           A  1809    ;  181		//mos_flseek(file, 0);
                           A  1810    ;  182		//while(1) {
                           A  1811    ;  183		//	size = mos_fread(file, (char *)
                           A  1812    ;  184		//	if(size == 0) break;
                           A  1813    ;  185		//	putch('.');
                           A  1814    ;  186			//crc32((char *)BUFFER1, size);
                           A  1815    ;  187		//}
                           A  1816    ;  188		//crcresult = crc32_finalize();
                           A  1817    ;  189	
                           A  1818    ;  190		// Do actual work here
                           A  1819    ;  191		mos_flseek(file, 0); // reset to ze
                           A  1820    .LINE 191
                           A  1821    
0B0568 01000000            A  1822    	LD	BC,0
0B056C C5                  A  1823    	PUSH	BC
0B056D C5                  A  1824    	PUSH	BC
0B056E DD4EFF              A  1825    	LD	C,(IX+%FFFFFFFF)
0B0571 0600                A  1826    	LD	B,%0
0B0573 C5                  A  1827    	PUSH	BC
0B0574 CD E2 0E 0B         A  1828    	CALL	_mos_flseek
0B0578 C1                  A  1829    	POP	BC
0B0579 C1                  A  1830    	POP	BC
0B057A C1                  A  1831    	POP	BC
                           A  1832    ;  192		printf("Updating VDP firmware\r\n")
                           A  1833    .LINE 192
                           A  1834    
0B057B 01 A6 14 0B         A  1835    	LD	BC,___print_uputch
0B057F ED43 04 24 0B       A  1836    	LD	(___print_xputch),BC
0B0584 01 E2 25 0B         A  1837    	LD	BC,L__43
0B0588 C5                  A  1838    	PUSH	BC
0B0589 CD 35 13 0B         A  1839    	CALL	___print_sendstring
0B058D C1                  A  1840    	POP	BC
                           A  1841    ;  193		filesize = getFileSize(file);	
                           A  1842    .LINE 193
                           A  1843    
0B058E DD4EFF              A  1844    	LD	C,(IX+%FFFFFFFF)
0B0591 0600                A  1845    	LD	B,%0
0B0593 C5                  A  1846    	PUSH	BC
0B0594 CD 6A 12 0B         A  1847    	CALL	_getFileSize
0B0598 C1                  A  1848    	POP	BC
0B0599 DD2FFC              A  1849    	LD	(IX+%FFFFFFFC),HL
                           A  1850    ;  194		startVDPupdate(file, filesize);
                           A  1851    .LINE 194
                           A  1852    
0B059C E5C1                A  1853    	LD	BC,HL
0B059E C5                  A  1854    	PUSH	BC
0B059F DD4EFF              A  1855    	LD	C,(IX+%FFFFFFFF)
0B05A2 0600                A  1856    	LD	B,%0
0B05A4 C5                  A  1857    	PUSH	BC
0B05A5 CD 4D 0F 0B         A  1858    	CALL	_startVDPupdate
0B05A9 C1                  A  1859    	POP	BC
0B05AA C1                  A  1860    	POP	BC
                           A  1861    ;  195		mos_fclose(file);
                           A  1862    .LINE 195
                           A  1863    
0B05AB DD4EFF              A  1864    	LD	C,(IX+%FFFFFFFF)
0B05AE 0600                A  1865    	LD	B,%0
0B05B0 C5                  A  1866    	PUSH	BC
0B05B1 CD 3E 0E 0B         A  1867    	CALL	_mos_fclose
0B05B5 C1                  A  1868    	POP	BC
                           A  1869    ;  196		//reset();
                           A  1870    ;  197		return 0; // will never return, but
                           A  1871    .LINE 197
                           A  1872    
0B05B6 AF                  A  1873    	XOR	A,A
                           A  1874    ;  198	}
0B05B7                     A  1875    L_50:
                           A  1876    .LINE 198
                           A  1877    
0B05B7 DDF9                A  1878    	LD	SP,IX
0B05B9 DDE1                A  1879    	POP	IX
0B05BB C9                  A  1880    	RET	
                           A  1881    
                           A  1882    
                           A  1883    ;**************************** _update_vdp *****
                           A  1884    ;Name                         Addr/Register   S
                           A  1885    ;_startVDPupdate                     IMPORT  --
                           A  1886    ;_getFileSize                        IMPORT  --
                           A  1887    ;_mos_flseek                         IMPORT  --
                           A  1888    ;_mos_fclose                         IMPORT  --
                           A  1889    ;_mos_fread                          IMPORT  --
                           A  1890    ;_mos_fopen                          IMPORT  --
                           A  1891    ;___print_sendstring                 IMPORT  --
                           A  1892    ;___print_xputch                     IMPORT    
                           A  1893    ;___print_uputch                     IMPORT  --
                           A  1894    ;_putch                              IMPORT  --
                           A  1895    ;buffer                               IX-40    
                           A  1896    ;filesize                              IX-4    
                           A  1897    ;file                                  IX-1    
                           A  1898    ;filename                              IX+6    
                           A  1899    
                           A  1900    
                           A  1901    ; Stack Frame Size: 49 (bytes)
                           A  1902    ;       Spill Code: 0 (instruction)
                           A  1903    
                           A  1904    
                           A  1905    .ENDFUNC "update_vdp",198,"_update_vdp"
                           A  1906    	SEGMENT STRSECT
0B2558                     A  1907    L__34:
0B2558 556E6C6F 636B696E   A  1908    	DB	"Unlocking VDP updater..."
0B2560 67205644 50207570 
0B2568 64617465 722E2E2E 
0B2570 0D0A00              A  1909    	DB	13,10,0
0B2573                     A  1910    L__36:
0B2573 20666169 6C656420   A  1911    	DB	" failed - incompatible VDP"
0B257B 2D20696E 636F6D70 
0B2583 61746962 6C652056 
0B258B 4450 
0B258D 0D0A00              A  1912    	DB	13,10,0
0B2590                     A  1913    L__38:
0B2590 4572726F 72206F70   A  1914    	DB	"Error opening \""
0B2598 656E696E 672022 
0B259F 00                  A  1915    	DB	0
0B25A0                     A  1916    L__39:
0B25A0 22                  A  1917    	DB	"\""
0B25A1 0A0D00              A  1918    	DB	10,13,0
0B25A4                     A  1919    L__41:
0B25A4 46696C65 20646F65   A  1920    	DB	"File does not contain valid ESP32 code
0B25AC 73206E6F 7420636F 
0B25B4 6E746169 6E207661 
0B25BC 6C696420 45535033 
0B25C4 3220636F 6465 
0B25CA 0D0A00              A  1921    	DB	13,10,0
0B25CD                     A  1922    L__42:
0B25CD 0D0A                A  1923    	DB	13,10
0B25CF 56616C69 64204553   A  1924    	DB	"Valid ESP32 code"
0B25D7 50333220 636F6465 
0B25DF 0D0A00              A  1925    	DB	13,10,0
0B25E2                     A  1926    L__43:
0B25E2 55706461 74696E67   A  1927    	DB	"Updating VDP firmware"
0B25EA 20564450 20666972 
0B25F2 6D776172 65 
0B25F7 0D0A00              A  1928    	DB	13,10,0
                           A  1929    	SEGMENT CODE
                           A  1930    ;  199	
                           A  1931    ;  200	uint8_t update_mos(char *filename) {
0B05BC                     A  1932    _update_mos:
                           A  1933    .DEFINE "_update_mos"
                           A  1934    
                           A  1935    .VALUE _update_mos
                           A  1936    
                           A  1937    .CLASS 2
                           A  1938    
                           A  1939    .TYPE 76
                           A  1940    
                           A  1941    .ENDEF
                           A  1942    
                           A  1943    .BEGFUNC "update_mos",200,"_update_mos"
                           A  1944    
                           A  1945    .LINE 200
                           A  1946    
                           A  1947    .DEFINE "filename"
                           A  1948    
                           A  1949    .CLASS 65
                           A  1950    
                           A  1951    .VALUE 6
                           A  1952    
                           A  1953    .TYPE 34
                           A  1954    
                           A  1955    .ENDEF
                           A  1956    
                           A  1957    .DEFINE "counter"
                           A  1958    
                           A  1959    .CLASS 65
                           A  1960    
                           A  1961    .VALUE -3
                           A  1962    
                           A  1963    .TYPE 14
                           A  1964    
                           A  1965    .ENDEF
                           A  1966    
                           A  1967    .DEFINE "file"
                           A  1968    
                           A  1969    .CLASS 65
                           A  1970    
                           A  1971    .VALUE -4
                           A  1972    
                           A  1973    .TYPE 12
                           A  1974    
                           A  1975    .ENDEF
                           A  1976    
                           A  1977    .DEFINE "addressfrom"
                           A  1978    
                           A  1979    .CLASS 65
                           A  1980    
                           A  1981    .VALUE -7
                           A  1982    
                           A  1983    .TYPE 14
                           A  1984    
                           A  1985    .ENDEF
                           A  1986    
                           A  1987    .DEFINE "pagemax"
                           A  1988    
                           A  1989    .CLASS 65
                           A  1990    
                           A  1991    .VALUE -10
                           A  1992    
                           A  1993    .TYPE 14
                           A  1994    
                           A  1995    .ENDEF
                           A  1996    
                           A  1997    .DEFINE "state"
                           A  1998    
                           A  1999    .CLASS 65
                           A  2000    
                           A  2001    .VALUE -13
                           A  2002    
                           A  2003    .TYPE 4
                           A  2004    
                           A  2005    .ENDEF
                           A  2006    
                           A  2007    .DEFINE "filesize"
                           A  2008    
                           A  2009    .CLASS 65
                           A  2010    
                           A  2011    .VALUE -16
                           A  2012    
                           A  2013    .TYPE 14
                           A  2014    
                           A  2015    .ENDEF
                           A  2016    
                           A  2017    .DEFINE "addressto"
                           A  2018    
                           A  2019    .CLASS 65
                           A  2020    
                           A  2021    .VALUE -19
                           A  2022    
                           A  2023    .TYPE 14
                           A  2024    
                           A  2025    .ENDEF
                           A  2026    
                           A  2027    .DEFINE "ptr"
                           A  2028    
                           A  2029    .CLASS 65
                           A  2030    
                           A  2031    .VALUE -22
                           A  2032    
                           A  2033    .TYPE 34
                           A  2034    
                           A  2035    .ENDEF
                           A  2036    
                           A  2037    .DEFINE "got"
                           A  2038    
                           A  2039    .CLASS 65
                           A  2040    
                           A  2041    .VALUE -25
                           A  2042    
                           A  2043    .TYPE 14
                           A  2044    
                           A  2045    .ENDEF
                           A  2046    
                           A  2047    .DEFINE "value"
                           A  2048    
                           A  2049    .CLASS 65
                           A  2050    
                           A  2051    .VALUE -26
                           A  2052    
                           A  2053    .TYPE 12
                           A  2054    
                           A  2055    .ENDEF
                           A  2056    
                           A  2057    .DEFINE "crcresult"
                           A  2058    
                           A  2059    .CLASS 65
                           A  2060    
                           A  2061    .VALUE -30
                           A  2062    
                           A  2063    .TYPE 15
                           A  2064    
                           A  2065    .ENDEF
                           A  2066    
                           A  2067    .DEFINE "lastpagebytes"
                           A  2068    
                           A  2069    .CLASS 65
                           A  2070    
                           A  2071    .VALUE -33
                           A  2072    
                           A  2073    .TYPE 14
                           A  2074    
                           A  2075    .ENDEF
                           A  2076    
                           A  2077    .DEFINE "size"
                           A  2078    
                           A  2079    .CLASS 65
                           A  2080    
                           A  2081    .VALUE -39
                           A  2082    
                           A  2083    .TYPE 14
                           A  2084    
                           A  2085    .ENDEF
                           A  2086    
                           A  2087    .DEFINE "crcexpected"
                           A  2088    
                           A  2089    .CLASS 65
                           A  2090    
                           A  2091    .VALUE -43
                           A  2092    
                           A  2093    .TYPE 15
                           A  2094    
                           A  2095    .ENDEF
                           A  2096    
0B05BC DDE5                A  2097    	PUSH	IX
0B05BE DD210000 00         A  2098    	LD	IX,0
0B05C3 DD39                A  2099    	ADD	IX,SP
0B05C5 ED22D5              A  2100    	LEA	HL,IX+%FFFFFFD5
0B05C8 F9                  A  2101    	LD	SP,HL
                           A  2102    ;  201		uint32_t crcexpected,crcresult;
                           A  2103    ;  202		uint24_t size = 0;
                           A  2104    .LINE 202
                           A  2105    
0B05C9 01000000            A  2106    	LD	BC,0
0B05CD DD0FD9              A  2107    	LD	(IX+%FFFFFFD9),BC
                           A  2108    ;  203		uint24_t got;
                           A  2109    ;  204		uint8_t file;
                           A  2110    ;  205		char* ptr = (char*)BUFFER1;
                           A  2111    .LINE 205
                           A  2112    
0B05D0 01000005            A  2113    	LD	BC,327680
0B05D4 DD0FEA              A  2114    	LD	(IX+%FFFFFFEA),BC
                           A  2115    ;  206		uint8_t value;
                           A  2116    ;  207		uint24_t counter,pagemax, lastpageb
                           A  2117    ;  208		uint24_t addressto,addressfrom;
                           A  2118    ;  209		enum states state;
                           A  2119    ;  210		uint24_t filesize;
                           A  2120    ;  211	
                           A  2121    ;  212		putch(12); // cls
                           A  2122    .LINE 212
                           A  2123    
0B05D7 010C0000            A  2124    	LD	BC,12
0B05DB C5                  A  2125    	PUSH	BC
0B05DC CD E5 00 0B         A  2126    	CALL	_putch
0B05E0 C1                  A  2127    	POP	BC
                           A  2128    ;  213		print_version();	
                           A  2129    .LINE 213
                           A  2130    
0B05E1 CD 2F 03 0B         A  2131    	CALL	_print_version
                           A  2132    ;  214		
                           A  2133    ;  215		file = mos_fopen(filename, fa_read)
                           A  2134    .LINE 215
                           A  2135    
0B05E5 01010000            A  2136    	LD	BC,1
0B05E9 C5                  A  2137    	PUSH	BC
0B05EA DD0706              A  2138    	LD	BC,(IX+%6)
0B05ED C5                  A  2139    	PUSH	BC
0B05EE CD 26 0E 0B         A  2140    	CALL	_mos_fopen
0B05F2 C1                  A  2141    	POP	BC
0B05F3 C1                  A  2142    	POP	BC
0B05F4 DD77FC              A  2143    	LD	(IX+%FFFFFFFC),A
                           A  2144    ;  216		if(!file)
                           A  2145    .LINE 216
                           A  2146    
0B05F7 B7                  A  2147    	OR	A,A
0B05F8 20 2C               A  2148    	JR	NZ,L_52
                           A  2149    ;  217		{
                           A  2150    ;  218			printf("Error opening \"%s\"\n\
                           A  2151    .LINE 218
                           A  2152    
0B05FA 01 A6 14 0B         A  2153    	LD	BC,___print_uputch
0B05FE ED43 04 24 0B       A  2154    	LD	(___print_xputch),BC
0B0603 01 FA 25 0B         A  2155    	LD	BC,L__46
0B0607 C5                  A  2156    	PUSH	BC
0B0608 CD 35 13 0B         A  2157    	CALL	___print_sendstring
0B060C C1                  A  2158    	POP	BC
0B060D DD0706              A  2159    	LD	BC,(IX+%6)
0B0610 C5                  A  2160    	PUSH	BC
0B0611 CD 35 13 0B         A  2161    	CALL	___print_sendstring
0B0615 C1                  A  2162    	POP	BC
0B0616 01 0A 26 0B         A  2163    	LD	BC,L__47
0B061A C5                  A  2164    	PUSH	BC
0B061B CD 35 13 0B         A  2165    	CALL	___print_sendstring
0B061F C1                  A  2166    	POP	BC
                           A  2167    ;  219			return EXIT_FILENOTFOUND;
                           A  2168    .LINE 219
                           A  2169    
0B0620 3E04                A  2170    	LD	A,%4
0B0622 C3 CC 09 0B         A  2171    	JR	L_93
                           A  2172    ;  220		}
0B0626                     A  2173    L_52:
                           A  2174    .LINE 220
                           A  2175    
                           A  2176    ;  221	
                           A  2177    ;  222		mos_fread(file, (char *)BUFFER1, MO
                           A  2178    .LINE 222
                           A  2179    
0B0626 01050000            A  2180    	LD	BC,5
0B062A C5                  A  2181    	PUSH	BC
0B062B 01000005            A  2182    	LD	BC,327680
0B062F C5                  A  2183    	PUSH	BC
0B0630 DD4EFC              A  2184    	LD	C,(IX+%FFFFFFFC)
0B0633 0600                A  2185    	LD	B,%0
0B0635 C5                  A  2186    	PUSH	BC
0B0636 CD 68 0E 0B         A  2187    	CALL	_mos_fread
0B063A C1                  A  2188    	POP	BC
0B063B C1                  A  2189    	POP	BC
0B063C C1                  A  2190    	POP	BC
                           A  2191    ;  223		if(!containsMosHeader((uint8_t *)BU
                           A  2192    .LINE 223
                           A  2193    
0B063D 01000005            A  2194    	LD	BC,327680
0B0641 C5                  A  2195    	PUSH	BC
0B0642 CD 90 02 0B         A  2196    	CALL	_containsMosHeader
0B0646 C1                  A  2197    	POP	BC
0B0647 B7                  A  2198    	OR	A,A
0B0648 20 24               A  2199    	JR	NZ,L_54
                           A  2200    ;  224			printf("File does not contain v
                           A  2201    .LINE 224
                           A  2202    
0B064A 01 A6 14 0B         A  2203    	LD	BC,___print_uputch
0B064E ED43 04 24 0B       A  2204    	LD	(___print_xputch),BC
0B0653 01 0E 26 0B         A  2205    	LD	BC,L__49
0B0657 C5                  A  2206    	PUSH	BC
0B0658 CD 35 13 0B         A  2207    	CALL	___print_sendstring
0B065C C1                  A  2208    	POP	BC
                           A  2209    ;  225			mos_fclose(file);
                           A  2210    .LINE 225
                           A  2211    
0B065D DD4EFC              A  2212    	LD	C,(IX+%FFFFFFFC)
0B0660 0600                A  2213    	LD	B,%0
0B0662 C5                  A  2214    	PUSH	BC
0B0663 CD 3E 0E 0B         A  2215    	CALL	_mos_fclose
0B0667 C1                  A  2216    	POP	BC
                           A  2217    ;  226			return EXIT_INVALIDPARAMETER;
                           A  2218    .LINE 226
                           A  2219    
0B0668 3E13                A  2220    	LD	A,%13
0B066A C3 CC 09 0B         A  2221    	JR	L_93
                           A  2222    ;  227		}
0B066E                     A  2223    L_54:
                           A  2224    .LINE 227
                           A  2225    
                           A  2226    ;  228	
                           A  2227    ;  229		filesize = getFileSize(file);
                           A  2228    .LINE 229
                           A  2229    
0B066E DD4EFC              A  2230    	LD	C,(IX+%FFFFFFFC)
0B0671 0600                A  2231    	LD	B,%0
0B0673 C5                  A  2232    	PUSH	BC
0B0674 CD 6A 12 0B         A  2233    	CALL	_getFileSize
0B0678 C1                  A  2234    	POP	BC
0B0679 DD2FF0              A  2235    	LD	(IX+%FFFFFFF0),HL
                           A  2236    ;  230		if(filesize > FLASHSIZE) {
                           A  2237    .LINE 230
                           A  2238    
0B067C E5C1                A  2239    	LD	BC,HL
0B067E 21000002            A  2240    	LD	HL,131072
0B0682 B7                  A  2241    	OR	A,A
0B0683 ED42                A  2242    	SBC	HL,BC
0B0685 30 24               A  2243    	JR	NC,L_56
                           A  2244    ;  231			printf("File too large for 128K
                           A  2245    .LINE 231
                           A  2246    
0B0687 01 A6 14 0B         A  2247    	LD	BC,___print_uputch
0B068B ED43 04 24 0B       A  2248    	LD	(___print_xputch),BC
0B0690 01 42 26 0B         A  2249    	LD	BC,L__51
0B0694 C5                  A  2250    	PUSH	BC
0B0695 CD 35 13 0B         A  2251    	CALL	___print_sendstring
0B0699 C1                  A  2252    	POP	BC
                           A  2253    ;  232			mos_fclose(file);
                           A  2254    .LINE 232
                           A  2255    
0B069A DD4EFC              A  2256    	LD	C,(IX+%FFFFFFFC)
0B069D 0600                A  2257    	LD	B,%0
0B069F C5                  A  2258    	PUSH	BC
0B06A0 CD 3E 0E 0B         A  2259    	CALL	_mos_fclose
0B06A4 C1                  A  2260    	POP	BC
                           A  2261    ;  233			return EXIT_INVALIDPARAMETER;
                           A  2262    .LINE 233
                           A  2263    
0B06A5 3E13                A  2264    	LD	A,%13
0B06A7 C3 CC 09 0B         A  2265    	JR	L_93
                           A  2266    ;  234		}
0B06AB                     A  2267    L_56:
                           A  2268    .LINE 234
                           A  2269    
                           A  2270    ;  235	
                           A  2271    ;  236		printf("\r\nValid ez80 code\r\nCalc
                           A  2272    .LINE 236
                           A  2273    
0B06AB 01 A6 14 0B         A  2274    	LD	BC,___print_uputch
0B06AF ED43 04 24 0B       A  2275    	LD	(___print_xputch),BC
0B06B4 01 6C 26 0B         A  2276    	LD	BC,L__52
0B06B8 C5                  A  2277    	PUSH	BC
0B06B9 CD 35 13 0B         A  2278    	CALL	___print_sendstring
0B06BD C1                  A  2279    	POP	BC
                           A  2280    ;  237	
                           A  2281    ;  238		crc32_initialize();
                           A  2282    .LINE 238
                           A  2283    
0B06BE CD B8 11 0B         A  2284    	CALL	_crc32_initialize
                           A  2285    ;  239		mos_flseek(file, 0);
                           A  2286    .LINE 239
                           A  2287    
0B06C2 01000000            A  2288    	LD	BC,0
0B06C6 C5                  A  2289    	PUSH	BC
0B06C7 C5                  A  2290    	PUSH	BC
0B06C8 DD4EFC              A  2291    	LD	C,(IX+%FFFFFFFC)
0B06CB 0600                A  2292    	LD	B,%0
0B06CD C5                  A  2293    	PUSH	BC
0B06CE CD E2 0E 0B         A  2294    	CALL	_mos_flseek
0B06D2 C1                  A  2295    	POP	BC
0B06D3 C1                  A  2296    	POP	BC
0B06D4 C1                  A  2297    	POP	BC
                           A  2298    ;  240		
                           A  2299    ;  241		// Read file to memory
                           A  2300    ;  242		while((got = mos_fread(file, ptr, B
                           A  2301    .LINE 242
                           A  2302    
0B06D5 18 22               A  2303    	JR	L_57
0B06D7                     A  2304    L_58:
                           A  2305    ;  243			crc32(ptr, got);
                           A  2306    .LINE 243
                           A  2307    
0B06D7 DD07E7              A  2308    	LD	BC,(IX+%FFFFFFE7)
0B06DA C5                  A  2309    	PUSH	BC
0B06DB DD07EA              A  2310    	LD	BC,(IX+%FFFFFFEA)
0B06DE C5                  A  2311    	PUSH	BC
0B06DF CD 0A 12 0B         A  2312    	CALL	_crc32
0B06E3 C1                  A  2313    	POP	BC
0B06E4 C1                  A  2314    	POP	BC
                           A  2315    ;  244			ptr += got;
                           A  2316    .LINE 244
                           A  2317    
0B06E5 DD07E7              A  2318    	LD	BC,(IX+%FFFFFFE7)
0B06E8 DD27EA              A  2319    	LD	HL,(IX+%FFFFFFEA)
0B06EB 09                  A  2320    	ADD	HL,BC
0B06EC DD2FEA              A  2321    	LD	(IX+%FFFFFFEA),HL
                           A  2322    ;  245			putch('.');
                           A  2323    .LINE 245
                           A  2324    
0B06EF 012E0000            A  2325    	LD	BC,46
0B06F3 C5                  A  2326    	PUSH	BC
0B06F4 CD E5 00 0B         A  2327    	CALL	_putch
0B06F8 C1                  A  2328    	POP	BC
                           A  2329    ;  246		}		
0B06F9                     A  2330    L_57:
                           A  2331    .LINE 246
                           A  2332    
0B06F9 01004000            A  2333    	LD	BC,16384
0B06FD C5                  A  2334    	PUSH	BC
0B06FE DD07EA              A  2335    	LD	BC,(IX+%FFFFFFEA)
0B0701 C5                  A  2336    	PUSH	BC
0B0702 DD4EFC              A  2337    	LD	C,(IX+%FFFFFFFC)
0B0705 0600                A  2338    	LD	B,%0
0B0707 C5                  A  2339    	PUSH	BC
0B0708 CD 68 0E 0B         A  2340    	CALL	_mos_fread
0B070C C1                  A  2341    	POP	BC
0B070D C1                  A  2342    	POP	BC
0B070E C1                  A  2343    	POP	BC
0B070F DD2FE7              A  2344    	LD	(IX+%FFFFFFE7),HL
0B0712 E5C1                A  2345    	LD	BC,HL
0B0714 B7                  A  2346    	OR	A,A
0B0715 ED62                A  2347    	SBC	HL,HL
0B0717 B7                  A  2348    	OR	A,A
0B0718 ED42                A  2349    	SBC	HL,BC
0B071A 38 BB               A  2350    	JR	C,L_58
                           A  2351    ;  247		crcresult = crc32_finalize();
                           A  2352    .LINE 247
                           A  2353    
0B071C CD CD 11 0B         A  2354    	CALL	_crc32_finalize
0B0720 DD2FE2              A  2355    	LD	(IX+%FFFFFFE2),HL
0B0723 DD73E5              A  2356    	LD	(IX+%FFFFFFE5),E
                           A  2357    ;  248		// Actual work here	
                           A  2358    ;  249		di();								
                           A  2359    .LINE 249
                           A  2360    
0B0726 F3                  A  2361    	di
                           A  2362    ;  250	
                           A  2363    ;  251		// start address in flash
                           A  2364    ;  252		addressto = FLASHSTART;
                           A  2365    .LINE 252
                           A  2366    
0B0727 01000000            A  2367    	LD	BC,0
0B072B DD0FED              A  2368    	LD	(IX+%FFFFFFED),BC
                           A  2369    ;  253		addressfrom = BUFFER1;
                           A  2370    .LINE 253
                           A  2371    
0B072E 01000005            A  2372    	LD	BC,327680
0B0732 DD0FF9              A  2373    	LD	(IX+%FFFFFFF9),BC
                           A  2374    ;  254		
                           A  2375    ;  255		crcexpected = crcresult;
                           A  2376    .LINE 255
                           A  2377    
0B0735 DD07E2              A  2378    	LD	BC,(IX+%FFFFFFE2)
0B0738 DD7EE5              A  2379    	LD	A,(IX+%FFFFFFE5)
0B073B DD0FD5              A  2380    	LD	(IX+%FFFFFFD5),BC
0B073E DD77D8              A  2381    	LD	(IX+%FFFFFFD8),A
                           A  2382    ;  256		state = firmware;
                           A  2383    .LINE 256
                           A  2384    
0B0741 01000000            A  2385    	LD	BC,0
0B0745 DD0FF3              A  2386    	LD	(IX+%FFFFFFF3),BC
                           A  2387    ;  257		size = filesize;	
                           A  2388    .LINE 257
                           A  2389    
0B0748 DD07F0              A  2390    	LD	BC,(IX+%FFFFFFF0)
0B074B DD0FD9              A  2391    	LD	(IX+%FFFFFFD9),BC
                           A  2392    ;  258		while(1)
0B074E                     A  2393    L_91:
                           A  2394    .LINE 258
                           A  2395    
                           A  2396    ;  259		{
                           A  2397    ;  260			switch(state)
                           A  2398    .LINE 260
                           A  2399    
0B074E DD27F3              A  2400    	LD	HL,(IX+%FFFFFFF3)
0B0751 CD 45 1B 0B         A  2401    	CALL	__case8D
0B0755 E9                  A  2402    	JP	(HL)
0B0756                     A  2403    L__54:
0B0756 0200                A  2404    	DW	2
0B0758 00                  A  2405    	DB	0
0B0759 63070B              A  2406    	DW24	L_60	
                           A  2407    
0B075C 01                  A  2408    	DB	1
0B075D 70070B              A  2409    	DW24	L_61	
                           A  2410    
0B0760 7D070B              A  2411    	DW24	L_62	
                           A  2412    
                           A  2413    ;  261			{
                           A  2414    ;  262				case firmware:
0B0763                     A  2415    L_60:
                           A  2416    .LINE 262
                           A  2417    
                           A  2418    ;  263					// start address in fla
                           A  2419    ;  264					addressfrom = BUFFER1;
                           A  2420    .LINE 264
                           A  2421    
0B0763 01000005            A  2422    	LD	BC,327680
0B0767 DD0FF9              A  2423    	LD	(IX+%FFFFFFF9),BC
                           A  2424    ;  265					crc32_initialize();
                           A  2425    .LINE 265
                           A  2426    
0B076A CD B8 11 0B         A  2427    	CALL	_crc32_initialize
                           A  2428    ;  266					break;
                           A  2429    .LINE 266
                           A  2430    
0B076E 18 38               A  2431    	JR	L_63
                           A  2432    ;  267				case retry:
0B0770                     A  2433    L_61:
                           A  2434    .LINE 267
                           A  2435    
                           A  2436    ;  268					// start address in fla
                           A  2437    ;  269					addressfrom = BUFFER1;
                           A  2438    .LINE 269
                           A  2439    
0B0770 01000005            A  2440    	LD	BC,327680
0B0774 DD0FF9              A  2441    	LD	(IX+%FFFFFFF9),BC
                           A  2442    ;  270					crc32_initialize();
                           A  2443    .LINE 270
                           A  2444    
0B0777 CD B8 11 0B         A  2445    	CALL	_crc32_initialize
                           A  2446    ;  271					break;
                           A  2447    .LINE 271
                           A  2448    
0B077B 18 2B               A  2449    	JR	L_63
                           A  2450    ;  272				default:
0B077D                     A  2451    L_62:
                           A  2452    .LINE 272
                           A  2453    
                           A  2454    ;  273					// RESET SYSTEM
                           A  2455    ;  274					printf("\r\n");
                           A  2456    .LINE 274
                           A  2457    
0B077D 01 A6 14 0B         A  2458    	LD	BC,___print_uputch
0B0781 ED43 04 24 0B       A  2459    	LD	(___print_xputch),BC
0B0786 01 91 26 0B         A  2460    	LD	BC,L__55
0B078A C5                  A  2461    	PUSH	BC
0B078B CD 35 13 0B         A  2462    	CALL	___print_sendstring
0B078F C1                  A  2463    	POP	BC
                           A  2464    ;  275					printf("Done\r\n");
                           A  2465    .LINE 275
                           A  2466    
0B0790 01 A6 14 0B         A  2467    	LD	BC,___print_uputch
0B0794 ED43 04 24 0B       A  2468    	LD	(___print_xputch),BC
0B0799 01 94 26 0B         A  2469    	LD	BC,L__56
0B079D C5                  A  2470    	PUSH	BC
0B079E CD 35 13 0B         A  2471    	CALL	___print_sendstring
0B07A2 C1                  A  2472    	POP	BC
                           A  2473    ;  276					//printf("Press reset b
                           A  2474    ;  277					//while(1); // force co
                           A  2475    ;  278					return 0;
                           A  2476    .LINE 278
                           A  2477    
0B07A3 AF                  A  2478    	XOR	A,A
0B07A4 C3 CC 09 0B         A  2479    	JR	L_93
                           A  2480    ;  279			}
0B07A8                     A  2481    L_63:
                           A  2482    .LINE 279
                           A  2483    
                           A  2484    ;  280	
                           A  2485    ;  281			// Unprotect and erase flash
                           A  2486    ;  282			printf("Erasing flash... ");
                           A  2487    .LINE 282
                           A  2488    
0B07A8 01 A6 14 0B         A  2489    	LD	BC,___print_uputch
0B07AC ED43 04 24 0B       A  2490    	LD	(___print_xputch),BC
0B07B1 01 9B 26 0B         A  2491    	LD	BC,L__57
0B07B5 C5                  A  2492    	PUSH	BC
0B07B6 CD 35 13 0B         A  2493    	CALL	___print_sendstring
0B07BA C1                  A  2494    	POP	BC
                           A  2495    ;  283			enableFlashKeyRegister();	// 
                           A  2496    .LINE 283
                           A  2497    
0B07BB CD 01 0F 0B         A  2498    	CALL	_enableFlashKeyRegister
                           A  2499    ;  284			FLASH_PROT = 0;				// 
                           A  2500    .LINE 284
                           A  2501    
0B07BF AF                  A  2502    	XOR	A,A
0B07C0 ED39FA              A  2503    	OUT0	(250),A
                           A  2504    ;  285			enableFlashKeyRegister();	// 
                           A  2505    .LINE 285
                           A  2506    
0B07C3 CD 01 0F 0B         A  2507    	CALL	_enableFlashKeyRegister
                           A  2508    ;  286			FLASH_FDIV = 0x5F;			// 
                           A  2509    .LINE 286
                           A  2510    
0B07C7 3E5F                A  2511    	LD	A,%5F
0B07C9 ED39F9              A  2512    	OUT0	(249),A
                           A  2513    ;  287			
                           A  2514    ;  288			for(counter = 0; counter < FLAS
                           A  2515    .LINE 288
                           A  2516    
0B07CC 01000000            A  2517    	LD	BC,0
0B07D0 DD0FFD              A  2518    	LD	(IX+%FFFFFFFD),BC
0B07D3 18 1C               A  2519    	JR	L_69
0B07D5                     A  2520    L_67:
                           A  2521    ;  289			{
                           A  2522    ;  290				FLASH_PAGE = counter;
                           A  2523    .LINE 290
                           A  2524    
0B07D5 DD7EFD              A  2525    	LD	A,(IX+%FFFFFFFD)
0B07D8 ED39FC              A  2526    	OUT0	(252),A
                           A  2527    ;  291				FLASH_PGCTL = 0x02;			
                           A  2528    .LINE 291
                           A  2529    
0B07DB 3E02                A  2530    	LD	A,%2
0B07DD ED39FF              A  2531    	OUT0	(255),A
                           A  2532    ;  292	
                           A  2533    ;  293				do
0B07E0                     A  2534    L_65:
                           A  2535    .LINE 293
                           A  2536    
                           A  2537    ;  294				{
                           A  2538    ;  295					value = FLASH_PGCTL;
                           A  2539    .LINE 295
                           A  2540    
0B07E0 ED38FF              A  2541    	IN0	A,(255)
0B07E3 DD77E6              A  2542    	LD	(IX+%FFFFFFE6),A
                           A  2543    ;  296				}
                           A  2544    ;  297				while(value & 0x02);// wait
                           A  2545    .LINE 297
                           A  2546    
0B07E6 E602                A  2547    	AND	A,%2
0B07E8 20 F6               A  2548    	JR	NZ,L_65
0B07EA DD07FD              A  2549    	LD	BC,(IX+%FFFFFFFD)
0B07ED 03                  A  2550    	INC	BC
0B07EE DD0FFD              A  2551    	LD	(IX+%FFFFFFFD),BC
                           A  2552    ;  298			}
0B07F1                     A  2553    L_69:
                           A  2554    .LINE 298
                           A  2555    
0B07F1 01800000            A  2556    	LD	BC,128
0B07F5 DD27FD              A  2557    	LD	HL,(IX+%FFFFFFFD)
0B07F8 B7                  A  2558    	OR	A,A
0B07F9 ED42                A  2559    	SBC	HL,BC
0B07FB 38 D8               A  2560    	JR	C,L_67
                           A  2561    ;  299			
                           A  2562    ;  300			printf("\r\nWriting new firmwar
                           A  2563    .LINE 300
                           A  2564    
0B07FD 01 A6 14 0B         A  2565    	LD	BC,___print_uputch
0B0801 ED43 04 24 0B       A  2566    	LD	(___print_xputch),BC
0B0806 01 AD 26 0B         A  2567    	LD	BC,L__60
0B080A C5                  A  2568    	PUSH	BC
0B080B CD 35 13 0B         A  2569    	CALL	___print_sendstring
0B080F C1                  A  2570    	POP	BC
                           A  2571    ;  301			
                           A  2572    ;  302			// determine number of pages to
                           A  2573    ;  303			pagemax = size/PAGESIZE;
                           A  2574    .LINE 303
                           A  2575    
0B0810 DD27F0              A  2576    	LD	HL,(IX+%FFFFFFF0)
0B0813 3E0A                A  2577    	LD	A,%A
0B0815 CD 19 1B 0B         A  2578    	CALL	__ishru_b
0B0819 DD2FF6              A  2579    	LD	(IX+%FFFFFFF6),HL
                           A  2580    ;  304			if(size%PAGESIZE) // last page 
                           A  2581    .LINE 304
                           A  2582    
0B081C 01FF0300            A  2583    	LD	BC,1023
0B0820 DD27F0              A  2584    	LD	HL,(IX+%FFFFFFF0)
0B0823 CD C5 1B 0B         A  2585    	CALL	__iand
0B0827 DD2FDC              A  2586    	LD	(IX+%FFFFFFDC),HL
0B082A CD 63 18 0B         A  2587    	CALL	__icmpzero
0B082E 28 0F               A  2588    	JR	Z,L_72
                           A  2589    ;  305			{
                           A  2590    ;  306				pagemax += 1;
                           A  2591    .LINE 306
                           A  2592    
0B0830 DD07F6              A  2593    	LD	BC,(IX+%FFFFFFF6)
0B0833 03                  A  2594    	INC	BC
0B0834 DD0FF6              A  2595    	LD	(IX+%FFFFFFF6),BC
                           A  2596    ;  307				lastpagebytes = size%PAGESI
                           A  2597    .LINE 307
                           A  2598    
0B0837 DD07DC              A  2599    	LD	BC,(IX+%FFFFFFDC)
0B083A DD0FDF              A  2600    	LD	(IX+%FFFFFFDF),BC
                           A  2601    ;  308			}
                           A  2602    ;  309			else lastpagebytes = PAGESIZE; 
                           A  2603    .LINE 309
                           A  2604    
0B083D 18 07               A  2605    	JR	L_80
0B083F                     A  2606    L_72:
0B083F 01000400            A  2607    	LD	BC,1024
0B0843 DD0FDF              A  2608    	LD	(IX+%FFFFFFDF),BC
0B0846                     A  2609    L_80:
                           A  2610    ;  310			
                           A  2611    ;  311			// write out each page to flash
                           A  2612    ;  312			for(counter = 0; counter < page
                           A  2613    .LINE 312
                           A  2614    
0B0846 01000000            A  2615    	LD	BC,0
0B084A DD0FFD              A  2616    	LD	(IX+%FFFFFFFD),BC
0B084D C3 F9 08 0B         A  2617    	JR	L_79
0B0851                     A  2618    L_77:
                           A  2619    ;  313			{
                           A  2620    ;  314				printf("\rWriting flash pag
                           A  2621    .LINE 314
                           A  2622    
0B0851 01 A6 14 0B         A  2623    	LD	BC,___print_uputch
0B0855 ED43 04 24 0B       A  2624    	LD	(___print_xputch),BC
0B085A 01 C9 26 0B         A  2625    	LD	BC,L__62
0B085E C5                  A  2626    	PUSH	BC
0B085F CD 35 13 0B         A  2627    	CALL	___print_sendstring
0B0863 C1                  A  2628    	POP	BC
0B0864 3E03                A  2629    	LD	A,%3
0B0866 32 FF 29 0B         A  2630    	LD	(___print_fmt+5),A
0B086A 3E40                A  2631    	LD	A,%40
0B086C 32 FB 29 0B         A  2632    	LD	(___print_fmt+1),A
0B0870 DD07FD              A  2633    	LD	BC,(IX+%FFFFFFFD)
0B0873 03                  A  2634    	INC	BC
0B0874 AF                  A  2635    	XOR	A,A
0B0875 C5D1                A  2636    	LD	DE,BC
0B0877 4F                  A  2637    	LD	C,A
0B0878 0600                A  2638    	LD	B,%0
0B087A C5                  A  2639    	PUSH	BC
0B087B D5                  A  2640    	PUSH	DE
0B087C CD 2C 15 0B         A  2641    	CALL	__u_itoa
0B0880 C1                  A  2642    	POP	BC
0B0881 C1                  A  2643    	POP	BC
0B0882 012F0000            A  2644    	LD	BC,47
0B0886 C5                  A  2645    	PUSH	BC
0B0887 CD A6 14 0B         A  2646    	CALL	___print_uputch
0B088B C1                  A  2647    	POP	BC
0B088C 3E03                A  2648    	LD	A,%3
0B088E 32 FF 29 0B         A  2649    	LD	(___print_fmt+5),A
0B0892 3E40                A  2650    	LD	A,%40
0B0894 32 FB 29 0B         A  2651    	LD	(___print_fmt+1),A
0B0898 DD07F6              A  2652    	LD	BC,(IX+%FFFFFFF6)
0B089B AF                  A  2653    	XOR	A,A
0B089C C5D1                A  2654    	LD	DE,BC
0B089E 4F                  A  2655    	LD	C,A
0B089F 0600                A  2656    	LD	B,%0
0B08A1 C5                  A  2657    	PUSH	BC
0B08A2 D5                  A  2658    	PUSH	DE
0B08A3 CD 2C 15 0B         A  2659    	CALL	__u_itoa
0B08A7 C1                  A  2660    	POP	BC
0B08A8 C1                  A  2661    	POP	BC
                           A  2662    ;  315				
                           A  2663    ;  316				if(counter == (pagemax - 1)
                           A  2664    .LINE 316
                           A  2665    
0B08A9 DD31F6              A  2666    	LD	IY,(IX+%FFFFFFF6)
0B08AC ED23FF              A  2667    	LEA	HL,IY+%FFFFFFFF
0B08AF DD07FD              A  2668    	LD	BC,(IX+%FFFFFFFD)
0B08B2 B7                  A  2669    	OR	A,A
0B08B3 ED42                A  2670    	SBC	HL,BC
0B08B5 20 15               A  2671    	JR	NZ,L_75
                           A  2672    ;  317					fastmemcpy(addressto,ad
                           A  2673    .LINE 317
                           A  2674    
0B08B7 DD07DF              A  2675    	LD	BC,(IX+%FFFFFFDF)
0B08BA C5                  A  2676    	PUSH	BC
0B08BB DD07F9              A  2677    	LD	BC,(IX+%FFFFFFF9)
0B08BE C5                  A  2678    	PUSH	BC
0B08BF DD07ED              A  2679    	LD	BC,(IX+%FFFFFFED)
0B08C2 C5                  A  2680    	PUSH	BC
0B08C3 CD 2E 0F 0B         A  2681    	CALL	_fastmemcpy
0B08C7 C1                  A  2682    	POP	BC
0B08C8 C1                  A  2683    	POP	BC
0B08C9 C1                  A  2684    	POP	BC
                           A  2685    ;  318					//printf("Fake copy to 
                           A  2686    ;  319				else 
                           A  2687    .LINE 319
                           A  2688    
0B08CA 18 14               A  2689    	JR	L_76
0B08CC                     A  2690    L_75:
                           A  2691    ;  320					fastmemcpy(addressto,ad
                           A  2692    .LINE 320
                           A  2693    
0B08CC 01000400            A  2694    	LD	BC,1024
0B08D0 C5                  A  2695    	PUSH	BC
0B08D1 DD07F9              A  2696    	LD	BC,(IX+%FFFFFFF9)
0B08D4 C5                  A  2697    	PUSH	BC
0B08D5 DD07ED              A  2698    	LD	BC,(IX+%FFFFFFED)
0B08D8 C5                  A  2699    	PUSH	BC
0B08D9 CD 2E 0F 0B         A  2700    	CALL	_fastmemcpy
0B08DD C1                  A  2701    	POP	BC
0B08DE C1                  A  2702    	POP	BC
0B08DF C1                  A  2703    	POP	BC
0B08E0                     A  2704    L_76:
                           A  2705    ;  321					//printf("Fake copy to 
                           A  2706    ;  322			
                           A  2707    ;  323				addressto += PAGESIZE;
                           A  2708    .LINE 323
                           A  2709    
0B08E0 01000400            A  2710    	LD	BC,1024
0B08E4 DD27ED              A  2711    	LD	HL,(IX+%FFFFFFED)
0B08E7 09                  A  2712    	ADD	HL,BC
0B08E8 DD2FED              A  2713    	LD	(IX+%FFFFFFED),HL
                           A  2714    ;  324				addressfrom += PAGESIZE;
                           A  2715    .LINE 324
                           A  2716    
0B08EB DD27F9              A  2717    	LD	HL,(IX+%FFFFFFF9)
0B08EE 09                  A  2718    	ADD	HL,BC
0B08EF DD2FF9              A  2719    	LD	(IX+%FFFFFFF9),HL
0B08F2 DD07FD              A  2720    	LD	BC,(IX+%FFFFFFFD)
0B08F5 03                  A  2721    	INC	BC
0B08F6 DD0FFD              A  2722    	LD	(IX+%FFFFFFFD),BC
                           A  2723    ;  325			}
0B08F9                     A  2724    L_79:
                           A  2725    .LINE 325
                           A  2726    
0B08F9 DD07F6              A  2727    	LD	BC,(IX+%FFFFFFF6)
0B08FC DD27FD              A  2728    	LD	HL,(IX+%FFFFFFFD)
0B08FF B7                  A  2729    	OR	A,A
0B0900 ED42                A  2730    	SBC	HL,BC
0B0902 DA 51 08 0B         A  2731    	JR	C,L_77
                           A  2732    ;  326			lockFlashKeyRegister();	// lock
                           A  2733    .LINE 326
                           A  2734    
0B0906 CD 19 0F 0B         A  2735    	CALL	_lockFlashKeyRegister
                           A  2736    ;  327			printf("\r\n");
                           A  2737    .LINE 327
                           A  2738    
0B090A 01 A6 14 0B         A  2739    	LD	BC,___print_uputch
0B090E ED43 04 24 0B       A  2740    	LD	(___print_xputch),BC
0B0913 01 DE 26 0B         A  2741    	LD	BC,L__65
0B0917 C5                  A  2742    	PUSH	BC
0B0918 CD 35 13 0B         A  2743    	CALL	___print_sendstring
0B091C C1                  A  2744    	POP	BC
                           A  2745    ;  328			
                           A  2746    ;  329			//Verify correct CRC in flash
                           A  2747    ;  330			printf("Verifying flash checksu
                           A  2748    .LINE 330
                           A  2749    
0B091D 01 A6 14 0B         A  2750    	LD	BC,___print_uputch
0B0921 ED43 04 24 0B       A  2751    	LD	(___print_xputch),BC
0B0926 01 E1 26 0B         A  2752    	LD	BC,L__66
0B092A C5                  A  2753    	PUSH	BC
0B092B CD 35 13 0B         A  2754    	CALL	___print_sendstring
0B092F C1                  A  2755    	POP	BC
                           A  2756    ;  331			crc32((char*)FLASHSTART, size);
                           A  2757    .LINE 331
                           A  2758    
0B0930 DD07F0              A  2759    	LD	BC,(IX+%FFFFFFF0)
0B0933 C5                  A  2760    	PUSH	BC
0B0934 01000000            A  2761    	LD	BC,0
0B0938 C5                  A  2762    	PUSH	BC
0B0939 CD 0A 12 0B         A  2763    	CALL	_crc32
0B093D C1                  A  2764    	POP	BC
0B093E C1                  A  2765    	POP	BC
                           A  2766    ;  332			crcresult = crc32_finalize();
                           A  2767    .LINE 332
                           A  2768    
0B093F CD CD 11 0B         A  2769    	CALL	_crc32_finalize
0B0943 DD2FE2              A  2770    	LD	(IX+%FFFFFFE2),HL
0B0946 DD73E5              A  2771    	LD	(IX+%FFFFFFE5),E
                           A  2772    ;  333	
                           A  2773    ;  334			if(crcresult == crcexpected)
                           A  2774    .LINE 334
                           A  2775    
0B0949 DD27E2              A  2776    	LD	HL,(IX+%FFFFFFE2)
0B094C DD5EE5              A  2777    	LD	E,(IX+%FFFFFFE5)
0B094F DD07D5              A  2778    	LD	BC,(IX+%FFFFFFD5)
0B0952 DD7ED8              A  2779    	LD	A,(IX+%FFFFFFD8)
0B0955 CD 88 1B 0B         A  2780    	CALL	__lcmpu
0B0959 20 1E               A  2781    	JR	NZ,L_89
                           A  2782    ;  335			{
                           A  2783    ;  336				printf("- OK\r\n");
                           A  2784    .LINE 336
                           A  2785    
0B095B 01 A6 14 0B         A  2786    	LD	BC,___print_uputch
0B095F ED43 04 24 0B       A  2787    	LD	(___print_xputch),BC
0B0964 01 FE 26 0B         A  2788    	LD	BC,L__68
0B0968 C5                  A  2789    	PUSH	BC
0B0969 CD 35 13 0B         A  2790    	CALL	___print_sendstring
0B096D C1                  A  2791    	POP	BC
                           A  2792    ;  337				state = systemreset;
                           A  2793    .LINE 337
                           A  2794    
0B096E 01020000            A  2795    	LD	BC,2
0B0972 DD0FF3              A  2796    	LD	(IX+%FFFFFFF3),BC
                           A  2797    ;  338			}
                           A  2798    ;  339			else // CRC Failure - next acti
                           A  2799    .LINE 339
                           A  2800    
0B0975 C3 4E 07 0B         A  2801    	JR	L_91
0B0979                     A  2802    L_89:
                           A  2803    ;  340			{	 // User interaction not po
                           A  2804    ;  341				switch(state)
                           A  2805    .LINE 341
                           A  2806    
0B0979 DD27F3              A  2807    	LD	HL,(IX+%FFFFFFF3)
0B097C CD 45 1B 0B         A  2808    	CALL	__case8D
0B0980 E9                  A  2809    	JP	(HL)
0B0981                     A  2810    L__69:
0B0981 0200                A  2811    	DW	2
0B0983 00                  A  2812    	DB	0
0B0984 8E090B              A  2813    	DW24	L_82	
                           A  2814    
0B0987 01                  A  2815    	DB	1
0B0988 AC090B              A  2816    	DW24	L_83	
                           A  2817    
0B098B C1090B              A  2818    	DW24	L_86	
                           A  2819    
                           A  2820    ;  342				{
                           A  2821    ;  343					case firmware:
0B098E                     A  2822    L_82:
                           A  2823    .LINE 343
                           A  2824    
                           A  2825    ;  344						printf("\r\nError o
                           A  2826    .LINE 344
                           A  2827    
0B098E 01 A6 14 0B         A  2828    	LD	BC,___print_uputch
0B0992 ED43 04 24 0B       A  2829    	LD	(___print_xputch),BC
0B0997 01 05 27 0B         A  2830    	LD	BC,L__70
0B099B C5                  A  2831    	PUSH	BC
0B099C CD 35 13 0B         A  2832    	CALL	___print_sendstring
0B09A0 C1                  A  2833    	POP	BC
                           A  2834    ;  345						state = retry;
                           A  2835    .LINE 345
                           A  2836    
0B09A1 01010000            A  2837    	LD	BC,1
0B09A5 DD0FF3              A  2838    	LD	(IX+%FFFFFFF3),BC
                           A  2839    ;  346						break;
                           A  2840    .LINE 346
                           A  2841    
0B09A8 C3 4E 07 0B         A  2842    	JR	L_91
                           A  2843    ;  347					case retry:
0B09AC                     A  2844    L_83:
                           A  2845    .LINE 347
                           A  2846    
                           A  2847    ;  348						printf("\r\nRetry f
                           A  2848    .LINE 348
                           A  2849    
0B09AC 01 A6 14 0B         A  2850    	LD	BC,___print_uputch
0B09B0 ED43 04 24 0B       A  2851    	LD	(___print_xputch),BC
0B09B5 01 34 27 0B         A  2852    	LD	BC,L__71
0B09B9 C5                  A  2853    	PUSH	BC
0B09BA CD 35 13 0B         A  2854    	CALL	___print_sendstring
0B09BE C1                  A  2855    	POP	BC
                           A  2856    ;  349						while(1); // no mor
0B09BF                     A  2857    L_85:
                           A  2858    .LINE 349
                           A  2859    
0B09BF 18 FE               A  2860    	JR	L_85
                           A  2861    ;  350					default:
0B09C1                     A  2862    L_86:
                           A  2863    .LINE 350
                           A  2864    
                           A  2865    ;  351						state = retry;
                           A  2866    .LINE 351
                           A  2867    
0B09C1 01010000            A  2868    	LD	BC,1
0B09C5 DD0FF3              A  2869    	LD	(IX+%FFFFFFF3),BC
0B09C8 C3 4E 07 0B         A  2870    	JR	L_91
                           A  2871    ;  352				}
                           A  2872    ;  353			}
                           A  2873    ;  354		}		
                           A  2874    ;  355		return 0;
                           A  2875    ;  356	}
0B09CC                     A  2876    L_93:
                           A  2877    .LINE 356
                           A  2878    
0B09CC DDF9                A  2879    	LD	SP,IX
0B09CE DDE1                A  2880    	POP	IX
0B09D0 C9                  A  2881    	RET	
                           A  2882    
                           A  2883    
                           A  2884    ;**************************** _update_mos *****
                           A  2885    ;Name                         Addr/Register   S
                           A  2886    ;_lockFlashKeyRegister               IMPORT  --
                           A  2887    ;_fastmemcpy                         IMPORT  --
                           A  2888    ;__u_itoa                            IMPORT  --
                           A  2889    ;___print_fmt                        IMPORT    
                           A  2890    ;_enableFlashKeyRegister             IMPORT  --
                           A  2891    ;_crc32_finalize                     IMPORT  --
                           A  2892    ;_crc32                              IMPORT  --
                           A  2893    ;_mos_flseek                         IMPORT  --
                           A  2894    ;_crc32_initialize                   IMPORT  --
                           A  2895    ;_getFileSize                        IMPORT  --
                           A  2896    ;_mos_fclose                         IMPORT  --
                           A  2897    ;_mos_fread                          IMPORT  --
                           A  2898    ;___print_sendstring                 IMPORT  --
                           A  2899    ;___print_xputch                     IMPORT    
                           A  2900    ;___print_uputch                     IMPORT  --
                           A  2901    ;_mos_fopen                          IMPORT  --
                           A  2902    ;_putch                              IMPORT  --
                           A  2903    ;crcexpected                          IX-43    
                           A  2904    ;size                                 IX-39    
                           A  2905    ;G_0                                  IX-36    
                           A  2906    ;lastpagebytes                        IX-33    
                           A  2907    ;crcresult                            IX-30    
                           A  2908    ;value                                IX-26    
                           A  2909    ;got                                  IX-25    
                           A  2910    ;ptr                                  IX-22    
                           A  2911    ;addressto                            IX-19    
                           A  2912    ;filesize                             IX-16    
                           A  2913    ;state                                IX-13    
                           A  2914    ;pagemax                              IX-10    
                           A  2915    ;addressfrom                           IX-7    
                           A  2916    ;file                                  IX-4    
                           A  2917    ;counter                               IX-3    
                           A  2918    ;filename                              IX+6    
                           A  2919    
                           A  2920    
                           A  2921    ; Stack Frame Size: 52 (bytes)
                           A  2922    ;       Spill Code: 0 (instruction)
                           A  2923    
                           A  2924    
                           A  2925    .ENDFUNC "update_mos",356,"_update_mos"
                           A  2926    	SEGMENT STRSECT
0B25FA                     A  2927    L__46:
0B25FA 4572726F 72206F70   A  2928    	DB	"Error opening \""
0B2602 656E696E 672022 
0B2609 00                  A  2929    	DB	0
0B260A                     A  2930    L__47:
0B260A 22                  A  2931    	DB	"\""
0B260B 0A0D00              A  2932    	DB	10,13,0
0B260E                     A  2933    L__49:
0B260E 46696C65 20646F65   A  2934    	DB	"File does not contain valid MOS ez80 s
0B2616 73206E6F 7420636F 
0B261E 6E746169 6E207661 
0B2626 6C696420 4D4F5320 
0B262E 657A3830 20737461 
0B2636 72747570 20636F64 
0B263E 65 
0B263F 0D0A00              A  2935    	DB	13,10,0
0B2642                     A  2936    L__51:
0B2642 46696C65 20746F6F   A  2937    	DB	"File too large for 128KB embedded flas
0B264A 206C6172 67652066 
0B2652 6F722031 32384B42 
0B265A 20656D62 65646465 
0B2662 6420666C 617368 
0B2669 0D0A00              A  2938    	DB	13,10,0
0B266C                     A  2939    L__52:
0B266C 0D0A                A  2940    	DB	13,10
0B266E 56616C69 6420657A   A  2941    	DB	"Valid ez80 code"
0B2676 38302063 6F6465 
0B267D 0D0A                A  2942    	DB	13,10
0B267F 43616C63 756C6174   A  2943    	DB	"Calculating CRC32"
0B2687 696E6720 43524333 
0B268F 32 
0B2690 00                  A  2944    	DB	0
0B2691                     A  2945    L__55:
0B2691 0D0A00              A  2946    	DB	13,10,0
0B2694                     A  2947    L__56:
0B2694 446F6E65            A  2948    	DB	"Done"
0B2698 0D0A00              A  2949    	DB	13,10,0
0B269B                     A  2950    L__57:
0B269B 45726173 696E6720   A  2951    	DB	"Erasing flash... "
0B26A3 666C6173 682E2E2E 
0B26AB 20 
0B26AC 00                  A  2952    	DB	0
0B26AD                     A  2953    L__60:
0B26AD 0D0A                A  2954    	DB	13,10
0B26AF 57726974 696E6720   A  2955    	DB	"Writing new firmware..."
0B26B7 6E657720 6669726D 
0B26BF 77617265 2E2E2E 
0B26C6 0D0A00              A  2956    	DB	13,10,0
0B26C9                     A  2957    L__62:
0B26C9 0D                  A  2958    	DB	13
0B26CA 57726974 696E6720   A  2959    	DB	"Writing flash page "
0B26D2 666C6173 68207061 
0B26DA 676520 
0B26DD 00                  A  2960    	DB	0
0B26DE                     A  2961    L__65:
0B26DE 0D0A00              A  2962    	DB	13,10,0
0B26E1                     A  2963    L__66:
0B26E1 56657269 6679696E   A  2964    	DB	"Verifying flash checksum... "
0B26E9 6720666C 61736820 
0B26F1 63686563 6B73756D 
0B26F9 2E2E2E20 
0B26FD 00                  A  2965    	DB	0
0B26FE                     A  2966    L__68:
0B26FE 2D204F4B            A  2967    	DB	"- OK"
0B2702 0D0A00              A  2968    	DB	13,10,0
0B2705                     A  2969    L__70:
0B2705 0D0A                A  2970    	DB	13,10
0B2707 4572726F 72206F63   A  2971    	DB	"Error occured during flash write"
0B270F 63757265 64206475 
0B2717 72696E67 20666C61 
0B271F 73682077 72697465 
0B2727 0D0A                A  2972    	DB	13,10
0B2729 52657472 792E2E2E   A  2973    	DB	"Retry..."
0B2731 0D0A00              A  2974    	DB	13,10,0
0B2734                     A  2975    L__71:
0B2734 0D0A                A  2976    	DB	13,10
0B2736 52657472 79206661   A  2977    	DB	"Retry failed"
0B273E 696C6564 
0B2742 0D0A00              A  2978    	DB	13,10,0
                           A  2979    	SEGMENT CODE
                           A  2980    ;  357	
                           A  2981    ;  358	void echoVDP(uint8_t value) {
0B09D1                     A  2982    _echoVDP:
                           A  2983    .DEFINE "_echoVDP"
                           A  2984    
                           A  2985    .VALUE _echoVDP
                           A  2986    
                           A  2987    .CLASS 2
                           A  2988    
                           A  2989    .TYPE 65
                           A  2990    
                           A  2991    .ENDEF
                           A  2992    
                           A  2993    .BEGFUNC "echoVDP",358,"_echoVDP"
                           A  2994    
                           A  2995    .LINE 358
                           A  2996    
                           A  2997    .DEFINE "value"
                           A  2998    
                           A  2999    .CLASS 65
                           A  3000    
                           A  3001    .VALUE 6
                           A  3002    
                           A  3003    .TYPE 12
                           A  3004    
                           A  3005    .ENDEF
                           A  3006    
0B09D1 DDE5                A  3007    	PUSH	IX
0B09D3 DD210000 00         A  3008    	LD	IX,0
0B09D8 DD39                A  3009    	ADD	IX,SP
                           A  3010    ;  359		putch(23);
                           A  3011    .LINE 359
                           A  3012    
0B09DA 01170000            A  3013    	LD	BC,23
0B09DE C5                  A  3014    	PUSH	BC
0B09DF CD E5 00 0B         A  3015    	CALL	_putch
0B09E3 C1                  A  3016    	POP	BC
                           A  3017    ;  360		putch(0);
                           A  3018    .LINE 360
                           A  3019    
0B09E4 01000000            A  3020    	LD	BC,0
0B09E8 C5                  A  3021    	PUSH	BC
0B09E9 CD E5 00 0B         A  3022    	CALL	_putch
0B09ED C1                  A  3023    	POP	BC
                           A  3024    ;  361		putch(0x80);
                           A  3025    .LINE 361
                           A  3026    
0B09EE 01800000            A  3027    	LD	BC,128
0B09F2 C5                  A  3028    	PUSH	BC
0B09F3 CD E5 00 0B         A  3029    	CALL	_putch
0B09F7 C1                  A  3030    	POP	BC
                           A  3031    ;  362		putch(value);
                           A  3032    .LINE 362
                           A  3033    
0B09F8 DD7E06              A  3034    	LD	A,(IX+%6)
0B09FB B7ED62              A  3035    	UEXT	HL
0B09FE 6F                  A  3036    	LD	L,A
0B09FF E5                  A  3037    	PUSH	HL
0B0A00 CD E5 00 0B         A  3038    	CALL	_putch
0B0A04 C1                  A  3039    	POP	BC
                           A  3040    ;  363		delayms(100);
                           A  3041    .LINE 363
                           A  3042    
0B0A05 01640000            A  3043    	LD	BC,100
0B0A09 C5                  A  3044    	PUSH	BC
0B0A0A CD D2 0F 0B         A  3045    	CALL	_delayms
0B0A0E C1                  A  3046    	POP	BC
                           A  3047    ;  364	}
                           A  3048    .LINE 364
                           A  3049    
0B0A0F DDF9                A  3050    	LD	SP,IX
0B0A11 DDE1                A  3051    	POP	IX
0B0A13 C9                  A  3052    	RET	
                           A  3053    
                           A  3054    
                           A  3055    ;**************************** _echoVDP ********
                           A  3056    ;Name                         Addr/Register   S
                           A  3057    ;_delayms                            IMPORT  --
                           A  3058    ;_putch                              IMPORT  --
                           A  3059    ;value                                 IX+6    
                           A  3060    
                           A  3061    
                           A  3062    ; Stack Frame Size: 9 (bytes)
                           A  3063    ;       Spill Code: 0 (instruction)
                           A  3064    
                           A  3065    
                           A  3066    .ENDFUNC "echoVDP",364,"_echoVDP"
                           A  3067    ;  365	
                           A  3068    ;  366	int getCommand(const char *command) {
0B0A14                     A  3069    _getCommand:
                           A  3070    .DEFINE "_getCommand"
                           A  3071    
                           A  3072    .VALUE _getCommand
                           A  3073    
                           A  3074    .CLASS 2
                           A  3075    
                           A  3076    .TYPE 68
                           A  3077    
                           A  3078    .ENDEF
                           A  3079    
                           A  3080    .BEGFUNC "getCommand",366,"_getCommand"
                           A  3081    
                           A  3082    .LINE 366
                           A  3083    
                           A  3084    .DEFINE "command"
                           A  3085    
                           A  3086    .CLASS 65
                           A  3087    
                           A  3088    .VALUE 6
                           A  3089    
                           A  3090    .TYPE 194
                           A  3091    
                           A  3092    .ENDEF
                           A  3093    
0B0A14 DDE5                A  3094    	PUSH	IX
0B0A16 DD210000 00         A  3095    	LD	IX,0
0B0A1B DD39                A  3096    	ADD	IX,SP
                           A  3097    ;  367		if(memcmp(command, "all", 4) == 0) 
                           A  3098    .LINE 367
                           A  3099    
0B0A1D 01040000            A  3100    	LD	BC,4
0B0A21 C5                  A  3101    	PUSH	BC
0B0A22 01 45 27 0B         A  3102    	LD	BC,L__74
0B0A26 C5                  A  3103    	PUSH	BC
0B0A27 DD0706              A  3104    	LD	BC,(IX+%6)
0B0A2A C5                  A  3105    	PUSH	BC
0B0A2B CD 39 18 0B         A  3106    	CALL	_memcmp
0B0A2F C1                  A  3107    	POP	BC
0B0A30 C1                  A  3108    	POP	BC
0B0A31 C1                  A  3109    	POP	BC
0B0A32 CD 63 18 0B         A  3110    	CALL	__icmpzero
0B0A36 20 06               A  3111    	JR	NZ,L_97
0B0A38 21010000            A  3112    	LD	HL,1
0B0A3C 18 45               A  3113    	JR	L_101
0B0A3E                     A  3114    L_97:
                           A  3115    ;  368		if(memcmp(command, "mos", 3) == 0) 
                           A  3116    .LINE 368
                           A  3117    
0B0A3E 01030000            A  3118    	LD	BC,3
0B0A42 C5                  A  3119    	PUSH	BC
0B0A43 01 49 27 0B         A  3120    	LD	BC,L__76
0B0A47 C5                  A  3121    	PUSH	BC
0B0A48 DD0706              A  3122    	LD	BC,(IX+%6)
0B0A4B C5                  A  3123    	PUSH	BC
0B0A4C CD 39 18 0B         A  3124    	CALL	_memcmp
0B0A50 C1                  A  3125    	POP	BC
0B0A51 C1                  A  3126    	POP	BC
0B0A52 C1                  A  3127    	POP	BC
0B0A53 CD 63 18 0B         A  3128    	CALL	__icmpzero
0B0A57 20 06               A  3129    	JR	NZ,L_99
0B0A59 21020000            A  3130    	LD	HL,2
0B0A5D 18 24               A  3131    	JR	L_101
0B0A5F                     A  3132    L_99:
                           A  3133    ;  369		if(memcmp(command, "vdp", 3) == 0) 
                           A  3134    .LINE 369
                           A  3135    
0B0A5F 01030000            A  3136    	LD	BC,3
0B0A63 C5                  A  3137    	PUSH	BC
0B0A64 01 4D 27 0B         A  3138    	LD	BC,L__78
0B0A68 C5                  A  3139    	PUSH	BC
0B0A69 DD0706              A  3140    	LD	BC,(IX+%6)
0B0A6C C5                  A  3141    	PUSH	BC
0B0A6D CD 39 18 0B         A  3142    	CALL	_memcmp
0B0A71 C1                  A  3143    	POP	BC
0B0A72 C1                  A  3144    	POP	BC
0B0A73 C1                  A  3145    	POP	BC
0B0A74 CD 63 18 0B         A  3146    	CALL	__icmpzero
0B0A78 20 06               A  3147    	JR	NZ,L_100
0B0A7A 21030000            A  3148    	LD	HL,3
0B0A7E 18 03               A  3149    	JR	L_101
0B0A80                     A  3150    L_100:
                           A  3151    ;  370		return CMDUNKNOWN;
                           A  3152    .LINE 370
                           A  3153    
0B0A80 B7                  A  3154    	OR	A,A
0B0A81 ED62                A  3155    	SBC	HL,HL
                           A  3156    ;  371	}
0B0A83                     A  3157    L_101:
                           A  3158    .LINE 371
                           A  3159    
0B0A83 DDF9                A  3160    	LD	SP,IX
0B0A85 DDE1                A  3161    	POP	IX
0B0A87 C9                  A  3162    	RET	
                           A  3163    
                           A  3164    
                           A  3165    ;**************************** _getCommand *****
                           A  3166    ;Name                         Addr/Register   S
                           A  3167    ;_memcmp                             IMPORT  --
                           A  3168    ;command                               IX+6    
                           A  3169    
                           A  3170    
                           A  3171    ; Stack Frame Size: 9 (bytes)
                           A  3172    ;       Spill Code: 0 (instruction)
                           A  3173    
                           A  3174    
                           A  3175    .ENDFUNC "getCommand",371,"_getCommand"
                           A  3176    	SEGMENT STRSECT
0B2745                     A  3177    L__74:
0B2745 616C6C              A  3178    	DB	"all"
0B2748 00                  A  3179    	DB	0
0B2749                     A  3180    L__76:
0B2749 6D6F73              A  3181    	DB	"mos"
0B274C 00                  A  3182    	DB	0
0B274D                     A  3183    L__78:
0B274D 766470              A  3184    	DB	"vdp"
0B2750 00                  A  3185    	DB	0
                           A  3186    	SEGMENT DATA
0B1E8A                     A  3187    _flashmos:
0B1E8A 00                  A  3188    	DB	0
                           A  3189    .DEFINE "flashmos"
                           A  3190    .ALIAS "_flashmos"
                           A  3191    .CLASS 69
                           A  3192    .VALUE _flashmos
                           A  3193    .TYPE 12
                           A  3194    .ENDEF
                           A  3195    	SEGMENT BSS
0B27EC                     A  3196    _mosfilename:
0B27EC                     A  3197    	DS	256
                           A  3198    .DEFINE "mosfilename"
                           A  3199    .ALIAS "_mosfilename"
                           A  3200    .CLASS 83
                           A  3201    .VALUE _mosfilename
                           A  3202    .DIM 256
                           A  3203    .TYPE 98
                           A  3204    .ENDEF
                           A  3205    	SEGMENT DATA
0B1E8B                     A  3206    _flashvdp:
0B1E8B 00                  A  3207    	DB	0
                           A  3208    .DEFINE "flashvdp"
                           A  3209    .ALIAS "_flashvdp"
                           A  3210    .CLASS 69
                           A  3211    .VALUE _flashvdp
                           A  3212    .TYPE 12
                           A  3213    .ENDEF
                           A  3214    	SEGMENT BSS
0B28EC                     A  3215    _vdpfilename:
0B28EC                     A  3216    	DS	256
                           A  3217    .DEFINE "vdpfilename"
                           A  3218    .ALIAS "_vdpfilename"
                           A  3219    .CLASS 83
                           A  3220    .VALUE _vdpfilename
                           A  3221    .DIM 256
                           A  3222    .TYPE 98
                           A  3223    .ENDEF
                           A  3224    ;  372	
                           A  3225    ;  373	bool flashmos = false;
                           A  3226    ;  374	char mosfilename[256];
                           A  3227    ;  375	bool flashvdp = false;
                           A  3228    ;  376	char vdpfilename[256];
                           A  3229    	SEGMENT CODE
                           A  3230    ;  377	
                           A  3231    ;  378	bool parseCommands(int argc, char *argv
0B0A88                     A  3232    _parseCommands:
                           A  3233    .DEFINE "_parseCommands"
                           A  3234    
                           A  3235    .VALUE _parseCommands
                           A  3236    
                           A  3237    .CLASS 2
                           A  3238    
                           A  3239    .TYPE 76
                           A  3240    
                           A  3241    .ENDEF
                           A  3242    
                           A  3243    .BEGFUNC "parseCommands",378,"_parseCommands"
                           A  3244    
                           A  3245    .LINE 378
                           A  3246    
                           A  3247    .DEFINE "argc"
                           A  3248    
                           A  3249    .CLASS 65
                           A  3250    
                           A  3251    .VALUE 6
                           A  3252    
                           A  3253    .TYPE 4
                           A  3254    
                           A  3255    .ENDEF
                           A  3256    
                           A  3257    .DEFINE "argv"
                           A  3258    
                           A  3259    .CLASS 65
                           A  3260    
                           A  3261    .VALUE 9
                           A  3262    
                           A  3263    .TYPE 290
                           A  3264    
                           A  3265    .ENDEF
                           A  3266    
                           A  3267    .DEFINE "argcounter"
                           A  3268    
                           A  3269    .CLASS 65
                           A  3270    
                           A  3271    .VALUE -3
                           A  3272    
                           A  3273    .TYPE 4
                           A  3274    
                           A  3275    .ENDEF
                           A  3276    
                           A  3277    .DEFINE "command"
                           A  3278    
                           A  3279    .CLASS 65
                           A  3280    
                           A  3281    .VALUE -15
                           A  3282    
                           A  3283    .TYPE 4
                           A  3284    
                           A  3285    .ENDEF
                           A  3286    
0B0A88 DDE5                A  3287    	PUSH	IX
0B0A8A DD210000 00         A  3288    	LD	IX,0
0B0A8F DD39                A  3289    	ADD	IX,SP
0B0A91 ED22F1              A  3290    	LEA	HL,IX+%FFFFFFF1
0B0A94 F9                  A  3291    	LD	SP,HL
                           A  3292    ;  379		int argcounter;
                           A  3293    ;  380		int command;
                           A  3294    ;  381	
                           A  3295    ;  382		argcounter = 1;
                           A  3296    .LINE 382
                           A  3297    
0B0A95 01010000            A  3298    	LD	BC,1
0B0A99 DD0FFD              A  3299    	LD	(IX+%FFFFFFFD),BC
                           A  3300    ;  383		while(argcounter < argc) {
                           A  3301    .LINE 383
                           A  3302    
0B0A9C C3 FE 0B 0B         A  3303    	JR	L_125
0B0AA0                     A  3304    L_126:
                           A  3305    ;  384			command = getCommand(argv[argco
                           A  3306    .LINE 384
                           A  3307    
0B0AA0 DD27FD              A  3308    	LD	HL,(IX+%FFFFFFFD)
0B0AA3 E5C1                A  3309    	LD	BC,HL
0B0AA5 29                  A  3310    	ADD	HL,HL
0B0AA6 09                  A  3311    	ADD	HL,BC
0B0AA7 DD0709              A  3312    	LD	BC,(IX+%9)
0B0AAA 09                  A  3313    	ADD	HL,BC
0B0AAB ED07                A  3314    	LD	BC,(HL)
0B0AAD C5                  A  3315    	PUSH	BC
0B0AAE CD 14 0A 0B         A  3316    	CALL	_getCommand
0B0AB2 C1                  A  3317    	POP	BC
0B0AB3 DD2FF1              A  3318    	LD	(IX+%FFFFFFF1),HL
                           A  3319    ;  385			switch(command) {
                           A  3320    .LINE 385
                           A  3321    
0B0AB6 CD FA 12 0B         A  3322    	CALL	__seqcaseD
0B0ABA E9                  A  3323    	JP	(HL)
0B0ABB                     A  3324    L__81:
0B0ABB 0400                A  3325    	DW	4
0B0ABD 0000                A  3326    	DW	0
0B0ABF 00                  A  3327    	DB	0
0B0AC0 CF0A0B              A  3328    	DW24	L_102	
                           A  3329    
0B0AC3 D40A0B              A  3330    	DW24	L_103	
                           A  3331    
0B0AC6 150B0B              A  3332    	DW24	L_107	
                           A  3333    
0B0AC9 870B0B              A  3334    	DW24	L_115	
                           A  3335    
0B0ACC F70B0B              A  3336    	DW24	L_124	
                           A  3337    
                           A  3338    ;  386				case CMDUNKNOWN:
0B0ACF                     A  3339    L_102:
                           A  3340    .LINE 386
                           A  3341    
                           A  3342    ;  387					return false;
                           A  3343    .LINE 387
                           A  3344    
0B0ACF AF                  A  3345    	XOR	A,A
0B0AD0 C3 30 0C 0B         A  3346    	JR	L_133
                           A  3347    ;  388					break;
                           A  3348    ;  389				case CMDALL:
0B0AD4                     A  3349    L_103:
                           A  3350    .LINE 389
                           A  3351    
                           A  3352    ;  390					if(flashmos || flashvdp
                           A  3353    .LINE 390
                           A  3354    
0B0AD4 3A 8A 1E 0B         A  3355    	LD	A,(_flashmos)
0B0AD8 B7                  A  3356    	OR	A,A
0B0AD9 20 07               A  3357    	JR	NZ,L_105
0B0ADB 3A 8B 1E 0B         A  3358    	LD	A,(_flashvdp)
0B0ADF B7                  A  3359    	OR	A,A
0B0AE0 28 05               A  3360    	JR	Z,L_106
0B0AE2                     A  3361    L_105:
0B0AE2 AF                  A  3362    	XOR	A,A
0B0AE3 C3 30 0C 0B         A  3363    	JR	L_133
0B0AE7                     A  3364    L_106:
                           A  3365    ;  391					strcpy(mosfilename, DEF
                           A  3366    .LINE 391
                           A  3367    
0B0AE7 01 51 27 0B         A  3368    	LD	BC,L__84
0B0AEB C5                  A  3369    	PUSH	BC
0B0AEC 01 EC 27 0B         A  3370    	LD	BC,_mosfilename
0B0AF0 C5                  A  3371    	PUSH	BC
0B0AF1 CD 9E 1B 0B         A  3372    	CALL	_strcpy
0B0AF5 C1                  A  3373    	POP	BC
0B0AF6 C1                  A  3374    	POP	BC
                           A  3375    ;  392					strcpy(vdpfilename, DEF
                           A  3376    .LINE 392
                           A  3377    
0B0AF7 01 59 27 0B         A  3378    	LD	BC,L__85
0B0AFB C5                  A  3379    	PUSH	BC
0B0AFC 01 EC 28 0B         A  3380    	LD	BC,_vdpfilename
0B0B00 C5                  A  3381    	PUSH	BC
0B0B01 CD 9E 1B 0B         A  3382    	CALL	_strcpy
0B0B05 C1                  A  3383    	POP	BC
0B0B06 C1                  A  3384    	POP	BC
                           A  3385    ;  393					flashmos = true;
                           A  3386    .LINE 393
                           A  3387    
0B0B07 3E01                A  3388    	LD	A,%1
0B0B09 32 8A 1E 0B         A  3389    	LD	(_flashmos),A
                           A  3390    ;  394					flashvdp = true;
                           A  3391    .LINE 394
                           A  3392    
0B0B0D 32 8B 1E 0B         A  3393    	LD	(_flashvdp),A
                           A  3394    ;  395					break;
                           A  3395    .LINE 395
                           A  3396    
0B0B11 C3 F7 0B 0B         A  3397    	JR	L_124
                           A  3398    ;  396				case CMDMOS:
0B0B15                     A  3399    L_107:
                           A  3400    .LINE 396
                           A  3401    
                           A  3402    ;  397					if(flashmos) return fal
                           A  3403    .LINE 397
                           A  3404    
0B0B15 3A 8A 1E 0B         A  3405    	LD	A,(_flashmos)
0B0B19 B7                  A  3406    	OR	A,A
0B0B1A 28 05               A  3407    	JR	Z,L_113
0B0B1C AF                  A  3408    	XOR	A,A
0B0B1D C3 30 0C 0B         A  3409    	JR	L_133
0B0B21                     A  3410    L_113:
                           A  3411    ;  398					if((argc > (argcounter+
                           A  3412    .LINE 398
                           A  3413    
0B0B21 DD07FD              A  3414    	LD	BC,(IX+%FFFFFFFD)
0B0B24 03                  A  3415    	INC	BC
0B0B25 DD0FFA              A  3416    	LD	(IX+%FFFFFFFA),BC
0B0B28 DD0706              A  3417    	LD	BC,(IX+%6)
0B0B2B DD27FA              A  3418    	LD	HL,(IX+%FFFFFFFA)
0B0B2E B7                  A  3419    	OR	A,A
0B0B2F ED42                A  3420    	SBC	HL,BC
0B0B31 F2 6F 0B 0B         A  3421    	JP	P,L_112
0B0B35 DD27FA              A  3422    	LD	HL,(IX+%FFFFFFFA)
0B0B38 E5C1                A  3423    	LD	BC,HL
0B0B3A 29                  A  3424    	ADD	HL,HL
0B0B3B 09                  A  3425    	ADD	HL,BC
0B0B3C DD0709              A  3426    	LD	BC,(IX+%9)
0B0B3F 09                  A  3427    	ADD	HL,BC
0B0B40 ED07                A  3428    	LD	BC,(HL)
0B0B42 C5                  A  3429    	PUSH	BC
0B0B43 CD 14 0A 0B         A  3430    	CALL	_getCommand
0B0B47 C1                  A  3431    	POP	BC
0B0B48 CD 63 18 0B         A  3432    	CALL	__icmpzero
0B0B4C 20 21               A  3433    	JR	NZ,L_112
                           A  3434    ;  399						strcpy(mosfilename,
                           A  3435    .LINE 399
                           A  3436    
0B0B4E DD27FA              A  3437    	LD	HL,(IX+%FFFFFFFA)
0B0B51 E5C1                A  3438    	LD	BC,HL
0B0B53 29                  A  3439    	ADD	HL,HL
0B0B54 09                  A  3440    	ADD	HL,BC
0B0B55 DD0709              A  3441    	LD	BC,(IX+%9)
0B0B58 09                  A  3442    	ADD	HL,BC
0B0B59 ED07                A  3443    	LD	BC,(HL)
0B0B5B C5                  A  3444    	PUSH	BC
0B0B5C 01 EC 27 0B         A  3445    	LD	BC,_mosfilename
0B0B60 C5                  A  3446    	PUSH	BC
0B0B61 CD 9E 1B 0B         A  3447    	CALL	_strcpy
0B0B65 C1                  A  3448    	POP	BC
0B0B66 C1                  A  3449    	POP	BC
                           A  3450    ;  400						argcounter++;
                           A  3451    .LINE 400
                           A  3452    
0B0B67 DD07FA              A  3453    	LD	BC,(IX+%FFFFFFFA)
0B0B6A DD0FFD              A  3454    	LD	(IX+%FFFFFFFD),BC
                           A  3455    ;  401					}
                           A  3456    ;  402					else {
                           A  3457    .LINE 402
                           A  3458    
0B0B6D 18 10               A  3459    	JR	L_114
0B0B6F                     A  3460    L_112:
                           A  3461    ;  403						strcpy(mosfilename,
                           A  3462    .LINE 403
                           A  3463    
0B0B6F 01 66 27 0B         A  3464    	LD	BC,L__89
0B0B73 C5                  A  3465    	PUSH	BC
0B0B74 01 EC 27 0B         A  3466    	LD	BC,_mosfilename
0B0B78 C5                  A  3467    	PUSH	BC
0B0B79 CD 9E 1B 0B         A  3468    	CALL	_strcpy
0B0B7D C1                  A  3469    	POP	BC
0B0B7E C1                  A  3470    	POP	BC
                           A  3471    ;  404					}
0B0B7F                     A  3472    L_114:
                           A  3473    .LINE 404
                           A  3474    
                           A  3475    ;  405					flashmos = true;
                           A  3476    .LINE 405
                           A  3477    
0B0B7F 3E01                A  3478    	LD	A,%1
0B0B81 32 8A 1E 0B         A  3479    	LD	(_flashmos),A
                           A  3480    ;  406					break;
                           A  3481    .LINE 406
                           A  3482    
0B0B85 18 70               A  3483    	JR	L_124
                           A  3484    ;  407				case CMDVDP:
0B0B87                     A  3485    L_115:
                           A  3486    .LINE 407
                           A  3487    
                           A  3488    ;  408					if(flashvdp) return fal
                           A  3489    .LINE 408
                           A  3490    
0B0B87 3A 8B 1E 0B         A  3491    	LD	A,(_flashvdp)
0B0B8B B7                  A  3492    	OR	A,A
0B0B8C 28 05               A  3493    	JR	Z,L_121
0B0B8E AF                  A  3494    	XOR	A,A
0B0B8F C3 30 0C 0B         A  3495    	JR	L_133
0B0B93                     A  3496    L_121:
                           A  3497    ;  409					if((argc > (argcounter+
                           A  3498    .LINE 409
                           A  3499    
0B0B93 DD07FD              A  3500    	LD	BC,(IX+%FFFFFFFD)
0B0B96 03                  A  3501    	INC	BC
0B0B97 DD0FF7              A  3502    	LD	(IX+%FFFFFFF7),BC
0B0B9A DD0706              A  3503    	LD	BC,(IX+%6)
0B0B9D DD27F7              A  3504    	LD	HL,(IX+%FFFFFFF7)
0B0BA0 B7                  A  3505    	OR	A,A
0B0BA1 ED42                A  3506    	SBC	HL,BC
0B0BA3 F2 E1 0B 0B         A  3507    	JP	P,L_120
0B0BA7 DD27F7              A  3508    	LD	HL,(IX+%FFFFFFF7)
0B0BAA E5C1                A  3509    	LD	BC,HL
0B0BAC 29                  A  3510    	ADD	HL,HL
0B0BAD 09                  A  3511    	ADD	HL,BC
0B0BAE DD0709              A  3512    	LD	BC,(IX+%9)
0B0BB1 09                  A  3513    	ADD	HL,BC
0B0BB2 ED07                A  3514    	LD	BC,(HL)
0B0BB4 C5                  A  3515    	PUSH	BC
0B0BB5 CD 14 0A 0B         A  3516    	CALL	_getCommand
0B0BB9 C1                  A  3517    	POP	BC
0B0BBA CD 63 18 0B         A  3518    	CALL	__icmpzero
0B0BBE 20 21               A  3519    	JR	NZ,L_120
                           A  3520    ;  410						strcpy(vdpfilename,
                           A  3521    .LINE 410
                           A  3522    
0B0BC0 DD27F7              A  3523    	LD	HL,(IX+%FFFFFFF7)
0B0BC3 E5C1                A  3524    	LD	BC,HL
0B0BC5 29                  A  3525    	ADD	HL,HL
0B0BC6 09                  A  3526    	ADD	HL,BC
0B0BC7 DD0709              A  3527    	LD	BC,(IX+%9)
0B0BCA 09                  A  3528    	ADD	HL,BC
0B0BCB ED07                A  3529    	LD	BC,(HL)
0B0BCD C5                  A  3530    	PUSH	BC
0B0BCE 01 EC 28 0B         A  3531    	LD	BC,_vdpfilename
0B0BD2 C5                  A  3532    	PUSH	BC
0B0BD3 CD 9E 1B 0B         A  3533    	CALL	_strcpy
0B0BD7 C1                  A  3534    	POP	BC
0B0BD8 C1                  A  3535    	POP	BC
                           A  3536    ;  411						argcounter++;
                           A  3537    .LINE 411
                           A  3538    
0B0BD9 DD07F7              A  3539    	LD	BC,(IX+%FFFFFFF7)
0B0BDC DD0FFD              A  3540    	LD	(IX+%FFFFFFFD),BC
                           A  3541    ;  412					}
                           A  3542    ;  413					else {
                           A  3543    .LINE 413
                           A  3544    
0B0BDF 18 10               A  3545    	JR	L_122
0B0BE1                     A  3546    L_120:
                           A  3547    ;  414						strcpy(vdpfilename,
                           A  3548    .LINE 414
                           A  3549    
0B0BE1 01 6E 27 0B         A  3550    	LD	BC,L__93
0B0BE5 C5                  A  3551    	PUSH	BC
0B0BE6 01 EC 28 0B         A  3552    	LD	BC,_vdpfilename
0B0BEA C5                  A  3553    	PUSH	BC
0B0BEB CD 9E 1B 0B         A  3554    	CALL	_strcpy
0B0BEF C1                  A  3555    	POP	BC
0B0BF0 C1                  A  3556    	POP	BC
                           A  3557    ;  415					}
0B0BF1                     A  3558    L_122:
                           A  3559    .LINE 415
                           A  3560    
                           A  3561    ;  416					flashvdp = true;
                           A  3562    .LINE 416
                           A  3563    
0B0BF1 3E01                A  3564    	LD	A,%1
0B0BF3 32 8B 1E 0B         A  3565    	LD	(_flashvdp),A
                           A  3566    ;  417					break;
                           A  3567    ;  418			}
0B0BF7                     A  3568    L_124:
                           A  3569    .LINE 418
                           A  3570    
                           A  3571    ;  419			argcounter++;
                           A  3572    .LINE 419
                           A  3573    
0B0BF7 DD07FD              A  3574    	LD	BC,(IX+%FFFFFFFD)
0B0BFA 03                  A  3575    	INC	BC
0B0BFB DD0FFD              A  3576    	LD	(IX+%FFFFFFFD),BC
                           A  3577    ;  420		}
0B0BFE                     A  3578    L_125:
                           A  3579    .LINE 420
                           A  3580    
0B0BFE DD0706              A  3581    	LD	BC,(IX+%6)
0B0C01 DD27FD              A  3582    	LD	HL,(IX+%FFFFFFFD)
0B0C04 B7                  A  3583    	OR	A,A
0B0C05 ED42                A  3584    	SBC	HL,BC
0B0C07 CD C6 12 0B         A  3585    	CALL	__setflag
0B0C0B FA A0 0A 0B         A  3586    	JP	M,L_126
                           A  3587    ;  421		return (flashvdp || flashmos);
                           A  3588    .LINE 421
                           A  3589    
0B0C0F 3A 8B 1E 0B         A  3590    	LD	A,(_flashvdp)
0B0C13 B7                  A  3591    	OR	A,A
0B0C14 20 07               A  3592    	JR	NZ,L_128
0B0C16 3A 8A 1E 0B         A  3593    	LD	A,(_flashmos)
0B0C1A B7                  A  3594    	OR	A,A
0B0C1B 28 09               A  3595    	JR	Z,L_129
0B0C1D                     A  3596    L_128:
                           A  3597    ;  422	}
                           A  3598    .LINE 422
                           A  3599    
0B0C1D 01010000            A  3600    	LD	BC,1
0B0C21 DD0FF4              A  3601    	LD	(IX+%FFFFFFF4),BC
0B0C24 18 07               A  3602    	JR	L_130
0B0C26                     A  3603    L_129:
0B0C26 01000000            A  3604    	LD	BC,0
0B0C2A DD0FF4              A  3605    	LD	(IX+%FFFFFFF4),BC
0B0C2D                     A  3606    L_130:
0B0C2D DD7EF4              A  3607    	LD	A,(IX+%FFFFFFF4)
0B0C30                     A  3608    L_133:
0B0C30 DDF9                A  3609    	LD	SP,IX
0B0C32 DDE1                A  3610    	POP	IX
0B0C34 C9                  A  3611    	RET	
                           A  3612    
                           A  3613    
                           A  3614    ;**************************** _parseCommands **
                           A  3615    ;Name                         Addr/Register   S
                           A  3616    ;_vdpfilename                        STATIC    
                           A  3617    ;_mosfilename                        STATIC    
                           A  3618    ;_strcpy                             IMPORT  --
                           A  3619    ;_flashvdp                           STATIC    
                           A  3620    ;_flashmos                           STATIC    
                           A  3621    ;command                              IX-15    
                           A  3622    ;temp131                              IX-12    
                           A  3623    ;G_4                                   IX-9    
                           A  3624    ;G_1                                   IX-6    
                           A  3625    ;argcounter                            IX-3    
                           A  3626    ;argv                                  IX+9    
                           A  3627    ;argc                                  IX+6    
                           A  3628    
                           A  3629    
                           A  3630    ; Stack Frame Size: 27 (bytes)
                           A  3631    ;       Spill Code: 0 (instruction)
                           A  3632    
                           A  3633    
                           A  3634    .ENDFUNC "parseCommands",422,"_parseCommands"
                           A  3635    	SEGMENT STRSECT
0B2751                     A  3636    L__84:
0B2751 4D4F532E 62696E     A  3637    	DB	"MOS.bin"
0B2758 00                  A  3638    	DB	0
0B2759                     A  3639    L__85:
0B2759 6669726D 77617265   A  3640    	DB	"firmware.bin"
0B2761 2E62696E 
0B2765 00                  A  3641    	DB	0
0B2766                     A  3642    L__89:
0B2766 4D4F532E 62696E     A  3643    	DB	"MOS.bin"
0B276D 00                  A  3644    	DB	0
0B276E                     A  3645    L__93:
0B276E 6669726D 77617265   A  3646    	DB	"firmware.bin"
0B2776 2E62696E 
0B277A 00                  A  3647    	DB	0
                           A  3648    	SEGMENT CODE
                           A  3649    ;  423	int main(int argc, char * argv[]) {	
0B0C35                     A  3650    _main:
                           A  3651    .DEFINE "_main"
                           A  3652    
                           A  3653    .VALUE _main
                           A  3654    
                           A  3655    .CLASS 2
                           A  3656    
                           A  3657    .TYPE 68
                           A  3658    
                           A  3659    .ENDEF
                           A  3660    
                           A  3661    .BEGFUNC "main",423,"_main"
                           A  3662    
                           A  3663    .LINE 423
                           A  3664    
                           A  3665    .DEFINE "argc"
                           A  3666    
                           A  3667    .CLASS 65
                           A  3668    
                           A  3669    .VALUE 6
                           A  3670    
                           A  3671    .TYPE 4
                           A  3672    
                           A  3673    .ENDEF
                           A  3674    
                           A  3675    .DEFINE "argv"
                           A  3676    
                           A  3677    .CLASS 65
                           A  3678    
                           A  3679    .VALUE 9
                           A  3680    
                           A  3681    .TYPE 290
                           A  3682    
                           A  3683    .ENDEF
                           A  3684    
                           A  3685    .DEFINE "sysvars"
                           A  3686    
                           A  3687    .CLASS 65
                           A  3688    
                           A  3689    .VALUE -3
                           A  3690    
                           A  3691    .TAG "NONAME3"
                           A  3692    
                           A  3693    .TYPE 40
                           A  3694    
                           A  3695    .ENDEF
                           A  3696    
0B0C35 DDE5                A  3697    	PUSH	IX
0B0C37 DD210000 00         A  3698    	LD	IX,0
0B0C3C DD39                A  3699    	ADD	IX,SP
0B0C3E C5                  A  3700    	PUSH	BC
                           A  3701    ;  424		uint8_t *gp, gpvalue;
                           A  3702    ;  425		sysvar_t *sysvars;
                           A  3703    ;  426	
                           A  3704    ;  427		if(argc == 1) {
                           A  3705    .LINE 427
                           A  3706    
0B0C3F 01010000            A  3707    	LD	BC,1
0B0C43 DD2706              A  3708    	LD	HL,(IX+%6)
0B0C46 B7                  A  3709    	OR	A,A
0B0C47 ED42                A  3710    	SBC	HL,BC
0B0C49 20 0B               A  3711    	JR	NZ,L_136
                           A  3712    ;  428			usage();
                           A  3713    .LINE 428
                           A  3714    
0B0C4B CD 50 03 0B         A  3715    	CALL	_usage
                           A  3716    ;  429			return 0;
                           A  3717    .LINE 429
                           A  3718    
0B0C4F B7                  A  3719    	OR	A,A
0B0C50 ED62                A  3720    	SBC	HL,HL
0B0C52 C3 CB 0D 0B         A  3721    	JR	L_150
                           A  3722    ;  430		}
0B0C56                     A  3723    L_136:
                           A  3724    .LINE 430
                           A  3725    
                           A  3726    ;  431	
                           A  3727    ;  432		if(!parseCommands(argc, argv)) {
                           A  3728    .LINE 432
                           A  3729    
0B0C56 DD0709              A  3730    	LD	BC,(IX+%9)
0B0C59 C5                  A  3731    	PUSH	BC
0B0C5A DD0706              A  3732    	LD	BC,(IX+%6)
0B0C5D C5                  A  3733    	PUSH	BC
0B0C5E CD 88 0A 0B         A  3734    	CALL	_parseCommands
0B0C62 C1                  A  3735    	POP	BC
0B0C63 C1                  A  3736    	POP	BC
0B0C64 B7                  A  3737    	OR	A,A
0B0C65 20 0C               A  3738    	JR	NZ,L_137
                           A  3739    ;  433			usage();
                           A  3740    .LINE 433
                           A  3741    
0B0C67 CD 50 03 0B         A  3742    	CALL	_usage
                           A  3743    ;  434			return EXIT_INVALIDPARAMETER;
                           A  3744    .LINE 434
                           A  3745    
0B0C6B 21130000            A  3746    	LD	HL,19
0B0C6F C3 CB 0D 0B         A  3747    	JR	L_150
                           A  3748    ;  435		}
0B0C73                     A  3749    L_137:
                           A  3750    .LINE 435
                           A  3751    
                           A  3752    ;  436	
                           A  3753    ;  437		printf("Result:\r\n");
                           A  3754    .LINE 437
                           A  3755    
0B0C73 01 A6 14 0B         A  3756    	LD	BC,___print_uputch
0B0C77 ED43 04 24 0B       A  3757    	LD	(___print_xputch),BC
0B0C7C 01 7B 27 0B         A  3758    	LD	BC,L__100
0B0C80 C5                  A  3759    	PUSH	BC
0B0C81 CD 35 13 0B         A  3760    	CALL	___print_sendstring
0B0C85 C1                  A  3761    	POP	BC
                           A  3762    ;  438		printf("Flash MOS: %d\r\n", flashmo
                           A  3763    .LINE 438
                           A  3764    
0B0C86 01 A6 14 0B         A  3765    	LD	BC,___print_uputch
0B0C8A ED43 04 24 0B       A  3766    	LD	(___print_xputch),BC
0B0C8F 01 85 27 0B         A  3767    	LD	BC,L__101
0B0C93 C5                  A  3768    	PUSH	BC
0B0C94 CD 35 13 0B         A  3769    	CALL	___print_sendstring
0B0C98 C1                  A  3770    	POP	BC
0B0C99 3A 8A 1E 0B         A  3771    	LD	A,(_flashmos)
0B0C9D B7ED62              A  3772    	UEXT	HL
0B0CA0 6F                  A  3773    	LD	L,A
0B0CA1 E5C1                A  3774    	LD	BC,HL
0B0CA3 CD 3E 1B 0B         A  3775    	CALL	__itol
0B0CA7 C5D1                A  3776    	LD	DE,BC
0B0CA9 4F                  A  3777    	LD	C,A
0B0CAA 0600                A  3778    	LD	B,%0
0B0CAC C5                  A  3779    	PUSH	BC
0B0CAD D5                  A  3780    	PUSH	DE
0B0CAE CD 2C 15 0B         A  3781    	CALL	__u_itoa
0B0CB2 C1                  A  3782    	POP	BC
0B0CB3 C1                  A  3783    	POP	BC
0B0CB4 01 91 27 0B         A  3784    	LD	BC,L__102
0B0CB8 C5                  A  3785    	PUSH	BC
0B0CB9 CD 35 13 0B         A  3786    	CALL	___print_sendstring
0B0CBD C1                  A  3787    	POP	BC
                           A  3788    ;  439		if(flashmos) printf("filename \"%s\
                           A  3789    .LINE 439
                           A  3790    
0B0CBE 3A 8A 1E 0B         A  3791    	LD	A,(_flashmos)
0B0CC2 B7                  A  3792    	OR	A,A
0B0CC3 28 27               A  3793    	JR	Z,L_139
0B0CC5 01 A6 14 0B         A  3794    	LD	BC,___print_uputch
0B0CC9 ED43 04 24 0B       A  3795    	LD	(___print_xputch),BC
0B0CCE 01 94 27 0B         A  3796    	LD	BC,L__104
0B0CD2 C5                  A  3797    	PUSH	BC
0B0CD3 CD 35 13 0B         A  3798    	CALL	___print_sendstring
0B0CD7 C1                  A  3799    	POP	BC
0B0CD8 01 EC 27 0B         A  3800    	LD	BC,_mosfilename
0B0CDC C5                  A  3801    	PUSH	BC
0B0CDD CD 35 13 0B         A  3802    	CALL	___print_sendstring
0B0CE1 C1                  A  3803    	POP	BC
0B0CE2 01 9F 27 0B         A  3804    	LD	BC,L__105
0B0CE6 C5                  A  3805    	PUSH	BC
0B0CE7 CD 35 13 0B         A  3806    	CALL	___print_sendstring
0B0CEB C1                  A  3807    	POP	BC
0B0CEC                     A  3808    L_139:
                           A  3809    ;  440		printf("Flash VDP: %d\r\n", flashvd
                           A  3810    .LINE 440
                           A  3811    
0B0CEC 01 A6 14 0B         A  3812    	LD	BC,___print_uputch
0B0CF0 ED43 04 24 0B       A  3813    	LD	(___print_xputch),BC
0B0CF5 01 A3 27 0B         A  3814    	LD	BC,L__106
0B0CF9 C5                  A  3815    	PUSH	BC
0B0CFA CD 35 13 0B         A  3816    	CALL	___print_sendstring
0B0CFE C1                  A  3817    	POP	BC
0B0CFF 3A 8B 1E 0B         A  3818    	LD	A,(_flashvdp)
0B0D03 B7ED62              A  3819    	UEXT	HL
0B0D06 6F                  A  3820    	LD	L,A
0B0D07 E5C1                A  3821    	LD	BC,HL
0B0D09 CD 3E 1B 0B         A  3822    	CALL	__itol
0B0D0D C5D1                A  3823    	LD	DE,BC
0B0D0F 4F                  A  3824    	LD	C,A
0B0D10 0600                A  3825    	LD	B,%0
0B0D12 C5                  A  3826    	PUSH	BC
0B0D13 D5                  A  3827    	PUSH	DE
0B0D14 CD 2C 15 0B         A  3828    	CALL	__u_itoa
0B0D18 C1                  A  3829    	POP	BC
0B0D19 C1                  A  3830    	POP	BC
0B0D1A 01 AF 27 0B         A  3831    	LD	BC,L__107
0B0D1E C5                  A  3832    	PUSH	BC
0B0D1F CD 35 13 0B         A  3833    	CALL	___print_sendstring
0B0D23 C1                  A  3834    	POP	BC
                           A  3835    ;  441		if(flashvdp) printf("filename \"%s\
                           A  3836    .LINE 441
                           A  3837    
0B0D24 3A 8B 1E 0B         A  3838    	LD	A,(_flashvdp)
0B0D28 B7                  A  3839    	OR	A,A
0B0D29 28 27               A  3840    	JR	Z,L_141
0B0D2B 01 A6 14 0B         A  3841    	LD	BC,___print_uputch
0B0D2F ED43 04 24 0B       A  3842    	LD	(___print_xputch),BC
0B0D34 01 B2 27 0B         A  3843    	LD	BC,L__109
0B0D38 C5                  A  3844    	PUSH	BC
0B0D39 CD 35 13 0B         A  3845    	CALL	___print_sendstring
0B0D3D C1                  A  3846    	POP	BC
0B0D3E 01 EC 28 0B         A  3847    	LD	BC,_vdpfilename
0B0D42 C5                  A  3848    	PUSH	BC
0B0D43 CD 35 13 0B         A  3849    	CALL	___print_sendstring
0B0D47 C1                  A  3850    	POP	BC
0B0D48 01 BD 27 0B         A  3851    	LD	BC,L__110
0B0D4C C5                  A  3852    	PUSH	BC
0B0D4D CD 35 13 0B         A  3853    	CALL	___print_sendstring
0B0D51 C1                  A  3854    	POP	BC
0B0D52                     A  3855    L_141:
                           A  3856    ;  442		return 0;
                           A  3857    .LINE 442
                           A  3858    
0B0D52 B7                  A  3859    	OR	A,A
0B0D53 ED62                A  3860    	SBC	HL,HL
0B0D55 18 74               A  3861    	JR	L_150
                           A  3862    ;  443		//
                           A  3863    ;  444	
                           A  3864    ;  445	
                           A  3865    ;  446		sysvars = getsysvars();
                           A  3866    ;  447		while(sysvars->scrheight == 0); // 
0B0D57                     A  3867    L_143:
                           A  3868    .LINE 447
                           A  3869    
0B0D57 DD31FD              A  3870    	LD	IY,(IX+%FFFFFFFD)
0B0D5A FD2711              A  3871    	LD	HL,(IY+%11)
0B0D5D CD B8 1B 0B         A  3872    	CALL	__scmpzero
0B0D61 28 F4               A  3873    	JR	Z,L_143
                           A  3874    ;  448		beep(1);
                           A  3875    .LINE 448
                           A  3876    
0B0D63 01010000            A  3877    	LD	BC,1
0B0D67 C5                  A  3878    	PUSH	BC
0B0D68 CD 0B 01 0B         A  3879    	CALL	_beep
0B0D6C C1                  A  3880    	POP	BC
                           A  3881    ;  449		sysvars->scrheight = 0;
                           A  3882    .LINE 449
                           A  3883    
0B0D6D DD31FD              A  3884    	LD	IY,(IX+%FFFFFFFD)
0B0D70 FD361100            A  3885    	LD	(IY+%11),%0
0B0D74 FD361200            A  3886    	LD	(IY+%12),%0
                           A  3887    ;  450	
                           A  3888    ;  451		update_vdp("firmware.bin");
                           A  3889    .LINE 451
                           A  3890    
0B0D78 01 C1 27 0B         A  3891    	LD	BC,L__112
0B0D7C C5                  A  3892    	PUSH	BC
0B0D7D CD 7B 04 0B         A  3893    	CALL	_update_vdp
0B0D81 C1                  A  3894    	POP	BC
                           A  3895    ;  452		echoVDP(1);
                           A  3896    .LINE 452
                           A  3897    
0B0D82 01010000            A  3898    	LD	BC,1
0B0D86 C5                  A  3899    	PUSH	BC
0B0D87 CD D1 09 0B         A  3900    	CALL	_echoVDP
0B0D8B C1                  A  3901    	POP	BC
                           A  3902    ;  453		while(sysvars->scrheight == 0);
0B0D8C                     A  3903    L_146:
                           A  3904    .LINE 453
                           A  3905    
0B0D8C DD31FD              A  3906    	LD	IY,(IX+%FFFFFFFD)
0B0D8F FD2711              A  3907    	LD	HL,(IY+%11)
0B0D92 CD B8 1B 0B         A  3908    	CALL	__scmpzero
0B0D96 28 F4               A  3909    	JR	Z,L_146
                           A  3910    ;  454		beep(2);
                           A  3911    .LINE 454
                           A  3912    
0B0D98 01020000            A  3913    	LD	BC,2
0B0D9C C5                  A  3914    	PUSH	BC
0B0D9D CD 0B 01 0B         A  3915    	CALL	_beep
0B0DA1 C1                  A  3916    	POP	BC
                           A  3917    ;  455		update_mos("MOS.bin");
                           A  3918    .LINE 455
                           A  3919    
0B0DA2 01 CE 27 0B         A  3920    	LD	BC,L__114
0B0DA6 C5                  A  3921    	PUSH	BC
0B0DA7 CD BC 05 0B         A  3922    	CALL	_update_mos
0B0DAB C1                  A  3923    	POP	BC
                           A  3924    ;  456		beep(3);
                           A  3925    .LINE 456
                           A  3926    
0B0DAC 01030000            A  3927    	LD	BC,3
0B0DB0 C5                  A  3928    	PUSH	BC
0B0DB1 CD 0B 01 0B         A  3929    	CALL	_beep
0B0DB5 C1                  A  3930    	POP	BC
                           A  3931    ;  457		printf("Press reset button");
                           A  3932    .LINE 457
                           A  3933    
0B0DB6 01 A6 14 0B         A  3934    	LD	BC,___print_uputch
0B0DBA ED43 04 24 0B       A  3935    	LD	(___print_xputch),BC
0B0DBF 01 D6 27 0B         A  3936    	LD	BC,L__115
0B0DC3 C5                  A  3937    	PUSH	BC
0B0DC4 CD 35 13 0B         A  3938    	CALL	___print_sendstring
0B0DC8 C1                  A  3939    	POP	BC
                           A  3940    ;  458		while(1);
0B0DC9                     A  3941    L_149:
                           A  3942    .LINE 458
                           A  3943    
0B0DC9 18 FE               A  3944    	JR	L_149
                           A  3945    ;  459	}
0B0DCB                     A  3946    L_150:
                           A  3947    .LINE 459
                           A  3948    
0B0DCB DDF9                A  3949    	LD	SP,IX
0B0DCD DDE1                A  3950    	POP	IX
0B0DCF C9                  A  3951    	RET	
                           A  3952    
                           A  3953    
                           A  3954    ;**************************** _main ***********
                           A  3955    ;Name                         Addr/Register   S
                           A  3956    ;_vdpfilename                        STATIC    
                           A  3957    ;_flashvdp                           STATIC    
                           A  3958    ;_mosfilename                        STATIC    
                           A  3959    ;_flashmos                           STATIC    
                           A  3960    ;__u_itoa                            IMPORT  --
                           A  3961    ;___print_sendstring                 IMPORT  --
                           A  3962    ;___print_xputch                     IMPORT    
                           A  3963    ;___print_uputch                     IMPORT  --
                           A  3964    ;sysvars                               IX-3    
                           A  3965    ;argv                                  IX+9    
                           A  3966    ;argc                                  IX+6    
                           A  3967    
                           A  3968    
                           A  3969    ; Stack Frame Size: 15 (bytes)
                           A  3970    ;       Spill Code: 0 (instruction)
                           A  3971    
                           A  3972    
                           A  3973    .ENDFUNC "main",459,"_main"
                           A  3974    	SEGMENT STRSECT
0B277B                     A  3975    L__100:
0B277B 52657375 6C743A     A  3976    	DB	"Result:"
0B2782 0D0A00              A  3977    	DB	13,10,0
0B2785                     A  3978    L__101:
0B2785 466C6173 68204D4F   A  3979    	DB	"Flash MOS: "
0B278D 533A20 
0B2790 00                  A  3980    	DB	0
0B2791                     A  3981    L__102:
0B2791 0D0A00              A  3982    	DB	13,10,0
0B2794                     A  3983    L__104:
0B2794 66696C65 6E616D65   A  3984    	DB	"filename \""
0B279C 2022 
0B279E 00                  A  3985    	DB	0
0B279F                     A  3986    L__105:
0B279F 22                  A  3987    	DB	"\""
0B27A0 0D0A00              A  3988    	DB	13,10,0
0B27A3                     A  3989    L__106:
0B27A3 466C6173 68205644   A  3990    	DB	"Flash VDP: "
0B27AB 503A20 
0B27AE 00                  A  3991    	DB	0
0B27AF                     A  3992    L__107:
0B27AF 0D0A00              A  3993    	DB	13,10,0
0B27B2                     A  3994    L__109:
0B27B2 66696C65 6E616D65   A  3995    	DB	"filename \""
0B27BA 2022 
0B27BC 00                  A  3996    	DB	0
0B27BD                     A  3997    L__110:
0B27BD 22                  A  3998    	DB	"\""
0B27BE 0D0A00              A  3999    	DB	13,10,0
0B27C1                     A  4000    L__112:
0B27C1 6669726D 77617265   A  4001    	DB	"firmware.bin"
0B27C9 2E62696E 
0B27CD 00                  A  4002    	DB	0
0B27CE                     A  4003    L__114:
0B27CE 4D4F532E 62696E     A  4004    	DB	"MOS.bin"
0B27D5 00                  A  4005    	DB	0
0B27D6                     A  4006    L__115:
0B27D6 50726573 73207265   A  4007    	DB	"Press reset button"
0B27DE 73657420 62757474 
0B27E6 6F6E 
0B27E8 00                  A  4008    	DB	0
                           A  4009    	XREF _memcmp:ROM
                           A  4010    	XREF _strcpy:ROM
                           A  4011    	XREF _getFileSize:ROM
                           A  4012    	XREF _crc32_finalize:ROM
                           A  4013    	XREF _crc32_initialize:ROM
                           A  4014    	XREF _crc32:ROM
                           A  4015    	XREF _delayms:ROM
                           A  4016    	XREF _startVDPupdate:ROM
                           A  4017    	XREF _fastmemcpy:ROM
                           A  4018    	XREF _lockFlashKeyRegister:ROM
                           A  4019    	XREF _enableFlashKeyRegister:ROM
                           A  4020    	XREF _mos_flseek:ROM
                           A  4021    	XREF _mos_fread:ROM
                           A  4022    	XREF _mos_fclose:ROM
                           A  4023    	XREF _mos_fopen:ROM
                           A  4024    	XREF _getsysvars:ROM
                           A  4025    	XREF _getch:ROM
                           A  4026    	XREF _tolower:ROM
                           A  4027    	XREF __u_ultoa:ROM
                           A  4028    	XREF __u_itoa:ROM
                           A  4029    	XREF ___print_sendstring:ROM
                           A  4030    	XREF ___print_xputch:ROM
                           A  4031    	XREF ___print_uputch:ROM
                           A  4032    	XREF ___print_fmt:ROM
                           A  4033    	XREF __lcmpu:ROM
                           A  4034    	XREF __iand:ROM
                           A  4035    	XREF __stoiu:ROM
                           A  4036    	XREF __itol:ROM
                           A  4037    	XREF __setflag:ROM
                           A  4038    	XREF __scmpzero:ROM
                           A  4039    	XREF __icmpzero:ROM
                           A  4040    	XREF __case8D:ROM
                           A  4041    	XREF __seqcaseD:ROM
                           A  4042    	XREF __ishru_b:ROM
                           A  4043    	XREF __ishrs_b:ROM
                           A  4044    	XDEF _main
                           A  4045    	XDEF _parseCommands
                           A  4046    	XDEF _vdpfilename
                           A  4047    	XDEF _flashvdp
                           A  4048    	XDEF _mosfilename
                           A  4049    	XDEF _flashmos
                           A  4050    	XDEF _getCommand
                           A  4051    	XDEF _echoVDP
                           A  4052    	XDEF _update_mos
                           A  4053    	XDEF _update_vdp
                           A  4054    	XDEF _getResponse
                           A  4055    	XDEF _usage
                           A  4056    	XDEF _print_version
                           A  4057    	XDEF _containsESP32Header
                           A  4058    	XDEF _esp32_magicnumbers
                           A  4059    	XDEF _containsMosHeader
                           A  4060    	XDEF _mos_magicnumbers
                           A  4061    	XDEF _vdp_ota_present
                           A  4062    	XDEF _getCharAt
                           A  4063    	XDEF _beep
                           A  4064    	XDEF _putch
                           A  4065    	XDEF _errno
                           A  4066    	END


Errors: 0
Warnings: 0
Lines Assembled: 4067
