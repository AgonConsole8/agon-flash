Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     12:22:05     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
0B1B74                     A   144    _errno:
0B1B74                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   161    ;   10	 *                  Sends cls just befo
                           A   162    ;   11	 * 07/06/2023:		Included faster crc
                           A   163    ;   12	 */
                           A   164    ;   13	
                           A   165    ;   14	#include <ez80.h>
                           A   166    ;   15	#include <stdio.h>
                           A   167    ;   16	#include <stdlib.h>
                           A   168    ;   17	#include <ERRNO.H>
                           A   169    ;   18	#include "mos-interface.h"
                           A   170    ;   19	#include "flash.h"
                           A   171    ;   20	#include "agontimer.h"
                           A   172    ;   21	#include "crc32.h"
                           A   173    ;   22	#include "filesize.h"
                           A   174    ;   23	#include "./stdint.h"
                           A   175    ;   24	#include <string.h>
                           A   176    ;   25	
                           A   177    ;   26	#define UNLOCKMATCHLENGTH 9
                           A   178    ;   27	
                           A   179    ;   28	#define EXIT_FILENOTFOUND	4
                           A   180    ;   29	#define EXIT_INVALIDPARAMETER	19
                           A   181    ;   30	
                           A   182    ;   31	int errno; // needed by standard librar
                           A   183    	SEGMENT CODE
                           A   184    ;   32	enum states{firmware,recover,systemrese
                           A   185    ;   33	
                           A   186    ;   34	// separate putch function that doesn't
                           A   187    ;   35	// UART0 initialization done by MOS fir
                           A   188    ;   36	// This utility doesn't run without MOS
                           A   189    ;   37	int putch(int c)
                           A   190    ;   38	{
0B00E5                     A   191    _putch:
                           A   192    .DEFINE "_putch"
                           A   193    
                           A   194    .VALUE _putch
                           A   195    
                           A   196    .CLASS 2
                           A   197    
                           A   198    .TYPE 68
                           A   199    
                           A   200    .ENDEF
                           A   201    
                           A   202    .BEGFUNC "putch",38,"_putch"
                           A   203    
                           A   204    .LINE 38
                           A   205    
                           A   206    .DEFINE "c"
                           A   207    
                           A   208    .CLASS 65
                           A   209    
                           A   210    .VALUE 6
                           A   211    
                           A   212    .TYPE 4
                           A   213    
0B00E5 DDE5                A   214    	PUSH	IX
0B00E7 DD210000 00         A   215    	LD	IX,0
0B00EC DD39                A   216    	ADD	IX,SP
                           A   217    .ENDEF
                           A   218    
                           A   219    ;   39		UINT8 lsr,temt;
                           A   220    ;   40		
                           A   221    ;   41		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   222    L_1:
                           A   223    .LINE 41
                           A   224    
0B00EE ED38C5              A   225    	IN0	A,(197)
0B00F1 E640                A   226    	AND	A,%40
0B00F3 B7ED62              A   227    	UEXT	HL
0B00F6 6F                  A   228    	LD	L,A
0B00F7 CD 99 15 0B         A   229    	CALL	__icmpzero
0B00FB 28 F1               A   230    	JR	Z,L_1
                           A   231    ;   42		UART0_THR = c;
                           A   232    .LINE 42
                           A   233    
0B00FD DD7E06              A   234    	LD	A,(IX+%6)
0B0100 ED39C0              A   235    	OUT0	(192),A
                           A   236    ;   43		return c;
                           A   237    .LINE 43
                           A   238    
0B0103 DD2706              A   239    	LD	HL,(IX+%6)
                           A   240    ;   44	}
                           A   241    .LINE 44
                           A   242    
0B0106 DDF9                A   243    	LD	SP,IX
0B0108 DDE1                A   244    	POP	IX
0B010A C9                  A   245    	RET	
                           A   246    
                           A   247    
                           A   248    ;**************************** _putch **********
                           A   249    ;Name                         Addr/Register   S
                           A   250    ;c                                     IX+6    
                           A   251    
                           A   252    
                           A   253    ; Stack Frame Size: 9 (bytes)
                           A   254    ;       Spill Code: 0 (instruction)
                           A   255    
                           A   256    
                           A   257    .ENDFUNC "putch",44,"_putch"
                           A   258    ;   45	
                           A   259    ;   46	uint8_t getCharAt(uint16_t x, uint16_t 
0B010B                     A   260    _getCharAt:
                           A   261    .DEFINE "_getCharAt"
                           A   262    
                           A   263    .VALUE _getCharAt
                           A   264    
                           A   265    .CLASS 2
                           A   266    
                           A   267    .TYPE 76
                           A   268    
                           A   269    .ENDEF
                           A   270    
                           A   271    .BEGFUNC "getCharAt",46,"_getCharAt"
                           A   272    
                           A   273    .LINE 46
                           A   274    
                           A   275    .DEFINE "x"
                           A   276    
                           A   277    .CLASS 65
                           A   278    
                           A   279    .VALUE 6
                           A   280    
                           A   281    .TYPE 13
                           A   282    
                           A   283    .ENDEF
                           A   284    
                           A   285    .DEFINE "y"
                           A   286    
                           A   287    .CLASS 65
                           A   288    
                           A   289    .VALUE 9
                           A   290    
                           A   291    .TYPE 13
                           A   292    
                           A   293    .ENDEF
                           A   294    
0B010B DDE5                A   295    	PUSH	IX
0B010D DD210000 00         A   296    	LD	IX,0
0B0112 DD39                A   297    	ADD	IX,SP
                           A   298    ;   47		delayms(20);
                           A   299    .LINE 47
                           A   300    
0B0114 01140000            A   301    	LD	BC,20
0B0118 C5                  A   302    	PUSH	BC
0B0119 CD 43 0D 0B         A   303    	CALL	_delayms
0B011D C1                  A   304    	POP	BC
                           A   305    ;   48		putch(23);
                           A   306    .LINE 48
                           A   307    
0B011E 01170000            A   308    	LD	BC,23
0B0122 C5                  A   309    	PUSH	BC
0B0123 CD E5 00 0B         A   310    	CALL	_putch
0B0127 C1                  A   311    	POP	BC
                           A   312    ;   49		putch(0);
                           A   313    .LINE 49
                           A   314    
0B0128 01000000            A   315    	LD	BC,0
0B012C C5                  A   316    	PUSH	BC
0B012D CD E5 00 0B         A   317    	CALL	_putch
0B0131 C1                  A   318    	POP	BC
                           A   319    ;   50		putch(131);
                           A   320    .LINE 50
                           A   321    
0B0132 01830000            A   322    	LD	BC,131
0B0136 C5                  A   323    	PUSH	BC
0B0137 CD E5 00 0B         A   324    	CALL	_putch
0B013B C1                  A   325    	POP	BC
                           A   326    ;   51		putch(x & 0xFF);
                           A   327    .LINE 51
                           A   328    
0B013C DD0706              A   329    	LD	BC,(IX+%6)
0B013F CD D6 11 0B         A   330    	CALL	__stoiu
0B0143 7D                  A   331    	LD	A,L
0B0144 B7ED62              A   332    	UEXT	HL
0B0147 6F                  A   333    	LD	L,A
0B0148 E5                  A   334    	PUSH	HL
0B0149 CD E5 00 0B         A   335    	CALL	_putch
0B014D C1                  A   336    	POP	BC
                           A   337    ;   52		putch((x >> 8) & 0xFF);
                           A   338    .LINE 52
                           A   339    
0B014E DD0706              A   340    	LD	BC,(IX+%6)
0B0151 CD D6 11 0B         A   341    	CALL	__stoiu
0B0155 3E08                A   342    	LD	A,%8
0B0157 CD 46 10 0B         A   343    	CALL	__ishrs_b
0B015B 7D                  A   344    	LD	A,L
0B015C B7ED62              A   345    	UEXT	HL
0B015F 6F                  A   346    	LD	L,A
0B0160 E5                  A   347    	PUSH	HL
0B0161 CD E5 00 0B         A   348    	CALL	_putch
0B0165 C1                  A   349    	POP	BC
                           A   350    ;   53		putch(y & 0xFF);
                           A   351    .LINE 53
                           A   352    
0B0166 DD0709              A   353    	LD	BC,(IX+%9)
0B0169 CD D6 11 0B         A   354    	CALL	__stoiu
0B016D 7D                  A   355    	LD	A,L
0B016E B7ED62              A   356    	UEXT	HL
0B0171 6F                  A   357    	LD	L,A
0B0172 E5                  A   358    	PUSH	HL
0B0173 CD E5 00 0B         A   359    	CALL	_putch
0B0177 C1                  A   360    	POP	BC
                           A   361    ;   54		putch((y >> 8) & 0xFF);
                           A   362    .LINE 54
                           A   363    
0B0178 DD0709              A   364    	LD	BC,(IX+%9)
0B017B CD D6 11 0B         A   365    	CALL	__stoiu
0B017F 3E08                A   366    	LD	A,%8
0B0181 CD 46 10 0B         A   367    	CALL	__ishrs_b
0B0185 7D                  A   368    	LD	A,L
0B0186 B7ED62              A   369    	UEXT	HL
0B0189 6F                  A   370    	LD	L,A
0B018A E5                  A   371    	PUSH	HL
0B018B CD E5 00 0B         A   372    	CALL	_putch
0B018F C1                  A   373    	POP	BC
                           A   374    ;   55		delayms(20);
                           A   375    .LINE 55
                           A   376    
0B0190 01140000            A   377    	LD	BC,20
0B0194 C5                  A   378    	PUSH	BC
0B0195 CD 43 0D 0B         A   379    	CALL	_delayms
0B0199 C1                  A   380    	POP	BC
                           A   381    ;   56		return getsysvar_scrchar();
                           A   382    .LINE 56
                           A   383    
0B019A CD 8F 0B 0B         A   384    	CALL	_getsysvar_scrchar
                           A   385    ;   57	}
                           A   386    .LINE 57
                           A   387    
0B019E DDF9                A   388    	LD	SP,IX
0B01A0 DDE1                A   389    	POP	IX
0B01A2 C9                  A   390    	RET	
                           A   391    
                           A   392    
                           A   393    ;**************************** _getCharAt ******
                           A   394    ;Name                         Addr/Register   S
                           A   395    ;_getsysvar_scrchar                  IMPORT  --
                           A   396    ;_putch                              IMPORT  --
                           A   397    ;_delayms                            IMPORT  --
                           A   398    ;y                                     IX+9    
                           A   399    ;x                                     IX+6    
                           A   400    
                           A   401    
                           A   402    ; Stack Frame Size: 12 (bytes)
                           A   403    ;       Spill Code: 0 (instruction)
                           A   404    
                           A   405    
                           A   406    .ENDFUNC "getCharAt",57,"_getCharAt"
                           A   407    ;   58	
                           A   408    ;   59	bool vdp_ota_present(void) {
0B01A3                     A   409    _vdp_ota_present:
                           A   410    .DEFINE "_vdp_ota_present"
                           A   411    
                           A   412    .VALUE _vdp_ota_present
                           A   413    
                           A   414    .CLASS 2
                           A   415    
                           A   416    .TYPE 76
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .BEGFUNC "vdp_ota_present",59,"_vdp_ota_present
                           A   421    
                           A   422    .LINE 59
                           A   423    
                           A   424    .DEFINE "n"
                           A   425    
                           A   426    .CLASS 65
                           A   427    
                           A   428    .VALUE -2
                           A   429    
                           A   430    .TYPE 13
                           A   431    
                           A   432    .ENDEF
                           A   433    
                           A   434    .DEFINE "test"
                           A   435    
                           A   436    .CLASS 65
                           A   437    
                           A   438    .VALUE -11
                           A   439    
                           A   440    .DIM 9
                           A   441    
                           A   442    .TYPE 98
                           A   443    
                           A   444    .ENDEF
                           A   445    
0B01A3 DDE5                A   446    	PUSH	IX
0B01A5 DD210000 00         A   447    	LD	IX,0
0B01AA DD39                A   448    	ADD	IX,SP
0B01AC ED22F5              A   449    	LEA	HL,IX+%FFFFFFF5
0B01AF F9                  A   450    	LD	SP,HL
                           A   451    ;   60		char test[UNLOCKMATCHLENGTH];
                           A   452    ;   61		uint16_t n;
                           A   453    ;   62	
                           A   454    ;   63		putch(23);
                           A   455    .LINE 63
                           A   456    
0B01B0 01170000            A   457    	LD	BC,23
0B01B4 C5                  A   458    	PUSH	BC
0B01B5 CD E5 00 0B         A   459    	CALL	_putch
0B01B9 C1                  A   460    	POP	BC
                           A   461    ;   64		putch(29);
                           A   462    .LINE 64
                           A   463    
0B01BA 011D0000            A   464    	LD	BC,29
0B01BE C5                  A   465    	PUSH	BC
0B01BF CD E5 00 0B         A   466    	CALL	_putch
0B01C3 C1                  A   467    	POP	BC
                           A   468    ;   65		putch(0);
                           A   469    .LINE 65
                           A   470    
0B01C4 01000000            A   471    	LD	BC,0
0B01C8 C5                  A   472    	PUSH	BC
0B01C9 CD E5 00 0B         A   473    	CALL	_putch
0B01CD C1                  A   474    	POP	BC
                           A   475    ;   66		printf("unlock");
                           A   476    .LINE 66
                           A   477    
0B01CE 01 DC 11 0B         A   478    	LD	BC,___print_uputch
0B01D2 ED43 04 20 0B       A   479    	LD	(___print_xputch),BC
0B01D7 01 87 20 0B         A   480    	LD	BC,L__3
0B01DB C5                  A   481    	PUSH	BC
0B01DC CD 6B 10 0B         A   482    	CALL	___print_sendstring
0B01E0 C1                  A   483    	POP	BC
                           A   484    ;   67	
                           A   485    ;   68		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   486    .LINE 68
                           A   487    
0B01E1 DD36FE00            A   488    	LD	(IX+%FFFFFFFE),%0
0B01E5 DD36FF00            A   489    	LD	(IX+%FFFFFFFF),%0
0B01E9 18 2A               A   490    	JR	L_8
0B01EB                     A   491    L_6:
0B01EB 01030000            A   492    	LD	BC,3
0B01EF C5                  A   493    	PUSH	BC
0B01F0 DD31FE              A   494    	LD	IY,(IX+%FFFFFFFE)
0B01F3 ED0308              A   495    	LEA	BC,IY+%8
0B01F6 C5                  A   496    	PUSH	BC
0B01F7 CD 0B 01 0B         A   497    	CALL	_getCharAt
0B01FB C1                  A   498    	POP	BC
0B01FC C1                  A   499    	POP	BC
0B01FD DD07FE              A   500    	LD	BC,(IX+%FFFFFFFE)
0B0200 CD D6 11 0B         A   501    	CALL	__stoiu
0B0204 E5C1                A   502    	LD	BC,HL
0B0206 ED22F5              A   503    	LEA	HL,IX+%FFFFFFF5
0B0209 09                  A   504    	ADD	HL,BC
0B020A 77                  A   505    	LD	(HL),A
0B020B DD27FE              A   506    	LD	HL,(IX+%FFFFFFFE)
0B020E 23                  A   507    	INC	HL
0B020F DD75FE              A   508    	LD	(IX+%FFFFFFFE),L
0B0212 DD74FF              A   509    	LD	(IX+%FFFFFFFF),H
0B0215                     A   510    L_8:
0B0215 49010A00            A   511    	LD.LIS	BC,10
0B0219 DD27FE              A   512    	LD	HL,(IX+%FFFFFFFE)
0B021C B7                  A   513    	OR	A,A
0B021D 40ED42              A   514    	SBC.SIS	HL,BC
0B0220 38 C9               A   515    	JR	C,L_6
                           A   516    ;   69		// 3 - line on-screen
                           A   517    ;   70		if(memcmp(test, "unlocked!",UNLOCKM
                           A   518    .LINE 70
                           A   519    
0B0222 01090000            A   520    	LD	BC,9
0B0226 C5                  A   521    	PUSH	BC
0B0227 01 8E 20 0B         A   522    	LD	BC,L__5
0B022B C5                  A   523    	PUSH	BC
0B022C ED65F5              A   524    	PEA	IX+%FFFFFFF5
0B022F CD 6F 15 0B         A   525    	CALL	_memcmp
0B0233 C1                  A   526    	POP	BC
0B0234 C1                  A   527    	POP	BC
0B0235 C1                  A   528    	POP	BC
0B0236 CD 99 15 0B         A   529    	CALL	__icmpzero
0B023A 20 04               A   530    	JR	NZ,L_10
0B023C 3E01                A   531    	LD	A,%1
0B023E 18 01               A   532    	JR	L_12
                           A   533    ;   71		else return false;
0B0240                     A   534    L_10:
                           A   535    .LINE 71
                           A   536    
0B0240 AF                  A   537    	XOR	A,A
                           A   538    ;   72	}
0B0241                     A   539    L_12:
                           A   540    .LINE 72
                           A   541    
0B0241 DDF9                A   542    	LD	SP,IX
0B0243 DDE1                A   543    	POP	IX
0B0245 C9                  A   544    	RET	
                           A   545    
                           A   546    
                           A   547    ;**************************** _vdp_ota_present 
                           A   548    ;Name                         Addr/Register   S
                           A   549    ;_memcmp                             IMPORT  --
                           A   550    ;___print_sendstring                 IMPORT  --
                           A   551    ;___print_xputch                     IMPORT    
                           A   552    ;___print_uputch                     IMPORT  --
                           A   553    ;_putch                              IMPORT  --
                           A   554    ;test                                 IX-11    
                           A   555    ;n                                     IX-2    
                           A   556    
                           A   557    
                           A   558    ; Stack Frame Size: 17 (bytes)
                           A   559    ;       Spill Code: 0 (instruction)
                           A   560    
                           A   561    
                           A   562    .ENDFUNC "vdp_ota_present",72,"_vdp_ota_present
                           A   563    	SEGMENT STRSECT
0B2087                     A   564    L__3:
0B2087 756E6C6F 636B       A   565    	DB	"unlock"
0B208D 00                  A   566    	DB	0
0B208E                     A   567    L__5:
0B208E 756E6C6F 636B6564   A   568    	DB	"unlocked!"
0B2096 21 
0B2097 00                  A   569    	DB	0
                           A   570    	SEGMENT DATA
0B1B6B                     A   571    _mos_magicnumbers:
0B1B6B F3                  A   572    	DB	243
0B1B6C ED                  A   573    	DB	237
0B1B6D 7D                  A   574    	DB	125
0B1B6E 5B                  A   575    	DB	91
0B1B6F C3                  A   576    	DB	195
                           A   577    .DEFINE "mos_magicnumbers"
                           A   578    .ALIAS "_mos_magicnumbers"
                           A   579    .CLASS 69
                           A   580    .VALUE _mos_magicnumbers
                           A   581    .DIM 5
                           A   582    .TYPE 108
                           A   583    .ENDEF
                           A   584    ;   73	
                           A   585    ;   74	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   586    	SEGMENT CODE
                           A   587    ;   75	#define MOS_MAGICLENGTH 5
                           A   588    ;   76	bool containsMosHeader(uint8_t *filesta
0B0246                     A   589    _containsMosHeader:
                           A   590    .DEFINE "_containsMosHeader"
                           A   591    
                           A   592    .VALUE _containsMosHeader
                           A   593    
                           A   594    .CLASS 2
                           A   595    
                           A   596    .TYPE 76
                           A   597    
                           A   598    .ENDEF
                           A   599    
                           A   600    .BEGFUNC "containsMosHeader",76,"_containsMosHe
                           A   601    
                           A   602    .LINE 76
                           A   603    
                           A   604    .DEFINE "filestart"
                           A   605    
                           A   606    .CLASS 65
                           A   607    
                           A   608    .VALUE 6
                           A   609    
                           A   610    .TYPE 44
                           A   611    
                           A   612    .ENDEF
                           A   613    
                           A   614    .DEFINE "n"
                           A   615    
                           A   616    .CLASS 65
                           A   617    
                           A   618    .VALUE -1
                           A   619    
                           A   620    .TYPE 12
                           A   621    
                           A   622    .ENDEF
                           A   623    
                           A   624    .DEFINE "match"
                           A   625    
                           A   626    .CLASS 65
                           A   627    
                           A   628    .VALUE -2
                           A   629    
                           A   630    .TYPE 12
                           A   631    
                           A   632    .ENDEF
                           A   633    
0B0246 DDE5                A   634    	PUSH	IX
0B0248 DD210000 00         A   635    	LD	IX,0
0B024D DD39                A   636    	ADD	IX,SP
0B024F 3B                  A   637    	DEC	SP
0B0250 3B                  A   638    	DEC	SP
                           A   639    ;   77		uint8_t n;
                           A   640    ;   78		bool match = true;
                           A   641    .LINE 78
                           A   642    
0B0251 DD36FE01            A   643    	LD	(IX+%FFFFFFFE),%1
                           A   644    ;   79	
                           A   645    ;   80		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A   646    .LINE 80
                           A   647    
0B0255 DD36FF00            A   648    	LD	(IX+%FFFFFFFF),%0
0B0259 18 27               A   649    	JR	L_17
0B025B                     A   650    L_15:
0B025B DD7EFF              A   651    	LD	A,(IX+%FFFFFFFF)
0B025E B7ED62              A   652    	UEXT	HL
0B0261 6F                  A   653    	LD	L,A
0B0262 01 6B 1B 0B         A   654    	LD	BC,_mos_magicnumbers
0B0266 09                  A   655    	ADD	HL,BC
0B0267 E5FDE1              A   656    	LD	IY,HL
0B026A DD7EFF              A   657    	LD	A,(IX+%FFFFFFFF)
0B026D B7ED62              A   658    	UEXT	HL
0B0270 6F                  A   659    	LD	L,A
0B0271 DD0706              A   660    	LD	BC,(IX+%6)
0B0274 09                  A   661    	ADD	HL,BC
0B0275 FD7E00              A   662    	LD	A,(IY)
0B0278 BE                  A   663    	CP	A,(HL)
0B0279 28 04               A   664    	JR	Z,L_16
0B027B DD36FE00            A   665    	LD	(IX+%FFFFFFFE),%0
0B027F                     A   666    L_16:
0B027F DD34FF              A   667    	INC	(IX+%FFFFFFFF)
0B0282                     A   668    L_17:
0B0282 DD7EFF              A   669    	LD	A,(IX+%FFFFFFFF)
0B0285 FE05                A   670    	CP	A,%5
0B0287 38 D2               A   671    	JR	C,L_15
                           A   672    ;   81		return match;
                           A   673    .LINE 81
                           A   674    
0B0289 DD7EFE              A   675    	LD	A,(IX+%FFFFFFFE)
                           A   676    ;   82	}
                           A   677    .LINE 82
                           A   678    
0B028C DDF9                A   679    	LD	SP,IX
0B028E DDE1                A   680    	POP	IX
0B0290 C9                  A   681    	RET	
                           A   682    
                           A   683    
                           A   684    ;**************************** _containsMosHeade
                           A   685    ;Name                         Addr/Register   S
                           A   686    ;_mos_magicnumbers                   STATIC    
                           A   687    ;match                                 IX-2    
                           A   688    ;n                                     IX-1    
                           A   689    ;filestart                             IX+6    
                           A   690    
                           A   691    
                           A   692    ; Stack Frame Size: 11 (bytes)
                           A   693    ;       Spill Code: 0 (instruction)
                           A   694    
                           A   695    
                           A   696    .ENDFUNC "containsMosHeader",82,"_containsMosHe
                           A   697    	SEGMENT DATA
0B1B70                     A   698    _esp32_magicnumbers:
0B1B70 32                  A   699    	DB	50
0B1B71 54                  A   700    	DB	84
0B1B72 CD                  A   701    	DB	205
0B1B73 AB                  A   702    	DB	171
                           A   703    .DEFINE "esp32_magicnumbers"
                           A   704    .ALIAS "_esp32_magicnumbers"
                           A   705    .CLASS 69
                           A   706    .VALUE _esp32_magicnumbers
                           A   707    .DIM 4
                           A   708    .TYPE 108
                           A   709    .ENDEF
                           A   710    ;   83	
                           A   711    ;   84	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A   712    	SEGMENT CODE
                           A   713    ;   85	#define ESP32_MAGICLENGTH 4
                           A   714    ;   86	#define ESP32_MAGICSTART 0x20
                           A   715    ;   87	bool containsESP32Header(uint8_t *files
0B0291                     A   716    _containsESP32Header:
                           A   717    .DEFINE "_containsESP32Header"
                           A   718    
                           A   719    .VALUE _containsESP32Header
                           A   720    
                           A   721    .CLASS 2
                           A   722    
                           A   723    .TYPE 76
                           A   724    
                           A   725    .ENDEF
                           A   726    
                           A   727    .BEGFUNC "containsESP32Header",87,"_containsESP
                           A   728    
                           A   729    .LINE 87
                           A   730    
                           A   731    .DEFINE "filestart"
                           A   732    
                           A   733    .CLASS 65
                           A   734    
                           A   735    .VALUE 6
                           A   736    
                           A   737    .TYPE 44
                           A   738    
                           A   739    .ENDEF
                           A   740    
                           A   741    .DEFINE "n"
                           A   742    
                           A   743    .CLASS 65
                           A   744    
                           A   745    .VALUE -1
                           A   746    
                           A   747    .TYPE 12
                           A   748    
                           A   749    .ENDEF
                           A   750    
                           A   751    .DEFINE "match"
                           A   752    
                           A   753    .CLASS 65
                           A   754    
                           A   755    .VALUE -2
                           A   756    
                           A   757    .TYPE 12
                           A   758    
                           A   759    .ENDEF
                           A   760    
0B0291 DDE5                A   761    	PUSH	IX
0B0293 DD210000 00         A   762    	LD	IX,0
0B0298 DD39                A   763    	ADD	IX,SP
0B029A 3B                  A   764    	DEC	SP
0B029B 3B                  A   765    	DEC	SP
                           A   766    ;   88		uint8_t n;
                           A   767    ;   89		bool match = true;
                           A   768    .LINE 89
                           A   769    
0B029C DD36FE01            A   770    	LD	(IX+%FFFFFFFE),%1
                           A   771    ;   90	
                           A   772    ;   91		filestart += ESP32_MAGICSTART; // s
                           A   773    .LINE 91
                           A   774    
0B02A0 DD3106              A   775    	LD	IY,(IX+%6)
0B02A3 ED3320              A   776    	LEA	IY,IY+%20
0B02A6 DD3E06              A   777    	LD	(IX+%6),IY
                           A   778    ;   92		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A   779    .LINE 92
                           A   780    
0B02A9 DD36FF00            A   781    	LD	(IX+%FFFFFFFF),%0
0B02AD 18 27               A   782    	JR	L_24
0B02AF                     A   783    L_22:
                           A   784    ;   93			if(esp32_magicnumbers[n] != fil
                           A   785    .LINE 93
                           A   786    
0B02AF DD7EFF              A   787    	LD	A,(IX+%FFFFFFFF)
0B02B2 B7ED62              A   788    	UEXT	HL
0B02B5 6F                  A   789    	LD	L,A
0B02B6 01 70 1B 0B         A   790    	LD	BC,_esp32_magicnumbers
0B02BA 09                  A   791    	ADD	HL,BC
0B02BB E5FDE1              A   792    	LD	IY,HL
0B02BE DD7EFF              A   793    	LD	A,(IX+%FFFFFFFF)
0B02C1 B7ED62              A   794    	UEXT	HL
0B02C4 6F                  A   795    	LD	L,A
0B02C5 DD0706              A   796    	LD	BC,(IX+%6)
0B02C8 09                  A   797    	ADD	HL,BC
0B02C9 FD7E00              A   798    	LD	A,(IY)
0B02CC BE                  A   799    	CP	A,(HL)
0B02CD 28 04               A   800    	JR	Z,L_23
0B02CF DD36FE00            A   801    	LD	(IX+%FFFFFFFE),%0
                           A   802    ;   94		}
0B02D3                     A   803    L_23:
                           A   804    .LINE 94
                           A   805    
0B02D3 DD34FF              A   806    	INC	(IX+%FFFFFFFF)
0B02D6                     A   807    L_24:
0B02D6 DD7EFF              A   808    	LD	A,(IX+%FFFFFFFF)
0B02D9 FE04                A   809    	CP	A,%4
0B02DB 38 D2               A   810    	JR	C,L_22
                           A   811    ;   95		return match;
                           A   812    .LINE 95
                           A   813    
0B02DD DD7EFE              A   814    	LD	A,(IX+%FFFFFFFE)
                           A   815    ;   96	}
                           A   816    .LINE 96
                           A   817    
0B02E0 DDF9                A   818    	LD	SP,IX
0B02E2 DDE1                A   819    	POP	IX
0B02E4 C9                  A   820    	RET	
                           A   821    
                           A   822    
                           A   823    ;**************************** _containsESP32Hea
                           A   824    ;Name                         Addr/Register   S
                           A   825    ;_esp32_magicnumbers                 STATIC    
                           A   826    ;match                                 IX-2    
                           A   827    ;n                                     IX-1    
                           A   828    ;filestart                             IX+6    
                           A   829    
                           A   830    
                           A   831    ; Stack Frame Size: 11 (bytes)
                           A   832    ;       Spill Code: 0 (instruction)
                           A   833    
                           A   834    
                           A   835    .ENDFUNC "containsESP32Header",96,"_containsESP
                           A   836    ;   97	
                           A   837    ;   98	void print_version(void) {
0B02E5                     A   838    _print_version:
                           A   839    .DEFINE "_print_version"
                           A   840    
                           A   841    .VALUE _print_version
                           A   842    
                           A   843    .CLASS 2
                           A   844    
                           A   845    .TYPE 65
                           A   846    
                           A   847    .ENDEF
                           A   848    
                           A   849    .BEGFUNC "print_version",98,"_print_version"
                           A   850    
0B02E5 DDE5                A   851    	PUSH	IX
0B02E7 DD210000 00         A   852    	LD	IX,0
0B02EC DD39                A   853    	ADD	IX,SP
                           A   854    ;   99		printf("Agon firmware upgrade utili
                           A   855    .LINE 99
                           A   856    
0B02EE 01 DC 11 0B         A   857    	LD	BC,___print_uputch
0B02F2 ED43 04 20 0B       A   858    	LD	(___print_xputch),BC
0B02F7 01 98 20 0B         A   859    	LD	BC,L__14
0B02FB C5                  A   860    	PUSH	BC
0B02FC CD 6B 10 0B         A   861    	CALL	___print_sendstring
0B0300 C1                  A   862    	POP	BC
                           A   863    ;  100	}
                           A   864    .LINE 100
                           A   865    
0B0301 DDF9                A   866    	LD	SP,IX
0B0303 DDE1                A   867    	POP	IX
0B0305 C9                  A   868    	RET	
                           A   869    
                           A   870    
                           A   871    ;**************************** _print_version **
                           A   872    ;Name                         Addr/Register   S
                           A   873    ;___print_sendstring                 IMPORT  --
                           A   874    ;___print_xputch                     IMPORT    
                           A   875    ;___print_uputch                     IMPORT  --
                           A   876    
                           A   877    
                           A   878    ; Stack Frame Size: 6 (bytes)
                           A   879    ;       Spill Code: 0 (instruction)
                           A   880    
                           A   881    
                           A   882    .ENDFUNC "print_version",100,"_print_version"
                           A   883    	SEGMENT STRSECT
0B2098                     A   884    L__14:
0B2098 41676F6E 20666972   A   885    	DB	"Agon firmware upgrade utility v1.4"
0B20A0 6D776172 65207570 
0B20A8 67726164 65207574 
0B20B0 696C6974 79207631 
0B20B8 2E34 
0B20BA 0A0D0A0D 00         A   886    	DB	10,13,10,13,0
                           A   887    	SEGMENT CODE
                           A   888    ;  101	
                           A   889    ;  102	void usage(void) {
0B0306                     A   890    _usage:
                           A   891    .DEFINE "_usage"
                           A   892    
                           A   893    .VALUE _usage
                           A   894    
                           A   895    .CLASS 2
                           A   896    
                           A   897    .TYPE 65
                           A   898    
                           A   899    .ENDEF
                           A   900    
                           A   901    .BEGFUNC "usage",102,"_usage"
                           A   902    
0B0306 DDE5                A   903    	PUSH	IX
0B0308 DD210000 00         A   904    	LD	IX,0
0B030D DD39                A   905    	ADD	IX,SP
                           A   906    ;  103		print_version();
                           A   907    .LINE 103
                           A   908    
0B030F CD E5 02 0B         A   909    	CALL	_print_version
                           A   910    ;  104		printf("Usage: FLASH <mos|vdp> <fil
                           A   911    .LINE 104
                           A   912    
0B0313 01 DC 11 0B         A   913    	LD	BC,___print_uputch
0B0317 ED43 04 20 0B       A   914    	LD	(___print_xputch),BC
0B031C 01 BF 20 0B         A   915    	LD	BC,L__16
0B0320 C5                  A   916    	PUSH	BC
0B0321 CD 6B 10 0B         A   917    	CALL	___print_sendstring
0B0325 C1                  A   918    	POP	BC
                           A   919    ;  105	}
                           A   920    .LINE 105
                           A   921    
0B0326 DDF9                A   922    	LD	SP,IX
0B0328 DDE1                A   923    	POP	IX
0B032A C9                  A   924    	RET	
                           A   925    
                           A   926    
                           A   927    ;**************************** _usage **********
                           A   928    ;Name                         Addr/Register   S
                           A   929    ;___print_sendstring                 IMPORT  --
                           A   930    ;___print_xputch                     IMPORT    
                           A   931    ;___print_uputch                     IMPORT  --
                           A   932    
                           A   933    
                           A   934    ; Stack Frame Size: 6 (bytes)
                           A   935    ;       Spill Code: 0 (instruction)
                           A   936    
                           A   937    
                           A   938    .ENDFUNC "usage",105,"_usage"
                           A   939    	SEGMENT STRSECT
0B20BF                     A   940    L__16:
0B20BF 55736167 653A2046   A   941    	DB	"Usage: FLASH <mos|vdp> <filename>"
0B20C7 4C415348 203C6D6F 
0B20CF 737C7664 703E203C 
0B20D7 66696C65 6E616D65 
0B20DF 3E 
0B20E0 0A0D00              A   942    	DB	10,13,0
                           A   943    	SEGMENT CODE
                           A   944    ;  106	
                           A   945    ;  107	uint8_t update_vdp(char *filename) {
0B032B                     A   946    _update_vdp:
                           A   947    .DEFINE "_update_vdp"
                           A   948    
                           A   949    .VALUE _update_vdp
                           A   950    
                           A   951    .CLASS 2
                           A   952    
                           A   953    .TYPE 76
                           A   954    
                           A   955    .ENDEF
                           A   956    
                           A   957    .BEGFUNC "update_vdp",107,"_update_vdp"
                           A   958    
                           A   959    .LINE 107
                           A   960    
                           A   961    .DEFINE "filename"
                           A   962    
                           A   963    .CLASS 65
                           A   964    
                           A   965    .VALUE 6
                           A   966    
                           A   967    .TYPE 34
                           A   968    
                           A   969    .ENDEF
                           A   970    
                           A   971    .DEFINE "file"
                           A   972    
                           A   973    .CLASS 65
                           A   974    
                           A   975    .VALUE -1
                           A   976    
                           A   977    .TYPE 12
                           A   978    
                           A   979    .ENDEF
                           A   980    
                           A   981    .DEFINE "response"
                           A   982    
                           A   983    .CLASS 65
                           A   984    
                           A   985    .VALUE -2
                           A   986    
                           A   987    .TYPE 12
                           A   988    
                           A   989    .ENDEF
                           A   990    
                           A   991    .DEFINE "size"
                           A   992    
                           A   993    .CLASS 65
                           A   994    
                           A   995    .VALUE -5
                           A   996    
                           A   997    .TYPE 14
                           A   998    
                           A   999    .ENDEF
                           A  1000    
                           A  1001    .DEFINE "filesize"
                           A  1002    
                           A  1003    .CLASS 65
                           A  1004    
                           A  1005    .VALUE -8
                           A  1006    
                           A  1007    .TYPE 14
                           A  1008    
                           A  1009    .ENDEF
                           A  1010    
                           A  1011    .DEFINE "crcresult"
                           A  1012    
                           A  1013    .CLASS 65
                           A  1014    
                           A  1015    .VALUE -12
                           A  1016    
                           A  1017    .TYPE 15
                           A  1018    
                           A  1019    .ENDEF
                           A  1020    
                           A  1021    .DEFINE "buffer"
                           A  1022    
                           A  1023    .CLASS 65
                           A  1024    
                           A  1025    .VALUE -48
                           A  1026    
                           A  1027    .DIM 36
                           A  1028    
                           A  1029    .TYPE 108
                           A  1030    
                           A  1031    .ENDEF
                           A  1032    
0B032B DDE5                A  1033    	PUSH	IX
0B032D DD210000 00         A  1034    	LD	IX,0
0B0332 DD39                A  1035    	ADD	IX,SP
0B0334 ED22D0              A  1036    	LEA	HL,IX+%FFFFFFD0
0B0337 F9                  A  1037    	LD	SP,HL
                           A  1038    ;  108		uint8_t file;
                           A  1039    ;  109		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1040    ;  110		uint24_t filesize;
                           A  1041    ;  111		uint32_t crcresult;
                           A  1042    ;  112		uint24_t size, n;
                           A  1043    ;  113		uint8_t response;
                           A  1044    ;  114	
                           A  1045    ;  115		putch(12); // cls
                           A  1046    .LINE 115
                           A  1047    
0B0338 010C0000            A  1048    	LD	BC,12
0B033C C5                  A  1049    	PUSH	BC
0B033D CD E5 00 0B         A  1050    	CALL	_putch
0B0341 C1                  A  1051    	POP	BC
                           A  1052    ;  116		print_version();	
                           A  1053    .LINE 116
                           A  1054    
0B0342 CD E5 02 0B         A  1055    	CALL	_print_version
                           A  1056    ;  117		printf("Unlocking VDP updater...\r\
                           A  1057    .LINE 117
                           A  1058    
0B0346 01 DC 11 0B         A  1059    	LD	BC,___print_uputch
0B034A ED43 04 20 0B       A  1060    	LD	(___print_xputch),BC
0B034F 01 E3 20 0B         A  1061    	LD	BC,L__18
0B0353 C5                  A  1062    	PUSH	BC
0B0354 CD 6B 10 0B         A  1063    	CALL	___print_sendstring
0B0358 C1                  A  1064    	POP	BC
                           A  1065    ;  118		
                           A  1066    ;  119		if(!vdp_ota_present()) {
                           A  1067    .LINE 119
                           A  1068    
0B0359 CD A3 01 0B         A  1069    	CALL	_vdp_ota_present
0B035D B7                  A  1070    	OR	A,A
0B035E 20 18               A  1071    	JR	NZ,L_30
                           A  1072    ;  120			printf(" failed - incompatible 
                           A  1073    .LINE 120
                           A  1074    
0B0360 01 DC 11 0B         A  1075    	LD	BC,___print_uputch
0B0364 ED43 04 20 0B       A  1076    	LD	(___print_xputch),BC
0B0369 01 FE 20 0B         A  1077    	LD	BC,L__20
0B036D C5                  A  1078    	PUSH	BC
0B036E CD 6B 10 0B         A  1079    	CALL	___print_sendstring
0B0372 C1                  A  1080    	POP	BC
                           A  1081    ;  121			return 0;
                           A  1082    .LINE 121
                           A  1083    
0B0373 AF                  A  1084    	XOR	A,A
0B0374 C3 3E 05 0B         A  1085    	JR	L_46
                           A  1086    ;  122		}
0B0378                     A  1087    L_30:
                           A  1088    .LINE 122
                           A  1089    
                           A  1090    ;  123	
                           A  1091    ;  124		file = mos_fopen(filename, fa_read)
                           A  1092    .LINE 124
                           A  1093    
0B0378 01010000            A  1094    	LD	BC,1
0B037C C5                  A  1095    	PUSH	BC
0B037D DD0706              A  1096    	LD	BC,(IX+%6)
0B0380 C5                  A  1097    	PUSH	BC
0B0381 CD 9B 0B 0B         A  1098    	CALL	_mos_fopen
0B0385 C1                  A  1099    	POP	BC
0B0386 C1                  A  1100    	POP	BC
0B0387 DD77FF              A  1101    	LD	(IX+%FFFFFFFF),A
                           A  1102    ;  125		if(!file) {
                           A  1103    .LINE 125
                           A  1104    
0B038A B7                  A  1105    	OR	A,A
0B038B 20 2C               A  1106    	JR	NZ,L_32
                           A  1107    ;  126			printf("Error opening \"%s\"\n\
                           A  1108    .LINE 126
                           A  1109    
0B038D 01 DC 11 0B         A  1110    	LD	BC,___print_uputch
0B0391 ED43 04 20 0B       A  1111    	LD	(___print_xputch),BC
0B0396 01 1B 21 0B         A  1112    	LD	BC,L__22
0B039A C5                  A  1113    	PUSH	BC
0B039B CD 6B 10 0B         A  1114    	CALL	___print_sendstring
0B039F C1                  A  1115    	POP	BC
0B03A0 DD0706              A  1116    	LD	BC,(IX+%6)
0B03A3 C5                  A  1117    	PUSH	BC
0B03A4 CD 6B 10 0B         A  1118    	CALL	___print_sendstring
0B03A8 C1                  A  1119    	POP	BC
0B03A9 01 2B 21 0B         A  1120    	LD	BC,L__23
0B03AD C5                  A  1121    	PUSH	BC
0B03AE CD 6B 10 0B         A  1122    	CALL	___print_sendstring
0B03B2 C1                  A  1123    	POP	BC
                           A  1124    ;  127			return EXIT_FILENOTFOUND;
                           A  1125    .LINE 127
                           A  1126    
0B03B3 3E04                A  1127    	LD	A,%4
0B03B5 C3 3E 05 0B         A  1128    	JR	L_46
                           A  1129    ;  128		}
0B03B9                     A  1130    L_32:
                           A  1131    .LINE 128
                           A  1132    
                           A  1133    ;  129	
                           A  1134    ;  130		mos_fread(file, (char *)buffer, ESP
                           A  1135    .LINE 130
                           A  1136    
0B03B9 01240000            A  1137    	LD	BC,36
0B03BD C5                  A  1138    	PUSH	BC
0B03BE ED65D0              A  1139    	PEA	IX+%FFFFFFD0
0B03C1 DD4EFF              A  1140    	LD	C,(IX+%FFFFFFFF)
0B03C4 0600                A  1141    	LD	B,%0
0B03C6 C5                  A  1142    	PUSH	BC
0B03C7 CD DD 0B 0B         A  1143    	CALL	_mos_fread
0B03CB C1                  A  1144    	POP	BC
0B03CC C1                  A  1145    	POP	BC
0B03CD C1                  A  1146    	POP	BC
                           A  1147    ;  131		if(!containsESP32Header(buffer)) {
                           A  1148    .LINE 131
                           A  1149    
0B03CE ED65D0              A  1150    	PEA	IX+%FFFFFFD0
0B03D1 CD 91 02 0B         A  1151    	CALL	_containsESP32Header
0B03D5 C1                  A  1152    	POP	BC
0B03D6 B7                  A  1153    	OR	A,A
0B03D7 20 19               A  1154    	JR	NZ,L_34
                           A  1155    ;  132			printf("File does not contain v
                           A  1156    .LINE 132
                           A  1157    
0B03D9 01 DC 11 0B         A  1158    	LD	BC,___print_uputch
0B03DD ED43 04 20 0B       A  1159    	LD	(___print_xputch),BC
0B03E2 01 2F 21 0B         A  1160    	LD	BC,L__25
0B03E6 C5                  A  1161    	PUSH	BC
0B03E7 CD 6B 10 0B         A  1162    	CALL	___print_sendstring
0B03EB C1                  A  1163    	POP	BC
                           A  1164    ;  133			return EXIT_INVALIDPARAMETER;
                           A  1165    .LINE 133
                           A  1166    
0B03EC 3E13                A  1167    	LD	A,%13
0B03EE C3 3E 05 0B         A  1168    	JR	L_46
                           A  1169    ;  134		}
0B03F2                     A  1170    L_34:
                           A  1171    .LINE 134
                           A  1172    
                           A  1173    ;  135		printf("\r\nValid ESP32 code\r\nCal
                           A  1174    .LINE 135
                           A  1175    
0B03F2 01 DC 11 0B         A  1176    	LD	BC,___print_uputch
0B03F6 ED43 04 20 0B       A  1177    	LD	(___print_xputch),BC
0B03FB 01 58 21 0B         A  1178    	LD	BC,L__26
0B03FF C5                  A  1179    	PUSH	BC
0B0400 CD 6B 10 0B         A  1180    	CALL	___print_sendstring
0B0404 C1                  A  1181    	POP	BC
                           A  1182    ;  136		crc32_initialize();
                           A  1183    .LINE 136
                           A  1184    
0B0405 CD 29 0F 0B         A  1185    	CALL	_crc32_initialize
                           A  1186    ;  137		mos_flseek(file, 0);
                           A  1187    .LINE 137
                           A  1188    
0B0409 01000000            A  1189    	LD	BC,0
0B040D C5                  A  1190    	PUSH	BC
0B040E C5                  A  1191    	PUSH	BC
0B040F DD4EFF              A  1192    	LD	C,(IX+%FFFFFFFF)
0B0412 0600                A  1193    	LD	B,%0
0B0414 C5                  A  1194    	PUSH	BC
0B0415 CD 57 0C 0B         A  1195    	CALL	_mos_flseek
0B0419 C1                  A  1196    	POP	BC
0B041A C1                  A  1197    	POP	BC
0B041B C1                  A  1198    	POP	BC
                           A  1199    ;  138		while(1) {
0B041C                     A  1200    L_38:
                           A  1201    .LINE 138
                           A  1202    
                           A  1203    ;  139			size = mos_fread(file, (char *)
                           A  1204    .LINE 139
                           A  1205    
0B041C 01004000            A  1206    	LD	BC,16384
0B0420 C5                  A  1207    	PUSH	BC
0B0421 01000005            A  1208    	LD	BC,327680
0B0425 C5                  A  1209    	PUSH	BC
0B0426 DD4EFF              A  1210    	LD	C,(IX+%FFFFFFFF)
0B0429 0600                A  1211    	LD	B,%0
0B042B C5                  A  1212    	PUSH	BC
0B042C CD DD 0B 0B         A  1213    	CALL	_mos_fread
0B0430 C1                  A  1214    	POP	BC
0B0431 C1                  A  1215    	POP	BC
0B0432 C1                  A  1216    	POP	BC
0B0433 DD2FFB              A  1217    	LD	(IX+%FFFFFFFB),HL
                           A  1218    ;  140			if(size == 0) break;
                           A  1219    .LINE 140
                           A  1220    
0B0436 CD 99 15 0B         A  1221    	CALL	__icmpzero
0B043A 28 1B               A  1222    	JR	Z,L_39
                           A  1223    ;  141			putch('.');
                           A  1224    .LINE 141
                           A  1225    
0B043C 012E0000            A  1226    	LD	BC,46
0B0440 C5                  A  1227    	PUSH	BC
0B0441 CD E5 00 0B         A  1228    	CALL	_putch
0B0445 C1                  A  1229    	POP	BC
                           A  1230    ;  142			crc32((char *)BUFFER1, size);
                           A  1231    .LINE 142
                           A  1232    
0B0446 DD07FB              A  1233    	LD	BC,(IX+%FFFFFFFB)
0B0449 C5                  A  1234    	PUSH	BC
0B044A 01000005            A  1235    	LD	BC,327680
0B044E C5                  A  1236    	PUSH	BC
0B044F CD 7B 0F 0B         A  1237    	CALL	_crc32
0B0453 C1                  A  1238    	POP	BC
0B0454 C1                  A  1239    	POP	BC
0B0455 18 C5               A  1240    	JR	L_38
                           A  1241    ;  143		}
0B0457                     A  1242    L_39:
                           A  1243    .LINE 143
                           A  1244    
                           A  1245    ;  144		crcresult = crc32_finalize();
                           A  1246    .LINE 144
                           A  1247    
0B0457 CD 3E 0F 0B         A  1248    	CALL	_crc32_finalize
0B045B DD2FF4              A  1249    	LD	(IX+%FFFFFFF4),HL
0B045E DD73F7              A  1250    	LD	(IX+%FFFFFFF7),E
                           A  1251    ;  145		printf("\r\n\r\n0x%04lX - flash to 
                           A  1252    .LINE 145
                           A  1253    
0B0461 01 DC 11 0B         A  1254    	LD	BC,___print_uputch
0B0465 ED43 04 20 0B       A  1255    	LD	(___print_xputch),BC
0B046A 01 7E 21 0B         A  1256    	LD	BC,L__28
0B046E C5                  A  1257    	PUSH	BC
0B046F CD 6B 10 0B         A  1258    	CALL	___print_sendstring
0B0473 C1                  A  1259    	POP	BC
0B0474 3E04                A  1260    	LD	A,%4
0B0476 32 8A 1B 0B         A  1261    	LD	(___print_fmt+5),A
0B047A 3E60                A  1262    	LD	A,%60
0B047C 32 86 1B 0B         A  1263    	LD	(___print_fmt+1),A
0B0480 3E78                A  1264    	LD	A,%78
0B0482 32 89 1B 0B         A  1265    	LD	(___print_fmt+4),A
0B0486 DD4EF7              A  1266    	LD	C,(IX+%FFFFFFF7)
0B0489 0600                A  1267    	LD	B,%0
0B048B C5                  A  1268    	PUSH	BC
0B048C DD07F4              A  1269    	LD	BC,(IX+%FFFFFFF4)
0B048F C5                  A  1270    	PUSH	BC
0B0490 CD 35 19 0B         A  1271    	CALL	__u_ultoa
0B0494 C1                  A  1272    	POP	BC
0B0495 C1                  A  1273    	POP	BC
0B0496 01 85 21 0B         A  1274    	LD	BC,L__29
0B049A C5                  A  1275    	PUSH	BC
0B049B CD 6B 10 0B         A  1276    	CALL	___print_sendstring
0B049F C1                  A  1277    	POP	BC
                           A  1278    ;  146	
                           A  1279    ;  147		response = 0;
                           A  1280    .LINE 147
                           A  1281    
0B04A0 DD36FE00            A  1282    	LD	(IX+%FFFFFFFE),%0
                           A  1283    ;  148		while((response != 'y') && (respons
                           A  1284    .LINE 148
                           A  1285    
0B04A4 18 07               A  1286    	JR	L_41
0B04A6                     A  1287    L_42:
0B04A6 CD 51 0B 0B         A  1288    	CALL	_getch
0B04AA DD77FE              A  1289    	LD	(IX+%FFFFFFFE),A
0B04AD                     A  1290    L_41:
0B04AD DD7EFE              A  1291    	LD	A,(IX+%FFFFFFFE)
0B04B0 FE79                A  1292    	CP	A,%79
0B04B2 28 07               A  1293    	JR	Z,L_43
0B04B4 DD7EFE              A  1294    	LD	A,(IX+%FFFFFFFE)
0B04B7 FE6E                A  1295    	CP	A,%6E
0B04B9 20 EB               A  1296    	JR	NZ,L_42
0B04BB                     A  1297    L_43:
                           A  1298    ;  149		printf("\r\n");
                           A  1299    .LINE 149
                           A  1300    
0B04BB 01 DC 11 0B         A  1301    	LD	BC,___print_uputch
0B04BF ED43 04 20 0B       A  1302    	LD	(___print_xputch),BC
0B04C4 01 9C 21 0B         A  1303    	LD	BC,L__32
0B04C8 C5                  A  1304    	PUSH	BC
0B04C9 CD 6B 10 0B         A  1305    	CALL	___print_sendstring
0B04CD C1                  A  1306    	POP	BC
                           A  1307    ;  150		if(response == 'n') {
                           A  1308    .LINE 150
                           A  1309    
0B04CE DD7EFE              A  1310    	LD	A,(IX+%FFFFFFFE)
0B04D1 FE6E                A  1311    	CP	A,%6E
0B04D3 20 16               A  1312    	JR	NZ,L_45
                           A  1313    ;  151			printf("User abort\n\r\n\r");
                           A  1314    .LINE 151
                           A  1315    
0B04D5 01 DC 11 0B         A  1316    	LD	BC,___print_uputch
0B04D9 ED43 04 20 0B       A  1317    	LD	(___print_xputch),BC
0B04DE 01 9F 21 0B         A  1318    	LD	BC,L__34
0B04E2 C5                  A  1319    	PUSH	BC
0B04E3 CD 6B 10 0B         A  1320    	CALL	___print_sendstring
0B04E7 C1                  A  1321    	POP	BC
                           A  1322    ;  152			return 0;
                           A  1323    .LINE 152
                           A  1324    
0B04E8 AF                  A  1325    	XOR	A,A
0B04E9 18 53               A  1326    	JR	L_46
                           A  1327    ;  153		}
0B04EB                     A  1328    L_45:
                           A  1329    .LINE 153
                           A  1330    
                           A  1331    ;  154		// Do actual work here
                           A  1332    ;  155		mos_flseek(file, 0); // reset to ze
                           A  1333    .LINE 155
                           A  1334    
0B04EB 01000000            A  1335    	LD	BC,0
0B04EF C5                  A  1336    	PUSH	BC
0B04F0 C5                  A  1337    	PUSH	BC
0B04F1 DD4EFF              A  1338    	LD	C,(IX+%FFFFFFFF)
0B04F4 0600                A  1339    	LD	B,%0
0B04F6 C5                  A  1340    	PUSH	BC
0B04F7 CD 57 0C 0B         A  1341    	CALL	_mos_flseek
0B04FB C1                  A  1342    	POP	BC
0B04FC C1                  A  1343    	POP	BC
0B04FD C1                  A  1344    	POP	BC
                           A  1345    ;  156		printf("Updating VDP firmware\r\n")
                           A  1346    .LINE 156
                           A  1347    
0B04FE 01 DC 11 0B         A  1348    	LD	BC,___print_uputch
0B0502 ED43 04 20 0B       A  1349    	LD	(___print_xputch),BC
0B0507 01 AE 21 0B         A  1350    	LD	BC,L__35
0B050B C5                  A  1351    	PUSH	BC
0B050C CD 6B 10 0B         A  1352    	CALL	___print_sendstring
0B0510 C1                  A  1353    	POP	BC
                           A  1354    ;  157		filesize = getFileSize(file);	
                           A  1355    .LINE 157
                           A  1356    
0B0511 DD4EFF              A  1357    	LD	C,(IX+%FFFFFFFF)
0B0514 0600                A  1358    	LD	B,%0
0B0516 C5                  A  1359    	PUSH	BC
0B0517 CD DB 0F 0B         A  1360    	CALL	_getFileSize
0B051B C1                  A  1361    	POP	BC
0B051C DD2FF8              A  1362    	LD	(IX+%FFFFFFF8),HL
                           A  1363    ;  158		startVDPupdate(file, filesize);
                           A  1364    .LINE 158
                           A  1365    
0B051F E5C1                A  1366    	LD	BC,HL
0B0521 C5                  A  1367    	PUSH	BC
0B0522 DD4EFF              A  1368    	LD	C,(IX+%FFFFFFFF)
0B0525 0600                A  1369    	LD	B,%0
0B0527 C5                  A  1370    	PUSH	BC
0B0528 CD C2 0C 0B         A  1371    	CALL	_startVDPupdate
0B052C C1                  A  1372    	POP	BC
0B052D C1                  A  1373    	POP	BC
                           A  1374    ;  159		mos_fclose(file);
                           A  1375    .LINE 159
                           A  1376    
0B052E DD4EFF              A  1377    	LD	C,(IX+%FFFFFFFF)
0B0531 0600                A  1378    	LD	B,%0
0B0533 C5                  A  1379    	PUSH	BC
0B0534 CD B3 0B 0B         A  1380    	CALL	_mos_fclose
0B0538 C1                  A  1381    	POP	BC
                           A  1382    ;  160		reset();
                           A  1383    .LINE 160
                           A  1384    
0B0539 CD A1 0C 0B         A  1385    	CALL	_reset
                           A  1386    ;  161		return 0; // will never return, but
                           A  1387    .LINE 161
                           A  1388    
0B053D AF                  A  1389    	XOR	A,A
                           A  1390    ;  162	}
0B053E                     A  1391    L_46:
                           A  1392    .LINE 162
                           A  1393    
0B053E DDF9                A  1394    	LD	SP,IX
0B0540 DDE1                A  1395    	POP	IX
0B0542 C9                  A  1396    	RET	
                           A  1397    
                           A  1398    
                           A  1399    ;**************************** _update_vdp *****
                           A  1400    ;Name                         Addr/Register   S
                           A  1401    ;_reset                              IMPORT  --
                           A  1402    ;_mos_fclose                         IMPORT  --
                           A  1403    ;_startVDPupdate                     IMPORT  --
                           A  1404    ;_getFileSize                        IMPORT  --
                           A  1405    ;_getch                              IMPORT  --
                           A  1406    ;__u_ultoa                           IMPORT  --
                           A  1407    ;___print_fmt                        IMPORT    
                           A  1408    ;_crc32_finalize                     IMPORT  --
                           A  1409    ;_crc32                              IMPORT  --
                           A  1410    ;_mos_flseek                         IMPORT  --
                           A  1411    ;_crc32_initialize                   IMPORT  --
                           A  1412    ;_mos_fread                          IMPORT  --
                           A  1413    ;_mos_fopen                          IMPORT  --
                           A  1414    ;___print_sendstring                 IMPORT  --
                           A  1415    ;___print_xputch                     IMPORT    
                           A  1416    ;___print_uputch                     IMPORT  --
                           A  1417    ;_putch                              IMPORT  --
                           A  1418    ;buffer                               IX-48    
                           A  1419    ;crcresult                            IX-12    
                           A  1420    ;filesize                              IX-8    
                           A  1421    ;size                                  IX-5    
                           A  1422    ;response                              IX-2    
                           A  1423    ;file                                  IX-1    
                           A  1424    ;filename                              IX+6    
                           A  1425    
                           A  1426    
                           A  1427    ; Stack Frame Size: 57 (bytes)
                           A  1428    ;       Spill Code: 0 (instruction)
                           A  1429    
                           A  1430    
                           A  1431    .ENDFUNC "update_vdp",162,"_update_vdp"
                           A  1432    	SEGMENT STRSECT
0B20E3                     A  1433    L__18:
0B20E3 556E6C6F 636B696E   A  1434    	DB	"Unlocking VDP updater..."
0B20EB 67205644 50207570 
0B20F3 64617465 722E2E2E 
0B20FB 0D0A00              A  1435    	DB	13,10,0
0B20FE                     A  1436    L__20:
0B20FE 20666169 6C656420   A  1437    	DB	" failed - incompatible VDP"
0B2106 2D20696E 636F6D70 
0B210E 61746962 6C652056 
0B2116 4450 
0B2118 0D0A00              A  1438    	DB	13,10,0
0B211B                     A  1439    L__22:
0B211B 4572726F 72206F70   A  1440    	DB	"Error opening \""
0B2123 656E696E 672022 
0B212A 00                  A  1441    	DB	0
0B212B                     A  1442    L__23:
0B212B 22                  A  1443    	DB	"\""
0B212C 0A0D00              A  1444    	DB	10,13,0
0B212F                     A  1445    L__25:
0B212F 46696C65 20646F65   A  1446    	DB	"File does not contain valid ESP32 code
0B2137 73206E6F 7420636F 
0B213F 6E746169 6E207661 
0B2147 6C696420 45535033 
0B214F 3220636F 6465 
0B2155 0D0A00              A  1447    	DB	13,10,0
0B2158                     A  1448    L__26:
0B2158 0D0A                A  1449    	DB	13,10
0B215A 56616C69 64204553   A  1450    	DB	"Valid ESP32 code"
0B2162 50333220 636F6465 
0B216A 0D0A                A  1451    	DB	13,10
0B216C 43616C63 756C6174   A  1452    	DB	"Calculating CRC32"
0B2174 696E6720 43524333 
0B217C 32 
0B217D 00                  A  1453    	DB	0
0B217E                     A  1454    L__28:
0B217E 0D0A0D0A            A  1455    	DB	13,10,13,10
0B2182 3078                A  1456    	DB	"0x"
0B2184 00                  A  1457    	DB	0
0B2185                     A  1458    L__29:
0B2185 202D2066 6C617368   A  1459    	DB	" - flash to VDP (y/n)?"
0B218D 20746F20 56445020 
0B2195 28792F6E 293F 
0B219B 00                  A  1460    	DB	0
0B219C                     A  1461    L__32:
0B219C 0D0A00              A  1462    	DB	13,10,0
0B219F                     A  1463    L__34:
0B219F 55736572 2061626F   A  1464    	DB	"User abort"
0B21A7 7274 
0B21A9 0A0D0A0D 00         A  1465    	DB	10,13,10,13,0
0B21AE                     A  1466    L__35:
0B21AE 55706461 74696E67   A  1467    	DB	"Updating VDP firmware"
0B21B6 20564450 20666972 
0B21BE 6D776172 65 
0B21C3 0D0A00              A  1468    	DB	13,10,0
                           A  1469    	SEGMENT CODE
                           A  1470    ;  163	
                           A  1471    ;  164	uint8_t update_mos(char *filename) {
0B0543                     A  1472    _update_mos:
                           A  1473    .DEFINE "_update_mos"
                           A  1474    
                           A  1475    .VALUE _update_mos
                           A  1476    
                           A  1477    .CLASS 2
                           A  1478    
                           A  1479    .TYPE 76
                           A  1480    
                           A  1481    .ENDEF
                           A  1482    
                           A  1483    .BEGFUNC "update_mos",164,"_update_mos"
                           A  1484    
                           A  1485    .LINE 164
                           A  1486    
                           A  1487    .DEFINE "filename"
                           A  1488    
                           A  1489    .CLASS 65
                           A  1490    
                           A  1491    .VALUE 6
                           A  1492    
                           A  1493    .TYPE 34
                           A  1494    
                           A  1495    .ENDEF
                           A  1496    
                           A  1497    .DEFINE "counter"
                           A  1498    
                           A  1499    .CLASS 65
                           A  1500    
                           A  1501    .VALUE -3
                           A  1502    
                           A  1503    .TYPE 14
                           A  1504    
                           A  1505    .ENDEF
                           A  1506    
                           A  1507    .DEFINE "size"
                           A  1508    
                           A  1509    .CLASS 65
                           A  1510    
                           A  1511    .VALUE -6
                           A  1512    
                           A  1513    .TYPE 14
                           A  1514    
                           A  1515    .ENDEF
                           A  1516    
                           A  1517    .DEFINE "response"
                           A  1518    
                           A  1519    .CLASS 65
                           A  1520    
                           A  1521    .VALUE -7
                           A  1522    
                           A  1523    .TYPE 12
                           A  1524    
                           A  1525    .ENDEF
                           A  1526    
                           A  1527    .DEFINE "addressfrom"
                           A  1528    
                           A  1529    .CLASS 65
                           A  1530    
                           A  1531    .VALUE -10
                           A  1532    
                           A  1533    .TYPE 14
                           A  1534    
                           A  1535    .ENDEF
                           A  1536    
                           A  1537    .DEFINE "state"
                           A  1538    
                           A  1539    .CLASS 65
                           A  1540    
                           A  1541    .VALUE -13
                           A  1542    
                           A  1543    .TYPE 4
                           A  1544    
                           A  1545    .ENDEF
                           A  1546    
                           A  1547    .DEFINE "pagemax"
                           A  1548    
                           A  1549    .CLASS 65
                           A  1550    
                           A  1551    .VALUE -16
                           A  1552    
                           A  1553    .TYPE 14
                           A  1554    
                           A  1555    .ENDEF
                           A  1556    
                           A  1557    .DEFINE "ptr"
                           A  1558    
                           A  1559    .CLASS 65
                           A  1560    
                           A  1561    .VALUE -19
                           A  1562    
                           A  1563    .TYPE 34
                           A  1564    
                           A  1565    .ENDEF
                           A  1566    
                           A  1567    .DEFINE "addressto"
                           A  1568    
                           A  1569    .CLASS 65
                           A  1570    
                           A  1571    .VALUE -22
                           A  1572    
                           A  1573    .TYPE 14
                           A  1574    
                           A  1575    .ENDEF
                           A  1576    
                           A  1577    .DEFINE "crcresult"
                           A  1578    
                           A  1579    .CLASS 65
                           A  1580    
                           A  1581    .VALUE -26
                           A  1582    
                           A  1583    .TYPE 15
                           A  1584    
                           A  1585    .ENDEF
                           A  1586    
                           A  1587    .DEFINE "got"
                           A  1588    
                           A  1589    .CLASS 65
                           A  1590    
                           A  1591    .VALUE -29
                           A  1592    
                           A  1593    .TYPE 14
                           A  1594    
                           A  1595    .ENDEF
                           A  1596    
                           A  1597    .DEFINE "value"
                           A  1598    
                           A  1599    .CLASS 65
                           A  1600    
                           A  1601    .VALUE -30
                           A  1602    
                           A  1603    .TYPE 12
                           A  1604    
                           A  1605    .ENDEF
                           A  1606    
                           A  1607    .DEFINE "file"
                           A  1608    
                           A  1609    .CLASS 65
                           A  1610    
                           A  1611    .VALUE -31
                           A  1612    
                           A  1613    .TYPE 12
                           A  1614    
                           A  1615    .ENDEF
                           A  1616    
                           A  1617    .DEFINE "lastpagebytes"
                           A  1618    
                           A  1619    .CLASS 65
                           A  1620    
                           A  1621    .VALUE -34
                           A  1622    
                           A  1623    .TYPE 14
                           A  1624    
                           A  1625    .ENDEF
                           A  1626    
                           A  1627    .DEFINE "crcexpected"
                           A  1628    
                           A  1629    .CLASS 65
                           A  1630    
                           A  1631    .VALUE -38
                           A  1632    
                           A  1633    .TYPE 15
                           A  1634    
                           A  1635    .ENDEF
                           A  1636    
                           A  1637    .DEFINE "crcbackup"
                           A  1638    
                           A  1639    .CLASS 65
                           A  1640    
                           A  1641    .VALUE -45
                           A  1642    
                           A  1643    .TYPE 15
                           A  1644    
                           A  1645    .ENDEF
                           A  1646    
0B0543 DDE5                A  1647    	PUSH	IX
0B0545 DD210000 00         A  1648    	LD	IX,0
0B054A DD39                A  1649    	ADD	IX,SP
0B054C ED22D3              A  1650    	LEA	HL,IX+%FFFFFFD3
0B054F F9                  A  1651    	LD	SP,HL
                           A  1652    ;  165		UINT32 crcexpected,crcresult,crcbac
                           A  1653    ;  166		UINT24 size = 0;
                           A  1654    .LINE 166
                           A  1655    
0B0550 01000000            A  1656    	LD	BC,0
0B0554 DD0FFA              A  1657    	LD	(IX+%FFFFFFFA),BC
                           A  1658    ;  167		UINT24 got;
                           A  1659    ;  168		UINT8 file;
                           A  1660    ;  169		char* ptr = (char*)BUFFER1;
                           A  1661    .LINE 169
                           A  1662    
0B0557 01000005            A  1663    	LD	BC,327680
0B055B DD0FED              A  1664    	LD	(IX+%FFFFFFED),BC
                           A  1665    ;  170		UINT8 response;
                           A  1666    ;  171		UINT8 value;
                           A  1667    ;  172		UINT24 counter,pagemax, lastpagebyt
                           A  1668    ;  173		UINT24 addressto,addressfrom;
                           A  1669    ;  174		enum states state;
                           A  1670    ;  175		
                           A  1671    ;  176		printf("Agon MOS firmware upgrade u
                           A  1672    .LINE 176
                           A  1673    
0B055E 01 DC 11 0B         A  1674    	LD	BC,___print_uputch
0B0562 ED43 04 20 0B       A  1675    	LD	(___print_xputch),BC
0B0567 01 C6 21 0B         A  1676    	LD	BC,L__37
0B056B C5                  A  1677    	PUSH	BC
0B056C CD 6B 10 0B         A  1678    	CALL	___print_sendstring
0B0570 C1                  A  1679    	POP	BC
                           A  1680    ;  177		
                           A  1681    ;  178		return 0; // DISABLE FOR NOW
                           A  1682    .LINE 178
                           A  1683    
0B0571 AF                  A  1684    	XOR	A,A
0B0572 C3 BE 0A 0B         A  1685    	JR	L_104
                           A  1686    ;  179	
                           A  1687    ;  180		file = mos_fopen(filename, fa_read)
                           A  1688    ;  181		if(!file)
                           A  1689    ;  182		{
                           A  1690    ;  183			printf("Error opening \"%s\"\n\
                           A  1691    ;  184			return EXIT_FILENOTFOUND;
                           A  1692    ;  185		}
                           A  1693    ;  186		
                           A  1694    ;  187		printf("Loading file : %s\n\r",file
                           A  1695    ;  188		printf("File size    : %d byte(s)",
                           A  1696    ;  189	
                           A  1697    ;  190		// Read file to memory
                           A  1698    ;  191		while((got = mos_fread(file, ptr, B
0B0576                     A  1699    L_50:
                           A  1700    .LINE 191
                           A  1701    
                           A  1702    ;  192		{
                           A  1703    ;  193			ptr += got;
                           A  1704    .LINE 193
                           A  1705    
0B0576 DD07E3              A  1706    	LD	BC,(IX+%FFFFFFE3)
0B0579 DD27ED              A  1707    	LD	HL,(IX+%FFFFFFED)
0B057C 09                  A  1708    	ADD	HL,BC
0B057D DD2FED              A  1709    	LD	(IX+%FFFFFFED),HL
                           A  1710    ;  194			size += got;
                           A  1711    .LINE 194
                           A  1712    
0B0580 DD07E3              A  1713    	LD	BC,(IX+%FFFFFFE3)
0B0583 DD27FA              A  1714    	LD	HL,(IX+%FFFFFFFA)
0B0586 09                  A  1715    	ADD	HL,BC
0B0587 DD2FFA              A  1716    	LD	(IX+%FFFFFFFA),HL
                           A  1717    ;  195			printf("\rFile size    : %d byt
                           A  1718    .LINE 195
                           A  1719    
0B058A 01 DC 11 0B         A  1720    	LD	BC,___print_uputch
0B058E ED43 04 20 0B       A  1721    	LD	(___print_xputch),BC
0B0593 01 F1 21 0B         A  1722    	LD	BC,L__38
0B0597 C5                  A  1723    	PUSH	BC
0B0598 CD 6B 10 0B         A  1724    	CALL	___print_sendstring
0B059C C1                  A  1725    	POP	BC
0B059D DD07FA              A  1726    	LD	BC,(IX+%FFFFFFFA)
0B05A0 AF                  A  1727    	XOR	A,A
0B05A1 C5D1                A  1728    	LD	DE,BC
0B05A3 4F                  A  1729    	LD	C,A
0B05A4 0600                A  1730    	LD	B,%0
0B05A6 C5                  A  1731    	PUSH	BC
0B05A7 D5                  A  1732    	PUSH	DE
0B05A8 CD 62 12 0B         A  1733    	CALL	__u_itoa
0B05AC C1                  A  1734    	POP	BC
0B05AD C1                  A  1735    	POP	BC
0B05AE 01 02 22 0B         A  1736    	LD	BC,L__39
0B05B2 C5                  A  1737    	PUSH	BC
0B05B3 CD 6B 10 0B         A  1738    	CALL	___print_sendstring
0B05B7 C1                  A  1739    	POP	BC
0B05B8 01004000            A  1740    	LD	BC,16384
0B05BC C5                  A  1741    	PUSH	BC
0B05BD DD07ED              A  1742    	LD	BC,(IX+%FFFFFFED)
0B05C0 C5                  A  1743    	PUSH	BC
0B05C1 DD4EE1              A  1744    	LD	C,(IX+%FFFFFFE1)
0B05C4 0600                A  1745    	LD	B,%0
0B05C6 C5                  A  1746    	PUSH	BC
0B05C7 CD DD 0B 0B         A  1747    	CALL	_mos_fread
0B05CB C1                  A  1748    	POP	BC
0B05CC C1                  A  1749    	POP	BC
0B05CD C1                  A  1750    	POP	BC
0B05CE DD2FE3              A  1751    	LD	(IX+%FFFFFFE3),HL
0B05D1 E5C1                A  1752    	LD	BC,HL
0B05D3 B7                  A  1753    	OR	A,A
0B05D4 ED62                A  1754    	SBC	HL,HL
0B05D6 B7                  A  1755    	OR	A,A
0B05D7 ED42                A  1756    	SBC	HL,BC
0B05D9 38 9B               A  1757    	JR	C,L_50
                           A  1758    ;  196		}		
                           A  1759    ;  197		mos_fclose(file);	
                           A  1760    .LINE 197
                           A  1761    
0B05DB DD4EE1              A  1762    	LD	C,(IX+%FFFFFFE1)
0B05DE 0600                A  1763    	LD	B,%0
0B05E0 C5                  A  1764    	PUSH	BC
0B05E1 CD B3 0B 0B         A  1765    	CALL	_mos_fclose
0B05E5 C1                  A  1766    	POP	BC
                           A  1767    ;  198		printf("\rFile size    : %d byte(s)
                           A  1768    .LINE 198
                           A  1769    
0B05E6 01 DC 11 0B         A  1770    	LD	BC,___print_uputch
0B05EA ED43 04 20 0B       A  1771    	LD	(___print_xputch),BC
0B05EF 01 0B 22 0B         A  1772    	LD	BC,L__41
0B05F3 C5                  A  1773    	PUSH	BC
0B05F4 CD 6B 10 0B         A  1774    	CALL	___print_sendstring
0B05F8 C1                  A  1775    	POP	BC
0B05F9 DD07FA              A  1776    	LD	BC,(IX+%FFFFFFFA)
0B05FC AF                  A  1777    	XOR	A,A
0B05FD C5D1                A  1778    	LD	DE,BC
0B05FF 4F                  A  1779    	LD	C,A
0B0600 0600                A  1780    	LD	B,%0
0B0602 C5                  A  1781    	PUSH	BC
0B0603 D5                  A  1782    	PUSH	DE
0B0604 CD 62 12 0B         A  1783    	CALL	__u_itoa
0B0608 C1                  A  1784    	POP	BC
0B0609 C1                  A  1785    	POP	BC
0B060A 01 1C 22 0B         A  1786    	LD	BC,L__42
0B060E C5                  A  1787    	PUSH	BC
0B060F CD 6B 10 0B         A  1788    	CALL	___print_sendstring
0B0613 C1                  A  1789    	POP	BC
                           A  1790    ;  199		if(size > FLASHSIZE)
                           A  1791    .LINE 199
                           A  1792    
0B0614 DD07FA              A  1793    	LD	BC,(IX+%FFFFFFFA)
0B0617 21000002            A  1794    	LD	HL,131072
0B061B B7                  A  1795    	OR	A,A
0B061C ED42                A  1796    	SBC	HL,BC
0B061E 30 18               A  1797    	JR	NC,L_54
                           A  1798    ;  200		{
                           A  1799    ;  201			printf("Too large for 128KB fla
                           A  1800    .LINE 201
                           A  1801    
0B0620 01 DC 11 0B         A  1802    	LD	BC,___print_uputch
0B0624 ED43 04 20 0B       A  1803    	LD	(___print_xputch),BC
0B0629 01 27 22 0B         A  1804    	LD	BC,L__44
0B062D C5                  A  1805    	PUSH	BC
0B062E CD 6B 10 0B         A  1806    	CALL	___print_sendstring
0B0632 C1                  A  1807    	POP	BC
                           A  1808    ;  202			return 0;
                           A  1809    .LINE 202
                           A  1810    
0B0633 AF                  A  1811    	XOR	A,A
0B0634 C3 BE 0A 0B         A  1812    	JR	L_104
                           A  1813    ;  203		}
0B0638                     A  1814    L_54:
                           A  1815    .LINE 203
                           A  1816    
                           A  1817    ;  204	
                           A  1818    ;  205		if(!containsMosHeader((uint8_t *)pt
                           A  1819    .LINE 205
                           A  1820    
0B0638 DD07ED              A  1821    	LD	BC,(IX+%FFFFFFED)
0B063B C5                  A  1822    	PUSH	BC
0B063C CD 46 02 0B         A  1823    	CALL	_containsMosHeader
0B0640 C1                  A  1824    	POP	BC
0B0641 B7                  A  1825    	OR	A,A
0B0642 20 19               A  1826    	JR	NZ,L_55
                           A  1827    ;  206			printf("File does not contain v
                           A  1828    .LINE 206
                           A  1829    
0B0644 01 DC 11 0B         A  1830    	LD	BC,___print_uputch
0B0648 ED43 04 20 0B       A  1831    	LD	(___print_xputch),BC
0B064D 01 4E 22 0B         A  1832    	LD	BC,L__46
0B0651 C5                  A  1833    	PUSH	BC
0B0652 CD 6B 10 0B         A  1834    	CALL	___print_sendstring
0B0656 C1                  A  1835    	POP	BC
                           A  1836    ;  207			return EXIT_INVALIDPARAMETER;
                           A  1837    .LINE 207
                           A  1838    
0B0657 3E13                A  1839    	LD	A,%13
0B0659 C3 BE 0A 0B         A  1840    	JR	L_104
                           A  1841    ;  208		}
0B065D                     A  1842    L_55:
                           A  1843    .LINE 208
                           A  1844    
                           A  1845    ;  209	
                           A  1846    ;  210		crcexpected = 0;
                           A  1847    .LINE 210
                           A  1848    
0B065D 01000000            A  1849    	LD	BC,0
0B0661 AF                  A  1850    	XOR	A,A
0B0662 DD0FDA              A  1851    	LD	(IX+%FFFFFFDA),BC
0B0665 DD77DD              A  1852    	LD	(IX+%FFFFFFDD),A
                           A  1853    ;  211		printf("Testing CRC32: 0x%08lx\n\r"
                           A  1854    .LINE 211
                           A  1855    
0B0668 01 DC 11 0B         A  1856    	LD	BC,___print_uputch
0B066C ED43 04 20 0B       A  1857    	LD	(___print_xputch),BC
0B0671 01 82 22 0B         A  1858    	LD	BC,L__47
0B0675 C5                  A  1859    	PUSH	BC
0B0676 CD 6B 10 0B         A  1860    	CALL	___print_sendstring
0B067A C1                  A  1861    	POP	BC
0B067B 3E08                A  1862    	LD	A,%8
0B067D 32 8A 1B 0B         A  1863    	LD	(___print_fmt+5),A
0B0681 3E40                A  1864    	LD	A,%40
0B0683 32 86 1B 0B         A  1865    	LD	(___print_fmt+1),A
0B0687 3E78                A  1866    	LD	A,%78
0B0689 32 89 1B 0B         A  1867    	LD	(___print_fmt+4),A
0B068D 01000000            A  1868    	LD	BC,0
0B0691 C5                  A  1869    	PUSH	BC
0B0692 C5                  A  1870    	PUSH	BC
0B0693 CD 35 19 0B         A  1871    	CALL	__u_ultoa
0B0697 C1                  A  1872    	POP	BC
0B0698 C1                  A  1873    	POP	BC
0B0699 01 94 22 0B         A  1874    	LD	BC,L__48
0B069D C5                  A  1875    	PUSH	BC
0B069E CD 6B 10 0B         A  1876    	CALL	___print_sendstring
0B06A2 C1                  A  1877    	POP	BC
                           A  1878    ;  212		crcresult = crc32((char*)BUFFER1, s
                           A  1879    .LINE 212
                           A  1880    
0B06A3 DD07FA              A  1881    	LD	BC,(IX+%FFFFFFFA)
0B06A6 C5                  A  1882    	PUSH	BC
0B06A7 01000005            A  1883    	LD	BC,327680
0B06AB C5                  A  1884    	PUSH	BC
0B06AC CD 7B 0F 0B         A  1885    	CALL	_crc32
0B06B0 C1                  A  1886    	POP	BC
0B06B1 C1                  A  1887    	POP	BC
0B06B2 DD2FE6              A  1888    	LD	(IX+%FFFFFFE6),HL
0B06B5 DD73E9              A  1889    	LD	(IX+%FFFFFFE9),E
                           A  1890    ;  213		printf("CRC32 result : 0x%08lx\n\r"
                           A  1891    .LINE 213
                           A  1892    
0B06B8 01 DC 11 0B         A  1893    	LD	BC,___print_uputch
0B06BC ED43 04 20 0B       A  1894    	LD	(___print_xputch),BC
0B06C1 01 97 22 0B         A  1895    	LD	BC,L__49
0B06C5 C5                  A  1896    	PUSH	BC
0B06C6 CD 6B 10 0B         A  1897    	CALL	___print_sendstring
0B06CA C1                  A  1898    	POP	BC
0B06CB 3E08                A  1899    	LD	A,%8
0B06CD 32 8A 1B 0B         A  1900    	LD	(___print_fmt+5),A
0B06D1 3E40                A  1901    	LD	A,%40
0B06D3 32 86 1B 0B         A  1902    	LD	(___print_fmt+1),A
0B06D7 3E78                A  1903    	LD	A,%78
0B06D9 32 89 1B 0B         A  1904    	LD	(___print_fmt+4),A
0B06DD DD4EE9              A  1905    	LD	C,(IX+%FFFFFFE9)
0B06E0 0600                A  1906    	LD	B,%0
0B06E2 C5                  A  1907    	PUSH	BC
0B06E3 DD07E6              A  1908    	LD	BC,(IX+%FFFFFFE6)
0B06E6 C5                  A  1909    	PUSH	BC
0B06E7 CD 35 19 0B         A  1910    	CALL	__u_ultoa
0B06EB C1                  A  1911    	POP	BC
0B06EC C1                  A  1912    	POP	BC
0B06ED 01 A9 22 0B         A  1913    	LD	BC,L__50
0B06F1 C5                  A  1914    	PUSH	BC
0B06F2 CD 6B 10 0B         A  1915    	CALL	___print_sendstring
0B06F6 C1                  A  1916    	POP	BC
                           A  1917    ;  214	
                           A  1918    ;  215		if(crcexpected != crcresult)
                           A  1919    .LINE 215
                           A  1920    
0B06F7 DD27DA              A  1921    	LD	HL,(IX+%FFFFFFDA)
0B06FA DD5EDD              A  1922    	LD	E,(IX+%FFFFFFDD)
0B06FD DD07E6              A  1923    	LD	BC,(IX+%FFFFFFE6)
0B0700 DD7EE9              A  1924    	LD	A,(IX+%FFFFFFE9)
0B0703 CD BE 18 0B         A  1925    	CALL	__lcmpu
0B0707 28 18               A  1926    	JR	Z,L_57
                           A  1927    ;  216		{
                           A  1928    ;  217			printf("\n\rMismatch - aborting
                           A  1929    .LINE 217
                           A  1930    
0B0709 01 DC 11 0B         A  1931    	LD	BC,___print_uputch
0B070D ED43 04 20 0B       A  1932    	LD	(___print_xputch),BC
0B0712 01 AC 22 0B         A  1933    	LD	BC,L__52
0B0716 C5                  A  1934    	PUSH	BC
0B0717 CD 6B 10 0B         A  1935    	CALL	___print_sendstring
0B071B C1                  A  1936    	POP	BC
                           A  1937    ;  218			return 0;
                           A  1938    .LINE 218
                           A  1939    
0B071C AF                  A  1940    	XOR	A,A
0B071D C3 BE 0A 0B         A  1941    	JR	L_104
                           A  1942    ;  219		}
0B0721                     A  1943    L_57:
                           A  1944    .LINE 219
                           A  1945    
                           A  1946    ;  220		printf("\n\rOK\n\r\n\r");
                           A  1947    .LINE 220
                           A  1948    
0B0721 01 DC 11 0B         A  1949    	LD	BC,___print_uputch
0B0725 ED43 04 20 0B       A  1950    	LD	(___print_xputch),BC
0B072A 01 C4 22 0B         A  1951    	LD	BC,L__53
0B072E C5                  A  1952    	PUSH	BC
0B072F CD 6B 10 0B         A  1953    	CALL	___print_sendstring
0B0733 C1                  A  1954    	POP	BC
                           A  1955    ;  221	
                           A  1956    ;  222		// Ask user to continue
                           A  1957    ;  223		printf("Erase and program flash (y/
                           A  1958    .LINE 223
                           A  1959    
0B0734 01 DC 11 0B         A  1960    	LD	BC,___print_uputch
0B0738 ED43 04 20 0B       A  1961    	LD	(___print_xputch),BC
0B073D 01 CD 22 0B         A  1962    	LD	BC,L__54
0B0741 C5                  A  1963    	PUSH	BC
0B0742 CD 6B 10 0B         A  1964    	CALL	___print_sendstring
0B0746 C1                  A  1965    	POP	BC
                           A  1966    ;  224		response = 0;
                           A  1967    .LINE 224
                           A  1968    
0B0747 DD36F900            A  1969    	LD	(IX+%FFFFFFF9),%0
                           A  1970    ;  225		while((response != 'y') && (respons
                           A  1971    .LINE 225
                           A  1972    
0B074B 18 07               A  1973    	JR	L_59
0B074D                     A  1974    L_60:
0B074D CD 51 0B 0B         A  1975    	CALL	_getch
0B0751 DD77F9              A  1976    	LD	(IX+%FFFFFFF9),A
0B0754                     A  1977    L_59:
0B0754 DD7EF9              A  1978    	LD	A,(IX+%FFFFFFF9)
0B0757 FE79                A  1979    	CP	A,%79
0B0759 28 07               A  1980    	JR	Z,L_102
0B075B DD7EF9              A  1981    	LD	A,(IX+%FFFFFFF9)
0B075E FE6E                A  1982    	CP	A,%6E
0B0760 20 EB               A  1983    	JR	NZ,L_60
0B0762                     A  1984    L_102:
                           A  1985    ;  226		if(response == 'y')
                           A  1986    .LINE 226
                           A  1987    
0B0762 DD7EF9              A  1988    	LD	A,(IX+%FFFFFFF9)
0B0765 FE79                A  1989    	CP	A,%79
0B0767 C2 AA 0A 0B         A  1990    	JR	NZ,L_101
                           A  1991    ;  227		{
                           A  1992    ;  228			printf("\r\nBacking up existing
                           A  1993    .LINE 228
                           A  1994    
0B076B 01 DC 11 0B         A  1995    	LD	BC,___print_uputch
0B076F ED43 04 20 0B       A  1996    	LD	(___print_xputch),BC
0B0774 01 ED 22 0B         A  1997    	LD	BC,L__58
0B0778 C5                  A  1998    	PUSH	BC
0B0779 CD 6B 10 0B         A  1999    	CALL	___print_sendstring
0B077D C1                  A  2000    	POP	BC
                           A  2001    ;  229			fastmemcpy(BUFFER2, 0x0, FLASHS
                           A  2002    .LINE 229
                           A  2003    
0B077E 01000002            A  2004    	LD	BC,131072
0B0782 C5                  A  2005    	PUSH	BC
0B0783 01000000            A  2006    	LD	BC,0
0B0787 C5                  A  2007    	PUSH	BC
0B0788 01000007            A  2008    	LD	BC,458752
0B078C C5                  A  2009    	PUSH	BC
0B078D CD A3 0C 0B         A  2010    	CALL	_fastmemcpy
0B0791 C1                  A  2011    	POP	BC
0B0792 C1                  A  2012    	POP	BC
0B0793 C1                  A  2013    	POP	BC
                           A  2014    ;  230			crcbackup = crc32((char*)0x0, F
                           A  2015    .LINE 230
                           A  2016    
0B0794 01000002            A  2017    	LD	BC,131072
0B0798 C5                  A  2018    	PUSH	BC
0B0799 01000000            A  2019    	LD	BC,0
0B079D C5                  A  2020    	PUSH	BC
0B079E CD 7B 0F 0B         A  2021    	CALL	_crc32
0B07A2 C1                  A  2022    	POP	BC
0B07A3 C1                  A  2023    	POP	BC
0B07A4 DD2FD3              A  2024    	LD	(IX+%FFFFFFD3),HL
0B07A7 DD73D6              A  2025    	LD	(IX+%FFFFFFD6),E
                           A  2026    ;  231			
                           A  2027    ;  232			di();							
                           A  2028    .LINE 232
                           A  2029    
0B07AA F3                  A  2030    	di
                           A  2031    ;  233	
                           A  2032    ;  234			// start address in flash
                           A  2033    ;  235			addressto = FLASHSTART;
                           A  2034    .LINE 235
                           A  2035    
0B07AB 01000000            A  2036    	LD	BC,0
0B07AF DD0FEA              A  2037    	LD	(IX+%FFFFFFEA),BC
                           A  2038    ;  236			addressfrom = BUFFER1;
                           A  2039    .LINE 236
                           A  2040    
0B07B2 01000005            A  2041    	LD	BC,327680
0B07B6 DD0FF6              A  2042    	LD	(IX+%FFFFFFF6),BC
                           A  2043    ;  237			
                           A  2044    ;  238			state = firmware;		
                           A  2045    .LINE 238
                           A  2046    
0B07B9 01000000            A  2047    	LD	BC,0
0B07BD DD0FF3              A  2048    	LD	(IX+%FFFFFFF3),BC
                           A  2049    ;  239			while(1)
0B07C0                     A  2050    L_99:
                           A  2051    .LINE 239
                           A  2052    
                           A  2053    ;  240			{
                           A  2054    ;  241				switch(state)
                           A  2055    .LINE 241
                           A  2056    
0B07C0 DD27F3              A  2057    	LD	HL,(IX+%FFFFFFF3)
0B07C3 CD 7B 18 0B         A  2058    	CALL	__case8D
0B07C7 E9                  A  2059    	JP	(HL)
0B07C8                     A  2060    L__59:
0B07C8 0200                A  2061    	DW	2
0B07CA 00                  A  2062    	DB	0
0B07CB D5070B              A  2063    	DW24	L_61	
                           A  2064    
0B07CE 01                  A  2065    	DB	1
0B07CF E0070B              A  2066    	DW24	L_62	
                           A  2067    
0B07D2 F2070B              A  2068    	DW24	L_63	
                           A  2069    
                           A  2070    ;  242				{
                           A  2071    ;  243					case firmware:
0B07D5                     A  2072    L_61:
                           A  2073    .LINE 243
                           A  2074    
                           A  2075    ;  244						// start address in
                           A  2076    ;  245						addressfrom = BUFFE
                           A  2077    .LINE 245
                           A  2078    
0B07D5 01000005            A  2079    	LD	BC,327680
0B07D9 DD0FF6              A  2080    	LD	(IX+%FFFFFFF6),BC
                           A  2081    ;  246						break;
                           A  2082    .LINE 246
                           A  2083    
0B07DC C3 72 08 0B         A  2084    	JR	L_69
                           A  2085    ;  247					case recover:
0B07E0                     A  2086    L_62:
                           A  2087    .LINE 247
                           A  2088    
                           A  2089    ;  248						// start address in
                           A  2090    ;  249						addressfrom = BUFFE
                           A  2091    .LINE 249
                           A  2092    
0B07E0 01000007            A  2093    	LD	BC,458752
0B07E4 DD0FF6              A  2094    	LD	(IX+%FFFFFFF6),BC
                           A  2095    ;  250						size = FLASHSIZE;	
                           A  2096    .LINE 250
                           A  2097    
0B07E7 01000002            A  2098    	LD	BC,131072
0B07EB DD0FFA              A  2099    	LD	(IX+%FFFFFFFA),BC
                           A  2100    ;  251						break;
                           A  2101    .LINE 251
                           A  2102    
0B07EE C3 72 08 0B         A  2103    	JR	L_69
                           A  2104    ;  252					default:
0B07F2                     A  2105    L_63:
                           A  2106    .LINE 252
                           A  2107    
                           A  2108    ;  253						// RESET SYSTEM
                           A  2109    ;  254						printf("\r\n");
                           A  2110    .LINE 254
                           A  2111    
0B07F2 01 DC 11 0B         A  2112    	LD	BC,___print_uputch
0B07F6 ED43 04 20 0B       A  2113    	LD	(___print_xputch),BC
0B07FB 01 10 23 0B         A  2114    	LD	BC,L__60
0B07FF C5                  A  2115    	PUSH	BC
0B0800 CD 6B 10 0B         A  2116    	CALL	___print_sendstring
0B0804 C1                  A  2117    	POP	BC
                           A  2118    ;  255						for(counter = 5; co
                           A  2119    .LINE 255
                           A  2120    
0B0805 01050000            A  2121    	LD	BC,5
0B0809 DD0FFD              A  2122    	LD	(IX+%FFFFFFFD),BC
0B080C 18 41               A  2123    	JR	L_67
0B080E                     A  2124    L_65:
                           A  2125    ;  256						{
                           A  2126    ;  257							printf("\rReset
                           A  2127    .LINE 257
                           A  2128    
0B080E 01 DC 11 0B         A  2129    	LD	BC,___print_uputch
0B0812 ED43 04 20 0B       A  2130    	LD	(___print_xputch),BC
0B0817 01 13 23 0B         A  2131    	LD	BC,L__61
0B081B C5                  A  2132    	PUSH	BC
0B081C CD 6B 10 0B         A  2133    	CALL	___print_sendstring
0B0820 C1                  A  2134    	POP	BC
0B0821 DD07FD              A  2135    	LD	BC,(IX+%FFFFFFFD)
0B0824 AF                  A  2136    	XOR	A,A
0B0825 C5D1                A  2137    	LD	DE,BC
0B0827 4F                  A  2138    	LD	C,A
0B0828 0600                A  2139    	LD	B,%0
0B082A C5                  A  2140    	PUSH	BC
0B082B D5                  A  2141    	PUSH	DE
0B082C CD 62 12 0B         A  2142    	CALL	__u_itoa
0B0830 C1                  A  2143    	POP	BC
0B0831 C1                  A  2144    	POP	BC
0B0832 01730000            A  2145    	LD	BC,115
0B0836 C5                  A  2146    	PUSH	BC
0B0837 CD DC 11 0B         A  2147    	CALL	___print_uputch
0B083B C1                  A  2148    	POP	BC
                           A  2149    ;  258							delayms(1000);
                           A  2150    .LINE 258
                           A  2151    
0B083C 01E80300            A  2152    	LD	BC,1000
0B0840 C5                  A  2153    	PUSH	BC
0B0841 CD 43 0D 0B         A  2154    	CALL	_delayms
0B0845 C1                  A  2155    	POP	BC
0B0846 DD31FD              A  2156    	LD	IY,(IX+%FFFFFFFD)
0B0849 ED33FF              A  2157    	LEA	IY,IY+%FFFFFFFF
0B084C DD3EFD              A  2158    	LD	(IX+%FFFFFFFD),IY
                           A  2159    ;  259						}
0B084F                     A  2160    L_67:
                           A  2161    .LINE 259
                           A  2162    
0B084F DD07FD              A  2163    	LD	BC,(IX+%FFFFFFFD)
0B0852 B7                  A  2164    	OR	A,A
0B0853 ED62                A  2165    	SBC	HL,HL
0B0855 B7                  A  2166    	OR	A,A
0B0856 ED42                A  2167    	SBC	HL,BC
0B0858 38 B4               A  2168    	JR	C,L_65
                           A  2169    ;  260						putch(12);
                           A  2170    .LINE 260
                           A  2171    
0B085A 010C0000            A  2172    	LD	BC,12
0B085E C5                  A  2173    	PUSH	BC
0B085F CD E5 00 0B         A  2174    	CALL	_putch
0B0863 C1                  A  2175    	POP	BC
                           A  2176    ;  261						delayms(500);
                           A  2177    .LINE 261
                           A  2178    
0B0864 01F40100            A  2179    	LD	BC,500
0B0868 C5                  A  2180    	PUSH	BC
0B0869 CD 43 0D 0B         A  2181    	CALL	_delayms
0B086D C1                  A  2182    	POP	BC
                           A  2183    ;  262						reset();
                           A  2184    .LINE 262
                           A  2185    
0B086E CD A1 0C 0B         A  2186    	CALL	_reset
                           A  2187    ;  263				}
0B0872                     A  2188    L_69:
                           A  2189    .LINE 263
                           A  2190    
                           A  2191    ;  264		
                           A  2192    ;  265				// Unprotect and erase flas
                           A  2193    ;  266				printf("\r\nErasing flash..
                           A  2194    .LINE 266
                           A  2195    
0B0872 01 DC 11 0B         A  2196    	LD	BC,___print_uputch
0B0876 ED43 04 20 0B       A  2197    	LD	(___print_xputch),BC
0B087B 01 1E 23 0B         A  2198    	LD	BC,L__63
0B087F C5                  A  2199    	PUSH	BC
0B0880 CD 6B 10 0B         A  2200    	CALL	___print_sendstring
0B0884 C1                  A  2201    	POP	BC
                           A  2202    ;  267				enableFlashKeyRegister();	
                           A  2203    .LINE 267
                           A  2204    
0B0885 CD 76 0C 0B         A  2205    	CALL	_enableFlashKeyRegister
                           A  2206    ;  268				FLASH_PROT = 0;				
                           A  2207    .LINE 268
                           A  2208    
0B0889 AF                  A  2209    	XOR	A,A
0B088A ED39FA              A  2210    	OUT0	(250),A
                           A  2211    ;  269				enableFlashKeyRegister();	
                           A  2212    .LINE 269
                           A  2213    
0B088D CD 76 0C 0B         A  2214    	CALL	_enableFlashKeyRegister
                           A  2215    ;  270				FLASH_FDIV = 0x5F;			
                           A  2216    .LINE 270
                           A  2217    
0B0891 3E5F                A  2218    	LD	A,%5F
0B0893 ED39F9              A  2219    	OUT0	(249),A
                           A  2220    ;  271				
                           A  2221    ;  272				for(counter = 0; counter < 
                           A  2222    .LINE 272
                           A  2223    
0B0896 01000000            A  2224    	LD	BC,0
0B089A DD0FFD              A  2225    	LD	(IX+%FFFFFFFD),BC
0B089D 18 1C               A  2226    	JR	L_75
0B089F                     A  2227    L_73:
                           A  2228    ;  273				{
                           A  2229    ;  274					FLASH_PAGE = counter;
                           A  2230    .LINE 274
                           A  2231    
0B089F DD7EFD              A  2232    	LD	A,(IX+%FFFFFFFD)
0B08A2 ED39FC              A  2233    	OUT0	(252),A
                           A  2234    ;  275					FLASH_PGCTL = 0x02;		
                           A  2235    .LINE 275
                           A  2236    
0B08A5 3E02                A  2237    	LD	A,%2
0B08A7 ED39FF              A  2238    	OUT0	(255),A
                           A  2239    ;  276	
                           A  2240    ;  277					do
0B08AA                     A  2241    L_71:
                           A  2242    .LINE 277
                           A  2243    
                           A  2244    ;  278					{
                           A  2245    ;  279						value = FLASH_PGCTL
                           A  2246    .LINE 279
                           A  2247    
0B08AA ED38FF              A  2248    	IN0	A,(255)
0B08AD DD77E2              A  2249    	LD	(IX+%FFFFFFE2),A
                           A  2250    ;  280					}
                           A  2251    ;  281					while(value & 0x02);// 
                           A  2252    .LINE 281
                           A  2253    
0B08B0 E602                A  2254    	AND	A,%2
0B08B2 20 F6               A  2255    	JR	NZ,L_71
0B08B4 DD07FD              A  2256    	LD	BC,(IX+%FFFFFFFD)
0B08B7 03                  A  2257    	INC	BC
0B08B8 DD0FFD              A  2258    	LD	(IX+%FFFFFFFD),BC
                           A  2259    ;  282				}
0B08BB                     A  2260    L_75:
                           A  2261    .LINE 282
                           A  2262    
0B08BB 01800000            A  2263    	LD	BC,128
0B08BF DD27FD              A  2264    	LD	HL,(IX+%FFFFFFFD)
0B08C2 B7                  A  2265    	OR	A,A
0B08C3 ED42                A  2266    	SBC	HL,BC
0B08C5 38 D8               A  2267    	JR	C,L_73
                           A  2268    ;  283				
                           A  2269    ;  284				printf("\r\nWriting new fir
                           A  2270    .LINE 284
                           A  2271    
0B08C7 01 DC 11 0B         A  2272    	LD	BC,___print_uputch
0B08CB ED43 04 20 0B       A  2273    	LD	(___print_xputch),BC
0B08D0 01 32 23 0B         A  2274    	LD	BC,L__66
0B08D4 C5                  A  2275    	PUSH	BC
0B08D5 CD 6B 10 0B         A  2276    	CALL	___print_sendstring
0B08D9 C1                  A  2277    	POP	BC
                           A  2278    ;  285				
                           A  2279    ;  286				// determine number of page
                           A  2280    ;  287				pagemax = size/PAGESIZE;
                           A  2281    .LINE 287
                           A  2282    
0B08DA DD27FA              A  2283    	LD	HL,(IX+%FFFFFFFA)
0B08DD 3E0A                A  2284    	LD	A,%A
0B08DF CD 4F 18 0B         A  2285    	CALL	__ishru_b
0B08E3 DD2FF0              A  2286    	LD	(IX+%FFFFFFF0),HL
                           A  2287    ;  288				if(size%PAGESIZE) // last p
                           A  2288    .LINE 288
                           A  2289    
0B08E6 01FF0300            A  2290    	LD	BC,1023
0B08EA DD27FA              A  2291    	LD	HL,(IX+%FFFFFFFA)
0B08ED CD E1 18 0B         A  2292    	CALL	__iand
0B08F1 DD2FD7              A  2293    	LD	(IX+%FFFFFFD7),HL
0B08F4 CD 99 15 0B         A  2294    	CALL	__icmpzero
0B08F8 28 0F               A  2295    	JR	Z,L_78
                           A  2296    ;  289				{
                           A  2297    ;  290					pagemax += 1;
                           A  2298    .LINE 290
                           A  2299    
0B08FA DD07F0              A  2300    	LD	BC,(IX+%FFFFFFF0)
0B08FD 03                  A  2301    	INC	BC
0B08FE DD0FF0              A  2302    	LD	(IX+%FFFFFFF0),BC
                           A  2303    ;  291					lastpagebytes = size%PA
                           A  2304    .LINE 291
                           A  2305    
0B0901 DD07D7              A  2306    	LD	BC,(IX+%FFFFFFD7)
0B0904 DD0FDE              A  2307    	LD	(IX+%FFFFFFDE),BC
                           A  2308    ;  292				}
                           A  2309    ;  293				else lastpagebytes = PAGESI
                           A  2310    .LINE 293
                           A  2311    
0B0907 18 07               A  2312    	JR	L_86
0B0909                     A  2313    L_78:
0B0909 01000400            A  2314    	LD	BC,1024
0B090D DD0FDE              A  2315    	LD	(IX+%FFFFFFDE),BC
0B0910                     A  2316    L_86:
                           A  2317    ;  294				
                           A  2318    ;  295				// write out each page to f
                           A  2319    ;  296				for(counter = 0; counter < 
                           A  2320    .LINE 296
                           A  2321    
0B0910 01000000            A  2322    	LD	BC,0
0B0914 DD0FFD              A  2323    	LD	(IX+%FFFFFFFD),BC
0B0917 C3 C3 09 0B         A  2324    	JR	L_85
0B091B                     A  2325    L_83:
                           A  2326    ;  297				{
                           A  2327    ;  298					printf("\rWriting flash
                           A  2328    .LINE 298
                           A  2329    
0B091B 01 DC 11 0B         A  2330    	LD	BC,___print_uputch
0B091F ED43 04 20 0B       A  2331    	LD	(___print_xputch),BC
0B0924 01 4E 23 0B         A  2332    	LD	BC,L__68
0B0928 C5                  A  2333    	PUSH	BC
0B0929 CD 6B 10 0B         A  2334    	CALL	___print_sendstring
0B092D C1                  A  2335    	POP	BC
0B092E 3E03                A  2336    	LD	A,%3
0B0930 32 8A 1B 0B         A  2337    	LD	(___print_fmt+5),A
0B0934 3E40                A  2338    	LD	A,%40
0B0936 32 86 1B 0B         A  2339    	LD	(___print_fmt+1),A
0B093A DD07FD              A  2340    	LD	BC,(IX+%FFFFFFFD)
0B093D 03                  A  2341    	INC	BC
0B093E AF                  A  2342    	XOR	A,A
0B093F C5D1                A  2343    	LD	DE,BC
0B0941 4F                  A  2344    	LD	C,A
0B0942 0600                A  2345    	LD	B,%0
0B0944 C5                  A  2346    	PUSH	BC
0B0945 D5                  A  2347    	PUSH	DE
0B0946 CD 62 12 0B         A  2348    	CALL	__u_itoa
0B094A C1                  A  2349    	POP	BC
0B094B C1                  A  2350    	POP	BC
0B094C 012F0000            A  2351    	LD	BC,47
0B0950 C5                  A  2352    	PUSH	BC
0B0951 CD DC 11 0B         A  2353    	CALL	___print_uputch
0B0955 C1                  A  2354    	POP	BC
0B0956 3E03                A  2355    	LD	A,%3
0B0958 32 8A 1B 0B         A  2356    	LD	(___print_fmt+5),A
0B095C 3E40                A  2357    	LD	A,%40
0B095E 32 86 1B 0B         A  2358    	LD	(___print_fmt+1),A
0B0962 DD07F0              A  2359    	LD	BC,(IX+%FFFFFFF0)
0B0965 AF                  A  2360    	XOR	A,A
0B0966 C5D1                A  2361    	LD	DE,BC
0B0968 4F                  A  2362    	LD	C,A
0B0969 0600                A  2363    	LD	B,%0
0B096B C5                  A  2364    	PUSH	BC
0B096C D5                  A  2365    	PUSH	DE
0B096D CD 62 12 0B         A  2366    	CALL	__u_itoa
0B0971 C1                  A  2367    	POP	BC
0B0972 C1                  A  2368    	POP	BC
                           A  2369    ;  299					
                           A  2370    ;  300					if(counter == (pagemax 
                           A  2371    .LINE 300
                           A  2372    
0B0973 DD31F0              A  2373    	LD	IY,(IX+%FFFFFFF0)
0B0976 ED23FF              A  2374    	LEA	HL,IY+%FFFFFFFF
0B0979 DD07FD              A  2375    	LD	BC,(IX+%FFFFFFFD)
0B097C B7                  A  2376    	OR	A,A
0B097D ED42                A  2377    	SBC	HL,BC
0B097F 20 15               A  2378    	JR	NZ,L_81
                           A  2379    ;  301						fastmemcpy(addresst
                           A  2380    .LINE 301
                           A  2381    
0B0981 DD07DE              A  2382    	LD	BC,(IX+%FFFFFFDE)
0B0984 C5                  A  2383    	PUSH	BC
0B0985 DD07F6              A  2384    	LD	BC,(IX+%FFFFFFF6)
0B0988 C5                  A  2385    	PUSH	BC
0B0989 DD07EA              A  2386    	LD	BC,(IX+%FFFFFFEA)
0B098C C5                  A  2387    	PUSH	BC
0B098D CD A3 0C 0B         A  2388    	CALL	_fastmemcpy
0B0991 C1                  A  2389    	POP	BC
0B0992 C1                  A  2390    	POP	BC
0B0993 C1                  A  2391    	POP	BC
                           A  2392    ;  302						//printf("Fake copy
                           A  2393    ;  303					else 
                           A  2394    .LINE 303
                           A  2395    
0B0994 18 14               A  2396    	JR	L_82
0B0996                     A  2397    L_81:
                           A  2398    ;  304						fastmemcpy(addresst
                           A  2399    .LINE 304
                           A  2400    
0B0996 01000400            A  2401    	LD	BC,1024
0B099A C5                  A  2402    	PUSH	BC
0B099B DD07F6              A  2403    	LD	BC,(IX+%FFFFFFF6)
0B099E C5                  A  2404    	PUSH	BC
0B099F DD07EA              A  2405    	LD	BC,(IX+%FFFFFFEA)
0B09A2 C5                  A  2406    	PUSH	BC
0B09A3 CD A3 0C 0B         A  2407    	CALL	_fastmemcpy
0B09A7 C1                  A  2408    	POP	BC
0B09A8 C1                  A  2409    	POP	BC
0B09A9 C1                  A  2410    	POP	BC
0B09AA                     A  2411    L_82:
                           A  2412    ;  305						//printf("Fake copy
                           A  2413    ;  306				
                           A  2414    ;  307					addressto += PAGESIZE;
                           A  2415    .LINE 307
                           A  2416    
0B09AA 01000400            A  2417    	LD	BC,1024
0B09AE DD27EA              A  2418    	LD	HL,(IX+%FFFFFFEA)
0B09B1 09                  A  2419    	ADD	HL,BC
0B09B2 DD2FEA              A  2420    	LD	(IX+%FFFFFFEA),HL
                           A  2421    ;  308					addressfrom += PAGESIZE
                           A  2422    .LINE 308
                           A  2423    
0B09B5 DD27F6              A  2424    	LD	HL,(IX+%FFFFFFF6)
0B09B8 09                  A  2425    	ADD	HL,BC
0B09B9 DD2FF6              A  2426    	LD	(IX+%FFFFFFF6),HL
0B09BC DD07FD              A  2427    	LD	BC,(IX+%FFFFFFFD)
0B09BF 03                  A  2428    	INC	BC
0B09C0 DD0FFD              A  2429    	LD	(IX+%FFFFFFFD),BC
                           A  2430    ;  309				}
0B09C3                     A  2431    L_85:
                           A  2432    .LINE 309
                           A  2433    
0B09C3 DD07F0              A  2434    	LD	BC,(IX+%FFFFFFF0)
0B09C6 DD27FD              A  2435    	LD	HL,(IX+%FFFFFFFD)
0B09C9 B7                  A  2436    	OR	A,A
0B09CA ED42                A  2437    	SBC	HL,BC
0B09CC DA 1B 09 0B         A  2438    	JR	C,L_83
                           A  2439    ;  310				lockFlashKeyRegister();	// 
                           A  2440    .LINE 310
                           A  2441    
0B09D0 CD 8E 0C 0B         A  2442    	CALL	_lockFlashKeyRegister
                           A  2443    ;  311				printf("\r\n");
                           A  2444    .LINE 311
                           A  2445    
0B09D4 01 DC 11 0B         A  2446    	LD	BC,___print_uputch
0B09D8 ED43 04 20 0B       A  2447    	LD	(___print_xputch),BC
0B09DD 01 63 23 0B         A  2448    	LD	BC,L__71
0B09E1 C5                  A  2449    	PUSH	BC
0B09E2 CD 6B 10 0B         A  2450    	CALL	___print_sendstring
0B09E6 C1                  A  2451    	POP	BC
                           A  2452    ;  312				
                           A  2453    ;  313				//Verify correct CRC in fla
                           A  2454    ;  314				printf("Verifying flash che
                           A  2455    .LINE 314
                           A  2456    
0B09E7 01 DC 11 0B         A  2457    	LD	BC,___print_uputch
0B09EB ED43 04 20 0B       A  2458    	LD	(___print_xputch),BC
0B09F0 01 66 23 0B         A  2459    	LD	BC,L__72
0B09F4 C5                  A  2460    	PUSH	BC
0B09F5 CD 6B 10 0B         A  2461    	CALL	___print_sendstring
0B09F9 C1                  A  2462    	POP	BC
                           A  2463    ;  315				crcresult = crc32((char*)FL
                           A  2464    .LINE 315
                           A  2465    
0B09FA DD07FA              A  2466    	LD	BC,(IX+%FFFFFFFA)
0B09FD C5                  A  2467    	PUSH	BC
0B09FE 01000000            A  2468    	LD	BC,0
0B0A02 C5                  A  2469    	PUSH	BC
0B0A03 CD 7B 0F 0B         A  2470    	CALL	_crc32
0B0A07 C1                  A  2471    	POP	BC
0B0A08 C1                  A  2472    	POP	BC
0B0A09 DD2FE6              A  2473    	LD	(IX+%FFFFFFE6),HL
0B0A0C DD73E9              A  2474    	LD	(IX+%FFFFFFE9),E
                           A  2475    ;  316	
                           A  2476    ;  317				if(state == recover) crcexp
                           A  2477    .LINE 317
                           A  2478    
0B0A0F 01010000            A  2479    	LD	BC,1
0B0A13 DD27F3              A  2480    	LD	HL,(IX+%FFFFFFF3)
0B0A16 B7                  A  2481    	OR	A,A
0B0A17 ED42                A  2482    	SBC	HL,BC
0B0A19 20 0C               A  2483    	JR	NZ,L_97
0B0A1B DD07D3              A  2484    	LD	BC,(IX+%FFFFFFD3)
0B0A1E DD7ED6              A  2485    	LD	A,(IX+%FFFFFFD6)
0B0A21 DD0FDA              A  2486    	LD	(IX+%FFFFFFDA),BC
0B0A24 DD77DD              A  2487    	LD	(IX+%FFFFFFDD),A
0B0A27                     A  2488    L_97:
                           A  2489    ;  318				
                           A  2490    ;  319				if(crcresult == crcexpected
                           A  2491    .LINE 319
                           A  2492    
0B0A27 DD27E6              A  2493    	LD	HL,(IX+%FFFFFFE6)
0B0A2A DD5EE9              A  2494    	LD	E,(IX+%FFFFFFE9)
0B0A2D DD07DA              A  2495    	LD	BC,(IX+%FFFFFFDA)
0B0A30 DD7EDD              A  2496    	LD	A,(IX+%FFFFFFDD)
0B0A33 CD BE 18 0B         A  2497    	CALL	__lcmpu
0B0A37 20 1E               A  2498    	JR	NZ,L_96
                           A  2499    ;  320				{
                           A  2500    ;  321					printf("- OK\r\n");
                           A  2501    .LINE 321
                           A  2502    
0B0A39 01 DC 11 0B         A  2503    	LD	BC,___print_uputch
0B0A3D ED43 04 20 0B       A  2504    	LD	(___print_xputch),BC
0B0A42 01 83 23 0B         A  2505    	LD	BC,L__75
0B0A46 C5                  A  2506    	PUSH	BC
0B0A47 CD 6B 10 0B         A  2507    	CALL	___print_sendstring
0B0A4B C1                  A  2508    	POP	BC
                           A  2509    ;  322					state = systemreset;
                           A  2510    .LINE 322
                           A  2511    
0B0A4C 01020000            A  2512    	LD	BC,2
0B0A50 DD0FF3              A  2513    	LD	(IX+%FFFFFFF3),BC
                           A  2514    ;  323				}
                           A  2515    ;  324				else // CRC Failure - next 
                           A  2516    .LINE 324
                           A  2517    
0B0A53 C3 C0 07 0B         A  2518    	JR	L_99
0B0A57                     A  2519    L_96:
                           A  2520    ;  325				{	 // User interaction no
                           A  2521    ;  326					switch(state)
                           A  2522    .LINE 326
                           A  2523    
0B0A57 DD27F3              A  2524    	LD	HL,(IX+%FFFFFFF3)
0B0A5A CD 7B 18 0B         A  2525    	CALL	__case8D
0B0A5E E9                  A  2526    	JP	(HL)
0B0A5F                     A  2527    L__76:
0B0A5F 0200                A  2528    	DW	2
0B0A61 00                  A  2529    	DB	0
0B0A62 6C0A0B              A  2530    	DW24	L_89	
                           A  2531    
0B0A65 01                  A  2532    	DB	1
0B0A66 8A0A0B              A  2533    	DW24	L_90	
                           A  2534    
0B0A69 9F0A0B              A  2535    	DW24	L_93	
                           A  2536    
                           A  2537    ;  327					{
                           A  2538    ;  328						case firmware:
0B0A6C                     A  2539    L_89:
                           A  2540    .LINE 328
                           A  2541    
                           A  2542    ;  329							printf("\r\nErr
                           A  2543    .LINE 329
                           A  2544    
0B0A6C 01 DC 11 0B         A  2545    	LD	BC,___print_uputch
0B0A70 ED43 04 20 0B       A  2546    	LD	(___print_xputch),BC
0B0A75 01 8A 23 0B         A  2547    	LD	BC,L__77
0B0A79 C5                  A  2548    	PUSH	BC
0B0A7A CD 6B 10 0B         A  2549    	CALL	___print_sendstring
0B0A7E C1                  A  2550    	POP	BC
                           A  2551    ;  330							state = recover
                           A  2552    .LINE 330
                           A  2553    
0B0A7F 01010000            A  2554    	LD	BC,1
0B0A83 DD0FF3              A  2555    	LD	(IX+%FFFFFFF3),BC
                           A  2556    ;  331							break;
                           A  2557    .LINE 331
                           A  2558    
0B0A86 C3 C0 07 0B         A  2559    	JR	L_99
                           A  2560    ;  332						case recover:
0B0A8A                     A  2561    L_90:
                           A  2562    .LINE 332
                           A  2563    
                           A  2564    ;  333							printf("\r\nErr
                           A  2565    .LINE 333
                           A  2566    
0B0A8A 01 DC 11 0B         A  2567    	LD	BC,___print_uputch
0B0A8E ED43 04 20 0B       A  2568    	LD	(___print_xputch),BC
0B0A93 01 D7 23 0B         A  2569    	LD	BC,L__78
0B0A97 C5                  A  2570    	PUSH	BC
0B0A98 CD 6B 10 0B         A  2571    	CALL	___print_sendstring
0B0A9C C1                  A  2572    	POP	BC
                           A  2573    ;  334							while(1); // no
0B0A9D                     A  2574    L_92:
                           A  2575    .LINE 334
                           A  2576    
0B0A9D 18 FE               A  2577    	JR	L_92
                           A  2578    ;  335						default:
0B0A9F                     A  2579    L_93:
                           A  2580    .LINE 335
                           A  2581    
                           A  2582    ;  336							state = recover
                           A  2583    .LINE 336
                           A  2584    
0B0A9F 01010000            A  2585    	LD	BC,1
0B0AA3 DD0FF3              A  2586    	LD	(IX+%FFFFFFF3),BC
0B0AA6 C3 C0 07 0B         A  2587    	JR	L_99
                           A  2588    ;  337					}
                           A  2589    ;  338				}
                           A  2590    ;  339			}		
                           A  2591    ;  340		}
                           A  2592    ;  341		else printf("\n\rUser abort\n\r");
0B0AAA                     A  2593    L_101:
                           A  2594    .LINE 341
                           A  2595    
0B0AAA 01 DC 11 0B         A  2596    	LD	BC,___print_uputch
0B0AAE ED43 04 20 0B       A  2597    	LD	(___print_xputch),BC
0B0AB3 01 14 24 0B         A  2598    	LD	BC,L__79
0B0AB7 C5                  A  2599    	PUSH	BC
0B0AB8 CD 6B 10 0B         A  2600    	CALL	___print_sendstring
0B0ABC C1                  A  2601    	POP	BC
                           A  2602    ;  342		
                           A  2603    ;  343		return 0;
                           A  2604    .LINE 343
                           A  2605    
0B0ABD AF                  A  2606    	XOR	A,A
                           A  2607    ;  344	}
0B0ABE                     A  2608    L_104:
                           A  2609    .LINE 344
                           A  2610    
0B0ABE DDF9                A  2611    	LD	SP,IX
0B0AC0 DDE1                A  2612    	POP	IX
0B0AC2 C9                  A  2613    	RET	
                           A  2614    
                           A  2615    
                           A  2616    ;**************************** _update_mos *****
                           A  2617    ;Name                         Addr/Register   S
                           A  2618    ;_lockFlashKeyRegister               IMPORT  --
                           A  2619    ;_enableFlashKeyRegister             IMPORT  --
                           A  2620    ;_reset                              IMPORT  --
                           A  2621    ;_putch                              IMPORT  --
                           A  2622    ;_delayms                            IMPORT  --
                           A  2623    ;_fastmemcpy                         IMPORT  --
                           A  2624    ;_getch                              IMPORT  --
                           A  2625    ;_crc32                              IMPORT  --
                           A  2626    ;__u_ultoa                           IMPORT  --
                           A  2627    ;___print_fmt                        IMPORT    
                           A  2628    ;_mos_fclose                         IMPORT  --
                           A  2629    ;_mos_fread                          IMPORT  --
                           A  2630    ;__u_itoa                            IMPORT  --
                           A  2631    ;___print_sendstring                 IMPORT  --
                           A  2632    ;___print_xputch                     IMPORT    
                           A  2633    ;___print_uputch                     IMPORT  --
                           A  2634    ;crcbackup                            IX-45    
                           A  2635    ;G_0                                  IX-41    
                           A  2636    ;crcexpected                          IX-38    
                           A  2637    ;lastpagebytes                        IX-34    
                           A  2638    ;file                                 IX-31    
                           A  2639    ;value                                IX-30    
                           A  2640    ;got                                  IX-29    
                           A  2641    ;crcresult                            IX-26    
                           A  2642    ;addressto                            IX-22    
                           A  2643    ;ptr                                  IX-19    
                           A  2644    ;pagemax                              IX-16    
                           A  2645    ;state                                IX-13    
                           A  2646    ;addressfrom                          IX-10    
                           A  2647    ;response                              IX-7    
                           A  2648    ;size                                  IX-6    
                           A  2649    ;counter                               IX-3    
                           A  2650    ;filename                              IX+6    
                           A  2651    
                           A  2652    
                           A  2653    ; Stack Frame Size: 54 (bytes)
                           A  2654    ;       Spill Code: 0 (instruction)
                           A  2655    
                           A  2656    
                           A  2657    .ENDFUNC "update_mos",344,"_update_mos"
                           A  2658    	SEGMENT STRSECT
0B21C6                     A  2659    L__37:
0B21C6 41676F6E 204D4F53   A  2660    	DB	"Agon MOS firmware upgrade utility v1.4
0B21CE 20666972 6D776172 
0B21D6 65207570 67726164 
0B21DE 65207574 696C6974 
0B21E6 79207631 2E34 
0B21EC 0A0D0A0D 00         A  2661    	DB	10,13,10,13,0
0B21F1                     A  2662    L__38:
0B21F1 0D                  A  2663    	DB	13
0B21F2 46696C65 2073697A   A  2664    	DB	"File size    : "
0B21FA 65202020 203A20 
0B2201 00                  A  2665    	DB	0
0B2202                     A  2666    L__39:
0B2202 20627974 65287329   A  2667    	DB	" byte(s)"
0B220A 00                  A  2668    	DB	0
0B220B                     A  2669    L__41:
0B220B 0D                  A  2670    	DB	13
0B220C 46696C65 2073697A   A  2671    	DB	"File size    : "
0B2214 65202020 203A20 
0B221B 00                  A  2672    	DB	0
0B221C                     A  2673    L__42:
0B221C 20627974 65287329   A  2674    	DB	" byte(s)"
0B2224 0A0D00              A  2675    	DB	10,13,0
0B2227                     A  2676    L__44:
0B2227 546F6F20 6C617267   A  2677    	DB	"Too large for 128KB flash - aborting"
0B222F 6520666F 72203132 
0B2237 384B4220 666C6173 
0B223F 68202D20 61626F72 
0B2247 74696E67 
0B224B 0D0A00              A  2678    	DB	13,10,0
0B224E                     A  2679    L__46:
0B224E 46696C65 20646F65   A  2680    	DB	"File does not contain valid MOS ez80 s
0B2256 73206E6F 7420636F 
0B225E 6E746169 6E207661 
0B2266 6C696420 4D4F5320 
0B226E 657A3830 20737461 
0B2276 72747570 20636F64 
0B227E 65 
0B227F 0D0A00              A  2681    	DB	13,10,0
0B2282                     A  2682    L__47:
0B2282 54657374 696E6720   A  2683    	DB	"Testing CRC32: 0x"
0B228A 43524333 323A2030 
0B2292 78 
0B2293 00                  A  2684    	DB	0
0B2294                     A  2685    L__48:
0B2294 0A0D00              A  2686    	DB	10,13,0
0B2297                     A  2687    L__49:
0B2297 43524333 32207265   A  2688    	DB	"CRC32 result : 0x"
0B229F 73756C74 203A2030 
0B22A7 78 
0B22A8 00                  A  2689    	DB	0
0B22A9                     A  2690    L__50:
0B22A9 0A0D00              A  2691    	DB	10,13,0
0B22AC                     A  2692    L__52:
0B22AC 0A0D                A  2693    	DB	10,13
0B22AE 4D69736D 61746368   A  2694    	DB	"Mismatch - aborting"
0B22B6 202D2061 626F7274 
0B22BE 696E67 
0B22C1 0A0D00              A  2695    	DB	10,13,0
0B22C4                     A  2696    L__53:
0B22C4 0A0D                A  2697    	DB	10,13
0B22C6 4F4B                A  2698    	DB	"OK"
0B22C8 0A0D0A0D 00         A  2699    	DB	10,13,10,13,0
0B22CD                     A  2700    L__54:
0B22CD 45726173 6520616E   A  2701    	DB	"Erase and program flash (y/n)? "
0B22D5 64207072 6F677261 
0B22DD 6D20666C 61736820 
0B22E5 28792F6E 293F20 
0B22EC 00                  A  2702    	DB	0
0B22ED                     A  2703    L__58:
0B22ED 0D0A                A  2704    	DB	13,10
0B22EF 4261636B 696E6720   A  2705    	DB	"Backing up existing firmware... "
0B22F7 75702065 78697374 
0B22FF 696E6720 6669726D 
0B2307 77617265 2E2E2E20 
0B230F 00                  A  2706    	DB	0
0B2310                     A  2707    L__60:
0B2310 0D0A00              A  2708    	DB	13,10,0
0B2313                     A  2709    L__61:
0B2313 0D                  A  2710    	DB	13
0B2314 52657365 7420696E   A  2711    	DB	"Reset in "
0B231C 20 
0B231D 00                  A  2712    	DB	0
0B231E                     A  2713    L__63:
0B231E 0D0A                A  2714    	DB	13,10
0B2320 45726173 696E6720   A  2715    	DB	"Erasing flash... "
0B2328 666C6173 682E2E2E 
0B2330 20 
0B2331 00                  A  2716    	DB	0
0B2332                     A  2717    L__66:
0B2332 0D0A                A  2718    	DB	13,10
0B2334 57726974 696E6720   A  2719    	DB	"Writing new firmware..."
0B233C 6E657720 6669726D 
0B2344 77617265 2E2E2E 
0B234B 0D0A00              A  2720    	DB	13,10,0
0B234E                     A  2721    L__68:
0B234E 0D                  A  2722    	DB	13
0B234F 57726974 696E6720   A  2723    	DB	"Writing flash page "
0B2357 666C6173 68207061 
0B235F 676520 
0B2362 00                  A  2724    	DB	0
0B2363                     A  2725    L__71:
0B2363 0D0A00              A  2726    	DB	13,10,0
0B2366                     A  2727    L__72:
0B2366 56657269 6679696E   A  2728    	DB	"Verifying flash checksum... "
0B236E 6720666C 61736820 
0B2376 63686563 6B73756D 
0B237E 2E2E2E20 
0B2382 00                  A  2729    	DB	0
0B2383                     A  2730    L__75:
0B2383 2D204F4B            A  2731    	DB	"- OK"
0B2387 0D0A00              A  2732    	DB	13,10,0
0B238A                     A  2733    L__77:
0B238A 0D0A                A  2734    	DB	13,10
0B238C 4572726F 72206F63   A  2735    	DB	"Error occured during flash write"
0B2394 63757265 64206475 
0B239C 72696E67 20666C61 
0B23A4 73682077 72697465 
0B23AC 0D0A                A  2736    	DB	13,10
0B23AE 41747465 6D707469   A  2737    	DB	"Attempting to flash backup firmware...
0B23B6 6E672074 6F20666C 
0B23BE 61736820 6261636B 
0B23C6 75702066 69726D77 
0B23CE 6172652E 2E2E 
0B23D4 0D0A00              A  2738    	DB	13,10,0
0B23D7                     A  2739    L__78:
0B23D7 0D0A                A  2740    	DB	13,10
0B23D9 4572726F 72206F63   A  2741    	DB	"Error occured during flash write"
0B23E1 63757265 64206475 
0B23E9 72696E67 20666C61 
0B23F1 73682077 72697465 
0B23F9 0D0A                A  2742    	DB	13,10
0B23FB 4261636B 75702072   A  2743    	DB	"Backup recovery failed"
0B2403 65636F76 65727920 
0B240B 6661696C 6564 
0B2411 0D0A00              A  2744    	DB	13,10,0
0B2414                     A  2745    L__79:
0B2414 0A0D                A  2746    	DB	10,13
0B2416 55736572 2061626F   A  2747    	DB	"User abort"
0B241E 7274 
0B2420 0A0D00              A  2748    	DB	10,13,0
                           A  2749    	SEGMENT CODE
                           A  2750    ;  345	
                           A  2751    ;  346	int main(int argc, char * argv[]) {
0B0AC3                     A  2752    _main:
                           A  2753    .DEFINE "_main"
                           A  2754    
                           A  2755    .VALUE _main
                           A  2756    
                           A  2757    .CLASS 2
                           A  2758    
                           A  2759    .TYPE 68
                           A  2760    
                           A  2761    .ENDEF
                           A  2762    
                           A  2763    .BEGFUNC "main",346,"_main"
                           A  2764    
                           A  2765    .LINE 346
                           A  2766    
                           A  2767    .DEFINE "argc"
                           A  2768    
                           A  2769    .CLASS 65
                           A  2770    
                           A  2771    .VALUE 6
                           A  2772    
                           A  2773    .TYPE 4
                           A  2774    
                           A  2775    .ENDEF
                           A  2776    
                           A  2777    .DEFINE "argv"
                           A  2778    
                           A  2779    .CLASS 65
                           A  2780    
                           A  2781    .VALUE 9
                           A  2782    
                           A  2783    .TYPE 290
                           A  2784    
                           A  2785    .ENDEF
                           A  2786    
0B0AC3 DDE5                A  2787    	PUSH	IX
0B0AC5 DD210000 00         A  2788    	LD	IX,0
0B0ACA DD39                A  2789    	ADD	IX,SP
                           A  2790    ;  347	
                           A  2791    ;  348		if(argc != 3) {
                           A  2792    .LINE 348
                           A  2793    
0B0ACC 01030000            A  2794    	LD	BC,3
0B0AD0 DD2706              A  2795    	LD	HL,(IX+%6)
0B0AD3 B7                  A  2796    	OR	A,A
0B0AD4 ED42                A  2797    	SBC	HL,BC
0B0AD6 28 09               A  2798    	JR	Z,L_110
                           A  2799    ;  349			usage();
                           A  2800    .LINE 349
                           A  2801    
0B0AD8 CD 06 03 0B         A  2802    	CALL	_usage
                           A  2803    ;  350			return 0;
                           A  2804    .LINE 350
                           A  2805    
0B0ADC B7                  A  2806    	OR	A,A
0B0ADD ED62                A  2807    	SBC	HL,HL
0B0ADF 18 6B               A  2808    	JR	L_111
                           A  2809    ;  351		}
0B0AE1                     A  2810    L_110:
                           A  2811    .LINE 351
                           A  2812    
                           A  2813    ;  352	
                           A  2814    ;  353		if(memcmp(argv[1], "mos", 3) == 0) 
                           A  2815    .LINE 353
                           A  2816    
0B0AE1 C5                  A  2817    	PUSH	BC
0B0AE2 01 23 24 0B         A  2818    	LD	BC,L__82
0B0AE6 C5                  A  2819    	PUSH	BC
0B0AE7 DD3109              A  2820    	LD	IY,(IX+%9)
0B0AEA ED2303              A  2821    	LEA	HL,IY+%3
0B0AED ED07                A  2822    	LD	BC,(HL)
0B0AEF C5                  A  2823    	PUSH	BC
0B0AF0 CD 6F 15 0B         A  2824    	CALL	_memcmp
0B0AF4 C1                  A  2825    	POP	BC
0B0AF5 C1                  A  2826    	POP	BC
0B0AF6 C1                  A  2827    	POP	BC
0B0AF7 CD 99 15 0B         A  2828    	CALL	__icmpzero
0B0AFB 20 14               A  2829    	JR	NZ,L_109
                           A  2830    ;  354			return update_mos(argv[2]);
                           A  2831    .LINE 354
                           A  2832    
0B0AFD DD3109              A  2833    	LD	IY,(IX+%9)
0B0B00 ED2306              A  2834    	LEA	HL,IY+%6
0B0B03 ED07                A  2835    	LD	BC,(HL)
0B0B05 C5                  A  2836    	PUSH	BC
0B0B06 CD 43 05 0B         A  2837    	CALL	_update_mos
0B0B0A C1                  A  2838    	POP	BC
0B0B0B B7ED62              A  2839    	UEXT	HL
0B0B0E 6F                  A  2840    	LD	L,A
0B0B0F 18 3B               A  2841    	JR	L_111
                           A  2842    ;  355		}
                           A  2843    ;  356		else {
0B0B11                     A  2844    L_109:
                           A  2845    .LINE 356
                           A  2846    
                           A  2847    ;  357			if(memcmp(argv[1], "vdp", 3) ==
                           A  2848    .LINE 357
                           A  2849    
0B0B11 01030000            A  2850    	LD	BC,3
0B0B15 C5                  A  2851    	PUSH	BC
0B0B16 01 27 24 0B         A  2852    	LD	BC,L__84
0B0B1A C5                  A  2853    	PUSH	BC
0B0B1B DD3109              A  2854    	LD	IY,(IX+%9)
0B0B1E ED2303              A  2855    	LEA	HL,IY+%3
0B0B21 ED07                A  2856    	LD	BC,(HL)
0B0B23 C5                  A  2857    	PUSH	BC
0B0B24 CD 6F 15 0B         A  2858    	CALL	_memcmp
0B0B28 C1                  A  2859    	POP	BC
0B0B29 C1                  A  2860    	POP	BC
0B0B2A C1                  A  2861    	POP	BC
0B0B2B CD 99 15 0B         A  2862    	CALL	__icmpzero
0B0B2F 20 14               A  2863    	JR	NZ,L_107
                           A  2864    ;  358				return update_vdp(argv[2]);
                           A  2865    .LINE 358
                           A  2866    
0B0B31 DD3109              A  2867    	LD	IY,(IX+%9)
0B0B34 ED2306              A  2868    	LEA	HL,IY+%6
0B0B37 ED07                A  2869    	LD	BC,(HL)
0B0B39 C5                  A  2870    	PUSH	BC
0B0B3A CD 2B 03 0B         A  2871    	CALL	_update_vdp
0B0B3E C1                  A  2872    	POP	BC
0B0B3F B7ED62              A  2873    	UEXT	HL
0B0B42 6F                  A  2874    	LD	L,A
0B0B43 18 07               A  2875    	JR	L_111
                           A  2876    ;  359			}
                           A  2877    ;  360			else {
0B0B45                     A  2878    L_107:
                           A  2879    .LINE 360
                           A  2880    
                           A  2881    ;  361				usage();
                           A  2882    .LINE 361
                           A  2883    
0B0B45 CD 06 03 0B         A  2884    	CALL	_usage
                           A  2885    ;  362				return 0;
                           A  2886    .LINE 362
                           A  2887    
0B0B49 B7                  A  2888    	OR	A,A
0B0B4A ED62                A  2889    	SBC	HL,HL
                           A  2890    ;  363			}
                           A  2891    ;  364		}
                           A  2892    ;  365	}
0B0B4C                     A  2893    L_111:
                           A  2894    .LINE 365
                           A  2895    
0B0B4C DDF9                A  2896    	LD	SP,IX
0B0B4E DDE1                A  2897    	POP	IX
0B0B50 C9                  A  2898    	RET	
                           A  2899    
                           A  2900    
                           A  2901    ;**************************** _main ***********
                           A  2902    ;Name                         Addr/Register   S
                           A  2903    ;_memcmp                             IMPORT  --
                           A  2904    ;argv                                  IX+9    
                           A  2905    ;argc                                  IX+6    
                           A  2906    
                           A  2907    
                           A  2908    ; Stack Frame Size: 12 (bytes)
                           A  2909    ;       Spill Code: 0 (instruction)
                           A  2910    
                           A  2911    
                           A  2912    .ENDFUNC "main",365,"_main"
                           A  2913    	SEGMENT STRSECT
0B2423                     A  2914    L__82:
0B2423 6D6F73              A  2915    	DB	"mos"
0B2426 00                  A  2916    	DB	0
0B2427                     A  2917    L__84:
0B2427 766470              A  2918    	DB	"vdp"
0B242A 00                  A  2919    	DB	0
                           A  2920    	XREF _memcmp:ROM
                           A  2921    	XREF _getFileSize:ROM
                           A  2922    	XREF _crc32_finalize:ROM
                           A  2923    	XREF _crc32_initialize:ROM
                           A  2924    	XREF _crc32:ROM
                           A  2925    	XREF _delayms:ROM
                           A  2926    	XREF _startVDPupdate:ROM
                           A  2927    	XREF _reset:ROM
                           A  2928    	XREF _fastmemcpy:ROM
                           A  2929    	XREF _lockFlashKeyRegister:ROM
                           A  2930    	XREF _enableFlashKeyRegister:ROM
                           A  2931    	XREF _mos_flseek:ROM
                           A  2932    	XREF _mos_fread:ROM
                           A  2933    	XREF _mos_fclose:ROM
                           A  2934    	XREF _mos_fopen:ROM
                           A  2935    	XREF _getsysvar_scrchar:ROM
                           A  2936    	XREF _getch:ROM
                           A  2937    	XREF __u_ultoa:ROM
                           A  2938    	XREF __u_itoa:ROM
                           A  2939    	XREF ___print_sendstring:ROM
                           A  2940    	XREF ___print_xputch:ROM
                           A  2941    	XREF ___print_uputch:ROM
                           A  2942    	XREF ___print_fmt:ROM
                           A  2943    	XREF __lcmpu:ROM
                           A  2944    	XREF __iand:ROM
                           A  2945    	XREF __stoiu:ROM
                           A  2946    	XREF __icmpzero:ROM
                           A  2947    	XREF __case8D:ROM
                           A  2948    	XREF __ishru_b:ROM
                           A  2949    	XREF __ishrs_b:ROM
                           A  2950    	XDEF _main
                           A  2951    	XDEF _update_mos
                           A  2952    	XDEF _update_vdp
                           A  2953    	XDEF _usage
                           A  2954    	XDEF _print_version
                           A  2955    	XDEF _containsESP32Header
                           A  2956    	XDEF _esp32_magicnumbers
                           A  2957    	XDEF _containsMosHeader
                           A  2958    	XDEF _mos_magicnumbers
                           A  2959    	XDEF _vdp_ota_present
                           A  2960    	XDEF _getCharAt
                           A  2961    	XDEF _putch
                           A  2962    	XDEF _errno
                           A  2963    	END


Errors: 0
Warnings: 0
Lines Assembled: 2964
