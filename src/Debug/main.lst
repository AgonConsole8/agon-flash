Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED02-Nov-23     10:06:31     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",51
                           A   144    .DEFINE "clock"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 15
                           A   148    .ENDEF
                           A   149    .DEFINE "vpd_protocol_flags"
                           A   150    .VALUE 4
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "keyascii"
                           A   155    .VALUE 5
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "keymods"
                           A   160    .VALUE 6
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "cursorX"
                           A   165    .VALUE 7
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "cursorY"
                           A   170    .VALUE 8
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "scrchar"
                           A   175    .VALUE 9
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "scrpixel"
                           A   180    .VALUE 10
                           A   181    .CLASS 8
                           A   182    .TYPE 14
                           A   183    .ENDEF
                           A   184    .DEFINE "audioChannel"
                           A   185    .VALUE 13
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "audioSuccess"
                           A   190    .VALUE 14
                           A   191    .CLASS 8
                           A   192    .TYPE 12
                           A   193    .ENDEF
                           A   194    .DEFINE "scrwidth"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 13
                           A   198    .ENDEF
                           A   199    .DEFINE "scrheight"
                           A   200    .VALUE 17
                           A   201    .CLASS 8
                           A   202    .TYPE 13
                           A   203    .ENDEF
                           A   204    .DEFINE "scrcols"
                           A   205    .VALUE 19
                           A   206    .CLASS 8
                           A   207    .TYPE 12
                           A   208    .ENDEF
                           A   209    .DEFINE "scrrows"
                           A   210    .VALUE 20
                           A   211    .CLASS 8
                           A   212    .TYPE 12
                           A   213    .ENDEF
                           A   214    .DEFINE "scrcolours"
                           A   215    .VALUE 21
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "scrpixelIndex"
                           A   220    .VALUE 22
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "keycode"
                           A   225    .VALUE 23
                           A   226    .CLASS 8
                           A   227    .TYPE 12
                           A   228    .ENDEF
                           A   229    .DEFINE "keydown"
                           A   230    .VALUE 24
                           A   231    .CLASS 8
                           A   232    .TYPE 12
                           A   233    .ENDEF
                           A   234    .DEFINE "keycount"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 12
                           A   238    .ENDEF
                           A   239    .DEFINE "rtc"
                           A   240    .VALUE 26
                           A   241    .CLASS 8
                           A   242    .DIM 6
                           A   243    .TYPE 108
                           A   244    .ENDEF
                           A   245    .DEFINE "rtc_spare"
                           A   246    .VALUE 32
                           A   247    .CLASS 8
                           A   248    .DIM 2
                           A   249    .TYPE 108
                           A   250    .ENDEF
                           A   251    .DEFINE "keydelay"
                           A   252    .VALUE 34
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .DEFINE "keyrate"
                           A   257    .VALUE 36
                           A   258    .CLASS 8
                           A   259    .TYPE 13
                           A   260    .ENDEF
                           A   261    .DEFINE "keyled"
                           A   262    .VALUE 38
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "scrmode"
                           A   267    .VALUE 39
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "rtc_enable"
                           A   272    .VALUE 40
                           A   273    .CLASS 8
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    .DEFINE "mouseX"
                           A   277    .VALUE 41
                           A   278    .CLASS 8
                           A   279    .TYPE 13
                           A   280    .ENDEF
                           A   281    .DEFINE "mouseY"
                           A   282    .VALUE 43
                           A   283    .CLASS 8
                           A   284    .TYPE 13
                           A   285    .ENDEF
                           A   286    .DEFINE "mouseButtons"
                           A   287    .VALUE 45
                           A   288    .CLASS 8
                           A   289    .TYPE 12
                           A   290    .ENDEF
                           A   291    .DEFINE "mouseWheel"
                           A   292    .VALUE 46
                           A   293    .CLASS 8
                           A   294    .TYPE 12
                           A   295    .ENDEF
                           A   296    .DEFINE "mouseXDelta"
                           A   297    .VALUE 47
                           A   298    .CLASS 8
                           A   299    .TYPE 13
                           A   300    .ENDEF
                           A   301    .DEFINE "mouseYDelta"
                           A   302    .VALUE 49
                           A   303    .CLASS 8
                           A   304    .TYPE 13
                           A   305    .ENDEF
                           A   306    .ENDREC "NONAME3"
                           A   307    .BEGREC "NONAME4",8
                           A   308    .DEFINE "baudRate"
                           A   309    .VALUE 0
                           A   310    .CLASS 8
                           A   311    .TYPE 4
                           A   312    .ENDEF
                           A   313    .DEFINE "dataBits"
                           A   314    .VALUE 3
                           A   315    .CLASS 8
                           A   316    .TYPE 12
                           A   317    .ENDEF
                           A   318    .DEFINE "stopBits"
                           A   319    .VALUE 4
                           A   320    .CLASS 8
                           A   321    .TYPE 12
                           A   322    .ENDEF
                           A   323    .DEFINE "parity"
                           A   324    .VALUE 5
                           A   325    .CLASS 8
                           A   326    .TYPE 12
                           A   327    .ENDEF
                           A   328    .DEFINE "flowcontrol"
                           A   329    .VALUE 6
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "eir"
                           A   334    .VALUE 7
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .ENDREC "NONAME4"
                           A   339    .BEGREC "NONAME5",15
                           A   340    .DEFINE "fs"
                           A   341    .VALUE 0
                           A   342    .CLASS 8
                           A   343    .TYPE 46
                           A   344    .ENDEF
                           A   345    .DEFINE "id"
                           A   346    .VALUE 3
                           A   347    .CLASS 8
                           A   348    .TYPE 13
                           A   349    .ENDEF
                           A   350    .DEFINE "attr"
                           A   351    .VALUE 5
                           A   352    .CLASS 8
                           A   353    .TYPE 12
                           A   354    .ENDEF
                           A   355    .DEFINE "stat"
                           A   356    .VALUE 6
                           A   357    .CLASS 8
                           A   358    .TYPE 12
                           A   359    .ENDEF
                           A   360    .DEFINE "sclust"
                           A   361    .VALUE 7
                           A   362    .CLASS 8
                           A   363    .TYPE 15
                           A   364    .ENDEF
                           A   365    .DEFINE "objsize"
                           A   366    .VALUE 11
                           A   367    .CLASS 8
                           A   368    .TYPE 15
                           A   369    .ENDEF
                           A   370    .ENDREC "NONAME5"
                           A   371    .BEGREC "NONAME6",36
                           A   372    .DEFINE "obj"
                           A   373    .VALUE 0
                           A   374    .CLASS 8
                           A   375    .TAG "NONAME5"
                           A   376    .TYPE 8
                           A   377    .ENDEF
                           A   378    .DEFINE "flag"
                           A   379    .VALUE 15
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .DEFINE "err"
                           A   384    .VALUE 16
                           A   385    .CLASS 8
                           A   386    .TYPE 12
                           A   387    .ENDEF
                           A   388    .DEFINE "fptr"
                           A   389    .VALUE 17
                           A   390    .CLASS 8
                           A   391    .TYPE 15
                           A   392    .ENDEF
                           A   393    .DEFINE "clust"
                           A   394    .VALUE 21
                           A   395    .CLASS 8
                           A   396    .TYPE 15
                           A   397    .ENDEF
                           A   398    .DEFINE "sect"
                           A   399    .VALUE 25
                           A   400    .CLASS 8
                           A   401    .TYPE 15
                           A   402    .ENDEF
                           A   403    .DEFINE "dir_sect"
                           A   404    .VALUE 29
                           A   405    .CLASS 8
                           A   406    .TYPE 15
                           A   407    .ENDEF
                           A   408    .DEFINE "dir_ptr"
                           A   409    .VALUE 33
                           A   410    .CLASS 8
                           A   411    .TYPE 46
                           A   412    .ENDEF
                           A   413    .ENDREC "NONAME6"
                           A   414    	SEGMENT BSS
0B2C7D                     A   415    _errno:
0B2C7D                     A   416    	DS	3
                           A   417    .DEFINE "errno"
                           A   418    .ALIAS "_errno"
                           A   419    .CLASS 83
                           A   420    .VALUE _errno
                           A   421    .TYPE 4
                           A   422    .ENDEF
                           A   423    	SEGMENT DATA
0B223A                     A   424    _flashmos:
0B223A 00                  A   425    	DB	0
                           A   426    .DEFINE "flashmos"
                           A   427    .ALIAS "_flashmos"
                           A   428    .CLASS 69
                           A   429    .VALUE _flashmos
                           A   430    .TYPE 12
                           A   431    .ENDEF
                           A   432    	SEGMENT BSS
0B2C80                     A   433    _mosfilename:
0B2C80                     A   434    	DS	256
                           A   435    .DEFINE "mosfilename"
                           A   436    .ALIAS "_mosfilename"
                           A   437    .CLASS 83
                           A   438    .VALUE _mosfilename
                           A   439    .DIM 256
                           A   440    .TYPE 98
                           A   441    .ENDEF
0B2D80                     A   442    _moscrc:
0B2D80                     A   443    	DS	4*1
                           A   444    .DEFINE "moscrc"
                           A   445    .ALIAS "_moscrc"
                           A   446    .CLASS 83
                           A   447    .VALUE _moscrc
                           A   448    .TYPE 15
                           A   449    .ENDEF
                           A   450    	SEGMENT DATA
0B223B                     A   451    _flashvdp:
0B223B 00                  A   452    	DB	0
                           A   453    .DEFINE "flashvdp"
                           A   454    .ALIAS "_flashvdp"
                           A   455    .CLASS 69
                           A   456    .VALUE _flashvdp
                           A   457    .TYPE 12
                           A   458    .ENDEF
                           A   459    	SEGMENT BSS
0B2D84                     A   460    _vdpfilename:
0B2D84                     A   461    	DS	256
                           A   462    .DEFINE "vdpfilename"
                           A   463    .ALIAS "_vdpfilename"
                           A   464    .CLASS 83
                           A   465    .VALUE _vdpfilename
                           A   466    .DIM 256
                           A   467    .TYPE 98
                           A   468    .ENDEF
0B2E84                     A   469    _vdpcrc:
0B2E84                     A   470    	DS	4*1
                           A   471    .DEFINE "vdpcrc"
                           A   472    .ALIAS "_vdpcrc"
                           A   473    .CLASS 83
                           A   474    .VALUE _vdpcrc
                           A   475    .TYPE 15
                           A   476    .ENDEF
                           A   477    	SEGMENT DATA
0B223C                     A   478    _optbatch:
0B223C 00                  A   479    	DB	0
                           A   480    .DEFINE "optbatch"
                           A   481    .ALIAS "_optbatch"
                           A   482    .CLASS 69
                           A   483    .VALUE _optbatch
                           A   484    .TYPE 12
                           A   485    .ENDEF
0B223D                     A   486    _optforce:
0B223D 00                  A   487    	DB	0
                           A   488    .DEFINE "optforce"
                           A   489    .ALIAS "_optforce"
                           A   490    .CLASS 69
                           A   491    .VALUE _optforce
                           A   492    .TYPE 12
                           A   493    .ENDEF
                           A   494    ;    1	/*
                           A   495    ;    2	 * Title:			Agon firmware upgra
                           A   496    ;    3	 * Author:			Jeroen Venema
                           A   497    ;    4	 * Created:			17/12/2022
                           A   498    ;    5	 * Last Updated:	14/10/2023
                           A   499    ;    6	 * 
                           A   500    ;    7	 * Modinfo:
                           A   501    ;    8	 * 17/12/2022:		Initial version
                           A   502    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   503    ;   10	 *                  Sends cls just befo
                           A   504    ;   11	 * 07/06/2023:		Included faster crc
                           A   505    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   506    ;   13	 */
                           A   507    ;   14	
                           A   508    ;   15	#include <ez80.h>
                           A   509    ;   16	#include <stdio.h>
                           A   510    ;   17	#include <stdlib.h>
                           A   511    ;   18	#include <ERRNO.H>
                           A   512    ;   19	#include <ctype.h>
                           A   513    ;   20	#include "mos-interface.h"
                           A   514    ;   21	#include "flash.h"
                           A   515    ;   22	#include "agontimer.h"
                           A   516    ;   23	#include "crc32.h"
                           A   517    ;   24	#include "filesize.h"
                           A   518    ;   25	#include "./stdint.h"
                           A   519    ;   26	#include <string.h>
                           A   520    ;   27	
                           A   521    ;   28	#define UNLOCKMATCHLENGTH 9
                           A   522    ;   29	#define EXIT_FILENOTFOUND	4
                           A   523    ;   30	#define EXIT_INVALIDPARAMETER	19
                           A   524    ;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
                           A   525    ;   32	#define DEFAULT_VDPFIRMWARE	"firmware.b
                           A   526    ;   33	
                           A   527    ;   34	#define CMDUNKNOWN	0
                           A   528    ;   35	#define CMDALL		1
                           A   529    ;   36	#define CMDMOS		2
                           A   530    ;   37	#define CMDVDP		3
                           A   531    ;   38	#define CMDFORCE	4
                           A   532    ;   39	#define CMDBATCH	5
                           A   533    ;   40	
                           A   534    ;   41	int errno; // needed by standard librar
                           A   535    ;   42	enum states{firmware,retry,systemreset}
                           A   536    ;   43	
                           A   537    ;   44	bool		flashmos = false;
                           A   538    ;   45	char		mosfilename[256];
                           A   539    ;   46	uint32_t	moscrc;
                           A   540    ;   47	bool		flashvdp = false;
                           A   541    ;   48	char		vdpfilename[256];
                           A   542    ;   49	uint32_t	vdpcrc;
                           A   543    ;   50	bool		optbatch = false;
                           A   544    ;   51	bool		optforce = false;		// 
                           A   545    	SEGMENT CODE
                           A   546    ;   52	
                           A   547    ;   53	// separate putch function that doesn't
                           A   548    ;   54	// UART0 initialization done by MOS fir
                           A   549    ;   55	// This utility doesn't run without MOS
                           A   550    ;   56	int putch(int c)
                           A   551    ;   57	{
0B00E5                     A   552    _putch:
                           A   553    .DEFINE "_putch"
                           A   554    
                           A   555    .VALUE _putch
                           A   556    
                           A   557    .CLASS 2
                           A   558    
                           A   559    .TYPE 68
                           A   560    
                           A   561    .ENDEF
                           A   562    
                           A   563    .BEGFUNC "putch",57,"_putch"
                           A   564    
                           A   565    .LINE 57
                           A   566    
                           A   567    .DEFINE "c"
                           A   568    
                           A   569    .CLASS 65
                           A   570    
                           A   571    .VALUE 6
                           A   572    
                           A   573    .TYPE 4
                           A   574    
0B00E5 DDE5                A   575    	PUSH	IX
0B00E7 DD210000 00         A   576    	LD	IX,0
0B00EC DD39                A   577    	ADD	IX,SP
                           A   578    .ENDEF
                           A   579    
                           A   580    ;   58		UINT8 lsr,temt;
                           A   581    ;   59		
                           A   582    ;   60		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   583    L_1:
                           A   584    .LINE 60
                           A   585    
0B00EE ED38C5              A   586    	IN0	A,(197)
0B00F1 E640                A   587    	AND	A,%40
0B00F3 B7ED62              A   588    	UEXT	HL
0B00F6 6F                  A   589    	LD	L,A
0B00F7 CD 1C 1C 0B         A   590    	CALL	__icmpzero
0B00FB 28 F1               A   591    	JR	Z,L_1
                           A   592    ;   61		UART0_THR = c;
                           A   593    .LINE 61
                           A   594    
0B00FD DD7E06              A   595    	LD	A,(IX+%6)
0B0100 ED39C0              A   596    	OUT0	(192),A
                           A   597    ;   62		return c;
                           A   598    .LINE 62
                           A   599    
0B0103 DD2706              A   600    	LD	HL,(IX+%6)
                           A   601    ;   63	}
                           A   602    .LINE 63
                           A   603    
0B0106 DDF9                A   604    	LD	SP,IX
0B0108 DDE1                A   605    	POP	IX
0B010A C9                  A   606    	RET	
                           A   607    
                           A   608    
                           A   609    ;**************************** _putch **********
                           A   610    ;Name                         Addr/Register   S
                           A   611    ;c                                     IX+6    
                           A   612    
                           A   613    
                           A   614    ; Stack Frame Size: 9 (bytes)
                           A   615    ;       Spill Code: 0 (instruction)
                           A   616    
                           A   617    
                           A   618    .ENDFUNC "putch",63,"_putch"
                           A   619    ;   64	
                           A   620    ;   65	void beep(unsigned int number) {
0B010B                     A   621    _beep:
                           A   622    .DEFINE "_beep"
                           A   623    
                           A   624    .VALUE _beep
                           A   625    
                           A   626    .CLASS 2
                           A   627    
                           A   628    .TYPE 65
                           A   629    
                           A   630    .ENDEF
                           A   631    
                           A   632    .BEGFUNC "beep",65,"_beep"
                           A   633    
                           A   634    .LINE 65
                           A   635    
                           A   636    .DEFINE "number"
                           A   637    
                           A   638    .CLASS 65
                           A   639    
                           A   640    .VALUE 6
                           A   641    
                           A   642    .TYPE 14
                           A   643    
                           A   644    .ENDEF
                           A   645    
0B010B DDE5                A   646    	PUSH	IX
0B010D DD210000 00         A   647    	LD	IX,0
0B0112 DD39                A   648    	ADD	IX,SP
                           A   649    ;   66		while(number--) {
                           A   650    .LINE 66
                           A   651    
0B0114 18 14               A   652    	JR	L_5
0B0116                     A   653    L_6:
                           A   654    ;   67			putch(7);
                           A   655    .LINE 67
                           A   656    
0B0116 01070000            A   657    	LD	BC,7
0B011A C5                  A   658    	PUSH	BC
0B011B CD E5 00 0B         A   659    	CALL	_putch
0B011F C1                  A   660    	POP	BC
                           A   661    ;   68			delayms(250);
                           A   662    .LINE 68
                           A   663    
0B0120 01FA0000            A   664    	LD	BC,250
0B0124 C5                  A   665    	PUSH	BC
0B0125 CD 8B 13 0B         A   666    	CALL	_delayms
0B0129 C1                  A   667    	POP	BC
                           A   668    ;   69		}
0B012A                     A   669    L_5:
                           A   670    .LINE 69
                           A   671    
0B012A DD2706              A   672    	LD	HL,(IX+%6)
0B012D DD3106              A   673    	LD	IY,(IX+%6)
0B0130 ED33FF              A   674    	LEA	IY,IY+%FFFFFFFF
0B0133 DD3E06              A   675    	LD	(IX+%6),IY
0B0136 CD 1C 1C 0B         A   676    	CALL	__icmpzero
0B013A 20 DA               A   677    	JR	NZ,L_6
                           A   678    ;   70	}
                           A   679    .LINE 70
                           A   680    
0B013C DDF9                A   681    	LD	SP,IX
0B013E DDE1                A   682    	POP	IX
0B0140 C9                  A   683    	RET	
                           A   684    
                           A   685    
                           A   686    ;**************************** _beep ***********
                           A   687    ;Name                         Addr/Register   S
                           A   688    ;_delayms                            IMPORT  --
                           A   689    ;_putch                              IMPORT  --
                           A   690    ;number                                IX+6    
                           A   691    
                           A   692    
                           A   693    ; Stack Frame Size: 9 (bytes)
                           A   694    ;       Spill Code: 0 (instruction)
                           A   695    
                           A   696    
                           A   697    .ENDFUNC "beep",70,"_beep"
                           A   698    ;   71	
                           A   699    ;   72	uint8_t getCharAt(uint16_t x, uint16_t 
0B0141                     A   700    _getCharAt:
                           A   701    .DEFINE "_getCharAt"
                           A   702    
                           A   703    .VALUE _getCharAt
                           A   704    
                           A   705    .CLASS 2
                           A   706    
                           A   707    .TYPE 76
                           A   708    
                           A   709    .ENDEF
                           A   710    
                           A   711    .BEGFUNC "getCharAt",72,"_getCharAt"
                           A   712    
                           A   713    .LINE 72
                           A   714    
                           A   715    .DEFINE "x"
                           A   716    
                           A   717    .CLASS 65
                           A   718    
                           A   719    .VALUE 6
                           A   720    
                           A   721    .TYPE 13
                           A   722    
                           A   723    .ENDEF
                           A   724    
                           A   725    .DEFINE "y"
                           A   726    
                           A   727    .CLASS 65
                           A   728    
                           A   729    .VALUE 9
                           A   730    
                           A   731    .TYPE 13
                           A   732    
                           A   733    .ENDEF
                           A   734    
                           A   735    .DEFINE "sysvars"
                           A   736    
                           A   737    .CLASS 65
                           A   738    
                           A   739    .VALUE -3
                           A   740    
                           A   741    .TAG "NONAME3"
                           A   742    
                           A   743    .TYPE 40
                           A   744    
                           A   745    .ENDEF
                           A   746    
0B0141 DDE5                A   747    	PUSH	IX
0B0143 DD210000 00         A   748    	LD	IX,0
0B0148 DD39                A   749    	ADD	IX,SP
0B014A C5                  A   750    	PUSH	BC
                           A   751    ;   73		sysvar_t *sysvars = getsysvars();
                           A   752    .LINE 73
                           A   753    
0B014B CD AF 11 0B         A   754    	CALL	_getsysvars
0B014F DD2FFD              A   755    	LD	(IX+%FFFFFFFD),HL
                           A   756    ;   74		delayms(20);
                           A   757    .LINE 74
                           A   758    
0B0152 01140000            A   759    	LD	BC,20
0B0156 C5                  A   760    	PUSH	BC
0B0157 CD 8B 13 0B         A   761    	CALL	_delayms
0B015B C1                  A   762    	POP	BC
                           A   763    ;   75		putch(23);
                           A   764    .LINE 75
                           A   765    
0B015C 01170000            A   766    	LD	BC,23
0B0160 C5                  A   767    	PUSH	BC
0B0161 CD E5 00 0B         A   768    	CALL	_putch
0B0165 C1                  A   769    	POP	BC
                           A   770    ;   76		putch(0);
                           A   771    .LINE 76
                           A   772    
0B0166 01000000            A   773    	LD	BC,0
0B016A C5                  A   774    	PUSH	BC
0B016B CD E5 00 0B         A   775    	CALL	_putch
0B016F C1                  A   776    	POP	BC
                           A   777    ;   77		putch(131);
                           A   778    .LINE 77
                           A   779    
0B0170 01830000            A   780    	LD	BC,131
0B0174 C5                  A   781    	PUSH	BC
0B0175 CD E5 00 0B         A   782    	CALL	_putch
0B0179 C1                  A   783    	POP	BC
                           A   784    ;   78		putch(x & 0xFF);
                           A   785    .LINE 78
                           A   786    
0B017A DD0706              A   787    	LD	BC,(IX+%6)
0B017D CD 59 18 0B         A   788    	CALL	__stoiu
0B0181 7D                  A   789    	LD	A,L
0B0182 B7ED62              A   790    	UEXT	HL
0B0185 6F                  A   791    	LD	L,A
0B0186 E5                  A   792    	PUSH	HL
0B0187 CD E5 00 0B         A   793    	CALL	_putch
0B018B C1                  A   794    	POP	BC
                           A   795    ;   79		putch((x >> 8) & 0xFF);
                           A   796    .LINE 79
                           A   797    
0B018C DD0706              A   798    	LD	BC,(IX+%6)
0B018F CD 59 18 0B         A   799    	CALL	__stoiu
0B0193 3E08                A   800    	LD	A,%8
0B0195 CD 8E 16 0B         A   801    	CALL	__ishrs_b
0B0199 7D                  A   802    	LD	A,L
0B019A B7ED62              A   803    	UEXT	HL
0B019D 6F                  A   804    	LD	L,A
0B019E E5                  A   805    	PUSH	HL
0B019F CD E5 00 0B         A   806    	CALL	_putch
0B01A3 C1                  A   807    	POP	BC
                           A   808    ;   80		putch(y & 0xFF);
                           A   809    .LINE 80
                           A   810    
0B01A4 DD0709              A   811    	LD	BC,(IX+%9)
0B01A7 CD 59 18 0B         A   812    	CALL	__stoiu
0B01AB 7D                  A   813    	LD	A,L
0B01AC B7ED62              A   814    	UEXT	HL
0B01AF 6F                  A   815    	LD	L,A
0B01B0 E5                  A   816    	PUSH	HL
0B01B1 CD E5 00 0B         A   817    	CALL	_putch
0B01B5 C1                  A   818    	POP	BC
                           A   819    ;   81		putch((y >> 8) & 0xFF);
                           A   820    .LINE 81
                           A   821    
0B01B6 DD0709              A   822    	LD	BC,(IX+%9)
0B01B9 CD 59 18 0B         A   823    	CALL	__stoiu
0B01BD 3E08                A   824    	LD	A,%8
0B01BF CD 8E 16 0B         A   825    	CALL	__ishrs_b
0B01C3 7D                  A   826    	LD	A,L
0B01C4 B7ED62              A   827    	UEXT	HL
0B01C7 6F                  A   828    	LD	L,A
0B01C8 E5                  A   829    	PUSH	HL
0B01C9 CD E5 00 0B         A   830    	CALL	_putch
0B01CD C1                  A   831    	POP	BC
                           A   832    ;   82		delayms(100);
                           A   833    .LINE 82
                           A   834    
0B01CE 01640000            A   835    	LD	BC,100
0B01D2 C5                  A   836    	PUSH	BC
0B01D3 CD 8B 13 0B         A   837    	CALL	_delayms
0B01D7 C1                  A   838    	POP	BC
                           A   839    ;   83		return sysvars->scrchar;
                           A   840    .LINE 83
                           A   841    
0B01D8 DD31FD              A   842    	LD	IY,(IX+%FFFFFFFD)
0B01DB FD7E09              A   843    	LD	A,(IY+%9)
                           A   844    ;   84	}
                           A   845    .LINE 84
                           A   846    
0B01DE DDF9                A   847    	LD	SP,IX
0B01E0 DDE1                A   848    	POP	IX
0B01E2 C9                  A   849    	RET	
                           A   850    
                           A   851    
                           A   852    ;**************************** _getCharAt ******
                           A   853    ;Name                         Addr/Register   S
                           A   854    ;_putch                              IMPORT  --
                           A   855    ;_delayms                            IMPORT  --
                           A   856    ;_getsysvars                         IMPORT  --
                           A   857    ;sysvars                               IX-3    
                           A   858    ;y                                     IX+9    
                           A   859    ;x                                     IX+6    
                           A   860    
                           A   861    
                           A   862    ; Stack Frame Size: 15 (bytes)
                           A   863    ;       Spill Code: 0 (instruction)
                           A   864    
                           A   865    
                           A   866    .ENDFUNC "getCharAt",84,"_getCharAt"
                           A   867    ;   85	
                           A   868    ;   86	bool vdp_ota_present(void) {
0B01E3                     A   869    _vdp_ota_present:
                           A   870    .DEFINE "_vdp_ota_present"
                           A   871    
                           A   872    .VALUE _vdp_ota_present
                           A   873    
                           A   874    .CLASS 2
                           A   875    
                           A   876    .TYPE 76
                           A   877    
                           A   878    .ENDEF
                           A   879    
                           A   880    .BEGFUNC "vdp_ota_present",86,"_vdp_ota_present
                           A   881    
                           A   882    .LINE 86
                           A   883    
                           A   884    .DEFINE "n"
                           A   885    
                           A   886    .CLASS 65
                           A   887    
                           A   888    .VALUE -2
                           A   889    
                           A   890    .TYPE 13
                           A   891    
                           A   892    .ENDEF
                           A   893    
                           A   894    .DEFINE "test"
                           A   895    
                           A   896    .CLASS 65
                           A   897    
                           A   898    .VALUE -11
                           A   899    
                           A   900    .DIM 9
                           A   901    
                           A   902    .TYPE 98
                           A   903    
                           A   904    .ENDEF
                           A   905    
0B01E3 DDE5                A   906    	PUSH	IX
0B01E5 DD210000 00         A   907    	LD	IX,0
0B01EA DD39                A   908    	ADD	IX,SP
0B01EC ED22F5              A   909    	LEA	HL,IX+%FFFFFFF5
0B01EF F9                  A   910    	LD	SP,HL
                           A   911    ;   87		char test[UNLOCKMATCHLENGTH];
                           A   912    ;   88		uint16_t n;
                           A   913    ;   89	
                           A   914    ;   90		putch(23);
                           A   915    .LINE 90
                           A   916    
0B01F0 01170000            A   917    	LD	BC,23
0B01F4 C5                  A   918    	PUSH	BC
0B01F5 CD E5 00 0B         A   919    	CALL	_putch
0B01F9 C1                  A   920    	POP	BC
                           A   921    ;   91		putch(0);
                           A   922    .LINE 91
                           A   923    
0B01FA 01000000            A   924    	LD	BC,0
0B01FE C5                  A   925    	PUSH	BC
0B01FF CD E5 00 0B         A   926    	CALL	_putch
0B0203 C1                  A   927    	POP	BC
                           A   928    ;   92		putch(0xA1);
                           A   929    .LINE 92
                           A   930    
0B0204 01A10000            A   931    	LD	BC,161
0B0208 C5                  A   932    	PUSH	BC
0B0209 CD E5 00 0B         A   933    	CALL	_putch
0B020D C1                  A   934    	POP	BC
                           A   935    ;   93		putch(0);
                           A   936    .LINE 93
                           A   937    
0B020E 01000000            A   938    	LD	BC,0
0B0212 C5                  A   939    	PUSH	BC
0B0213 CD E5 00 0B         A   940    	CALL	_putch
0B0217 C1                  A   941    	POP	BC
                           A   942    ;   94		printf("unlock");
                           A   943    .LINE 94
                           A   944    
0B0218 01 5F 18 0B         A   945    	LD	BC,___print_uputch
0B021C ED43 04 28 0B       A   946    	LD	(___print_xputch),BC
0B0221 01 87 28 0B         A   947    	LD	BC,L__5
0B0225 C5                  A   948    	PUSH	BC
0B0226 CD EE 16 0B         A   949    	CALL	___print_sendstring
0B022A C1                  A   950    	POP	BC
                           A   951    ;   95	
                           A   952    ;   96		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   953    .LINE 96
                           A   954    
0B022B DD36FE00            A   955    	LD	(IX+%FFFFFFFE),%0
0B022F DD36FF00            A   956    	LD	(IX+%FFFFFFFF),%0
0B0233 18 2A               A   957    	JR	L_12
0B0235                     A   958    L_10:
0B0235 01030000            A   959    	LD	BC,3
0B0239 C5                  A   960    	PUSH	BC
0B023A DD31FE              A   961    	LD	IY,(IX+%FFFFFFFE)
0B023D ED0308              A   962    	LEA	BC,IY+%8
0B0240 C5                  A   963    	PUSH	BC
0B0241 CD 41 01 0B         A   964    	CALL	_getCharAt
0B0245 C1                  A   965    	POP	BC
0B0246 C1                  A   966    	POP	BC
0B0247 DD07FE              A   967    	LD	BC,(IX+%FFFFFFFE)
0B024A CD 59 18 0B         A   968    	CALL	__stoiu
0B024E E5C1                A   969    	LD	BC,HL
0B0250 ED22F5              A   970    	LEA	HL,IX+%FFFFFFF5
0B0253 09                  A   971    	ADD	HL,BC
0B0254 77                  A   972    	LD	(HL),A
0B0255 DD27FE              A   973    	LD	HL,(IX+%FFFFFFFE)
0B0258 23                  A   974    	INC	HL
0B0259 DD75FE              A   975    	LD	(IX+%FFFFFFFE),L
0B025C DD74FF              A   976    	LD	(IX+%FFFFFFFF),H
0B025F                     A   977    L_12:
0B025F 49010A00            A   978    	LD.LIS	BC,10
0B0263 DD27FE              A   979    	LD	HL,(IX+%FFFFFFFE)
0B0266 B7                  A   980    	OR	A,A
0B0267 40ED42              A   981    	SBC.SIS	HL,BC
0B026A 38 C9               A   982    	JR	C,L_10
                           A   983    ;   97		// 3 - line on-screen
                           A   984    ;   98		if(memcmp(test, "unlocked!",UNLOCKM
                           A   985    .LINE 98
                           A   986    
0B026C 01090000            A   987    	LD	BC,9
0B0270 C5                  A   988    	PUSH	BC
0B0271 01 8E 28 0B         A   989    	LD	BC,L__7
0B0275 C5                  A   990    	PUSH	BC
0B0276 ED65F5              A   991    	PEA	IX+%FFFFFFF5
0B0279 CD F2 1B 0B         A   992    	CALL	_memcmp
0B027D C1                  A   993    	POP	BC
0B027E C1                  A   994    	POP	BC
0B027F C1                  A   995    	POP	BC
0B0280 CD 1C 1C 0B         A   996    	CALL	__icmpzero
0B0284 20 04               A   997    	JR	NZ,L_14
0B0286 3E01                A   998    	LD	A,%1
0B0288 18 01               A   999    	JR	L_16
                           A  1000    ;   99		else return false;
0B028A                     A  1001    L_14:
                           A  1002    .LINE 99
                           A  1003    
0B028A AF                  A  1004    	XOR	A,A
                           A  1005    ;  100	}
0B028B                     A  1006    L_16:
                           A  1007    .LINE 100
                           A  1008    
0B028B DDF9                A  1009    	LD	SP,IX
0B028D DDE1                A  1010    	POP	IX
0B028F C9                  A  1011    	RET	
                           A  1012    
                           A  1013    
                           A  1014    ;**************************** _vdp_ota_present 
                           A  1015    ;Name                         Addr/Register   S
                           A  1016    ;_memcmp                             IMPORT  --
                           A  1017    ;___print_sendstring                 IMPORT  --
                           A  1018    ;___print_xputch                     IMPORT    
                           A  1019    ;___print_uputch                     IMPORT  --
                           A  1020    ;_putch                              IMPORT  --
                           A  1021    ;test                                 IX-11    
                           A  1022    ;n                                     IX-2    
                           A  1023    
                           A  1024    
                           A  1025    ; Stack Frame Size: 17 (bytes)
                           A  1026    ;       Spill Code: 0 (instruction)
                           A  1027    
                           A  1028    
                           A  1029    .ENDFUNC "vdp_ota_present",100,"_vdp_ota_presen
                           A  1030    	SEGMENT STRSECT
0B2887                     A  1031    L__5:
0B2887 756E6C6F 636B       A  1032    	DB	"unlock"
0B288D 00                  A  1033    	DB	0
0B288E                     A  1034    L__7:
0B288E 756E6C6F 636B6564   A  1035    	DB	"unlocked!"
0B2896 21 
0B2897 00                  A  1036    	DB	0
                           A  1037    	SEGMENT DATA
0B223E                     A  1038    _mos_magicnumbers:
0B223E F3                  A  1039    	DB	243
0B223F ED                  A  1040    	DB	237
0B2240 7D                  A  1041    	DB	125
0B2241 5B                  A  1042    	DB	91
0B2242 C3                  A  1043    	DB	195
                           A  1044    .DEFINE "mos_magicnumbers"
                           A  1045    .ALIAS "_mos_magicnumbers"
                           A  1046    .CLASS 69
                           A  1047    .VALUE _mos_magicnumbers
                           A  1048    .DIM 5
                           A  1049    .TYPE 108
                           A  1050    .ENDEF
                           A  1051    ;  101	
                           A  1052    ;  102	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A  1053    	SEGMENT CODE
                           A  1054    ;  103	#define MOS_MAGICLENGTH 5
                           A  1055    ;  104	bool containsMosHeader(uint8_t *filesta
0B0290                     A  1056    _containsMosHeader:
                           A  1057    .DEFINE "_containsMosHeader"
                           A  1058    
                           A  1059    .VALUE _containsMosHeader
                           A  1060    
                           A  1061    .CLASS 2
                           A  1062    
                           A  1063    .TYPE 76
                           A  1064    
                           A  1065    .ENDEF
                           A  1066    
                           A  1067    .BEGFUNC "containsMosHeader",104,"_containsMosH
                           A  1068    
                           A  1069    .LINE 104
                           A  1070    
                           A  1071    .DEFINE "filestart"
                           A  1072    
                           A  1073    .CLASS 65
                           A  1074    
                           A  1075    .VALUE 6
                           A  1076    
                           A  1077    .TYPE 44
                           A  1078    
                           A  1079    .ENDEF
                           A  1080    
                           A  1081    .DEFINE "n"
                           A  1082    
                           A  1083    .CLASS 65
                           A  1084    
                           A  1085    .VALUE -1
                           A  1086    
                           A  1087    .TYPE 12
                           A  1088    
                           A  1089    .ENDEF
                           A  1090    
                           A  1091    .DEFINE "match"
                           A  1092    
                           A  1093    .CLASS 65
                           A  1094    
                           A  1095    .VALUE -2
                           A  1096    
                           A  1097    .TYPE 12
                           A  1098    
                           A  1099    .ENDEF
                           A  1100    
0B0290 DDE5                A  1101    	PUSH	IX
0B0292 DD210000 00         A  1102    	LD	IX,0
0B0297 DD39                A  1103    	ADD	IX,SP
0B0299 3B                  A  1104    	DEC	SP
0B029A 3B                  A  1105    	DEC	SP
                           A  1106    ;  105		uint8_t n;
                           A  1107    ;  106		bool match = true;
                           A  1108    .LINE 106
                           A  1109    
0B029B DD36FE01            A  1110    	LD	(IX+%FFFFFFFE),%1
                           A  1111    ;  107	
                           A  1112    ;  108		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A  1113    .LINE 108
                           A  1114    
0B029F DD36FF00            A  1115    	LD	(IX+%FFFFFFFF),%0
0B02A3 18 27               A  1116    	JR	L_21
0B02A5                     A  1117    L_19:
0B02A5 DD7EFF              A  1118    	LD	A,(IX+%FFFFFFFF)
0B02A8 B7ED62              A  1119    	UEXT	HL
0B02AB 6F                  A  1120    	LD	L,A
0B02AC 01 3E 22 0B         A  1121    	LD	BC,_mos_magicnumbers
0B02B0 09                  A  1122    	ADD	HL,BC
0B02B1 E5FDE1              A  1123    	LD	IY,HL
0B02B4 DD7EFF              A  1124    	LD	A,(IX+%FFFFFFFF)
0B02B7 B7ED62              A  1125    	UEXT	HL
0B02BA 6F                  A  1126    	LD	L,A
0B02BB DD0706              A  1127    	LD	BC,(IX+%6)
0B02BE 09                  A  1128    	ADD	HL,BC
0B02BF FD7E00              A  1129    	LD	A,(IY)
0B02C2 BE                  A  1130    	CP	A,(HL)
0B02C3 28 04               A  1131    	JR	Z,L_20
0B02C5 DD36FE00            A  1132    	LD	(IX+%FFFFFFFE),%0
0B02C9                     A  1133    L_20:
0B02C9 DD34FF              A  1134    	INC	(IX+%FFFFFFFF)
0B02CC                     A  1135    L_21:
0B02CC DD7EFF              A  1136    	LD	A,(IX+%FFFFFFFF)
0B02CF FE05                A  1137    	CP	A,%5
0B02D1 38 D2               A  1138    	JR	C,L_19
                           A  1139    ;  109		return match;
                           A  1140    .LINE 109
                           A  1141    
0B02D3 DD7EFE              A  1142    	LD	A,(IX+%FFFFFFFE)
                           A  1143    ;  110	}
                           A  1144    .LINE 110
                           A  1145    
0B02D6 DDF9                A  1146    	LD	SP,IX
0B02D8 DDE1                A  1147    	POP	IX
0B02DA C9                  A  1148    	RET	
                           A  1149    
                           A  1150    
                           A  1151    ;**************************** _containsMosHeade
                           A  1152    ;Name                         Addr/Register   S
                           A  1153    ;_mos_magicnumbers                   STATIC    
                           A  1154    ;match                                 IX-2    
                           A  1155    ;n                                     IX-1    
                           A  1156    ;filestart                             IX+6    
                           A  1157    
                           A  1158    
                           A  1159    ; Stack Frame Size: 11 (bytes)
                           A  1160    ;       Spill Code: 0 (instruction)
                           A  1161    
                           A  1162    
                           A  1163    .ENDFUNC "containsMosHeader",110,"_containsMosH
                           A  1164    	SEGMENT DATA
0B2243                     A  1165    _esp32_magicnumbers:
0B2243 32                  A  1166    	DB	50
0B2244 54                  A  1167    	DB	84
0B2245 CD                  A  1168    	DB	205
0B2246 AB                  A  1169    	DB	171
                           A  1170    .DEFINE "esp32_magicnumbers"
                           A  1171    .ALIAS "_esp32_magicnumbers"
                           A  1172    .CLASS 69
                           A  1173    .VALUE _esp32_magicnumbers
                           A  1174    .DIM 4
                           A  1175    .TYPE 108
                           A  1176    .ENDEF
                           A  1177    ;  111	
                           A  1178    ;  112	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A  1179    	SEGMENT CODE
                           A  1180    ;  113	#define ESP32_MAGICLENGTH 4
                           A  1181    ;  114	#define ESP32_MAGICSTART 0x20
                           A  1182    ;  115	bool containsESP32Header(uint8_t *files
0B02DB                     A  1183    _containsESP32Header:
                           A  1184    .DEFINE "_containsESP32Header"
                           A  1185    
                           A  1186    .VALUE _containsESP32Header
                           A  1187    
                           A  1188    .CLASS 2
                           A  1189    
                           A  1190    .TYPE 76
                           A  1191    
                           A  1192    .ENDEF
                           A  1193    
                           A  1194    .BEGFUNC "containsESP32Header",115,"_containsES
                           A  1195    
                           A  1196    .LINE 115
                           A  1197    
                           A  1198    .DEFINE "filestart"
                           A  1199    
                           A  1200    .CLASS 65
                           A  1201    
                           A  1202    .VALUE 6
                           A  1203    
                           A  1204    .TYPE 44
                           A  1205    
                           A  1206    .ENDEF
                           A  1207    
                           A  1208    .DEFINE "n"
                           A  1209    
                           A  1210    .CLASS 65
                           A  1211    
                           A  1212    .VALUE -1
                           A  1213    
                           A  1214    .TYPE 12
                           A  1215    
                           A  1216    .ENDEF
                           A  1217    
                           A  1218    .DEFINE "match"
                           A  1219    
                           A  1220    .CLASS 65
                           A  1221    
                           A  1222    .VALUE -2
                           A  1223    
                           A  1224    .TYPE 12
                           A  1225    
                           A  1226    .ENDEF
                           A  1227    
0B02DB DDE5                A  1228    	PUSH	IX
0B02DD DD210000 00         A  1229    	LD	IX,0
0B02E2 DD39                A  1230    	ADD	IX,SP
0B02E4 3B                  A  1231    	DEC	SP
0B02E5 3B                  A  1232    	DEC	SP
                           A  1233    ;  116		uint8_t n;
                           A  1234    ;  117		bool match = true;
                           A  1235    .LINE 117
                           A  1236    
0B02E6 DD36FE01            A  1237    	LD	(IX+%FFFFFFFE),%1
                           A  1238    ;  118	
                           A  1239    ;  119		filestart += ESP32_MAGICSTART; // s
                           A  1240    .LINE 119
                           A  1241    
0B02EA DD3106              A  1242    	LD	IY,(IX+%6)
0B02ED ED3320              A  1243    	LEA	IY,IY+%20
0B02F0 DD3E06              A  1244    	LD	(IX+%6),IY
                           A  1245    ;  120		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A  1246    .LINE 120
                           A  1247    
0B02F3 DD36FF00            A  1248    	LD	(IX+%FFFFFFFF),%0
0B02F7 18 27               A  1249    	JR	L_28
0B02F9                     A  1250    L_26:
                           A  1251    ;  121			if(esp32_magicnumbers[n] != fil
                           A  1252    .LINE 121
                           A  1253    
0B02F9 DD7EFF              A  1254    	LD	A,(IX+%FFFFFFFF)
0B02FC B7ED62              A  1255    	UEXT	HL
0B02FF 6F                  A  1256    	LD	L,A
0B0300 01 43 22 0B         A  1257    	LD	BC,_esp32_magicnumbers
0B0304 09                  A  1258    	ADD	HL,BC
0B0305 E5FDE1              A  1259    	LD	IY,HL
0B0308 DD7EFF              A  1260    	LD	A,(IX+%FFFFFFFF)
0B030B B7ED62              A  1261    	UEXT	HL
0B030E 6F                  A  1262    	LD	L,A
0B030F DD0706              A  1263    	LD	BC,(IX+%6)
0B0312 09                  A  1264    	ADD	HL,BC
0B0313 FD7E00              A  1265    	LD	A,(IY)
0B0316 BE                  A  1266    	CP	A,(HL)
0B0317 28 04               A  1267    	JR	Z,L_27
0B0319 DD36FE00            A  1268    	LD	(IX+%FFFFFFFE),%0
                           A  1269    ;  122		}
0B031D                     A  1270    L_27:
                           A  1271    .LINE 122
                           A  1272    
0B031D DD34FF              A  1273    	INC	(IX+%FFFFFFFF)
0B0320                     A  1274    L_28:
0B0320 DD7EFF              A  1275    	LD	A,(IX+%FFFFFFFF)
0B0323 FE04                A  1276    	CP	A,%4
0B0325 38 D2               A  1277    	JR	C,L_26
                           A  1278    ;  123		return match;
                           A  1279    .LINE 123
                           A  1280    
0B0327 DD7EFE              A  1281    	LD	A,(IX+%FFFFFFFE)
                           A  1282    ;  124	}
                           A  1283    .LINE 124
                           A  1284    
0B032A DDF9                A  1285    	LD	SP,IX
0B032C DDE1                A  1286    	POP	IX
0B032E C9                  A  1287    	RET	
                           A  1288    
                           A  1289    
                           A  1290    ;**************************** _containsESP32Hea
                           A  1291    ;Name                         Addr/Register   S
                           A  1292    ;_esp32_magicnumbers                 STATIC    
                           A  1293    ;match                                 IX-2    
                           A  1294    ;n                                     IX-1    
                           A  1295    ;filestart                             IX+6    
                           A  1296    
                           A  1297    
                           A  1298    ; Stack Frame Size: 11 (bytes)
                           A  1299    ;       Spill Code: 0 (instruction)
                           A  1300    
                           A  1301    
                           A  1302    .ENDFUNC "containsESP32Header",124,"_containsES
                           A  1303    ;  125	
                           A  1304    ;  126	void print_version(void) {
0B032F                     A  1305    _print_version:
                           A  1306    .DEFINE "_print_version"
                           A  1307    
                           A  1308    .VALUE _print_version
                           A  1309    
                           A  1310    .CLASS 2
                           A  1311    
                           A  1312    .TYPE 65
                           A  1313    
                           A  1314    .ENDEF
                           A  1315    
                           A  1316    .BEGFUNC "print_version",126,"_print_version"
                           A  1317    
0B032F DDE5                A  1318    	PUSH	IX
0B0331 DD210000 00         A  1319    	LD	IX,0
0B0336 DD39                A  1320    	ADD	IX,SP
                           A  1321    ;  127		printf("Agon firmware upgrade utili
                           A  1322    .LINE 127
                           A  1323    
0B0338 01 5F 18 0B         A  1324    	LD	BC,___print_uputch
0B033C ED43 04 28 0B       A  1325    	LD	(___print_xputch),BC
0B0341 01 98 28 0B         A  1326    	LD	BC,L__16
0B0345 C5                  A  1327    	PUSH	BC
0B0346 CD EE 16 0B         A  1328    	CALL	___print_sendstring
0B034A C1                  A  1329    	POP	BC
                           A  1330    ;  128	}
                           A  1331    .LINE 128
                           A  1332    
0B034B DDF9                A  1333    	LD	SP,IX
0B034D DDE1                A  1334    	POP	IX
0B034F C9                  A  1335    	RET	
                           A  1336    
                           A  1337    
                           A  1338    ;**************************** _print_version **
                           A  1339    ;Name                         Addr/Register   S
                           A  1340    ;___print_sendstring                 IMPORT  --
                           A  1341    ;___print_xputch                     IMPORT    
                           A  1342    ;___print_uputch                     IMPORT  --
                           A  1343    
                           A  1344    
                           A  1345    ; Stack Frame Size: 6 (bytes)
                           A  1346    ;       Spill Code: 0 (instruction)
                           A  1347    
                           A  1348    
                           A  1349    .ENDFUNC "print_version",128,"_print_version"
                           A  1350    	SEGMENT STRSECT
0B2898                     A  1351    L__16:
0B2898 41676F6E 20666972   A  1352    	DB	"Agon firmware upgrade utility v1.6"
0B28A0 6D776172 65207570 
0B28A8 67726164 65207574 
0B28B0 696C6974 79207631 
0B28B8 2E36 
0B28BA 0A0D0A0D 00         A  1353    	DB	10,13,10,13,0
                           A  1354    	SEGMENT CODE
                           A  1355    ;  129	
                           A  1356    ;  130	void usage(void) {
0B0350                     A  1357    _usage:
                           A  1358    .DEFINE "_usage"
                           A  1359    
                           A  1360    .VALUE _usage
                           A  1361    
                           A  1362    .CLASS 2
                           A  1363    
                           A  1364    .TYPE 65
                           A  1365    
                           A  1366    .ENDEF
                           A  1367    
                           A  1368    .BEGFUNC "usage",130,"_usage"
                           A  1369    
0B0350 DDE5                A  1370    	PUSH	IX
0B0352 DD210000 00         A  1371    	LD	IX,0
0B0357 DD39                A  1372    	ADD	IX,SP
                           A  1373    ;  131		print_version();
                           A  1374    .LINE 131
                           A  1375    
0B0359 CD 2F 03 0B         A  1376    	CALL	_print_version
                           A  1377    ;  132		printf("Usage: FLASH [all | [mos <f
                           A  1378    .LINE 132
                           A  1379    
0B035D 01 5F 18 0B         A  1380    	LD	BC,___print_uputch
0B0361 ED43 04 28 0B       A  1381    	LD	(___print_xputch),BC
0B0366 01 BF 28 0B         A  1382    	LD	BC,L__18
0B036A C5                  A  1383    	PUSH	BC
0B036B CD EE 16 0B         A  1384    	CALL	___print_sendstring
0B036F C1                  A  1385    	POP	BC
                           A  1386    ;  133	}
                           A  1387    .LINE 133
                           A  1388    
0B0370 DDF9                A  1389    	LD	SP,IX
0B0372 DDE1                A  1390    	POP	IX
0B0374 C9                  A  1391    	RET	
                           A  1392    
                           A  1393    
                           A  1394    ;**************************** _usage **********
                           A  1395    ;Name                         Addr/Register   S
                           A  1396    ;___print_sendstring                 IMPORT  --
                           A  1397    ;___print_xputch                     IMPORT    
                           A  1398    ;___print_uputch                     IMPORT  --
                           A  1399    
                           A  1400    
                           A  1401    ; Stack Frame Size: 6 (bytes)
                           A  1402    ;       Spill Code: 0 (instruction)
                           A  1403    
                           A  1404    
                           A  1405    .ENDFUNC "usage",133,"_usage"
                           A  1406    	SEGMENT STRSECT
0B28BF                     A  1407    L__18:
0B28BF 55736167 653A2046   A  1408    	DB	"Usage: FLASH [all | [mos <filename>] [
0B28C7 4C415348 205B616C 
0B28CF 6C207C20 5B6D6F73 
0B28D7 203C6669 6C656E61 
0B28DF 6D653E5D 205B7664 
0B28E7 70203C66 696C656E 
0B28EF 616D653E 5D207C20 
0B28F7 62617463 685D203C 
0B28FF 2D663E 
0B2902 0A0D00              A  1409    	DB	10,13,0
                           A  1410    	SEGMENT CODE
                           A  1411    ;  134	
                           A  1412    ;  135	typedef enum {
                           A  1413    ;  136		MOS,
                           A  1414    ;  137		VDP
                           A  1415    ;  138	} flashtype;
                           A  1416    ;  139	
                           A  1417    ;  140	bool getResponse(void) {
0B0375                     A  1418    _getResponse:
                           A  1419    .DEFINE "_getResponse"
                           A  1420    
                           A  1421    .VALUE _getResponse
                           A  1422    
                           A  1423    .CLASS 2
                           A  1424    
                           A  1425    .TYPE 76
                           A  1426    
                           A  1427    .ENDEF
                           A  1428    
                           A  1429    .BEGFUNC "getResponse",140,"_getResponse"
                           A  1430    
                           A  1431    .LINE 140
                           A  1432    
                           A  1433    .DEFINE "response"
                           A  1434    
                           A  1435    .CLASS 65
                           A  1436    
                           A  1437    .VALUE -1
                           A  1438    
                           A  1439    .TYPE 12
                           A  1440    
                           A  1441    .ENDEF
                           A  1442    
0B0375 DDE5                A  1443    	PUSH	IX
0B0377 DD210000 00         A  1444    	LD	IX,0
0B037C DD39                A  1445    	ADD	IX,SP
0B037E 3B                  A  1446    	DEC	SP
                           A  1447    ;  141		uint8_t response = 0;
                           A  1448    .LINE 141
                           A  1449    
0B037F DD36FF00            A  1450    	LD	(IX+%FFFFFFFF),%0
                           A  1451    ;  142	
                           A  1452    ;  143		printf("Flash firmware (y/n)?");
                           A  1453    .LINE 143
                           A  1454    
0B0383 01 5F 18 0B         A  1455    	LD	BC,___print_uputch
0B0387 ED43 04 28 0B       A  1456    	LD	(___print_xputch),BC
0B038C 01 05 29 0B         A  1457    	LD	BC,L__20
0B0390 C5                  A  1458    	PUSH	BC
0B0391 CD EE 16 0B         A  1459    	CALL	___print_sendstring
0B0395 C1                  A  1460    	POP	BC
                           A  1461    ;  144		while((response != 'y') && (respons
                           A  1462    .LINE 144
                           A  1463    
0B0396 18 13               A  1464    	JR	L_34
0B0398                     A  1465    L_35:
0B0398 CD 89 11 0B         A  1466    	CALL	_getch
0B039C 47                  A  1467    	LD	B,A
0B039D 78                  A  1468    	LD	A,B
0B039E 17ED62              A  1469    	SEXT	HL
0B03A1 68                  A  1470    	LD	L,B
0B03A2 E5                  A  1471    	PUSH	HL
0B03A3 CD A9 1F 0B         A  1472    	CALL	_tolower
0B03A7 C1                  A  1473    	POP	BC
0B03A8 DD75FF              A  1474    	LD	(IX+%FFFFFFFF),L
0B03AB                     A  1475    L_34:
0B03AB DD7EFF              A  1476    	LD	A,(IX+%FFFFFFFF)
0B03AE FE79                A  1477    	CP	A,%79
0B03B0 28 07               A  1478    	JR	Z,L_38
0B03B2 DD7EFF              A  1479    	LD	A,(IX+%FFFFFFFF)
0B03B5 FE6E                A  1480    	CP	A,%6E
0B03B7 20 DF               A  1481    	JR	NZ,L_35
0B03B9                     A  1482    L_38:
                           A  1483    ;  145		if(response == 'n') printf("\r\nUse
                           A  1484    .LINE 145
                           A  1485    
0B03B9 DD7EFF              A  1486    	LD	A,(IX+%FFFFFFFF)
0B03BC FE6E                A  1487    	CP	A,%6E
0B03BE 20 15               A  1488    	JR	NZ,L_37
0B03C0 01 5F 18 0B         A  1489    	LD	BC,___print_uputch
0B03C4 ED43 04 28 0B       A  1490    	LD	(___print_xputch),BC
0B03C9 01 1B 29 0B         A  1491    	LD	BC,L__24
0B03CD C5                  A  1492    	PUSH	BC
0B03CE CD EE 16 0B         A  1493    	CALL	___print_sendstring
0B03D2 C1                  A  1494    	POP	BC
                           A  1495    ;  146		else printf("\r\n\r\n");
                           A  1496    .LINE 146
                           A  1497    
0B03D3 18 13               A  1498    	JR	L_39
0B03D5                     A  1499    L_37:
0B03D5 01 5F 18 0B         A  1500    	LD	BC,___print_uputch
0B03D9 ED43 04 28 0B       A  1501    	LD	(___print_xputch),BC
0B03DE 01 2C 29 0B         A  1502    	LD	BC,L__25
0B03E2 C5                  A  1503    	PUSH	BC
0B03E3 CD EE 16 0B         A  1504    	CALL	___print_sendstring
0B03E7 C1                  A  1505    	POP	BC
0B03E8                     A  1506    L_39:
                           A  1507    ;  147		return response == 'y';
                           A  1508    .LINE 147
                           A  1509    
0B03E8 DD7EFF              A  1510    	LD	A,(IX+%FFFFFFFF)
0B03EB FE79                A  1511    	CP	A,%79
0B03ED 20 04               A  1512    	JR	NZ,L__27
0B03EF 3E01                A  1513    	LD	A,%1
0B03F1 18 01               A  1514    	JR	L__28
0B03F3                     A  1515    L__27:
0B03F3 AF                  A  1516    	XOR	A,A
0B03F4                     A  1517    L__28:
                           A  1518    ;  148	}
                           A  1519    .LINE 148
                           A  1520    
0B03F4 DDF9                A  1521    	LD	SP,IX
0B03F6 DDE1                A  1522    	POP	IX
0B03F8 C9                  A  1523    	RET	
                           A  1524    
                           A  1525    
                           A  1526    ;**************************** _getResponse ****
                           A  1527    ;Name                         Addr/Register   S
                           A  1528    ;_getch                              IMPORT  --
                           A  1529    ;_tolower                            IMPORT  --
                           A  1530    ;___print_sendstring                 IMPORT  --
                           A  1531    ;___print_xputch                     IMPORT    
                           A  1532    ;___print_uputch                     IMPORT  --
                           A  1533    ;response                              IX-1    
                           A  1534    
                           A  1535    
                           A  1536    ; Stack Frame Size: 7 (bytes)
                           A  1537    ;       Spill Code: 0 (instruction)
                           A  1538    
                           A  1539    
                           A  1540    .ENDFUNC "getResponse",148,"_getResponse"
                           A  1541    	SEGMENT STRSECT
0B2905                     A  1542    L__20:
0B2905 466C6173 68206669   A  1543    	DB	"Flash firmware (y/n)?"
0B290D 726D7761 72652028 
0B2915 792F6E29 3F 
0B291A 00                  A  1544    	DB	0
0B291B                     A  1545    L__24:
0B291B 0D0A                A  1546    	DB	13,10
0B291D 55736572 2061626F   A  1547    	DB	"User abort"
0B2925 7274 
0B2927 0A0D0A0D 00         A  1548    	DB	10,13,10,13,0
0B292C                     A  1549    L__25:
0B292C 0D0A0D0A 00         A  1550    	DB	13,10,13,10,0
                           A  1551    	SEGMENT CODE
                           A  1552    ;  149	
                           A  1553    ;  150	void askEscapeToContinue(void) {
0B03F9                     A  1554    _askEscapeToContinue:
                           A  1555    .DEFINE "_askEscapeToContinue"
                           A  1556    
                           A  1557    .VALUE _askEscapeToContinue
                           A  1558    
                           A  1559    .CLASS 2
                           A  1560    
                           A  1561    .TYPE 65
                           A  1562    
                           A  1563    .ENDEF
                           A  1564    
                           A  1565    .BEGFUNC "askEscapeToContinue",150,"_askEscapeT
                           A  1566    
                           A  1567    .LINE 150
                           A  1568    
                           A  1569    .DEFINE "response"
                           A  1570    
                           A  1571    .CLASS 65
                           A  1572    
                           A  1573    .VALUE -1
                           A  1574    
                           A  1575    .TYPE 12
                           A  1576    
                           A  1577    .ENDEF
                           A  1578    
0B03F9 DDE5                A  1579    	PUSH	IX
0B03FB DD210000 00         A  1580    	LD	IX,0
0B0400 DD39                A  1581    	ADD	IX,SP
0B0402 3B                  A  1582    	DEC	SP
                           A  1583    ;  151		uint8_t response = 0;
                           A  1584    .LINE 151
                           A  1585    
0B0403 DD36FF00            A  1586    	LD	(IX+%FFFFFFFF),%0
                           A  1587    ;  152	
                           A  1588    ;  153		printf("Press ESC to continue");
                           A  1589    .LINE 153
                           A  1590    
0B0407 01 5F 18 0B         A  1591    	LD	BC,___print_uputch
0B040B ED43 04 28 0B       A  1592    	LD	(___print_xputch),BC
0B0410 01 31 29 0B         A  1593    	LD	BC,L__30
0B0414 C5                  A  1594    	PUSH	BC
0B0415 CD EE 16 0B         A  1595    	CALL	___print_sendstring
0B0419 C1                  A  1596    	POP	BC
                           A  1597    ;  154		while(response != 0x1B) response = 
                           A  1598    .LINE 154
                           A  1599    
0B041A 18 13               A  1600    	JR	L_41
0B041C                     A  1601    L_42:
0B041C CD 89 11 0B         A  1602    	CALL	_getch
0B0420 47                  A  1603    	LD	B,A
0B0421 78                  A  1604    	LD	A,B
0B0422 17ED62              A  1605    	SEXT	HL
0B0425 68                  A  1606    	LD	L,B
0B0426 E5                  A  1607    	PUSH	HL
0B0427 CD A9 1F 0B         A  1608    	CALL	_tolower
0B042B C1                  A  1609    	POP	BC
0B042C DD75FF              A  1610    	LD	(IX+%FFFFFFFF),L
0B042F                     A  1611    L_41:
0B042F DD7EFF              A  1612    	LD	A,(IX+%FFFFFFFF)
0B0432 FE1B                A  1613    	CP	A,%1B
0B0434 20 E6               A  1614    	JR	NZ,L_42
                           A  1615    ;  155		printf("\r\n");
                           A  1616    .LINE 155
                           A  1617    
0B0436 01 5F 18 0B         A  1618    	LD	BC,___print_uputch
0B043A ED43 04 28 0B       A  1619    	LD	(___print_xputch),BC
0B043F 01 47 29 0B         A  1620    	LD	BC,L__32
0B0443 C5                  A  1621    	PUSH	BC
0B0444 CD EE 16 0B         A  1622    	CALL	___print_sendstring
0B0448 C1                  A  1623    	POP	BC
                           A  1624    ;  156	}
                           A  1625    .LINE 156
                           A  1626    
0B0449 DDF9                A  1627    	LD	SP,IX
0B044B DDE1                A  1628    	POP	IX
0B044D C9                  A  1629    	RET	
                           A  1630    
                           A  1631    
                           A  1632    ;**************************** _askEscapeToConti
                           A  1633    ;Name                         Addr/Register   S
                           A  1634    ;_getch                              IMPORT  --
                           A  1635    ;_tolower                            IMPORT  --
                           A  1636    ;___print_sendstring                 IMPORT  --
                           A  1637    ;___print_xputch                     IMPORT    
                           A  1638    ;___print_uputch                     IMPORT  --
                           A  1639    ;response                              IX-1    
                           A  1640    
                           A  1641    
                           A  1642    ; Stack Frame Size: 7 (bytes)
                           A  1643    ;       Spill Code: 0 (instruction)
                           A  1644    
                           A  1645    
                           A  1646    .ENDFUNC "askEscapeToContinue",156,"_askEscapeT
                           A  1647    	SEGMENT STRSECT
0B2931                     A  1648    L__30:
0B2931 50726573 73204553   A  1649    	DB	"Press ESC to continue"
0B2939 4320746F 20636F6E 
0B2941 74696E75 65 
0B2946 00                  A  1650    	DB	0
0B2947                     A  1651    L__32:
0B2947 0D0A00              A  1652    	DB	13,10,0
                           A  1653    	SEGMENT CODE
                           A  1654    ;  157	
                           A  1655    ;  158	bool update_vdp(char *filename) {
0B044E                     A  1656    _update_vdp:
                           A  1657    .DEFINE "_update_vdp"
                           A  1658    
                           A  1659    .VALUE _update_vdp
                           A  1660    
                           A  1661    .CLASS 2
                           A  1662    
                           A  1663    .TYPE 76
                           A  1664    
                           A  1665    .ENDEF
                           A  1666    
                           A  1667    .BEGFUNC "update_vdp",158,"_update_vdp"
                           A  1668    
                           A  1669    .LINE 158
                           A  1670    
                           A  1671    .DEFINE "filename"
                           A  1672    
                           A  1673    .CLASS 65
                           A  1674    
                           A  1675    .VALUE 6
                           A  1676    
                           A  1677    .TYPE 34
                           A  1678    
                           A  1679    .ENDEF
                           A  1680    
                           A  1681    .DEFINE "file"
                           A  1682    
                           A  1683    .CLASS 65
                           A  1684    
                           A  1685    .VALUE -1
                           A  1686    
                           A  1687    .TYPE 12
                           A  1688    
                           A  1689    .ENDEF
                           A  1690    
                           A  1691    .DEFINE "filesize"
                           A  1692    
                           A  1693    .CLASS 65
                           A  1694    
                           A  1695    .VALUE -4
                           A  1696    
                           A  1697    .TYPE 14
                           A  1698    
                           A  1699    .ENDEF
                           A  1700    
0B044E DDE5                A  1701    	PUSH	IX
0B0450 DD210000 00         A  1702    	LD	IX,0
0B0455 DD39                A  1703    	ADD	IX,SP
0B0457 C5                  A  1704    	PUSH	BC
0B0458 3B                  A  1705    	DEC	SP
                           A  1706    ;  159		uint8_t file;
                           A  1707    ;  160		uint24_t filesize;
                           A  1708    ;  161		uint24_t size, n;
                           A  1709    ;  162	
                           A  1710    ;  163		putch(12); // cls
                           A  1711    .LINE 163
                           A  1712    
0B0459 010C0000            A  1713    	LD	BC,12
0B045D C5                  A  1714    	PUSH	BC
0B045E CD E5 00 0B         A  1715    	CALL	_putch
0B0462 C1                  A  1716    	POP	BC
                           A  1717    ;  164		print_version();	
                           A  1718    .LINE 164
                           A  1719    
0B0463 CD 2F 03 0B         A  1720    	CALL	_print_version
                           A  1721    ;  165		printf("Unlocking VDP updater...\r\
                           A  1722    .LINE 165
                           A  1723    
0B0467 01 5F 18 0B         A  1724    	LD	BC,___print_uputch
0B046B ED43 04 28 0B       A  1725    	LD	(___print_xputch),BC
0B0470 01 4A 29 0B         A  1726    	LD	BC,L__34
0B0474 C5                  A  1727    	PUSH	BC
0B0475 CD EE 16 0B         A  1728    	CALL	___print_sendstring
0B0479 C1                  A  1729    	POP	BC
                           A  1730    ;  166		
                           A  1731    ;  167		if(!vdp_ota_present()) {
                           A  1732    .LINE 167
                           A  1733    
0B047A CD E3 01 0B         A  1734    	CALL	_vdp_ota_present
0B047E B7                  A  1735    	OR	A,A
0B047F 20 29               A  1736    	JR	NZ,L_46
                           A  1737    ;  168			printf(" failed - OTA not prese
                           A  1738    .LINE 168
                           A  1739    
0B0481 01 5F 18 0B         A  1740    	LD	BC,___print_uputch
0B0485 ED43 04 28 0B       A  1741    	LD	(___print_xputch),BC
0B048A 01 65 29 0B         A  1742    	LD	BC,L__36
0B048E C5                  A  1743    	PUSH	BC
0B048F CD EE 16 0B         A  1744    	CALL	___print_sendstring
0B0493 C1                  A  1745    	POP	BC
                           A  1746    ;  169			printf("Program the VDP using A
                           A  1747    .LINE 169
                           A  1748    
0B0494 01 5F 18 0B         A  1749    	LD	BC,___print_uputch
0B0498 ED43 04 28 0B       A  1750    	LD	(___print_xputch),BC
0B049D 01 92 29 0B         A  1751    	LD	BC,L__37
0B04A1 C5                  A  1752    	PUSH	BC
0B04A2 CD EE 16 0B         A  1753    	CALL	___print_sendstring
0B04A6 C1                  A  1754    	POP	BC
                           A  1755    ;  170			return false;
                           A  1756    .LINE 170
                           A  1757    
0B04A7 AF                  A  1758    	XOR	A,A
0B04A8 18 4F               A  1759    	JR	L_47
                           A  1760    ;  171		}
0B04AA                     A  1761    L_46:
                           A  1762    .LINE 171
                           A  1763    
                           A  1764    ;  172	
                           A  1765    ;  173		file = mos_fopen(filename, fa_read)
                           A  1766    .LINE 173
                           A  1767    
0B04AA 01010000            A  1768    	LD	BC,1
0B04AE C5                  A  1769    	PUSH	BC
0B04AF DD0706              A  1770    	LD	BC,(IX+%6)
0B04B2 C5                  A  1771    	PUSH	BC
0B04B3 CD DF 11 0B         A  1772    	CALL	_mos_fopen
0B04B7 C1                  A  1773    	POP	BC
0B04B8 C1                  A  1774    	POP	BC
0B04B9 DD77FF              A  1775    	LD	(IX+%FFFFFFFF),A
                           A  1776    ;  174		// Do actual work here
                           A  1777    ;  175		printf("Updating VDP firmware\r\n")
                           A  1778    .LINE 175
                           A  1779    
0B04BC 01 5F 18 0B         A  1780    	LD	BC,___print_uputch
0B04C0 ED43 04 28 0B       A  1781    	LD	(___print_xputch),BC
0B04C5 01 CB 29 0B         A  1782    	LD	BC,L__38
0B04C9 C5                  A  1783    	PUSH	BC
0B04CA CD EE 16 0B         A  1784    	CALL	___print_sendstring
0B04CE C1                  A  1785    	POP	BC
                           A  1786    ;  176		filesize = getFileSize(file);	
                           A  1787    .LINE 176
                           A  1788    
0B04CF DD4EFF              A  1789    	LD	C,(IX+%FFFFFFFF)
0B04D2 0600                A  1790    	LD	B,%0
0B04D4 C5                  A  1791    	PUSH	BC
0B04D5 CD 23 16 0B         A  1792    	CALL	_getFileSize
0B04D9 C1                  A  1793    	POP	BC
0B04DA DD2FFC              A  1794    	LD	(IX+%FFFFFFFC),HL
                           A  1795    ;  177		startVDPupdate(file, filesize);
                           A  1796    .LINE 177
                           A  1797    
0B04DD E5C1                A  1798    	LD	BC,HL
0B04DF C5                  A  1799    	PUSH	BC
0B04E0 DD4EFF              A  1800    	LD	C,(IX+%FFFFFFFF)
0B04E3 0600                A  1801    	LD	B,%0
0B04E5 C5                  A  1802    	PUSH	BC
0B04E6 CD 06 13 0B         A  1803    	CALL	_startVDPupdate
0B04EA C1                  A  1804    	POP	BC
0B04EB C1                  A  1805    	POP	BC
                           A  1806    ;  178		mos_fclose(file);
                           A  1807    .LINE 178
                           A  1808    
0B04EC DD4EFF              A  1809    	LD	C,(IX+%FFFFFFFF)
0B04EF 0600                A  1810    	LD	B,%0
0B04F1 C5                  A  1811    	PUSH	BC
0B04F2 CD F7 11 0B         A  1812    	CALL	_mos_fclose
0B04F6 C1                  A  1813    	POP	BC
                           A  1814    ;  179		return true;
                           A  1815    .LINE 179
                           A  1816    
0B04F7 3E01                A  1817    	LD	A,%1
                           A  1818    ;  180	}
0B04F9                     A  1819    L_47:
                           A  1820    .LINE 180
                           A  1821    
0B04F9 DDF9                A  1822    	LD	SP,IX
0B04FB DDE1                A  1823    	POP	IX
0B04FD C9                  A  1824    	RET	
                           A  1825    
                           A  1826    
                           A  1827    ;**************************** _update_vdp *****
                           A  1828    ;Name                         Addr/Register   S
                           A  1829    ;_mos_fclose                         IMPORT  --
                           A  1830    ;_startVDPupdate                     IMPORT  --
                           A  1831    ;_getFileSize                        IMPORT  --
                           A  1832    ;_mos_fopen                          IMPORT  --
                           A  1833    ;___print_sendstring                 IMPORT  --
                           A  1834    ;___print_xputch                     IMPORT    
                           A  1835    ;___print_uputch                     IMPORT  --
                           A  1836    ;_putch                              IMPORT  --
                           A  1837    ;filesize                              IX-4    
                           A  1838    ;file                                  IX-1    
                           A  1839    ;filename                              IX+6    
                           A  1840    
                           A  1841    
                           A  1842    ; Stack Frame Size: 13 (bytes)
                           A  1843    ;       Spill Code: 0 (instruction)
                           A  1844    
                           A  1845    
                           A  1846    .ENDFUNC "update_vdp",180,"_update_vdp"
                           A  1847    	SEGMENT STRSECT
0B294A                     A  1848    L__34:
0B294A 556E6C6F 636B696E   A  1849    	DB	"Unlocking VDP updater..."
0B2952 67205644 50207570 
0B295A 64617465 722E2E2E 
0B2962 0D0A00              A  1850    	DB	13,10,0
0B2965                     A  1851    L__36:
0B2965 20666169 6C656420   A  1852    	DB	" failed - OTA not present in current V
0B296D 2D204F54 41206E6F 
0B2975 74207072 6573656E 
0B297D 7420696E 20637572 
0B2985 72656E74 20564450 
0B298D 0D0A0D0A 00         A  1853    	DB	13,10,13,10,0
0B2992                     A  1854    L__37:
0B2992 50726F67 72616D20   A  1855    	DB	"Program the VDP using Arduino / Platfo
0B299A 74686520 56445020 
0B29A2 7573696E 67204172 
0B29AA 6475696E 6F202F20 
0B29B2 506C6174 666F726D 
0B29BA 494F202F 20657370 
0B29C2 746F6F6C 
0B29C6 0D0A0D0A 00         A  1856    	DB	13,10,13,10,0
0B29CB                     A  1857    L__38:
0B29CB 55706461 74696E67   A  1858    	DB	"Updating VDP firmware"
0B29D3 20564450 20666972 
0B29DB 6D776172 65 
0B29E0 0D0A00              A  1859    	DB	13,10,0
                           A  1860    	SEGMENT CODE
                           A  1861    ;  181	
                           A  1862    ;  182	bool update_mos(char *filename) {
0B04FE                     A  1863    _update_mos:
                           A  1864    .DEFINE "_update_mos"
                           A  1865    
                           A  1866    .VALUE _update_mos
                           A  1867    
                           A  1868    .CLASS 2
                           A  1869    
                           A  1870    .TYPE 76
                           A  1871    
                           A  1872    .ENDEF
                           A  1873    
                           A  1874    .BEGFUNC "update_mos",182,"_update_mos"
                           A  1875    
                           A  1876    .LINE 182
                           A  1877    
                           A  1878    .DEFINE "filename"
                           A  1879    
                           A  1880    .CLASS 65
                           A  1881    
                           A  1882    .VALUE 6
                           A  1883    
                           A  1884    .TYPE 34
                           A  1885    
                           A  1886    .ENDEF
                           A  1887    
                           A  1888    .DEFINE "counter"
                           A  1889    
                           A  1890    .CLASS 65
                           A  1891    
                           A  1892    .VALUE -3
                           A  1893    
                           A  1894    .TYPE 14
                           A  1895    
                           A  1896    .ENDEF
                           A  1897    
                           A  1898    .DEFINE "attempt"
                           A  1899    
                           A  1900    .CLASS 65
                           A  1901    
                           A  1902    .VALUE -6
                           A  1903    
                           A  1904    .TYPE 4
                           A  1905    
                           A  1906    .ENDEF
                           A  1907    
                           A  1908    .DEFINE "pagemax"
                           A  1909    
                           A  1910    .CLASS 65
                           A  1911    
                           A  1912    .VALUE -9
                           A  1913    
                           A  1914    .TYPE 14
                           A  1915    
                           A  1916    .ENDEF
                           A  1917    
                           A  1918    .DEFINE "success"
                           A  1919    
                           A  1920    .CLASS 65
                           A  1921    
                           A  1922    .VALUE -10
                           A  1923    
                           A  1924    .TYPE 12
                           A  1925    
                           A  1926    .ENDEF
                           A  1927    
                           A  1928    .DEFINE "addressto"
                           A  1929    
                           A  1930    .CLASS 65
                           A  1931    
                           A  1932    .VALUE -13
                           A  1933    
                           A  1934    .TYPE 14
                           A  1935    
                           A  1936    .ENDEF
                           A  1937    
                           A  1938    .DEFINE "addressfrom"
                           A  1939    
                           A  1940    .CLASS 65
                           A  1941    
                           A  1942    .VALUE -16
                           A  1943    
                           A  1944    .TYPE 14
                           A  1945    
                           A  1946    .ENDEF
                           A  1947    
                           A  1948    .DEFINE "file"
                           A  1949    
                           A  1950    .CLASS 65
                           A  1951    
                           A  1952    .VALUE -17
                           A  1953    
                           A  1954    .TYPE 12
                           A  1955    
                           A  1956    .ENDEF
                           A  1957    
                           A  1958    .DEFINE "ptr"
                           A  1959    
                           A  1960    .CLASS 65
                           A  1961    
                           A  1962    .VALUE -20
                           A  1963    
                           A  1964    .TYPE 34
                           A  1965    
                           A  1966    .ENDEF
                           A  1967    
                           A  1968    .DEFINE "filesize"
                           A  1969    
                           A  1970    .CLASS 65
                           A  1971    
                           A  1972    .VALUE -23
                           A  1973    
                           A  1974    .TYPE 14
                           A  1975    
                           A  1976    .ENDEF
                           A  1977    
                           A  1978    .DEFINE "got"
                           A  1979    
                           A  1980    .CLASS 65
                           A  1981    
                           A  1982    .VALUE -26
                           A  1983    
                           A  1984    .TYPE 14
                           A  1985    
                           A  1986    .ENDEF
                           A  1987    
                           A  1988    .DEFINE "value"
                           A  1989    
                           A  1990    .CLASS 65
                           A  1991    
                           A  1992    .VALUE -27
                           A  1993    
                           A  1994    .TYPE 12
                           A  1995    
                           A  1996    .ENDEF
                           A  1997    
                           A  1998    .DEFINE "lastpagebytes"
                           A  1999    
                           A  2000    .CLASS 65
                           A  2001    
                           A  2002    .VALUE -30
                           A  2003    
                           A  2004    .TYPE 14
                           A  2005    
                           A  2006    .ENDEF
                           A  2007    
                           A  2008    .DEFINE "crcresult"
                           A  2009    
                           A  2010    .CLASS 65
                           A  2011    
                           A  2012    .VALUE -34
                           A  2013    
                           A  2014    .TYPE 15
                           A  2015    
                           A  2016    .ENDEF
                           A  2017    
0B04FE DDE5                A  2018    	PUSH	IX
0B0500 DD210000 00         A  2019    	LD	IX,0
0B0505 DD39                A  2020    	ADD	IX,SP
0B0507 ED22DB              A  2021    	LEA	HL,IX+%FFFFFFDB
0B050A F9                  A  2022    	LD	SP,HL
                           A  2023    ;  183		uint32_t crcresult;
                           A  2024    ;  184		uint24_t got;
                           A  2025    ;  185		uint8_t file;
                           A  2026    ;  186		char* ptr = (char*)BUFFER1;
                           A  2027    .LINE 186
                           A  2028    
0B050B 01000005            A  2029    	LD	BC,327680
0B050F DD0FEC              A  2030    	LD	(IX+%FFFFFFEC),BC
                           A  2031    ;  187		uint8_t value;
                           A  2032    ;  188		uint24_t counter,pagemax, lastpageb
                           A  2033    ;  189		uint24_t addressto,addressfrom;
                           A  2034    ;  190		uint24_t filesize;
                           A  2035    ;  191		int attempt;
                           A  2036    ;  192		bool success = false;
                           A  2037    .LINE 192
                           A  2038    
0B0512 DD36F600            A  2039    	LD	(IX+%FFFFFFF6),%0
                           A  2040    ;  193	
                           A  2041    ;  194		putch(12); // cls
                           A  2042    .LINE 194
                           A  2043    
0B0516 010C0000            A  2044    	LD	BC,12
0B051A C5                  A  2045    	PUSH	BC
0B051B CD E5 00 0B         A  2046    	CALL	_putch
0B051F C1                  A  2047    	POP	BC
                           A  2048    ;  195		print_version();	
                           A  2049    .LINE 195
                           A  2050    
0B0520 CD 2F 03 0B         A  2051    	CALL	_print_version
                           A  2052    ;  196		
                           A  2053    ;  197		printf("Programming MOS firmware to
                           A  2054    .LINE 197
                           A  2055    
0B0524 01 5F 18 0B         A  2056    	LD	BC,___print_uputch
0B0528 ED43 04 28 0B       A  2057    	LD	(___print_xputch),BC
0B052D 01 E3 29 0B         A  2058    	LD	BC,L__40
0B0531 C5                  A  2059    	PUSH	BC
0B0532 CD EE 16 0B         A  2060    	CALL	___print_sendstring
0B0536 C1                  A  2061    	POP	BC
                           A  2062    ;  198		printf("Reading MOS firmware");
                           A  2063    .LINE 198
                           A  2064    
0B0537 01 5F 18 0B         A  2065    	LD	BC,___print_uputch
0B053B ED43 04 28 0B       A  2066    	LD	(___print_xputch),BC
0B0540 01 11 2A 0B         A  2067    	LD	BC,L__41
0B0544 C5                  A  2068    	PUSH	BC
0B0545 CD EE 16 0B         A  2069    	CALL	___print_sendstring
0B0549 C1                  A  2070    	POP	BC
                           A  2071    ;  199		file = mos_fopen(filename, fa_read)
                           A  2072    .LINE 199
                           A  2073    
0B054A 01010000            A  2074    	LD	BC,1
0B054E C5                  A  2075    	PUSH	BC
0B054F DD0706              A  2076    	LD	BC,(IX+%6)
0B0552 C5                  A  2077    	PUSH	BC
0B0553 CD DF 11 0B         A  2078    	CALL	_mos_fopen
0B0557 C1                  A  2079    	POP	BC
0B0558 C1                  A  2080    	POP	BC
0B0559 DD77EF              A  2081    	LD	(IX+%FFFFFFEF),A
                           A  2082    ;  200		filesize = getFileSize(file);
                           A  2083    .LINE 200
                           A  2084    
0B055C DD4EEF              A  2085    	LD	C,(IX+%FFFFFFEF)
0B055F 0600                A  2086    	LD	B,%0
0B0561 C5                  A  2087    	PUSH	BC
0B0562 CD 23 16 0B         A  2088    	CALL	_getFileSize
0B0566 C1                  A  2089    	POP	BC
0B0567 DD2FE9              A  2090    	LD	(IX+%FFFFFFE9),HL
                           A  2091    ;  201		// Read file to memory
                           A  2092    ;  202		crc32_initialize();
                           A  2093    .LINE 202
                           A  2094    
0B056A CD 71 15 0B         A  2095    	CALL	_crc32_initialize
                           A  2096    ;  203		while((got = mos_fread(file, ptr, B
                           A  2097    .LINE 203
                           A  2098    
0B056E 18 22               A  2099    	JR	L_48
0B0570                     A  2100    L_49:
                           A  2101    ;  204			crc32(ptr, got);
                           A  2102    .LINE 204
                           A  2103    
0B0570 DD07E6              A  2104    	LD	BC,(IX+%FFFFFFE6)
0B0573 C5                  A  2105    	PUSH	BC
0B0574 DD07EC              A  2106    	LD	BC,(IX+%FFFFFFEC)
0B0577 C5                  A  2107    	PUSH	BC
0B0578 CD C3 15 0B         A  2108    	CALL	_crc32
0B057C C1                  A  2109    	POP	BC
0B057D C1                  A  2110    	POP	BC
                           A  2111    ;  205			ptr += got;
                           A  2112    .LINE 205
                           A  2113    
0B057E DD07E6              A  2114    	LD	BC,(IX+%FFFFFFE6)
0B0581 DD27EC              A  2115    	LD	HL,(IX+%FFFFFFEC)
0B0584 09                  A  2116    	ADD	HL,BC
0B0585 DD2FEC              A  2117    	LD	(IX+%FFFFFFEC),HL
                           A  2118    ;  206			putch('.');
                           A  2119    .LINE 206
                           A  2120    
0B0588 012E0000            A  2121    	LD	BC,46
0B058C C5                  A  2122    	PUSH	BC
0B058D CD E5 00 0B         A  2123    	CALL	_putch
0B0591 C1                  A  2124    	POP	BC
                           A  2125    ;  207		}
0B0592                     A  2126    L_48:
                           A  2127    .LINE 207
                           A  2128    
0B0592 01004000            A  2129    	LD	BC,16384
0B0596 C5                  A  2130    	PUSH	BC
0B0597 DD07EC              A  2131    	LD	BC,(IX+%FFFFFFEC)
0B059A C5                  A  2132    	PUSH	BC
0B059B DD4EEF              A  2133    	LD	C,(IX+%FFFFFFEF)
0B059E 0600                A  2134    	LD	B,%0
0B05A0 C5                  A  2135    	PUSH	BC
0B05A1 CD 21 12 0B         A  2136    	CALL	_mos_fread
0B05A5 C1                  A  2137    	POP	BC
0B05A6 C1                  A  2138    	POP	BC
0B05A7 C1                  A  2139    	POP	BC
0B05A8 DD2FE6              A  2140    	LD	(IX+%FFFFFFE6),HL
0B05AB E5C1                A  2141    	LD	BC,HL
0B05AD B7                  A  2142    	OR	A,A
0B05AE ED62                A  2143    	SBC	HL,HL
0B05B0 B7                  A  2144    	OR	A,A
0B05B1 ED42                A  2145    	SBC	HL,BC
0B05B3 38 BB               A  2146    	JR	C,L_49
                           A  2147    ;  208		crcresult = crc32_finalize();
                           A  2148    .LINE 208
                           A  2149    
0B05B5 CD 86 15 0B         A  2150    	CALL	_crc32_finalize
0B05B9 DD2FDE              A  2151    	LD	(IX+%FFFFFFDE),HL
0B05BC DD73E1              A  2152    	LD	(IX+%FFFFFFE1),E
                           A  2153    ;  209		printf("\r\n");
                           A  2154    .LINE 209
                           A  2155    
0B05BF 01 5F 18 0B         A  2156    	LD	BC,___print_uputch
0B05C3 ED43 04 28 0B       A  2157    	LD	(___print_xputch),BC
0B05C8 01 26 2A 0B         A  2158    	LD	BC,L__43
0B05CC C5                  A  2159    	PUSH	BC
0B05CD CD EE 16 0B         A  2160    	CALL	___print_sendstring
0B05D1 C1                  A  2161    	POP	BC
                           A  2162    ;  210		// Final memory check to given crc3
                           A  2163    ;  211		if(crcresult != moscrc) {
                           A  2164    .LINE 211
                           A  2165    
0B05D2 2A 80 2D 0B         A  2166    	LD	HL,(_moscrc)
0B05D6 3A 83 2D 0B         A  2167    	LD	A,(_moscrc+3)
0B05DA 5F                  A  2168    	LD	E,A
0B05DB DD07DE              A  2169    	LD	BC,(IX+%FFFFFFDE)
0B05DE DD7EE1              A  2170    	LD	A,(IX+%FFFFFFE1)
0B05E1 CD 41 1F 0B         A  2171    	CALL	__lcmpu
0B05E5 28 18               A  2172    	JR	Z,L_52
                           A  2173    ;  212			printf("Error reading file to m
                           A  2174    .LINE 212
                           A  2175    
0B05E7 01 5F 18 0B         A  2176    	LD	BC,___print_uputch
0B05EB ED43 04 28 0B       A  2177    	LD	(___print_xputch),BC
0B05F0 01 29 2A 0B         A  2178    	LD	BC,L__45
0B05F4 C5                  A  2179    	PUSH	BC
0B05F5 CD EE 16 0B         A  2180    	CALL	___print_sendstring
0B05F9 C1                  A  2181    	POP	BC
                           A  2182    ;  213			return false;
                           A  2183    .LINE 213
                           A  2184    
0B05FA AF                  A  2185    	XOR	A,A
0B05FB C3 6D 08 0B         A  2186    	JR	L_81
                           A  2187    ;  214		}
0B05FF                     A  2188    L_52:
                           A  2189    .LINE 214
                           A  2190    
                           A  2191    ;  215		printf("\r\n");	
                           A  2192    .LINE 215
                           A  2193    
0B05FF 01 5F 18 0B         A  2194    	LD	BC,___print_uputch
0B0603 ED43 04 28 0B       A  2195    	LD	(___print_xputch),BC
0B0608 01 48 2A 0B         A  2196    	LD	BC,L__46
0B060C C5                  A  2197    	PUSH	BC
0B060D CD EE 16 0B         A  2198    	CALL	___print_sendstring
0B0611 C1                  A  2199    	POP	BC
                           A  2200    ;  216		// Actual work here	
                           A  2201    ;  217		di();								
                           A  2202    .LINE 217
                           A  2203    
0B0612 F3                  A  2204    	di
                           A  2205    ;  218	
                           A  2206    ;  219		attempt = 0;
                           A  2207    .LINE 219
                           A  2208    
0B0613 01000000            A  2209    	LD	BC,0
0B0617 DD0FFA              A  2210    	LD	(IX+%FFFFFFFA),BC
                           A  2211    ;  220		while((!success) && (attempt < 3)) 
                           A  2212    .LINE 220
                           A  2213    
0B061A C3 43 08 0B         A  2214    	JR	L_78
0B061E                     A  2215    L_79:
                           A  2216    ;  221			// start address in flash
                           A  2217    ;  222			addressto = FLASHSTART;
                           A  2218    .LINE 222
                           A  2219    
0B061E 01000000            A  2220    	LD	BC,0
0B0622 DD0FF3              A  2221    	LD	(IX+%FFFFFFF3),BC
                           A  2222    ;  223			addressfrom = BUFFER1;
                           A  2223    .LINE 223
                           A  2224    
0B0625 01000005            A  2225    	LD	BC,327680
0B0629 DD0FF0              A  2226    	LD	(IX+%FFFFFFF0),BC
                           A  2227    ;  224			// Write attempt#
                           A  2228    ;  225			if(attempt > 0) printf("Retry a
                           A  2229    .LINE 225
                           A  2230    
0B062C DD07FA              A  2231    	LD	BC,(IX+%FFFFFFFA)
0B062F B7                  A  2232    	OR	A,A
0B0630 ED62                A  2233    	SBC	HL,HL
0B0632 B7                  A  2234    	OR	A,A
0B0633 ED42                A  2235    	SBC	HL,BC
0B0635 F2 6A 06 0B         A  2236    	JP	P,L_55
0B0639 01 5F 18 0B         A  2237    	LD	BC,___print_uputch
0B063D ED43 04 28 0B       A  2238    	LD	(___print_xputch),BC
0B0642 01 4B 2A 0B         A  2239    	LD	BC,L__48
0B0646 C5                  A  2240    	PUSH	BC
0B0647 CD EE 16 0B         A  2241    	CALL	___print_sendstring
0B064B C1                  A  2242    	POP	BC
0B064C DD07FA              A  2243    	LD	BC,(IX+%FFFFFFFA)
0B064F CD F7 1E 0B         A  2244    	CALL	__itol
0B0653 C5D1                A  2245    	LD	DE,BC
0B0655 4F                  A  2246    	LD	C,A
0B0656 0600                A  2247    	LD	B,%0
0B0658 C5                  A  2248    	PUSH	BC
0B0659 D5                  A  2249    	PUSH	DE
0B065A CD E5 18 0B         A  2250    	CALL	__u_itoa
0B065E C1                  A  2251    	POP	BC
0B065F C1                  A  2252    	POP	BC
0B0660 01 5B 2A 0B         A  2253    	LD	BC,L__49
0B0664 C5                  A  2254    	PUSH	BC
0B0665 CD EE 16 0B         A  2255    	CALL	___print_sendstring
0B0669 C1                  A  2256    	POP	BC
0B066A                     A  2257    L_55:
                           A  2258    ;  226			// Unprotect and erase flash
                           A  2259    ;  227			printf("Erasing flash... ");
                           A  2260    .LINE 227
                           A  2261    
0B066A 01 5F 18 0B         A  2262    	LD	BC,___print_uputch
0B066E ED43 04 28 0B       A  2263    	LD	(___print_xputch),BC
0B0673 01 5E 2A 0B         A  2264    	LD	BC,L__50
0B0677 C5                  A  2265    	PUSH	BC
0B0678 CD EE 16 0B         A  2266    	CALL	___print_sendstring
0B067C C1                  A  2267    	POP	BC
                           A  2268    ;  228			enableFlashKeyRegister();	// 
                           A  2269    .LINE 228
                           A  2270    
0B067D CD BA 12 0B         A  2271    	CALL	_enableFlashKeyRegister
                           A  2272    ;  229			FLASH_PROT = 0;				// 
                           A  2273    .LINE 229
                           A  2274    
0B0681 AF                  A  2275    	XOR	A,A
0B0682 ED39FA              A  2276    	OUT0	(250),A
                           A  2277    ;  230			enableFlashKeyRegister();	// 
                           A  2278    .LINE 230
                           A  2279    
0B0685 CD BA 12 0B         A  2280    	CALL	_enableFlashKeyRegister
                           A  2281    ;  231			FLASH_FDIV = 0x5F;			// 
                           A  2282    .LINE 231
                           A  2283    
0B0689 3E5F                A  2284    	LD	A,%5F
0B068B ED39F9              A  2285    	OUT0	(249),A
                           A  2286    ;  232			
                           A  2287    ;  233			for(counter = 0; counter < FLAS
                           A  2288    .LINE 233
                           A  2289    
0B068E 01000000            A  2290    	LD	BC,0
0B0692 DD0FFD              A  2291    	LD	(IX+%FFFFFFFD),BC
0B0695 18 1C               A  2292    	JR	L_61
0B0697                     A  2293    L_59:
                           A  2294    ;  234			{
                           A  2295    ;  235				FLASH_PAGE = counter;
                           A  2296    .LINE 235
                           A  2297    
0B0697 DD7EFD              A  2298    	LD	A,(IX+%FFFFFFFD)
0B069A ED39FC              A  2299    	OUT0	(252),A
                           A  2300    ;  236				FLASH_PGCTL = 0x02;			
                           A  2301    .LINE 236
                           A  2302    
0B069D 3E02                A  2303    	LD	A,%2
0B069F ED39FF              A  2304    	OUT0	(255),A
                           A  2305    ;  237	
                           A  2306    ;  238				do
0B06A2                     A  2307    L_57:
                           A  2308    .LINE 238
                           A  2309    
                           A  2310    ;  239				{
                           A  2311    ;  240					value = FLASH_PGCTL;
                           A  2312    .LINE 240
                           A  2313    
0B06A2 ED38FF              A  2314    	IN0	A,(255)
0B06A5 DD77E5              A  2315    	LD	(IX+%FFFFFFE5),A
                           A  2316    ;  241				}
                           A  2317    ;  242				while(value & 0x02);// wait
                           A  2318    .LINE 242
                           A  2319    
0B06A8 E602                A  2320    	AND	A,%2
0B06AA 20 F6               A  2321    	JR	NZ,L_57
0B06AC DD07FD              A  2322    	LD	BC,(IX+%FFFFFFFD)
0B06AF 03                  A  2323    	INC	BC
0B06B0 DD0FFD              A  2324    	LD	(IX+%FFFFFFFD),BC
                           A  2325    ;  243			}
0B06B3                     A  2326    L_61:
                           A  2327    .LINE 243
                           A  2328    
0B06B3 01800000            A  2329    	LD	BC,128
0B06B7 DD27FD              A  2330    	LD	HL,(IX+%FFFFFFFD)
0B06BA B7                  A  2331    	OR	A,A
0B06BB ED42                A  2332    	SBC	HL,BC
0B06BD 38 D8               A  2333    	JR	C,L_59
                           A  2334    ;  244			printf("\r\n");
                           A  2335    .LINE 244
                           A  2336    
0B06BF 01 5F 18 0B         A  2337    	LD	BC,___print_uputch
0B06C3 ED43 04 28 0B       A  2338    	LD	(___print_xputch),BC
0B06C8 01 70 2A 0B         A  2339    	LD	BC,L__53
0B06CC C5                  A  2340    	PUSH	BC
0B06CD CD EE 16 0B         A  2341    	CALL	___print_sendstring
0B06D1 C1                  A  2342    	POP	BC
                           A  2343    ;  245					
                           A  2344    ;  246			// determine number of pages to
                           A  2345    ;  247			pagemax = filesize/PAGESIZE;
                           A  2346    .LINE 247
                           A  2347    
0B06D2 DD27E9              A  2348    	LD	HL,(IX+%FFFFFFE9)
0B06D5 3E0A                A  2349    	LD	A,%A
0B06D7 CD D2 1E 0B         A  2350    	CALL	__ishru_b
0B06DB DD2FF7              A  2351    	LD	(IX+%FFFFFFF7),HL
                           A  2352    ;  248			if(filesize%PAGESIZE) // last p
                           A  2353    .LINE 248
                           A  2354    
0B06DE 01FF0300            A  2355    	LD	BC,1023
0B06E2 DD27E9              A  2356    	LD	HL,(IX+%FFFFFFE9)
0B06E5 CD 7E 1F 0B         A  2357    	CALL	__iand
0B06E9 DD2FDB              A  2358    	LD	(IX+%FFFFFFDB),HL
0B06EC CD 1C 1C 0B         A  2359    	CALL	__icmpzero
0B06F0 28 0F               A  2360    	JR	Z,L_64
                           A  2361    ;  249			{
                           A  2362    ;  250				pagemax += 1;
                           A  2363    .LINE 250
                           A  2364    
0B06F2 DD07F7              A  2365    	LD	BC,(IX+%FFFFFFF7)
0B06F5 03                  A  2366    	INC	BC
0B06F6 DD0FF7              A  2367    	LD	(IX+%FFFFFFF7),BC
                           A  2368    ;  251				lastpagebytes = filesize%PA
                           A  2369    .LINE 251
                           A  2370    
0B06F9 DD07DB              A  2371    	LD	BC,(IX+%FFFFFFDB)
0B06FC DD0FE2              A  2372    	LD	(IX+%FFFFFFE2),BC
                           A  2373    ;  252			}
                           A  2374    ;  253			else lastpagebytes = PAGESIZE; 
                           A  2375    .LINE 253
                           A  2376    
0B06FF 18 07               A  2377    	JR	L_72
0B0701                     A  2378    L_64:
0B0701 01000400            A  2379    	LD	BC,1024
0B0705 DD0FE2              A  2380    	LD	(IX+%FFFFFFE2),BC
0B0708                     A  2381    L_72:
                           A  2382    ;  254			
                           A  2383    ;  255			// write out each page to flash
                           A  2384    ;  256			for(counter = 0; counter < page
                           A  2385    .LINE 256
                           A  2386    
0B0708 01000000            A  2387    	LD	BC,0
0B070C DD0FFD              A  2388    	LD	(IX+%FFFFFFFD),BC
0B070F C3 BB 07 0B         A  2389    	JR	L_71
0B0713                     A  2390    L_69:
                           A  2391    ;  257			{
                           A  2392    ;  258				printf("\rWriting flash pag
                           A  2393    .LINE 258
                           A  2394    
0B0713 01 5F 18 0B         A  2395    	LD	BC,___print_uputch
0B0717 ED43 04 28 0B       A  2396    	LD	(___print_xputch),BC
0B071C 01 73 2A 0B         A  2397    	LD	BC,L__55
0B0720 C5                  A  2398    	PUSH	BC
0B0721 CD EE 16 0B         A  2399    	CALL	___print_sendstring
0B0725 C1                  A  2400    	POP	BC
0B0726 3E03                A  2401    	LD	A,%3
0B0728 32 9B 2E 0B         A  2402    	LD	(___print_fmt+5),A
0B072C 3E40                A  2403    	LD	A,%40
0B072E 32 97 2E 0B         A  2404    	LD	(___print_fmt+1),A
0B0732 DD07FD              A  2405    	LD	BC,(IX+%FFFFFFFD)
0B0735 03                  A  2406    	INC	BC
0B0736 AF                  A  2407    	XOR	A,A
0B0737 C5D1                A  2408    	LD	DE,BC
0B0739 4F                  A  2409    	LD	C,A
0B073A 0600                A  2410    	LD	B,%0
0B073C C5                  A  2411    	PUSH	BC
0B073D D5                  A  2412    	PUSH	DE
0B073E CD E5 18 0B         A  2413    	CALL	__u_itoa
0B0742 C1                  A  2414    	POP	BC
0B0743 C1                  A  2415    	POP	BC
0B0744 012F0000            A  2416    	LD	BC,47
0B0748 C5                  A  2417    	PUSH	BC
0B0749 CD 5F 18 0B         A  2418    	CALL	___print_uputch
0B074D C1                  A  2419    	POP	BC
0B074E 3E03                A  2420    	LD	A,%3
0B0750 32 9B 2E 0B         A  2421    	LD	(___print_fmt+5),A
0B0754 3E40                A  2422    	LD	A,%40
0B0756 32 97 2E 0B         A  2423    	LD	(___print_fmt+1),A
0B075A DD07F7              A  2424    	LD	BC,(IX+%FFFFFFF7)
0B075D AF                  A  2425    	XOR	A,A
0B075E C5D1                A  2426    	LD	DE,BC
0B0760 4F                  A  2427    	LD	C,A
0B0761 0600                A  2428    	LD	B,%0
0B0763 C5                  A  2429    	PUSH	BC
0B0764 D5                  A  2430    	PUSH	DE
0B0765 CD E5 18 0B         A  2431    	CALL	__u_itoa
0B0769 C1                  A  2432    	POP	BC
0B076A C1                  A  2433    	POP	BC
                           A  2434    ;  259				
                           A  2435    ;  260				if(counter == (pagemax - 1)
                           A  2436    .LINE 260
                           A  2437    
0B076B DD31F7              A  2438    	LD	IY,(IX+%FFFFFFF7)
0B076E ED23FF              A  2439    	LEA	HL,IY+%FFFFFFFF
0B0771 DD07FD              A  2440    	LD	BC,(IX+%FFFFFFFD)
0B0774 B7                  A  2441    	OR	A,A
0B0775 ED42                A  2442    	SBC	HL,BC
0B0777 20 15               A  2443    	JR	NZ,L_67
                           A  2444    ;  261					fastmemcpy(addressto,ad
                           A  2445    .LINE 261
                           A  2446    
0B0779 DD07E2              A  2447    	LD	BC,(IX+%FFFFFFE2)
0B077C C5                  A  2448    	PUSH	BC
0B077D DD07F0              A  2449    	LD	BC,(IX+%FFFFFFF0)
0B0780 C5                  A  2450    	PUSH	BC
0B0781 DD07F3              A  2451    	LD	BC,(IX+%FFFFFFF3)
0B0784 C5                  A  2452    	PUSH	BC
0B0785 CD E7 12 0B         A  2453    	CALL	_fastmemcpy
0B0789 C1                  A  2454    	POP	BC
0B078A C1                  A  2455    	POP	BC
0B078B C1                  A  2456    	POP	BC
                           A  2457    ;  262					//printf("Fake copy to 
                           A  2458    ;  263				else 
                           A  2459    .LINE 263
                           A  2460    
0B078C 18 14               A  2461    	JR	L_68
0B078E                     A  2462    L_67:
                           A  2463    ;  264					fastmemcpy(addressto,ad
                           A  2464    .LINE 264
                           A  2465    
0B078E 01000400            A  2466    	LD	BC,1024
0B0792 C5                  A  2467    	PUSH	BC
0B0793 DD07F0              A  2468    	LD	BC,(IX+%FFFFFFF0)
0B0796 C5                  A  2469    	PUSH	BC
0B0797 DD07F3              A  2470    	LD	BC,(IX+%FFFFFFF3)
0B079A C5                  A  2471    	PUSH	BC
0B079B CD E7 12 0B         A  2472    	CALL	_fastmemcpy
0B079F C1                  A  2473    	POP	BC
0B07A0 C1                  A  2474    	POP	BC
0B07A1 C1                  A  2475    	POP	BC
0B07A2                     A  2476    L_68:
                           A  2477    ;  265					//printf("Fake copy to 
                           A  2478    ;  266			
                           A  2479    ;  267				addressto += PAGESIZE;
                           A  2480    .LINE 267
                           A  2481    
0B07A2 01000400            A  2482    	LD	BC,1024
0B07A6 DD27F3              A  2483    	LD	HL,(IX+%FFFFFFF3)
0B07A9 09                  A  2484    	ADD	HL,BC
0B07AA DD2FF3              A  2485    	LD	(IX+%FFFFFFF3),HL
                           A  2486    ;  268				addressfrom += PAGESIZE;
                           A  2487    .LINE 268
                           A  2488    
0B07AD DD27F0              A  2489    	LD	HL,(IX+%FFFFFFF0)
0B07B0 09                  A  2490    	ADD	HL,BC
0B07B1 DD2FF0              A  2491    	LD	(IX+%FFFFFFF0),HL
0B07B4 DD07FD              A  2492    	LD	BC,(IX+%FFFFFFFD)
0B07B7 03                  A  2493    	INC	BC
0B07B8 DD0FFD              A  2494    	LD	(IX+%FFFFFFFD),BC
                           A  2495    ;  269			}
0B07BB                     A  2496    L_71:
                           A  2497    .LINE 269
                           A  2498    
0B07BB DD07F7              A  2499    	LD	BC,(IX+%FFFFFFF7)
0B07BE DD27FD              A  2500    	LD	HL,(IX+%FFFFFFFD)
0B07C1 B7                  A  2501    	OR	A,A
0B07C2 ED42                A  2502    	SBC	HL,BC
0B07C4 DA 13 07 0B         A  2503    	JR	C,L_69
                           A  2504    ;  270			lockFlashKeyRegister();	// lock
                           A  2505    .LINE 270
                           A  2506    
0B07C8 CD D2 12 0B         A  2507    	CALL	_lockFlashKeyRegister
                           A  2508    ;  271			printf("\r\nCalculating Flash C
                           A  2509    .LINE 271
                           A  2510    
0B07CC 01 5F 18 0B         A  2511    	LD	BC,___print_uputch
0B07D0 ED43 04 28 0B       A  2512    	LD	(___print_xputch),BC
0B07D5 01 88 2A 0B         A  2513    	LD	BC,L__58
0B07D9 C5                  A  2514    	PUSH	BC
0B07DA CD EE 16 0B         A  2515    	CALL	___print_sendstring
0B07DE C1                  A  2516    	POP	BC
                           A  2517    ;  272			crc32_initialize();
                           A  2518    .LINE 272
                           A  2519    
0B07DF CD 71 15 0B         A  2520    	CALL	_crc32_initialize
                           A  2521    ;  273			crc32(FLASHSTART, filesize);
                           A  2522    .LINE 273
                           A  2523    
0B07E3 DD07E9              A  2524    	LD	BC,(IX+%FFFFFFE9)
0B07E6 C5                  A  2525    	PUSH	BC
0B07E7 01000000            A  2526    	LD	BC,0
0B07EB C5                  A  2527    	PUSH	BC
0B07EC CD C3 15 0B         A  2528    	CALL	_crc32
0B07F0 C1                  A  2529    	POP	BC
0B07F1 C1                  A  2530    	POP	BC
                           A  2531    ;  274			crcresult = crc32_finalize();
                           A  2532    .LINE 274
                           A  2533    
0B07F2 CD 86 15 0B         A  2534    	CALL	_crc32_finalize
0B07F6 E5C1                A  2535    	LD	BC,HL
0B07F8 DD0FDE              A  2536    	LD	(IX+%FFFFFFDE),BC
0B07FB DD73E1              A  2537    	LD	(IX+%FFFFFFE1),E
                           A  2538    ;  275			if(crcresult == moscrc) {
                           A  2539    .LINE 275
                           A  2540    
0B07FE 2A 80 2D 0B         A  2541    	LD	HL,(_moscrc)
0B0802 3A 83 2D 0B         A  2542    	LD	A,(_moscrc+3)
0B0806 5F                  A  2543    	LD	E,A
0B0807 DD7EE1              A  2544    	LD	A,(IX+%FFFFFFE1)
0B080A CD 41 1F 0B         A  2545    	CALL	__lcmpu
0B080E 20 19               A  2546    	JR	NZ,L_75
                           A  2547    ;  276				printf("OK\r\n");
                           A  2548    .LINE 276
                           A  2549    
0B0810 01 5F 18 0B         A  2550    	LD	BC,___print_uputch
0B0814 ED43 04 28 0B       A  2551    	LD	(___print_xputch),BC
0B0819 01 A3 2A 0B         A  2552    	LD	BC,L__60
0B081D C5                  A  2553    	PUSH	BC
0B081E CD EE 16 0B         A  2554    	CALL	___print_sendstring
0B0822 C1                  A  2555    	POP	BC
                           A  2556    ;  277				success = true;
                           A  2557    .LINE 277
                           A  2558    
0B0823 DD36F601            A  2559    	LD	(IX+%FFFFFFF6),%1
                           A  2560    ;  278			}
                           A  2561    ;  279			else {
                           A  2562    .LINE 279
                           A  2563    
0B0827 18 13               A  2564    	JR	L_77
0B0829                     A  2565    L_75:
                           A  2566    ;  280				printf("ERROR\r\n");
                           A  2567    .LINE 280
                           A  2568    
0B0829 01 5F 18 0B         A  2569    	LD	BC,___print_uputch
0B082D ED43 04 28 0B       A  2570    	LD	(___print_xputch),BC
0B0832 01 A8 2A 0B         A  2571    	LD	BC,L__61
0B0836 C5                  A  2572    	PUSH	BC
0B0837 CD EE 16 0B         A  2573    	CALL	___print_sendstring
0B083B C1                  A  2574    	POP	BC
                           A  2575    ;  281			}
0B083C                     A  2576    L_77:
                           A  2577    .LINE 281
                           A  2578    
                           A  2579    ;  282			attempt++;
                           A  2580    .LINE 282
                           A  2581    
0B083C DD07FA              A  2582    	LD	BC,(IX+%FFFFFFFA)
0B083F 03                  A  2583    	INC	BC
0B0840 DD0FFA              A  2584    	LD	(IX+%FFFFFFFA),BC
                           A  2585    ;  283		}
0B0843                     A  2586    L_78:
                           A  2587    .LINE 283
                           A  2588    
0B0843 DD7EF6              A  2589    	LD	A,(IX+%FFFFFFF6)
0B0846 B7                  A  2590    	OR	A,A
0B0847 20 0E               A  2591    	JR	NZ,L_80
0B0849 01030000            A  2592    	LD	BC,3
0B084D DD27FA              A  2593    	LD	HL,(IX+%FFFFFFFA)
0B0850 B7                  A  2594    	OR	A,A
0B0851 ED42                A  2595    	SBC	HL,BC
0B0853 FA 1E 06 0B         A  2596    	JP	M,L_79
0B0857                     A  2597    L_80:
                           A  2598    ;  284		printf("\r\n");
                           A  2599    .LINE 284
                           A  2600    
0B0857 01 5F 18 0B         A  2601    	LD	BC,___print_uputch
0B085B ED43 04 28 0B       A  2602    	LD	(___print_xputch),BC
0B0860 01 B0 2A 0B         A  2603    	LD	BC,L__64
0B0864 C5                  A  2604    	PUSH	BC
0B0865 CD EE 16 0B         A  2605    	CALL	___print_sendstring
0B0869 C1                  A  2606    	POP	BC
                           A  2607    ;  285		return success;
                           A  2608    .LINE 285
                           A  2609    
0B086A DD7EF6              A  2610    	LD	A,(IX+%FFFFFFF6)
                           A  2611    ;  286	}
0B086D                     A  2612    L_81:
                           A  2613    .LINE 286
                           A  2614    
0B086D DDF9                A  2615    	LD	SP,IX
0B086F DDE1                A  2616    	POP	IX
0B0871 C9                  A  2617    	RET	
                           A  2618    
                           A  2619    
                           A  2620    ;**************************** _update_mos *****
                           A  2621    ;Name                         Addr/Register   S
                           A  2622    ;_lockFlashKeyRegister               IMPORT  --
                           A  2623    ;_fastmemcpy                         IMPORT  --
                           A  2624    ;___print_fmt                        IMPORT    
                           A  2625    ;_enableFlashKeyRegister             IMPORT  --
                           A  2626    ;__u_itoa                            IMPORT  --
                           A  2627    ;_moscrc                             STATIC    
                           A  2628    ;_crc32_finalize                     IMPORT  --
                           A  2629    ;_mos_fread                          IMPORT  --
                           A  2630    ;_crc32                              IMPORT  --
                           A  2631    ;_crc32_initialize                   IMPORT  --
                           A  2632    ;_getFileSize                        IMPORT  --
                           A  2633    ;_mos_fopen                          IMPORT  --
                           A  2634    ;___print_sendstring                 IMPORT  --
                           A  2635    ;___print_xputch                     IMPORT    
                           A  2636    ;___print_uputch                     IMPORT  --
                           A  2637    ;_putch                              IMPORT  --
                           A  2638    ;G_0                                  IX-37    
                           A  2639    ;crcresult                            IX-34    
                           A  2640    ;lastpagebytes                        IX-30    
                           A  2641    ;value                                IX-27    
                           A  2642    ;got                                  IX-26    
                           A  2643    ;filesize                             IX-23    
                           A  2644    ;ptr                                  IX-20    
                           A  2645    ;file                                 IX-17    
                           A  2646    ;addressfrom                          IX-16    
                           A  2647    ;addressto                            IX-13    
                           A  2648    ;success                              IX-10    
                           A  2649    ;pagemax                               IX-9    
                           A  2650    ;attempt                               IX-6    
                           A  2651    ;counter                               IX-3    
                           A  2652    ;filename                              IX+6    
                           A  2653    
                           A  2654    
                           A  2655    ; Stack Frame Size: 46 (bytes)
                           A  2656    ;       Spill Code: 0 (instruction)
                           A  2657    
                           A  2658    
                           A  2659    .ENDFUNC "update_mos",286,"_update_mos"
                           A  2660    	SEGMENT STRSECT
0B29E3                     A  2661    L__40:
0B29E3 50726F67 72616D6D   A  2662    	DB	"Programming MOS firmware to ez80 flash
0B29EB 696E6720 4D4F5320 
0B29F3 6669726D 77617265 
0B29FB 20746F20 657A3830 
0B2A03 20666C61 73682E2E 
0B2A0B 2E 
0B2A0C 0D0A0D0A 00         A  2663    	DB	13,10,13,10,0
0B2A11                     A  2664    L__41:
0B2A11 52656164 696E6720   A  2665    	DB	"Reading MOS firmware"
0B2A19 4D4F5320 6669726D 
0B2A21 77617265 
0B2A25 00                  A  2666    	DB	0
0B2A26                     A  2667    L__43:
0B2A26 0D0A00              A  2668    	DB	13,10,0
0B2A29                     A  2669    L__45:
0B2A29 4572726F 72207265   A  2670    	DB	"Error reading file to memory"
0B2A31 6164696E 67206669 
0B2A39 6C652074 6F206D65 
0B2A41 6D6F7279 
0B2A45 0D0A00              A  2671    	DB	13,10,0
0B2A48                     A  2672    L__46:
0B2A48 0D0A00              A  2673    	DB	13,10,0
0B2A4B                     A  2674    L__48:
0B2A4B 52657472 79206174   A  2675    	DB	"Retry attempt #"
0B2A53 74656D70 742023 
0B2A5A 00                  A  2676    	DB	0
0B2A5B                     A  2677    L__49:
0B2A5B 0D0A00              A  2678    	DB	13,10,0
0B2A5E                     A  2679    L__50:
0B2A5E 45726173 696E6720   A  2680    	DB	"Erasing flash... "
0B2A66 666C6173 682E2E2E 
0B2A6E 20 
0B2A6F 00                  A  2681    	DB	0
0B2A70                     A  2682    L__53:
0B2A70 0D0A00              A  2683    	DB	13,10,0
0B2A73                     A  2684    L__55:
0B2A73 0D                  A  2685    	DB	13
0B2A74 57726974 696E6720   A  2686    	DB	"Writing flash page "
0B2A7C 666C6173 68207061 
0B2A84 676520 
0B2A87 00                  A  2687    	DB	0
0B2A88                     A  2688    L__58:
0B2A88 0D0A                A  2689    	DB	13,10
0B2A8A 43616C63 756C6174   A  2690    	DB	"Calculating Flash CRC - "
0B2A92 696E6720 466C6173 
0B2A9A 68204352 43202D20 
0B2AA2 00                  A  2691    	DB	0
0B2AA3                     A  2692    L__60:
0B2AA3 4F4B                A  2693    	DB	"OK"
0B2AA5 0D0A00              A  2694    	DB	13,10,0
0B2AA8                     A  2695    L__61:
0B2AA8 4552524F 52         A  2696    	DB	"ERROR"
0B2AAD 0D0A00              A  2697    	DB	13,10,0
0B2AB0                     A  2698    L__64:
0B2AB0 0D0A00              A  2699    	DB	13,10,0
                           A  2700    	SEGMENT CODE
                           A  2701    ;  287	
                           A  2702    ;  288	void echoVDP(uint8_t value) {
0B0872                     A  2703    _echoVDP:
                           A  2704    .DEFINE "_echoVDP"
                           A  2705    
                           A  2706    .VALUE _echoVDP
                           A  2707    
                           A  2708    .CLASS 2
                           A  2709    
                           A  2710    .TYPE 65
                           A  2711    
                           A  2712    .ENDEF
                           A  2713    
                           A  2714    .BEGFUNC "echoVDP",288,"_echoVDP"
                           A  2715    
                           A  2716    .LINE 288
                           A  2717    
                           A  2718    .DEFINE "value"
                           A  2719    
                           A  2720    .CLASS 65
                           A  2721    
                           A  2722    .VALUE 6
                           A  2723    
                           A  2724    .TYPE 12
                           A  2725    
                           A  2726    .ENDEF
                           A  2727    
0B0872 DDE5                A  2728    	PUSH	IX
0B0874 DD210000 00         A  2729    	LD	IX,0
0B0879 DD39                A  2730    	ADD	IX,SP
                           A  2731    ;  289		putch(23);
                           A  2732    .LINE 289
                           A  2733    
0B087B 01170000            A  2734    	LD	BC,23
0B087F C5                  A  2735    	PUSH	BC
0B0880 CD E5 00 0B         A  2736    	CALL	_putch
0B0884 C1                  A  2737    	POP	BC
                           A  2738    ;  290		putch(0);
                           A  2739    .LINE 290
                           A  2740    
0B0885 01000000            A  2741    	LD	BC,0
0B0889 C5                  A  2742    	PUSH	BC
0B088A CD E5 00 0B         A  2743    	CALL	_putch
0B088E C1                  A  2744    	POP	BC
                           A  2745    ;  291		putch(0x80);
                           A  2746    .LINE 291
                           A  2747    
0B088F 01800000            A  2748    	LD	BC,128
0B0893 C5                  A  2749    	PUSH	BC
0B0894 CD E5 00 0B         A  2750    	CALL	_putch
0B0898 C1                  A  2751    	POP	BC
                           A  2752    ;  292		putch(value);
                           A  2753    .LINE 292
                           A  2754    
0B0899 DD7E06              A  2755    	LD	A,(IX+%6)
0B089C B7ED62              A  2756    	UEXT	HL
0B089F 6F                  A  2757    	LD	L,A
0B08A0 E5                  A  2758    	PUSH	HL
0B08A1 CD E5 00 0B         A  2759    	CALL	_putch
0B08A5 C1                  A  2760    	POP	BC
                           A  2761    ;  293		delayms(100);
                           A  2762    .LINE 293
                           A  2763    
0B08A6 01640000            A  2764    	LD	BC,100
0B08AA C5                  A  2765    	PUSH	BC
0B08AB CD 8B 13 0B         A  2766    	CALL	_delayms
0B08AF C1                  A  2767    	POP	BC
                           A  2768    ;  294	}
                           A  2769    .LINE 294
                           A  2770    
0B08B0 DDF9                A  2771    	LD	SP,IX
0B08B2 DDE1                A  2772    	POP	IX
0B08B4 C9                  A  2773    	RET	
                           A  2774    
                           A  2775    
                           A  2776    ;**************************** _echoVDP ********
                           A  2777    ;Name                         Addr/Register   S
                           A  2778    ;_delayms                            IMPORT  --
                           A  2779    ;_putch                              IMPORT  --
                           A  2780    ;value                                 IX+6    
                           A  2781    
                           A  2782    
                           A  2783    ; Stack Frame Size: 9 (bytes)
                           A  2784    ;       Spill Code: 0 (instruction)
                           A  2785    
                           A  2786    
                           A  2787    .ENDFUNC "echoVDP",294,"_echoVDP"
                           A  2788    ;  295	
                           A  2789    ;  296	int getCommand(const char *command) {
0B08B5                     A  2790    _getCommand:
                           A  2791    .DEFINE "_getCommand"
                           A  2792    
                           A  2793    .VALUE _getCommand
                           A  2794    
                           A  2795    .CLASS 2
                           A  2796    
                           A  2797    .TYPE 68
                           A  2798    
                           A  2799    .ENDEF
                           A  2800    
                           A  2801    .BEGFUNC "getCommand",296,"_getCommand"
                           A  2802    
                           A  2803    .LINE 296
                           A  2804    
                           A  2805    .DEFINE "command"
                           A  2806    
                           A  2807    .CLASS 65
                           A  2808    
                           A  2809    .VALUE 6
                           A  2810    
                           A  2811    .TYPE 194
                           A  2812    
                           A  2813    .ENDEF
                           A  2814    
0B08B5 DDE5                A  2815    	PUSH	IX
0B08B7 DD210000 00         A  2816    	LD	IX,0
0B08BC DD39                A  2817    	ADD	IX,SP
                           A  2818    ;  297		if(memcmp(command, "all\0", 4) == 0
                           A  2819    .LINE 297
                           A  2820    
0B08BE 01040000            A  2821    	LD	BC,4
0B08C2 C5                  A  2822    	PUSH	BC
0B08C3 01 B3 2A 0B         A  2823    	LD	BC,L__67
0B08C7 C5                  A  2824    	PUSH	BC
0B08C8 DD0706              A  2825    	LD	BC,(IX+%6)
0B08CB C5                  A  2826    	PUSH	BC
0B08CC CD F2 1B 0B         A  2827    	CALL	_memcmp
0B08D0 C1                  A  2828    	POP	BC
0B08D1 C1                  A  2829    	POP	BC
0B08D2 C1                  A  2830    	POP	BC
0B08D3 CD 1C 1C 0B         A  2831    	CALL	__icmpzero
0B08D7 20 08               A  2832    	JR	NZ,L_85
0B08D9 21010000            A  2833    	LD	HL,1
0B08DD C3 AE 09 0B         A  2834    	JR	L_97
0B08E1                     A  2835    L_85:
                           A  2836    ;  298		if(memcmp(command, "mos\0", 4) == 0
                           A  2837    .LINE 298
                           A  2838    
0B08E1 01040000            A  2839    	LD	BC,4
0B08E5 C5                  A  2840    	PUSH	BC
0B08E6 01 B8 2A 0B         A  2841    	LD	BC,L__69
0B08EA C5                  A  2842    	PUSH	BC
0B08EB DD0706              A  2843    	LD	BC,(IX+%6)
0B08EE C5                  A  2844    	PUSH	BC
0B08EF CD F2 1B 0B         A  2845    	CALL	_memcmp
0B08F3 C1                  A  2846    	POP	BC
0B08F4 C1                  A  2847    	POP	BC
0B08F5 C1                  A  2848    	POP	BC
0B08F6 CD 1C 1C 0B         A  2849    	CALL	__icmpzero
0B08FA 20 08               A  2850    	JR	NZ,L_87
0B08FC 21020000            A  2851    	LD	HL,2
0B0900 C3 AE 09 0B         A  2852    	JR	L_97
0B0904                     A  2853    L_87:
                           A  2854    ;  299		if(memcmp(command, "vdp\0", 4) == 0
                           A  2855    .LINE 299
                           A  2856    
0B0904 01040000            A  2857    	LD	BC,4
0B0908 C5                  A  2858    	PUSH	BC
0B0909 01 BD 2A 0B         A  2859    	LD	BC,L__71
0B090D C5                  A  2860    	PUSH	BC
0B090E DD0706              A  2861    	LD	BC,(IX+%6)
0B0911 C5                  A  2862    	PUSH	BC
0B0912 CD F2 1B 0B         A  2863    	CALL	_memcmp
0B0916 C1                  A  2864    	POP	BC
0B0917 C1                  A  2865    	POP	BC
0B0918 C1                  A  2866    	POP	BC
0B0919 CD 1C 1C 0B         A  2867    	CALL	__icmpzero
0B091D 20 08               A  2868    	JR	NZ,L_89
0B091F 21030000            A  2869    	LD	HL,3
0B0923 C3 AE 09 0B         A  2870    	JR	L_97
0B0927                     A  2871    L_89:
                           A  2872    ;  300		if(memcmp(command, "batch\0", 6) ==
                           A  2873    .LINE 300
                           A  2874    
0B0927 01060000            A  2875    	LD	BC,6
0B092B C5                  A  2876    	PUSH	BC
0B092C 01 C2 2A 0B         A  2877    	LD	BC,L__73
0B0930 C5                  A  2878    	PUSH	BC
0B0931 DD0706              A  2879    	LD	BC,(IX+%6)
0B0934 C5                  A  2880    	PUSH	BC
0B0935 CD F2 1B 0B         A  2881    	CALL	_memcmp
0B0939 C1                  A  2882    	POP	BC
0B093A C1                  A  2883    	POP	BC
0B093B C1                  A  2884    	POP	BC
0B093C CD 1C 1C 0B         A  2885    	CALL	__icmpzero
0B0940 20 06               A  2886    	JR	NZ,L_91
0B0942 21050000            A  2887    	LD	HL,5
0B0946 18 66               A  2888    	JR	L_97
0B0948                     A  2889    L_91:
                           A  2890    ;  301		if(memcmp(command, "-f\0", 3) == 0)
                           A  2891    .LINE 301
                           A  2892    
0B0948 01030000            A  2893    	LD	BC,3
0B094C C5                  A  2894    	PUSH	BC
0B094D 01 C9 2A 0B         A  2895    	LD	BC,L__75
0B0951 C5                  A  2896    	PUSH	BC
0B0952 DD0706              A  2897    	LD	BC,(IX+%6)
0B0955 C5                  A  2898    	PUSH	BC
0B0956 CD F2 1B 0B         A  2899    	CALL	_memcmp
0B095A C1                  A  2900    	POP	BC
0B095B C1                  A  2901    	POP	BC
0B095C C1                  A  2902    	POP	BC
0B095D CD 1C 1C 0B         A  2903    	CALL	__icmpzero
0B0961 20 06               A  2904    	JR	NZ,L_93
0B0963 21040000            A  2905    	LD	HL,4
0B0967 18 45               A  2906    	JR	L_97
0B0969                     A  2907    L_93:
                           A  2908    ;  302		if(memcmp(command, "force\0", 6) ==
                           A  2909    .LINE 302
                           A  2910    
0B0969 01060000            A  2911    	LD	BC,6
0B096D C5                  A  2912    	PUSH	BC
0B096E 01 CD 2A 0B         A  2913    	LD	BC,L__77
0B0972 C5                  A  2914    	PUSH	BC
0B0973 DD0706              A  2915    	LD	BC,(IX+%6)
0B0976 C5                  A  2916    	PUSH	BC
0B0977 CD F2 1B 0B         A  2917    	CALL	_memcmp
0B097B C1                  A  2918    	POP	BC
0B097C C1                  A  2919    	POP	BC
0B097D C1                  A  2920    	POP	BC
0B097E CD 1C 1C 0B         A  2921    	CALL	__icmpzero
0B0982 20 06               A  2922    	JR	NZ,L_95
0B0984 21040000            A  2923    	LD	HL,4
0B0988 18 24               A  2924    	JR	L_97
0B098A                     A  2925    L_95:
                           A  2926    ;  303		if(memcmp(command, "-force\0", 7) =
                           A  2927    .LINE 303
                           A  2928    
0B098A 01070000            A  2929    	LD	BC,7
0B098E C5                  A  2930    	PUSH	BC
0B098F 01 D4 2A 0B         A  2931    	LD	BC,L__79
0B0993 C5                  A  2932    	PUSH	BC
0B0994 DD0706              A  2933    	LD	BC,(IX+%6)
0B0997 C5                  A  2934    	PUSH	BC
0B0998 CD F2 1B 0B         A  2935    	CALL	_memcmp
0B099C C1                  A  2936    	POP	BC
0B099D C1                  A  2937    	POP	BC
0B099E C1                  A  2938    	POP	BC
0B099F CD 1C 1C 0B         A  2939    	CALL	__icmpzero
0B09A3 20 06               A  2940    	JR	NZ,L_96
0B09A5 21040000            A  2941    	LD	HL,4
0B09A9 18 03               A  2942    	JR	L_97
0B09AB                     A  2943    L_96:
                           A  2944    ;  304		return CMDUNKNOWN;
                           A  2945    .LINE 304
                           A  2946    
0B09AB B7                  A  2947    	OR	A,A
0B09AC ED62                A  2948    	SBC	HL,HL
                           A  2949    ;  305	}
0B09AE                     A  2950    L_97:
                           A  2951    .LINE 305
                           A  2952    
0B09AE DDF9                A  2953    	LD	SP,IX
0B09B0 DDE1                A  2954    	POP	IX
0B09B2 C9                  A  2955    	RET	
                           A  2956    
                           A  2957    
                           A  2958    ;**************************** _getCommand *****
                           A  2959    ;Name                         Addr/Register   S
                           A  2960    ;_memcmp                             IMPORT  --
                           A  2961    ;command                               IX+6    
                           A  2962    
                           A  2963    
                           A  2964    ; Stack Frame Size: 9 (bytes)
                           A  2965    ;       Spill Code: 0 (instruction)
                           A  2966    
                           A  2967    
                           A  2968    .ENDFUNC "getCommand",305,"_getCommand"
                           A  2969    	SEGMENT STRSECT
0B2AB3                     A  2970    L__67:
0B2AB3 616C6C              A  2971    	DB	"all"
0B2AB6 0000                A  2972    	DB	0,0
0B2AB8                     A  2973    L__69:
0B2AB8 6D6F73              A  2974    	DB	"mos"
0B2ABB 0000                A  2975    	DB	0,0
0B2ABD                     A  2976    L__71:
0B2ABD 766470              A  2977    	DB	"vdp"
0B2AC0 0000                A  2978    	DB	0,0
0B2AC2                     A  2979    L__73:
0B2AC2 62617463 68         A  2980    	DB	"batch"
0B2AC7 0000                A  2981    	DB	0,0
0B2AC9                     A  2982    L__75:
0B2AC9 2D66                A  2983    	DB	"-f"
0B2ACB 0000                A  2984    	DB	0,0
0B2ACD                     A  2985    L__77:
0B2ACD 666F7263 65         A  2986    	DB	"force"
0B2AD2 0000                A  2987    	DB	0,0
0B2AD4                     A  2988    L__79:
0B2AD4 2D666F72 6365       A  2989    	DB	"-force"
0B2ADA 0000                A  2990    	DB	0,0
                           A  2991    	SEGMENT CODE
                           A  2992    ;  306	
                           A  2993    ;  307	bool parseCommands(int argc, char *argv
0B09B3                     A  2994    _parseCommands:
                           A  2995    .DEFINE "_parseCommands"
                           A  2996    
                           A  2997    .VALUE _parseCommands
                           A  2998    
                           A  2999    .CLASS 2
                           A  3000    
                           A  3001    .TYPE 76
                           A  3002    
                           A  3003    .ENDEF
                           A  3004    
                           A  3005    .BEGFUNC "parseCommands",307,"_parseCommands"
                           A  3006    
                           A  3007    .LINE 307
                           A  3008    
                           A  3009    .DEFINE "argc"
                           A  3010    
                           A  3011    .CLASS 65
                           A  3012    
                           A  3013    .VALUE 6
                           A  3014    
                           A  3015    .TYPE 4
                           A  3016    
                           A  3017    .ENDEF
                           A  3018    
                           A  3019    .DEFINE "argv"
                           A  3020    
                           A  3021    .CLASS 65
                           A  3022    
                           A  3023    .VALUE 9
                           A  3024    
                           A  3025    .TYPE 290
                           A  3026    
                           A  3027    .ENDEF
                           A  3028    
                           A  3029    .DEFINE "argcounter"
                           A  3030    
                           A  3031    .CLASS 65
                           A  3032    
                           A  3033    .VALUE -3
                           A  3034    
                           A  3035    .TYPE 4
                           A  3036    
                           A  3037    .ENDEF
                           A  3038    
                           A  3039    .DEFINE "command"
                           A  3040    
                           A  3041    .CLASS 65
                           A  3042    
                           A  3043    .VALUE -15
                           A  3044    
                           A  3045    .TYPE 4
                           A  3046    
                           A  3047    .ENDEF
                           A  3048    
0B09B3 DDE5                A  3049    	PUSH	IX
0B09B5 DD210000 00         A  3050    	LD	IX,0
0B09BA DD39                A  3051    	ADD	IX,SP
0B09BC ED22F1              A  3052    	LEA	HL,IX+%FFFFFFF1
0B09BF F9                  A  3053    	LD	SP,HL
                           A  3054    ;  308		int argcounter;
                           A  3055    ;  309		int command;
                           A  3056    ;  310	
                           A  3057    ;  311		argcounter = 1;
                           A  3058    .LINE 311
                           A  3059    
0B09C0 01010000            A  3060    	LD	BC,1
0B09C4 DD0FFD              A  3061    	LD	(IX+%FFFFFFFD),BC
                           A  3062    ;  312		while(argcounter < argc) {
                           A  3063    .LINE 312
                           A  3064    
0B09C7 C3 60 0B 0B         A  3065    	JR	L_128
0B09CB                     A  3066    L_129:
                           A  3067    ;  313			command = getCommand(argv[argco
                           A  3068    .LINE 313
                           A  3069    
0B09CB DD27FD              A  3070    	LD	HL,(IX+%FFFFFFFD)
0B09CE E5C1                A  3071    	LD	BC,HL
0B09D0 29                  A  3072    	ADD	HL,HL
0B09D1 09                  A  3073    	ADD	HL,BC
0B09D2 DD0709              A  3074    	LD	BC,(IX+%9)
0B09D5 09                  A  3075    	ADD	HL,BC
0B09D6 ED07                A  3076    	LD	BC,(HL)
0B09D8 C5                  A  3077    	PUSH	BC
0B09D9 CD B5 08 0B         A  3078    	CALL	_getCommand
0B09DD C1                  A  3079    	POP	BC
0B09DE DD2FF1              A  3080    	LD	(IX+%FFFFFFF1),HL
                           A  3081    ;  314			switch(command) {
                           A  3082    .LINE 314
                           A  3083    
0B09E1 CD B3 16 0B         A  3084    	CALL	__seqcaseD
0B09E5 E9                  A  3085    	JP	(HL)
0B09E6                     A  3086    L__82:
0B09E6 0600                A  3087    	DW	6
0B09E8 0000                A  3088    	DW	0
0B09EA 00                  A  3089    	DB	0
0B09EB 000A0B              A  3090    	DW24	L_98	
                           A  3091    
0B09EE 050A0B              A  3092    	DW24	L_99	
                           A  3093    
0B09F1 460A0B              A  3094    	DW24	L_103	
                           A  3095    
0B09F4 BA0A0B              A  3096    	DW24	L_111	
                           A  3097    
0B09F7 420B0B              A  3098    	DW24	L_122	
                           A  3099    
0B09FA 2C0B0B              A  3100    	DW24	L_119	
                           A  3101    
0B09FD 590B0B              A  3102    	DW24	L_127	
                           A  3103    
                           A  3104    ;  315				case CMDUNKNOWN:
0B0A00                     A  3105    L_98:
                           A  3106    .LINE 315
                           A  3107    
                           A  3108    ;  316					return false;
                           A  3109    .LINE 316
                           A  3110    
0B0A00 AF                  A  3111    	XOR	A,A
0B0A01 C3 8E 0B 0B         A  3112    	JR	L_136
                           A  3113    ;  317					break;
                           A  3114    ;  318				case CMDALL:
0B0A05                     A  3115    L_99:
                           A  3116    .LINE 318
                           A  3117    
                           A  3118    ;  319					if(flashmos || flashvdp
                           A  3119    .LINE 319
                           A  3120    
0B0A05 3A 3A 22 0B         A  3121    	LD	A,(_flashmos)
0B0A09 B7                  A  3122    	OR	A,A
0B0A0A 20 07               A  3123    	JR	NZ,L_101
0B0A0C 3A 3B 22 0B         A  3124    	LD	A,(_flashvdp)
0B0A10 B7                  A  3125    	OR	A,A
0B0A11 28 05               A  3126    	JR	Z,L_102
0B0A13                     A  3127    L_101:
0B0A13 AF                  A  3128    	XOR	A,A
0B0A14 C3 8E 0B 0B         A  3129    	JR	L_136
0B0A18                     A  3130    L_102:
                           A  3131    ;  320					strcpy(mosfilename, DEF
                           A  3132    .LINE 320
                           A  3133    
0B0A18 01 DC 2A 0B         A  3134    	LD	BC,L__85
0B0A1C C5                  A  3135    	PUSH	BC
0B0A1D 01 80 2C 0B         A  3136    	LD	BC,_mosfilename
0B0A21 C5                  A  3137    	PUSH	BC
0B0A22 CD 57 1F 0B         A  3138    	CALL	_strcpy
0B0A26 C1                  A  3139    	POP	BC
0B0A27 C1                  A  3140    	POP	BC
                           A  3141    ;  321					strcpy(vdpfilename, DEF
                           A  3142    .LINE 321
                           A  3143    
0B0A28 01 E4 2A 0B         A  3144    	LD	BC,L__86
0B0A2C C5                  A  3145    	PUSH	BC
0B0A2D 01 84 2D 0B         A  3146    	LD	BC,_vdpfilename
0B0A31 C5                  A  3147    	PUSH	BC
0B0A32 CD 57 1F 0B         A  3148    	CALL	_strcpy
0B0A36 C1                  A  3149    	POP	BC
0B0A37 C1                  A  3150    	POP	BC
                           A  3151    ;  322					flashmos = true;
                           A  3152    .LINE 322
                           A  3153    
0B0A38 3E01                A  3154    	LD	A,%1
0B0A3A 32 3A 22 0B         A  3155    	LD	(_flashmos),A
                           A  3156    ;  323					flashvdp = true;
                           A  3157    .LINE 323
                           A  3158    
0B0A3E 32 3B 22 0B         A  3159    	LD	(_flashvdp),A
                           A  3160    ;  324					break;
                           A  3161    .LINE 324
                           A  3162    
0B0A42 C3 59 0B 0B         A  3163    	JR	L_127
                           A  3164    ;  325				case CMDMOS:
0B0A46                     A  3165    L_103:
                           A  3166    .LINE 325
                           A  3167    
                           A  3168    ;  326					if(flashmos) return fal
                           A  3169    .LINE 326
                           A  3170    
0B0A46 3A 3A 22 0B         A  3171    	LD	A,(_flashmos)
0B0A4A B7                  A  3172    	OR	A,A
0B0A4B 28 05               A  3173    	JR	Z,L_109
0B0A4D AF                  A  3174    	XOR	A,A
0B0A4E C3 8E 0B 0B         A  3175    	JR	L_136
0B0A52                     A  3176    L_109:
                           A  3177    ;  327					if((argc > (argcounter+
                           A  3178    .LINE 327
                           A  3179    
0B0A52 DD07FD              A  3180    	LD	BC,(IX+%FFFFFFFD)
0B0A55 03                  A  3181    	INC	BC
0B0A56 DD0FFA              A  3182    	LD	(IX+%FFFFFFFA),BC
0B0A59 DD0706              A  3183    	LD	BC,(IX+%6)
0B0A5C DD27FA              A  3184    	LD	HL,(IX+%FFFFFFFA)
0B0A5F B7                  A  3185    	OR	A,A
0B0A60 ED42                A  3186    	SBC	HL,BC
0B0A62 F2 A0 0A 0B         A  3187    	JP	P,L_108
0B0A66 DD27FA              A  3188    	LD	HL,(IX+%FFFFFFFA)
0B0A69 E5C1                A  3189    	LD	BC,HL
0B0A6B 29                  A  3190    	ADD	HL,HL
0B0A6C 09                  A  3191    	ADD	HL,BC
0B0A6D DD0709              A  3192    	LD	BC,(IX+%9)
0B0A70 09                  A  3193    	ADD	HL,BC
0B0A71 ED07                A  3194    	LD	BC,(HL)
0B0A73 C5                  A  3195    	PUSH	BC
0B0A74 CD B5 08 0B         A  3196    	CALL	_getCommand
0B0A78 C1                  A  3197    	POP	BC
0B0A79 CD 1C 1C 0B         A  3198    	CALL	__icmpzero
0B0A7D 20 21               A  3199    	JR	NZ,L_108
                           A  3200    ;  328						strcpy(mosfilename,
                           A  3201    .LINE 328
                           A  3202    
0B0A7F DD27FA              A  3203    	LD	HL,(IX+%FFFFFFFA)
0B0A82 E5C1                A  3204    	LD	BC,HL
0B0A84 29                  A  3205    	ADD	HL,HL
0B0A85 09                  A  3206    	ADD	HL,BC
0B0A86 DD0709              A  3207    	LD	BC,(IX+%9)
0B0A89 09                  A  3208    	ADD	HL,BC
0B0A8A ED07                A  3209    	LD	BC,(HL)
0B0A8C C5                  A  3210    	PUSH	BC
0B0A8D 01 80 2C 0B         A  3211    	LD	BC,_mosfilename
0B0A91 C5                  A  3212    	PUSH	BC
0B0A92 CD 57 1F 0B         A  3213    	CALL	_strcpy
0B0A96 C1                  A  3214    	POP	BC
0B0A97 C1                  A  3215    	POP	BC
                           A  3216    ;  329						argcounter++;
                           A  3217    .LINE 329
                           A  3218    
0B0A98 DD07FA              A  3219    	LD	BC,(IX+%FFFFFFFA)
0B0A9B DD0FFD              A  3220    	LD	(IX+%FFFFFFFD),BC
                           A  3221    ;  330					}
                           A  3222    ;  331					else {
                           A  3223    .LINE 331
                           A  3224    
0B0A9E 18 10               A  3225    	JR	L_110
0B0AA0                     A  3226    L_108:
                           A  3227    ;  332						strcpy(mosfilename,
                           A  3228    .LINE 332
                           A  3229    
0B0AA0 01 F1 2A 0B         A  3230    	LD	BC,L__90
0B0AA4 C5                  A  3231    	PUSH	BC
0B0AA5 01 80 2C 0B         A  3232    	LD	BC,_mosfilename
0B0AA9 C5                  A  3233    	PUSH	BC
0B0AAA CD 57 1F 0B         A  3234    	CALL	_strcpy
0B0AAE C1                  A  3235    	POP	BC
0B0AAF C1                  A  3236    	POP	BC
                           A  3237    ;  333					}
0B0AB0                     A  3238    L_110:
                           A  3239    .LINE 333
                           A  3240    
                           A  3241    ;  334					flashmos = true;
                           A  3242    .LINE 334
                           A  3243    
0B0AB0 3E01                A  3244    	LD	A,%1
0B0AB2 32 3A 22 0B         A  3245    	LD	(_flashmos),A
                           A  3246    ;  335					break;
                           A  3247    .LINE 335
                           A  3248    
0B0AB6 C3 59 0B 0B         A  3249    	JR	L_127
                           A  3250    ;  336				case CMDVDP:
0B0ABA                     A  3251    L_111:
                           A  3252    .LINE 336
                           A  3253    
                           A  3254    ;  337					if(flashvdp) return fal
                           A  3255    .LINE 337
                           A  3256    
0B0ABA 3A 3B 22 0B         A  3257    	LD	A,(_flashvdp)
0B0ABE B7                  A  3258    	OR	A,A
0B0ABF 28 05               A  3259    	JR	Z,L_117
0B0AC1 AF                  A  3260    	XOR	A,A
0B0AC2 C3 8E 0B 0B         A  3261    	JR	L_136
0B0AC6                     A  3262    L_117:
                           A  3263    ;  338					if((argc > (argcounter+
                           A  3264    .LINE 338
                           A  3265    
0B0AC6 DD07FD              A  3266    	LD	BC,(IX+%FFFFFFFD)
0B0AC9 03                  A  3267    	INC	BC
0B0ACA DD0FF7              A  3268    	LD	(IX+%FFFFFFF7),BC
0B0ACD DD0706              A  3269    	LD	BC,(IX+%6)
0B0AD0 DD27F7              A  3270    	LD	HL,(IX+%FFFFFFF7)
0B0AD3 B7                  A  3271    	OR	A,A
0B0AD4 ED42                A  3272    	SBC	HL,BC
0B0AD6 F2 14 0B 0B         A  3273    	JP	P,L_116
0B0ADA DD27F7              A  3274    	LD	HL,(IX+%FFFFFFF7)
0B0ADD E5C1                A  3275    	LD	BC,HL
0B0ADF 29                  A  3276    	ADD	HL,HL
0B0AE0 09                  A  3277    	ADD	HL,BC
0B0AE1 DD0709              A  3278    	LD	BC,(IX+%9)
0B0AE4 09                  A  3279    	ADD	HL,BC
0B0AE5 ED07                A  3280    	LD	BC,(HL)
0B0AE7 C5                  A  3281    	PUSH	BC
0B0AE8 CD B5 08 0B         A  3282    	CALL	_getCommand
0B0AEC C1                  A  3283    	POP	BC
0B0AED CD 1C 1C 0B         A  3284    	CALL	__icmpzero
0B0AF1 20 21               A  3285    	JR	NZ,L_116
                           A  3286    ;  339						strcpy(vdpfilename,
                           A  3287    .LINE 339
                           A  3288    
0B0AF3 DD27F7              A  3289    	LD	HL,(IX+%FFFFFFF7)
0B0AF6 E5C1                A  3290    	LD	BC,HL
0B0AF8 29                  A  3291    	ADD	HL,HL
0B0AF9 09                  A  3292    	ADD	HL,BC
0B0AFA DD0709              A  3293    	LD	BC,(IX+%9)
0B0AFD 09                  A  3294    	ADD	HL,BC
0B0AFE ED07                A  3295    	LD	BC,(HL)
0B0B00 C5                  A  3296    	PUSH	BC
0B0B01 01 84 2D 0B         A  3297    	LD	BC,_vdpfilename
0B0B05 C5                  A  3298    	PUSH	BC
0B0B06 CD 57 1F 0B         A  3299    	CALL	_strcpy
0B0B0A C1                  A  3300    	POP	BC
0B0B0B C1                  A  3301    	POP	BC
                           A  3302    ;  340						argcounter++;
                           A  3303    .LINE 340
                           A  3304    
0B0B0C DD07F7              A  3305    	LD	BC,(IX+%FFFFFFF7)
0B0B0F DD0FFD              A  3306    	LD	(IX+%FFFFFFFD),BC
                           A  3307    ;  341					}
                           A  3308    ;  342					else {
                           A  3309    .LINE 342
                           A  3310    
0B0B12 18 10               A  3311    	JR	L_118
0B0B14                     A  3312    L_116:
                           A  3313    ;  343						strcpy(vdpfilename,
                           A  3314    .LINE 343
                           A  3315    
0B0B14 01 F9 2A 0B         A  3316    	LD	BC,L__94
0B0B18 C5                  A  3317    	PUSH	BC
0B0B19 01 84 2D 0B         A  3318    	LD	BC,_vdpfilename
0B0B1D C5                  A  3319    	PUSH	BC
0B0B1E CD 57 1F 0B         A  3320    	CALL	_strcpy
0B0B22 C1                  A  3321    	POP	BC
0B0B23 C1                  A  3322    	POP	BC
                           A  3323    ;  344					}
0B0B24                     A  3324    L_118:
                           A  3325    .LINE 344
                           A  3326    
                           A  3327    ;  345					flashvdp = true;
                           A  3328    .LINE 345
                           A  3329    
0B0B24 3E01                A  3330    	LD	A,%1
0B0B26 32 3B 22 0B         A  3331    	LD	(_flashvdp),A
                           A  3332    ;  346					break;
                           A  3333    .LINE 346
                           A  3334    
0B0B2A 18 2D               A  3335    	JR	L_127
                           A  3336    ;  347				case CMDBATCH:
0B0B2C                     A  3337    L_119:
                           A  3338    .LINE 347
                           A  3339    
                           A  3340    ;  348					if(optbatch) return fal
                           A  3341    .LINE 348
                           A  3342    
0B0B2C 3A 3C 22 0B         A  3343    	LD	A,(_optbatch)
0B0B30 B7                  A  3344    	OR	A,A
0B0B31 28 03               A  3345    	JR	Z,L_121
0B0B33 AF                  A  3346    	XOR	A,A
0B0B34 18 58               A  3347    	JR	L_136
0B0B36                     A  3348    L_121:
                           A  3349    ;  349					optbatch = true;
                           A  3350    .LINE 349
                           A  3351    
0B0B36 3E01                A  3352    	LD	A,%1
0B0B38 32 3C 22 0B         A  3353    	LD	(_optbatch),A
                           A  3354    ;  350					optforce = true;
                           A  3355    .LINE 350
                           A  3356    
0B0B3C 32 3D 22 0B         A  3357    	LD	(_optforce),A
                           A  3358    ;  351					break;
                           A  3359    .LINE 351
                           A  3360    
0B0B40 18 17               A  3361    	JR	L_127
                           A  3362    ;  352				case CMDFORCE:
0B0B42                     A  3363    L_122:
                           A  3364    .LINE 352
                           A  3365    
                           A  3366    ;  353					if(optforce && !optbatc
                           A  3367    .LINE 353
                           A  3368    
0B0B42 3A 3D 22 0B         A  3369    	LD	A,(_optforce)
0B0B46 B7                  A  3370    	OR	A,A
0B0B47 28 0A               A  3371    	JR	Z,L_125
0B0B49 3A 3C 22 0B         A  3372    	LD	A,(_optbatch)
0B0B4D B7                  A  3373    	OR	A,A
0B0B4E 20 03               A  3374    	JR	NZ,L_125
0B0B50 AF                  A  3375    	XOR	A,A
0B0B51 18 3B               A  3376    	JR	L_136
0B0B53                     A  3377    L_125:
                           A  3378    ;  354					optforce = true;
                           A  3379    .LINE 354
                           A  3380    
0B0B53 3E01                A  3381    	LD	A,%1
0B0B55 32 3D 22 0B         A  3382    	LD	(_optforce),A
                           A  3383    ;  355					break;
                           A  3384    ;  356			}
0B0B59                     A  3385    L_127:
                           A  3386    .LINE 356
                           A  3387    
                           A  3388    ;  357			argcounter++;
                           A  3389    .LINE 357
                           A  3390    
0B0B59 DD07FD              A  3391    	LD	BC,(IX+%FFFFFFFD)
0B0B5C 03                  A  3392    	INC	BC
0B0B5D DD0FFD              A  3393    	LD	(IX+%FFFFFFFD),BC
                           A  3394    ;  358		}
0B0B60                     A  3395    L_128:
                           A  3396    .LINE 358
                           A  3397    
0B0B60 DD0706              A  3398    	LD	BC,(IX+%6)
0B0B63 DD27FD              A  3399    	LD	HL,(IX+%FFFFFFFD)
0B0B66 B7                  A  3400    	OR	A,A
0B0B67 ED42                A  3401    	SBC	HL,BC
0B0B69 FA CB 09 0B         A  3402    	JP	M,L_129
                           A  3403    ;  359		return (flashvdp || flashmos);
                           A  3404    .LINE 359
                           A  3405    
0B0B6D 3A 3B 22 0B         A  3406    	LD	A,(_flashvdp)
0B0B71 B7                  A  3407    	OR	A,A
0B0B72 20 07               A  3408    	JR	NZ,L_131
0B0B74 3A 3A 22 0B         A  3409    	LD	A,(_flashmos)
0B0B78 B7                  A  3410    	OR	A,A
0B0B79 28 09               A  3411    	JR	Z,L_132
0B0B7B                     A  3412    L_131:
                           A  3413    ;  360	}
                           A  3414    .LINE 360
                           A  3415    
0B0B7B 01010000            A  3416    	LD	BC,1
0B0B7F DD0FF4              A  3417    	LD	(IX+%FFFFFFF4),BC
0B0B82 18 07               A  3418    	JR	L_133
0B0B84                     A  3419    L_132:
0B0B84 01000000            A  3420    	LD	BC,0
0B0B88 DD0FF4              A  3421    	LD	(IX+%FFFFFFF4),BC
0B0B8B                     A  3422    L_133:
0B0B8B DD7EF4              A  3423    	LD	A,(IX+%FFFFFFF4)
0B0B8E                     A  3424    L_136:
0B0B8E DDF9                A  3425    	LD	SP,IX
0B0B90 DDE1                A  3426    	POP	IX
0B0B92 C9                  A  3427    	RET	
                           A  3428    
                           A  3429    
                           A  3430    ;**************************** _parseCommands **
                           A  3431    ;Name                         Addr/Register   S
                           A  3432    ;_optforce                           STATIC    
                           A  3433    ;_optbatch                           STATIC    
                           A  3434    ;_vdpfilename                        STATIC    
                           A  3435    ;_mosfilename                        STATIC    
                           A  3436    ;_strcpy                             IMPORT  --
                           A  3437    ;_flashvdp                           STATIC    
                           A  3438    ;_flashmos                           STATIC    
                           A  3439    ;command                              IX-15    
                           A  3440    ;temp134                              IX-12    
                           A  3441    ;G_4                                   IX-9    
                           A  3442    ;G_1                                   IX-6    
                           A  3443    ;argcounter                            IX-3    
                           A  3444    ;argv                                  IX+9    
                           A  3445    ;argc                                  IX+6    
                           A  3446    
                           A  3447    
                           A  3448    ; Stack Frame Size: 27 (bytes)
                           A  3449    ;       Spill Code: 0 (instruction)
                           A  3450    
                           A  3451    
                           A  3452    .ENDFUNC "parseCommands",360,"_parseCommands"
                           A  3453    	SEGMENT STRSECT
0B2ADC                     A  3454    L__85:
0B2ADC 4D4F532E 62696E     A  3455    	DB	"MOS.bin"
0B2AE3 00                  A  3456    	DB	0
0B2AE4                     A  3457    L__86:
0B2AE4 6669726D 77617265   A  3458    	DB	"firmware.bin"
0B2AEC 2E62696E 
0B2AF0 00                  A  3459    	DB	0
0B2AF1                     A  3460    L__90:
0B2AF1 4D4F532E 62696E     A  3461    	DB	"MOS.bin"
0B2AF8 00                  A  3462    	DB	0
0B2AF9                     A  3463    L__94:
0B2AF9 6669726D 77617265   A  3464    	DB	"firmware.bin"
0B2B01 2E62696E 
0B2B05 00                  A  3465    	DB	0
                           A  3466    	SEGMENT CODE
                           A  3467    ;  361	
                           A  3468    ;  362	bool filesExist(void) {
0B0B93                     A  3469    _filesExist:
                           A  3470    .DEFINE "_filesExist"
                           A  3471    
                           A  3472    .VALUE _filesExist
                           A  3473    
                           A  3474    .CLASS 2
                           A  3475    
                           A  3476    .TYPE 76
                           A  3477    
                           A  3478    .ENDEF
                           A  3479    
                           A  3480    .BEGFUNC "filesExist",362,"_filesExist"
                           A  3481    
                           A  3482    .LINE 362
                           A  3483    
                           A  3484    .DEFINE "file"
                           A  3485    
                           A  3486    .CLASS 65
                           A  3487    
                           A  3488    .VALUE -1
                           A  3489    
                           A  3490    .TYPE 12
                           A  3491    
                           A  3492    .ENDEF
                           A  3493    
                           A  3494    .DEFINE "filesexist"
                           A  3495    
                           A  3496    .CLASS 65
                           A  3497    
                           A  3498    .VALUE -2
                           A  3499    
                           A  3500    .TYPE 12
                           A  3501    
                           A  3502    .ENDEF
                           A  3503    
0B0B93 DDE5                A  3504    	PUSH	IX
0B0B95 DD210000 00         A  3505    	LD	IX,0
0B0B9A DD39                A  3506    	ADD	IX,SP
0B0B9C 3B                  A  3507    	DEC	SP
0B0B9D 3B                  A  3508    	DEC	SP
                           A  3509    ;  363		uint8_t file;
                           A  3510    ;  364		bool filesexist = true;
                           A  3511    .LINE 364
                           A  3512    
0B0B9E DD36FE01            A  3513    	LD	(IX+%FFFFFFFE),%1
                           A  3514    ;  365	
                           A  3515    ;  366		if(flashmos) {
                           A  3516    .LINE 366
                           A  3517    
0B0BA2 3A 3A 22 0B         A  3518    	LD	A,(_flashmos)
0B0BA6 B7                  A  3519    	OR	A,A
0B0BA7 28 4C               A  3520    	JR	Z,L_143
                           A  3521    ;  367			file = mos_fopen(mosfilename, f
                           A  3522    .LINE 367
                           A  3523    
0B0BA9 01010000            A  3524    	LD	BC,1
0B0BAD C5                  A  3525    	PUSH	BC
0B0BAE 01 80 2C 0B         A  3526    	LD	BC,_mosfilename
0B0BB2 C5                  A  3527    	PUSH	BC
0B0BB3 CD DF 11 0B         A  3528    	CALL	_mos_fopen
0B0BB7 C1                  A  3529    	POP	BC
0B0BB8 C1                  A  3530    	POP	BC
0B0BB9 DD77FF              A  3531    	LD	(IX+%FFFFFFFF),A
                           A  3532    ;  368			if(!file) {
                           A  3533    .LINE 368
                           A  3534    
0B0BBC B7                  A  3535    	OR	A,A
0B0BBD 20 2B               A  3536    	JR	NZ,L_138
                           A  3537    ;  369				printf("Error opening MOS f
                           A  3538    .LINE 369
                           A  3539    
0B0BBF 01 5F 18 0B         A  3540    	LD	BC,___print_uputch
0B0BC3 ED43 04 28 0B       A  3541    	LD	(___print_xputch),BC
0B0BC8 01 06 2B 0B         A  3542    	LD	BC,L__104
0B0BCC C5                  A  3543    	PUSH	BC
0B0BCD CD EE 16 0B         A  3544    	CALL	___print_sendstring
0B0BD1 C1                  A  3545    	POP	BC
0B0BD2 01 80 2C 0B         A  3546    	LD	BC,_mosfilename
0B0BD6 C5                  A  3547    	PUSH	BC
0B0BD7 CD EE 16 0B         A  3548    	CALL	___print_sendstring
0B0BDB C1                  A  3549    	POP	BC
0B0BDC 01 23 2B 0B         A  3550    	LD	BC,L__105
0B0BE0 C5                  A  3551    	PUSH	BC
0B0BE1 CD EE 16 0B         A  3552    	CALL	___print_sendstring
0B0BE5 C1                  A  3553    	POP	BC
                           A  3554    ;  370				filesexist = false;
                           A  3555    .LINE 370
                           A  3556    
0B0BE6 DD36FE00            A  3557    	LD	(IX+%FFFFFFFE),%0
                           A  3558    ;  371			}
0B0BEA                     A  3559    L_138:
                           A  3560    .LINE 371
                           A  3561    
                           A  3562    ;  372			mos_fclose(file);
                           A  3563    .LINE 372
                           A  3564    
0B0BEA DD4EFF              A  3565    	LD	C,(IX+%FFFFFFFF)
0B0BED 0600                A  3566    	LD	B,%0
0B0BEF C5                  A  3567    	PUSH	BC
0B0BF0 CD F7 11 0B         A  3568    	CALL	_mos_fclose
0B0BF4 C1                  A  3569    	POP	BC
                           A  3570    ;  373		}
0B0BF5                     A  3571    L_143:
                           A  3572    .LINE 373
                           A  3573    
                           A  3574    ;  374	
                           A  3575    ;  375		if(flashvdp) {
                           A  3576    .LINE 375
                           A  3577    
0B0BF5 3A 3B 22 0B         A  3578    	LD	A,(_flashvdp)
0B0BF9 B7                  A  3579    	OR	A,A
0B0BFA 28 4C               A  3580    	JR	Z,L_144
                           A  3581    ;  376			file = mos_fopen(vdpfilename, f
                           A  3582    .LINE 376
                           A  3583    
0B0BFC 01010000            A  3584    	LD	BC,1
0B0C00 C5                  A  3585    	PUSH	BC
0B0C01 01 84 2D 0B         A  3586    	LD	BC,_vdpfilename
0B0C05 C5                  A  3587    	PUSH	BC
0B0C06 CD DF 11 0B         A  3588    	CALL	_mos_fopen
0B0C0A C1                  A  3589    	POP	BC
0B0C0B C1                  A  3590    	POP	BC
0B0C0C DD77FF              A  3591    	LD	(IX+%FFFFFFFF),A
                           A  3592    ;  377			if(!file) {
                           A  3593    .LINE 377
                           A  3594    
0B0C0F B7                  A  3595    	OR	A,A
0B0C10 20 2B               A  3596    	JR	NZ,L_141
                           A  3597    ;  378				printf("Error opening VDP f
                           A  3598    .LINE 378
                           A  3599    
0B0C12 01 5F 18 0B         A  3600    	LD	BC,___print_uputch
0B0C16 ED43 04 28 0B       A  3601    	LD	(___print_xputch),BC
0B0C1B 01 27 2B 0B         A  3602    	LD	BC,L__108
0B0C1F C5                  A  3603    	PUSH	BC
0B0C20 CD EE 16 0B         A  3604    	CALL	___print_sendstring
0B0C24 C1                  A  3605    	POP	BC
0B0C25 01 84 2D 0B         A  3606    	LD	BC,_vdpfilename
0B0C29 C5                  A  3607    	PUSH	BC
0B0C2A CD EE 16 0B         A  3608    	CALL	___print_sendstring
0B0C2E C1                  A  3609    	POP	BC
0B0C2F 01 44 2B 0B         A  3610    	LD	BC,L__109
0B0C33 C5                  A  3611    	PUSH	BC
0B0C34 CD EE 16 0B         A  3612    	CALL	___print_sendstring
0B0C38 C1                  A  3613    	POP	BC
                           A  3614    ;  379				filesexist = false;
                           A  3615    .LINE 379
                           A  3616    
0B0C39 DD36FE00            A  3617    	LD	(IX+%FFFFFFFE),%0
                           A  3618    ;  380			}
0B0C3D                     A  3619    L_141:
                           A  3620    .LINE 380
                           A  3621    
                           A  3622    ;  381			mos_fclose(file);
                           A  3623    .LINE 381
                           A  3624    
0B0C3D DD4EFF              A  3625    	LD	C,(IX+%FFFFFFFF)
0B0C40 0600                A  3626    	LD	B,%0
0B0C42 C5                  A  3627    	PUSH	BC
0B0C43 CD F7 11 0B         A  3628    	CALL	_mos_fclose
0B0C47 C1                  A  3629    	POP	BC
                           A  3630    ;  382		}
0B0C48                     A  3631    L_144:
                           A  3632    .LINE 382
                           A  3633    
                           A  3634    ;  383	
                           A  3635    ;  384		return filesexist;
                           A  3636    .LINE 384
                           A  3637    
0B0C48 DD7EFE              A  3638    	LD	A,(IX+%FFFFFFFE)
                           A  3639    ;  385	}
                           A  3640    .LINE 385
                           A  3641    
0B0C4B DDF9                A  3642    	LD	SP,IX
0B0C4D DDE1                A  3643    	POP	IX
0B0C4F C9                  A  3644    	RET	
                           A  3645    
                           A  3646    
                           A  3647    ;**************************** _filesExist *****
                           A  3648    ;Name                         Addr/Register   S
                           A  3649    ;_vdpfilename                        STATIC    
                           A  3650    ;_flashvdp                           STATIC    
                           A  3651    ;_mos_fclose                         IMPORT  --
                           A  3652    ;___print_sendstring                 IMPORT  --
                           A  3653    ;___print_xputch                     IMPORT    
                           A  3654    ;___print_uputch                     IMPORT  --
                           A  3655    ;_mosfilename                        STATIC    
                           A  3656    ;_mos_fopen                          IMPORT  --
                           A  3657    ;_flashmos                           STATIC    
                           A  3658    ;filesexist                            IX-2    
                           A  3659    ;file                                  IX-1    
                           A  3660    
                           A  3661    
                           A  3662    ; Stack Frame Size: 8 (bytes)
                           A  3663    ;       Spill Code: 0 (instruction)
                           A  3664    
                           A  3665    
                           A  3666    .ENDFUNC "filesExist",385,"_filesExist"
                           A  3667    	SEGMENT STRSECT
0B2B06                     A  3668    L__104:
0B2B06 4572726F 72206F70   A  3669    	DB	"Error opening MOS firmware \""
0B2B0E 656E696E 67204D4F 
0B2B16 53206669 726D7761 
0B2B1E 72652022 
0B2B22 00                  A  3670    	DB	0
0B2B23                     A  3671    L__105:
0B2B23 22                  A  3672    	DB	"\""
0B2B24 0A0D00              A  3673    	DB	10,13,0
0B2B27                     A  3674    L__108:
0B2B27 4572726F 72206F70   A  3675    	DB	"Error opening VDP firmware \""
0B2B2F 656E696E 67205644 
0B2B37 50206669 726D7761 
0B2B3F 72652022 
0B2B43 00                  A  3676    	DB	0
0B2B44                     A  3677    L__109:
0B2B44 22                  A  3678    	DB	"\""
0B2B45 0A0D00              A  3679    	DB	10,13,0
                           A  3680    	SEGMENT CODE
                           A  3681    ;  386	
                           A  3682    ;  387	bool firmwareContentOK(void) {
0B0C50                     A  3683    _firmwareContentOK:
                           A  3684    .DEFINE "_firmwareContentOK"
                           A  3685    
                           A  3686    .VALUE _firmwareContentOK
                           A  3687    
                           A  3688    .CLASS 2
                           A  3689    
                           A  3690    .TYPE 76
                           A  3691    
                           A  3692    .ENDEF
                           A  3693    
                           A  3694    .BEGFUNC "firmwareContentOK",387,"_firmwareCont
                           A  3695    
                           A  3696    .LINE 387
                           A  3697    
                           A  3698    .DEFINE "file"
                           A  3699    
                           A  3700    .CLASS 65
                           A  3701    
                           A  3702    .VALUE -1
                           A  3703    
                           A  3704    .TYPE 12
                           A  3705    
                           A  3706    .ENDEF
                           A  3707    
                           A  3708    .DEFINE "validfirmware"
                           A  3709    
                           A  3710    .CLASS 65
                           A  3711    
                           A  3712    .VALUE -2
                           A  3713    
                           A  3714    .TYPE 12
                           A  3715    
                           A  3716    .ENDEF
                           A  3717    
                           A  3718    .DEFINE "filesize"
                           A  3719    
                           A  3720    .CLASS 65
                           A  3721    
                           A  3722    .VALUE -5
                           A  3723    
                           A  3724    .TYPE 14
                           A  3725    
                           A  3726    .ENDEF
                           A  3727    
                           A  3728    .DEFINE "buffer"
                           A  3729    
                           A  3730    .CLASS 65
                           A  3731    
                           A  3732    .VALUE -41
                           A  3733    
                           A  3734    .DIM 36
                           A  3735    
                           A  3736    .TYPE 108
                           A  3737    
                           A  3738    .ENDEF
                           A  3739    
0B0C50 DDE5                A  3740    	PUSH	IX
0B0C52 DD210000 00         A  3741    	LD	IX,0
0B0C57 DD39                A  3742    	ADD	IX,SP
0B0C59 ED22D7              A  3743    	LEA	HL,IX+%FFFFFFD7
0B0C5C F9                  A  3744    	LD	SP,HL
                           A  3745    ;  388		uint8_t file;
                           A  3746    ;  389		uint24_t filesize;
                           A  3747    ;  390		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  3748    ;  391		bool validfirmware = true;
                           A  3749    .LINE 391
                           A  3750    
0B0C5D DD36FE01            A  3751    	LD	(IX+%FFFFFFFE),%1
                           A  3752    ;  392	
                           A  3753    ;  393		if(flashmos) {
                           A  3754    .LINE 393
                           A  3755    
0B0C61 3A 3A 22 0B         A  3756    	LD	A,(_flashmos)
0B0C65 B7                  A  3757    	OR	A,A
0B0C66 CA 1B 0D 0B         A  3758    	JR	Z,L_154
                           A  3759    ;  394			file = mos_fopen(mosfilename, f
                           A  3760    .LINE 394
                           A  3761    
0B0C6A 01010000            A  3762    	LD	BC,1
0B0C6E C5                  A  3763    	PUSH	BC
0B0C6F 01 80 2C 0B         A  3764    	LD	BC,_mosfilename
0B0C73 C5                  A  3765    	PUSH	BC
0B0C74 CD DF 11 0B         A  3766    	CALL	_mos_fopen
0B0C78 C1                  A  3767    	POP	BC
0B0C79 C1                  A  3768    	POP	BC
0B0C7A DD77FF              A  3769    	LD	(IX+%FFFFFFFF),A
                           A  3770    ;  395			mos_fread(file, (char *)BUFFER1
                           A  3771    .LINE 395
                           A  3772    
0B0C7D 01050000            A  3773    	LD	BC,5
0B0C81 C5                  A  3774    	PUSH	BC
0B0C82 01000005            A  3775    	LD	BC,327680
0B0C86 C5                  A  3776    	PUSH	BC
0B0C87 DD4EFF              A  3777    	LD	C,(IX+%FFFFFFFF)
0B0C8A 0600                A  3778    	LD	B,%0
0B0C8C C5                  A  3779    	PUSH	BC
0B0C8D CD 21 12 0B         A  3780    	CALL	_mos_fread
0B0C91 C1                  A  3781    	POP	BC
0B0C92 C1                  A  3782    	POP	BC
0B0C93 C1                  A  3783    	POP	BC
                           A  3784    ;  396			if(!containsMosHeader((uint8_t 
                           A  3785    .LINE 396
                           A  3786    
0B0C94 01000005            A  3787    	LD	BC,327680
0B0C98 C5                  A  3788    	PUSH	BC
0B0C99 CD 90 02 0B         A  3789    	CALL	_containsMosHeader
0B0C9D C1                  A  3790    	POP	BC
0B0C9E B7                  A  3791    	OR	A,A
0B0C9F 20 2B               A  3792    	JR	NZ,L_147
                           A  3793    ;  397				printf("\"%s\" does not con
                           A  3794    .LINE 397
                           A  3795    
0B0CA1 01 5F 18 0B         A  3796    	LD	BC,___print_uputch
0B0CA5 ED43 04 28 0B       A  3797    	LD	(___print_xputch),BC
0B0CAA 01220000            A  3798    	LD	BC,34
0B0CAE C5                  A  3799    	PUSH	BC
0B0CAF CD 5F 18 0B         A  3800    	CALL	___print_uputch
0B0CB3 C1                  A  3801    	POP	BC
0B0CB4 01 80 2C 0B         A  3802    	LD	BC,_mosfilename
0B0CB8 C5                  A  3803    	PUSH	BC
0B0CB9 CD EE 16 0B         A  3804    	CALL	___print_sendstring
0B0CBD C1                  A  3805    	POP	BC
0B0CBE 01 48 2B 0B         A  3806    	LD	BC,L__113
0B0CC2 C5                  A  3807    	PUSH	BC
0B0CC3 CD EE 16 0B         A  3808    	CALL	___print_sendstring
0B0CC7 C1                  A  3809    	POP	BC
                           A  3810    ;  398				validfirmware = false;
                           A  3811    .LINE 398
                           A  3812    
0B0CC8 DD36FE00            A  3813    	LD	(IX+%FFFFFFFE),%0
                           A  3814    ;  399			}
0B0CCC                     A  3815    L_147:
                           A  3816    .LINE 399
                           A  3817    
                           A  3818    ;  400			filesize = getFileSize(file);
                           A  3819    .LINE 400
                           A  3820    
0B0CCC DD4EFF              A  3821    	LD	C,(IX+%FFFFFFFF)
0B0CCF 0600                A  3822    	LD	B,%0
0B0CD1 C5                  A  3823    	PUSH	BC
0B0CD2 CD 23 16 0B         A  3824    	CALL	_getFileSize
0B0CD6 C1                  A  3825    	POP	BC
0B0CD7 DD2FFB              A  3826    	LD	(IX+%FFFFFFFB),HL
                           A  3827    ;  401			if(filesize > FLASHSIZE) {
                           A  3828    .LINE 401
                           A  3829    
0B0CDA E5C1                A  3830    	LD	BC,HL
0B0CDC 21000002            A  3831    	LD	HL,131072
0B0CE0 B7                  A  3832    	OR	A,A
0B0CE1 ED42                A  3833    	SBC	HL,BC
0B0CE3 30 2B               A  3834    	JR	NC,L_149
                           A  3835    ;  402				printf("\"%s\" too large fo
                           A  3836    .LINE 402
                           A  3837    
0B0CE5 01 5F 18 0B         A  3838    	LD	BC,___print_uputch
0B0CE9 ED43 04 28 0B       A  3839    	LD	(___print_xputch),BC
0B0CEE 01220000            A  3840    	LD	BC,34
0B0CF2 C5                  A  3841    	PUSH	BC
0B0CF3 CD 5F 18 0B         A  3842    	CALL	___print_uputch
0B0CF7 C1                  A  3843    	POP	BC
0B0CF8 01 80 2C 0B         A  3844    	LD	BC,_mosfilename
0B0CFC C5                  A  3845    	PUSH	BC
0B0CFD CD EE 16 0B         A  3846    	CALL	___print_sendstring
0B0D01 C1                  A  3847    	POP	BC
0B0D02 01 79 2B 0B         A  3848    	LD	BC,L__115
0B0D06 C5                  A  3849    	PUSH	BC
0B0D07 CD EE 16 0B         A  3850    	CALL	___print_sendstring
0B0D0B C1                  A  3851    	POP	BC
                           A  3852    ;  403				validfirmware = false;
                           A  3853    .LINE 403
                           A  3854    
0B0D0C DD36FE00            A  3855    	LD	(IX+%FFFFFFFE),%0
                           A  3856    ;  404			}
0B0D10                     A  3857    L_149:
                           A  3858    .LINE 404
                           A  3859    
                           A  3860    ;  405			mos_fclose(file);
                           A  3861    .LINE 405
                           A  3862    
0B0D10 DD4EFF              A  3863    	LD	C,(IX+%FFFFFFFF)
0B0D13 0600                A  3864    	LD	B,%0
0B0D15 C5                  A  3865    	PUSH	BC
0B0D16 CD F7 11 0B         A  3866    	CALL	_mos_fclose
0B0D1A C1                  A  3867    	POP	BC
                           A  3868    ;  406		}
0B0D1B                     A  3869    L_154:
                           A  3870    .LINE 406
                           A  3871    
                           A  3872    ;  407		if(flashvdp) {
                           A  3873    .LINE 407
                           A  3874    
0B0D1B 3A 3B 22 0B         A  3875    	LD	A,(_flashvdp)
0B0D1F B7                  A  3876    	OR	A,A
0B0D20 28 69               A  3877    	JR	Z,L_155
                           A  3878    ;  408			file = mos_fopen(vdpfilename, f
                           A  3879    .LINE 408
                           A  3880    
0B0D22 01010000            A  3881    	LD	BC,1
0B0D26 C5                  A  3882    	PUSH	BC
0B0D27 01 84 2D 0B         A  3883    	LD	BC,_vdpfilename
0B0D2B C5                  A  3884    	PUSH	BC
0B0D2C CD DF 11 0B         A  3885    	CALL	_mos_fopen
0B0D30 C1                  A  3886    	POP	BC
0B0D31 C1                  A  3887    	POP	BC
0B0D32 DD77FF              A  3888    	LD	(IX+%FFFFFFFF),A
                           A  3889    ;  409			mos_fread(file, (char *)buffer,
                           A  3890    .LINE 409
                           A  3891    
0B0D35 01240000            A  3892    	LD	BC,36
0B0D39 C5                  A  3893    	PUSH	BC
0B0D3A ED65D7              A  3894    	PEA	IX+%FFFFFFD7
0B0D3D DD4EFF              A  3895    	LD	C,(IX+%FFFFFFFF)
0B0D40 0600                A  3896    	LD	B,%0
0B0D42 C5                  A  3897    	PUSH	BC
0B0D43 CD 21 12 0B         A  3898    	CALL	_mos_fread
0B0D47 C1                  A  3899    	POP	BC
0B0D48 C1                  A  3900    	POP	BC
0B0D49 C1                  A  3901    	POP	BC
                           A  3902    ;  410			if(!containsESP32Header(buffer)
                           A  3903    .LINE 410
                           A  3904    
0B0D4A ED65D7              A  3905    	PEA	IX+%FFFFFFD7
0B0D4D CD DB 02 0B         A  3906    	CALL	_containsESP32Header
0B0D51 C1                  A  3907    	POP	BC
0B0D52 B7                  A  3908    	OR	A,A
0B0D53 20 2B               A  3909    	JR	NZ,L_152
                           A  3910    ;  411				printf("\"%s\" does not con
                           A  3911    .LINE 411
                           A  3912    
0B0D55 01 5F 18 0B         A  3913    	LD	BC,___print_uputch
0B0D59 ED43 04 28 0B       A  3914    	LD	(___print_xputch),BC
0B0D5E 01220000            A  3915    	LD	BC,34
0B0D62 C5                  A  3916    	PUSH	BC
0B0D63 CD 5F 18 0B         A  3917    	CALL	___print_uputch
0B0D67 C1                  A  3918    	POP	BC
0B0D68 01 84 2D 0B         A  3919    	LD	BC,_vdpfilename
0B0D6C C5                  A  3920    	PUSH	BC
0B0D6D CD EE 16 0B         A  3921    	CALL	___print_sendstring
0B0D71 C1                  A  3922    	POP	BC
0B0D72 01 A0 2B 0B         A  3923    	LD	BC,L__118
0B0D76 C5                  A  3924    	PUSH	BC
0B0D77 CD EE 16 0B         A  3925    	CALL	___print_sendstring
0B0D7B C1                  A  3926    	POP	BC
                           A  3927    ;  412				validfirmware = false;
                           A  3928    .LINE 412
                           A  3929    
0B0D7C DD36FE00            A  3930    	LD	(IX+%FFFFFFFE),%0
                           A  3931    ;  413			}
0B0D80                     A  3932    L_152:
                           A  3933    .LINE 413
                           A  3934    
                           A  3935    ;  414			mos_fclose(file);
                           A  3936    .LINE 414
                           A  3937    
0B0D80 DD4EFF              A  3938    	LD	C,(IX+%FFFFFFFF)
0B0D83 0600                A  3939    	LD	B,%0
0B0D85 C5                  A  3940    	PUSH	BC
0B0D86 CD F7 11 0B         A  3941    	CALL	_mos_fclose
0B0D8A C1                  A  3942    	POP	BC
                           A  3943    ;  415		}
0B0D8B                     A  3944    L_155:
                           A  3945    .LINE 415
                           A  3946    
                           A  3947    ;  416		return validfirmware;
                           A  3948    .LINE 416
                           A  3949    
0B0D8B DD7EFE              A  3950    	LD	A,(IX+%FFFFFFFE)
                           A  3951    ;  417	}
                           A  3952    .LINE 417
                           A  3953    
0B0D8E DDF9                A  3954    	LD	SP,IX
0B0D90 DDE1                A  3955    	POP	IX
0B0D92 C9                  A  3956    	RET	
                           A  3957    
                           A  3958    
                           A  3959    ;**************************** _firmwareContentO
                           A  3960    ;Name                         Addr/Register   S
                           A  3961    ;_vdpfilename                        STATIC    
                           A  3962    ;_flashvdp                           STATIC    
                           A  3963    ;_mos_fclose                         IMPORT  --
                           A  3964    ;_getFileSize                        IMPORT  --
                           A  3965    ;___print_sendstring                 IMPORT  --
                           A  3966    ;___print_xputch                     IMPORT    
                           A  3967    ;___print_uputch                     IMPORT  --
                           A  3968    ;_mos_fread                          IMPORT  --
                           A  3969    ;_mosfilename                        STATIC    
                           A  3970    ;_mos_fopen                          IMPORT  --
                           A  3971    ;_flashmos                           STATIC    
                           A  3972    ;buffer                               IX-41    
                           A  3973    ;filesize                              IX-5    
                           A  3974    ;validfirmware                         IX-2    
                           A  3975    ;file                                  IX-1    
                           A  3976    
                           A  3977    
                           A  3978    ; Stack Frame Size: 47 (bytes)
                           A  3979    ;       Spill Code: 0 (instruction)
                           A  3980    
                           A  3981    
                           A  3982    .ENDFUNC "firmwareContentOK",417,"_firmwareCont
                           A  3983    	SEGMENT STRSECT
0B2B48                     A  3984    L__113:
0B2B48 2220646F 6573206E   A  3985    	DB	"\" does not contain valid MOS ez80 sta
0B2B50 6F742063 6F6E7461 
0B2B58 696E2076 616C6964 
0B2B60 204D4F53 20657A38 
0B2B68 30207374 61727475 
0B2B70 7020636F 6465 
0B2B76 0D0A00              A  3986    	DB	13,10,0
0B2B79                     A  3987    L__115:
0B2B79 2220746F 6F206C61   A  3988    	DB	"\" too large for 128KB embedded flash"
0B2B81 72676520 666F7220 
0B2B89 3132384B 4220656D 
0B2B91 62656464 65642066 
0B2B99 6C617368 
0B2B9D 0D0A00              A  3989    	DB	13,10,0
0B2BA0                     A  3990    L__118:
0B2BA0 2220646F 6573206E   A  3991    	DB	"\" does not contain valid ESP32 code"
0B2BA8 6F742063 6F6E7461 
0B2BB0 696E2076 616C6964 
0B2BB8 20455350 33322063 
0B2BC0 6F6465 
0B2BC3 0D0A00              A  3992    	DB	13,10,0
                           A  3993    	SEGMENT CODE
                           A  3994    ;  418	
                           A  3995    ;  419	void showCRC32(void) {
0B0D93                     A  3996    _showCRC32:
                           A  3997    .DEFINE "_showCRC32"
                           A  3998    
                           A  3999    .VALUE _showCRC32
                           A  4000    
                           A  4001    .CLASS 2
                           A  4002    
                           A  4003    .TYPE 65
                           A  4004    
                           A  4005    .ENDEF
                           A  4006    
                           A  4007    .BEGFUNC "showCRC32",419,"_showCRC32"
                           A  4008    
0B0D93 DDE5                A  4009    	PUSH	IX
0B0D95 DD210000 00         A  4010    	LD	IX,0
0B0D9A DD39                A  4011    	ADD	IX,SP
                           A  4012    ;  420		if(flashmos) printf("MOS CRC 0x%04l
                           A  4013    .LINE 420
                           A  4014    
0B0D9C 3A 3A 22 0B         A  4015    	LD	A,(_flashmos)
0B0DA0 B7                  A  4016    	OR	A,A
0B0DA1 28 43               A  4017    	JR	Z,L_159
0B0DA3 01 5F 18 0B         A  4018    	LD	BC,___print_uputch
0B0DA7 ED43 04 28 0B       A  4019    	LD	(___print_xputch),BC
0B0DAC 01 C6 2B 0B         A  4020    	LD	BC,L__121
0B0DB0 C5                  A  4021    	PUSH	BC
0B0DB1 CD EE 16 0B         A  4022    	CALL	___print_sendstring
0B0DB5 C1                  A  4023    	POP	BC
0B0DB6 3E04                A  4024    	LD	A,%4
0B0DB8 32 9B 2E 0B         A  4025    	LD	(___print_fmt+5),A
0B0DBC 3E60                A  4026    	LD	A,%60
0B0DBE 32 97 2E 0B         A  4027    	LD	(___print_fmt+1),A
0B0DC2 3E78                A  4028    	LD	A,%78
0B0DC4 32 9A 2E 0B         A  4029    	LD	(___print_fmt+4),A
0B0DC8 3A 83 2D 0B         A  4030    	LD	A,(_moscrc+3)
0B0DCC 4F                  A  4031    	LD	C,A
0B0DCD 0600                A  4032    	LD	B,%0
0B0DCF C5                  A  4033    	PUSH	BC
0B0DD0 ED4B 80 2D 0B       A  4034    	LD	BC,(_moscrc)
0B0DD5 C5                  A  4035    	PUSH	BC
0B0DD6 CD 04 20 0B         A  4036    	CALL	__u_ultoa
0B0DDA C1                  A  4037    	POP	BC
0B0DDB C1                  A  4038    	POP	BC
0B0DDC 01 D1 2B 0B         A  4039    	LD	BC,L__122
0B0DE0 C5                  A  4040    	PUSH	BC
0B0DE1 CD EE 16 0B         A  4041    	CALL	___print_sendstring
0B0DE5 C1                  A  4042    	POP	BC
0B0DE6                     A  4043    L_159:
                           A  4044    ;  421		if(flashvdp) printf("VDP CRC 0x%04l
                           A  4045    .LINE 421
                           A  4046    
0B0DE6 3A 3B 22 0B         A  4047    	LD	A,(_flashvdp)
0B0DEA B7                  A  4048    	OR	A,A
0B0DEB 28 43               A  4049    	JR	Z,L_160
0B0DED 01 5F 18 0B         A  4050    	LD	BC,___print_uputch
0B0DF1 ED43 04 28 0B       A  4051    	LD	(___print_xputch),BC
0B0DF6 01 D4 2B 0B         A  4052    	LD	BC,L__124
0B0DFA C5                  A  4053    	PUSH	BC
0B0DFB CD EE 16 0B         A  4054    	CALL	___print_sendstring
0B0DFF C1                  A  4055    	POP	BC
0B0E00 3E04                A  4056    	LD	A,%4
0B0E02 32 9B 2E 0B         A  4057    	LD	(___print_fmt+5),A
0B0E06 3E60                A  4058    	LD	A,%60
0B0E08 32 97 2E 0B         A  4059    	LD	(___print_fmt+1),A
0B0E0C 3E78                A  4060    	LD	A,%78
0B0E0E 32 9A 2E 0B         A  4061    	LD	(___print_fmt+4),A
0B0E12 3A 87 2E 0B         A  4062    	LD	A,(_vdpcrc+3)
0B0E16 4F                  A  4063    	LD	C,A
0B0E17 0600                A  4064    	LD	B,%0
0B0E19 C5                  A  4065    	PUSH	BC
0B0E1A ED4B 84 2E 0B       A  4066    	LD	BC,(_vdpcrc)
0B0E1F C5                  A  4067    	PUSH	BC
0B0E20 CD 04 20 0B         A  4068    	CALL	__u_ultoa
0B0E24 C1                  A  4069    	POP	BC
0B0E25 C1                  A  4070    	POP	BC
0B0E26 01 DF 2B 0B         A  4071    	LD	BC,L__125
0B0E2A C5                  A  4072    	PUSH	BC
0B0E2B CD EE 16 0B         A  4073    	CALL	___print_sendstring
0B0E2F C1                  A  4074    	POP	BC
0B0E30                     A  4075    L_160:
                           A  4076    ;  422		printf("\r\n");
                           A  4077    .LINE 422
                           A  4078    
0B0E30 01 5F 18 0B         A  4079    	LD	BC,___print_uputch
0B0E34 ED43 04 28 0B       A  4080    	LD	(___print_xputch),BC
0B0E39 01 E2 2B 0B         A  4081    	LD	BC,L__126
0B0E3D C5                  A  4082    	PUSH	BC
0B0E3E CD EE 16 0B         A  4083    	CALL	___print_sendstring
0B0E42 C1                  A  4084    	POP	BC
                           A  4085    ;  423	}
                           A  4086    .LINE 423
                           A  4087    
0B0E43 DDF9                A  4088    	LD	SP,IX
0B0E45 DDE1                A  4089    	POP	IX
0B0E47 C9                  A  4090    	RET	
                           A  4091    
                           A  4092    
                           A  4093    ;**************************** _showCRC32 ******
                           A  4094    ;Name                         Addr/Register   S
                           A  4095    ;_vdpcrc                             STATIC    
                           A  4096    ;_flashvdp                           STATIC    
                           A  4097    ;_moscrc                             STATIC    
                           A  4098    ;__u_ultoa                           IMPORT  --
                           A  4099    ;___print_fmt                        IMPORT    
                           A  4100    ;___print_sendstring                 IMPORT  --
                           A  4101    ;___print_xputch                     IMPORT    
                           A  4102    ;___print_uputch                     IMPORT  --
                           A  4103    ;_flashmos                           STATIC    
                           A  4104    
                           A  4105    
                           A  4106    ; Stack Frame Size: 6 (bytes)
                           A  4107    ;       Spill Code: 0 (instruction)
                           A  4108    
                           A  4109    
                           A  4110    .ENDFUNC "showCRC32",423,"_showCRC32"
                           A  4111    	SEGMENT STRSECT
0B2BC6                     A  4112    L__121:
0B2BC6 4D4F5320 43524320   A  4113    	DB	"MOS CRC 0x"
0B2BCE 3078 
0B2BD0 00                  A  4114    	DB	0
0B2BD1                     A  4115    L__122:
0B2BD1 0D0A00              A  4116    	DB	13,10,0
0B2BD4                     A  4117    L__124:
0B2BD4 56445020 43524320   A  4118    	DB	"VDP CRC 0x"
0B2BDC 3078 
0B2BDE 00                  A  4119    	DB	0
0B2BDF                     A  4120    L__125:
0B2BDF 0D0A00              A  4121    	DB	13,10,0
0B2BE2                     A  4122    L__126:
0B2BE2 0D0A00              A  4123    	DB	13,10,0
                           A  4124    	SEGMENT CODE
                           A  4125    ;  424	
                           A  4126    ;  425	void calculateCRC32(void) {
0B0E48                     A  4127    _calculateCRC32:
                           A  4128    .DEFINE "_calculateCRC32"
                           A  4129    
                           A  4130    .VALUE _calculateCRC32
                           A  4131    
                           A  4132    .CLASS 2
                           A  4133    
                           A  4134    .TYPE 65
                           A  4135    
                           A  4136    .ENDEF
                           A  4137    
                           A  4138    .BEGFUNC "calculateCRC32",425,"_calculateCRC32"
                           A  4139    
                           A  4140    .LINE 425
                           A  4141    
                           A  4142    .DEFINE "file"
                           A  4143    
                           A  4144    .CLASS 65
                           A  4145    
                           A  4146    .VALUE -1
                           A  4147    
                           A  4148    .TYPE 12
                           A  4149    
                           A  4150    .ENDEF
                           A  4151    
                           A  4152    .DEFINE "ptr"
                           A  4153    
                           A  4154    .CLASS 65
                           A  4155    
                           A  4156    .VALUE -4
                           A  4157    
                           A  4158    .TYPE 34
                           A  4159    
                           A  4160    .ENDEF
                           A  4161    
                           A  4162    .DEFINE "got"
                           A  4163    
                           A  4164    .CLASS 65
                           A  4165    
                           A  4166    .VALUE -7
                           A  4167    
                           A  4168    .TYPE 14
                           A  4169    
                           A  4170    .ENDEF
                           A  4171    
                           A  4172    .DEFINE "size"
                           A  4173    
                           A  4174    .CLASS 65
                           A  4175    
                           A  4176    .VALUE -10
                           A  4177    
                           A  4178    .TYPE 14
                           A  4179    
                           A  4180    .ENDEF
                           A  4181    
0B0E48 DDE5                A  4182    	PUSH	IX
0B0E4A DD210000 00         A  4183    	LD	IX,0
0B0E4F DD39                A  4184    	ADD	IX,SP
0B0E51 C5                  A  4185    	PUSH	BC
0B0E52 C5                  A  4186    	PUSH	BC
0B0E53 C5                  A  4187    	PUSH	BC
0B0E54 3B                  A  4188    	DEC	SP
                           A  4189    ;  426		uint8_t file;
                           A  4190    ;  427		uint24_t got,size;
                           A  4191    ;  428		char* ptr;
                           A  4192    ;  429	
                           A  4193    ;  430		moscrc = 0;
                           A  4194    .LINE 430
                           A  4195    
0B0E55 01000000            A  4196    	LD	BC,0
0B0E59 AF                  A  4197    	XOR	A,A
0B0E5A ED43 80 2D 0B       A  4198    	LD	(_moscrc),BC
0B0E5F 32 83 2D 0B         A  4199    	LD	(_moscrc+3),A
                           A  4200    ;  431		vdpcrc = 0;
                           A  4201    .LINE 431
                           A  4202    
0B0E63 AF                  A  4203    	XOR	A,A
0B0E64 ED43 84 2E 0B       A  4204    	LD	(_vdpcrc),BC
0B0E69 32 87 2E 0B         A  4205    	LD	(_vdpcrc+3),A
                           A  4206    ;  432	
                           A  4207    ;  433		printf("Calculating CRC");
                           A  4208    .LINE 433
                           A  4209    
0B0E6D 01 5F 18 0B         A  4210    	LD	BC,___print_uputch
0B0E71 ED43 04 28 0B       A  4211    	LD	(___print_xputch),BC
0B0E76 01 E5 2B 0B         A  4212    	LD	BC,L__128
0B0E7A C5                  A  4213    	PUSH	BC
0B0E7B CD EE 16 0B         A  4214    	CALL	___print_sendstring
0B0E7F C1                  A  4215    	POP	BC
                           A  4216    ;  434	
                           A  4217    ;  435		if(flashmos) {
                           A  4218    .LINE 435
                           A  4219    
0B0E80 3A 3A 22 0B         A  4220    	LD	A,(_flashmos)
0B0E84 B7                  A  4221    	OR	A,A
0B0E85 28 7D               A  4222    	JR	Z,L_172
                           A  4223    ;  436			ptr = (char*)BUFFER1;
                           A  4224    .LINE 436
                           A  4225    
0B0E87 01000005            A  4226    	LD	BC,327680
0B0E8B DD0FFC              A  4227    	LD	(IX+%FFFFFFFC),BC
                           A  4228    ;  437			file = mos_fopen(mosfilename, f
                           A  4229    .LINE 437
                           A  4230    
0B0E8E 01010000            A  4231    	LD	BC,1
0B0E92 C5                  A  4232    	PUSH	BC
0B0E93 01 80 2C 0B         A  4233    	LD	BC,_mosfilename
0B0E97 C5                  A  4234    	PUSH	BC
0B0E98 CD DF 11 0B         A  4235    	CALL	_mos_fopen
0B0E9C C1                  A  4236    	POP	BC
0B0E9D C1                  A  4237    	POP	BC
0B0E9E DD77FF              A  4238    	LD	(IX+%FFFFFFFF),A
                           A  4239    ;  438			crc32_initialize();
                           A  4240    .LINE 438
                           A  4241    
0B0EA1 CD 71 15 0B         A  4242    	CALL	_crc32_initialize
                           A  4243    ;  439			
                           A  4244    ;  440			// Read file to memory
                           A  4245    ;  441			while((got = mos_fread(file, pt
                           A  4246    .LINE 441
                           A  4247    
0B0EA5 18 22               A  4248    	JR	L_162
0B0EA7                     A  4249    L_163:
                           A  4250    ;  442				crc32(ptr, got);
                           A  4251    .LINE 442
                           A  4252    
0B0EA7 DD07F9              A  4253    	LD	BC,(IX+%FFFFFFF9)
0B0EAA C5                  A  4254    	PUSH	BC
0B0EAB DD07FC              A  4255    	LD	BC,(IX+%FFFFFFFC)
0B0EAE C5                  A  4256    	PUSH	BC
0B0EAF CD C3 15 0B         A  4257    	CALL	_crc32
0B0EB3 C1                  A  4258    	POP	BC
0B0EB4 C1                  A  4259    	POP	BC
                           A  4260    ;  443				ptr += got;
                           A  4261    .LINE 443
                           A  4262    
0B0EB5 DD07F9              A  4263    	LD	BC,(IX+%FFFFFFF9)
0B0EB8 DD27FC              A  4264    	LD	HL,(IX+%FFFFFFFC)
0B0EBB 09                  A  4265    	ADD	HL,BC
0B0EBC DD2FFC              A  4266    	LD	(IX+%FFFFFFFC),HL
                           A  4267    ;  444				putch('.');
                           A  4268    .LINE 444
                           A  4269    
0B0EBF 012E0000            A  4270    	LD	BC,46
0B0EC3 C5                  A  4271    	PUSH	BC
0B0EC4 CD E5 00 0B         A  4272    	CALL	_putch
0B0EC8 C1                  A  4273    	POP	BC
                           A  4274    ;  445			}		
0B0EC9                     A  4275    L_162:
                           A  4276    .LINE 445
                           A  4277    
0B0EC9 01004000            A  4278    	LD	BC,16384
0B0ECD C5                  A  4279    	PUSH	BC
0B0ECE DD07FC              A  4280    	LD	BC,(IX+%FFFFFFFC)
0B0ED1 C5                  A  4281    	PUSH	BC
0B0ED2 DD4EFF              A  4282    	LD	C,(IX+%FFFFFFFF)
0B0ED5 0600                A  4283    	LD	B,%0
0B0ED7 C5                  A  4284    	PUSH	BC
0B0ED8 CD 21 12 0B         A  4285    	CALL	_mos_fread
0B0EDC C1                  A  4286    	POP	BC
0B0EDD C1                  A  4287    	POP	BC
0B0EDE C1                  A  4288    	POP	BC
0B0EDF DD2FF9              A  4289    	LD	(IX+%FFFFFFF9),HL
0B0EE2 E5C1                A  4290    	LD	BC,HL
0B0EE4 B7                  A  4291    	OR	A,A
0B0EE5 ED62                A  4292    	SBC	HL,HL
0B0EE7 B7                  A  4293    	OR	A,A
0B0EE8 ED42                A  4294    	SBC	HL,BC
0B0EEA 38 BB               A  4295    	JR	C,L_163
                           A  4296    ;  446			moscrc = crc32_finalize();
                           A  4297    .LINE 446
                           A  4298    
0B0EEC CD 86 15 0B         A  4299    	CALL	_crc32_finalize
0B0EF0 22 80 2D 0B         A  4300    	LD	(_moscrc),HL
0B0EF4 7B                  A  4301    	LD	A,E
0B0EF5 32 83 2D 0B         A  4302    	LD	(_moscrc+3),A
                           A  4303    ;  447			mos_fclose(file);
                           A  4304    .LINE 447
                           A  4305    
0B0EF9 DD4EFF              A  4306    	LD	C,(IX+%FFFFFFFF)
0B0EFC 0600                A  4307    	LD	B,%0
0B0EFE C5                  A  4308    	PUSH	BC
0B0EFF CD F7 11 0B         A  4309    	CALL	_mos_fclose
0B0F03 C1                  A  4310    	POP	BC
                           A  4311    ;  448		}
0B0F04                     A  4312    L_172:
                           A  4313    .LINE 448
                           A  4314    
                           A  4315    ;  449		if(flashvdp) {
                           A  4316    .LINE 449
                           A  4317    
0B0F04 3A 3B 22 0B         A  4318    	LD	A,(_flashvdp)
0B0F08 B7                  A  4319    	OR	A,A
0B0F09 28 6A               A  4320    	JR	Z,L_173
                           A  4321    ;  450			file = mos_fopen(vdpfilename, f
                           A  4322    .LINE 450
                           A  4323    
0B0F0B 01010000            A  4324    	LD	BC,1
0B0F0F C5                  A  4325    	PUSH	BC
0B0F10 01 84 2D 0B         A  4326    	LD	BC,_vdpfilename
0B0F14 C5                  A  4327    	PUSH	BC
0B0F15 CD DF 11 0B         A  4328    	CALL	_mos_fopen
0B0F19 C1                  A  4329    	POP	BC
0B0F1A C1                  A  4330    	POP	BC
0B0F1B DD77FF              A  4331    	LD	(IX+%FFFFFFFF),A
                           A  4332    ;  451			crc32_initialize();
                           A  4333    .LINE 451
                           A  4334    
0B0F1E CD 71 15 0B         A  4335    	CALL	_crc32_initialize
                           A  4336    ;  452			while(1) {
0B0F22                     A  4337    L_169:
                           A  4338    .LINE 452
                           A  4339    
                           A  4340    ;  453				size = mos_fread(file, (cha
                           A  4341    .LINE 453
                           A  4342    
0B0F22 01004000            A  4343    	LD	BC,16384
0B0F26 C5                  A  4344    	PUSH	BC
0B0F27 01000005            A  4345    	LD	BC,327680
0B0F2B C5                  A  4346    	PUSH	BC
0B0F2C DD4EFF              A  4347    	LD	C,(IX+%FFFFFFFF)
0B0F2F 0600                A  4348    	LD	B,%0
0B0F31 C5                  A  4349    	PUSH	BC
0B0F32 CD 21 12 0B         A  4350    	CALL	_mos_fread
0B0F36 C1                  A  4351    	POP	BC
0B0F37 C1                  A  4352    	POP	BC
0B0F38 C1                  A  4353    	POP	BC
0B0F39 DD2FF6              A  4354    	LD	(IX+%FFFFFFF6),HL
                           A  4355    ;  454				if(size == 0) break;
                           A  4356    .LINE 454
                           A  4357    
0B0F3C CD 1C 1C 0B         A  4358    	CALL	__icmpzero
0B0F40 28 1B               A  4359    	JR	Z,L_170
                           A  4360    ;  455				putch('.');
                           A  4361    .LINE 455
                           A  4362    
0B0F42 012E0000            A  4363    	LD	BC,46
0B0F46 C5                  A  4364    	PUSH	BC
0B0F47 CD E5 00 0B         A  4365    	CALL	_putch
0B0F4B C1                  A  4366    	POP	BC
                           A  4367    ;  456				crc32((char *)BUFFER1, size
                           A  4368    .LINE 456
                           A  4369    
0B0F4C DD07F6              A  4370    	LD	BC,(IX+%FFFFFFF6)
0B0F4F C5                  A  4371    	PUSH	BC
0B0F50 01000005            A  4372    	LD	BC,327680
0B0F54 C5                  A  4373    	PUSH	BC
0B0F55 CD C3 15 0B         A  4374    	CALL	_crc32
0B0F59 C1                  A  4375    	POP	BC
0B0F5A C1                  A  4376    	POP	BC
0B0F5B 18 C5               A  4377    	JR	L_169
                           A  4378    ;  457			}
0B0F5D                     A  4379    L_170:
                           A  4380    .LINE 457
                           A  4381    
                           A  4382    ;  458			vdpcrc = crc32_finalize();
                           A  4383    .LINE 458
                           A  4384    
0B0F5D CD 86 15 0B         A  4385    	CALL	_crc32_finalize
0B0F61 22 84 2E 0B         A  4386    	LD	(_vdpcrc),HL
0B0F65 7B                  A  4387    	LD	A,E
0B0F66 32 87 2E 0B         A  4388    	LD	(_vdpcrc+3),A
                           A  4389    ;  459			mos_fclose(file);
                           A  4390    .LINE 459
                           A  4391    
0B0F6A DD4EFF              A  4392    	LD	C,(IX+%FFFFFFFF)
0B0F6D 0600                A  4393    	LD	B,%0
0B0F6F C5                  A  4394    	PUSH	BC
0B0F70 CD F7 11 0B         A  4395    	CALL	_mos_fclose
0B0F74 C1                  A  4396    	POP	BC
                           A  4397    ;  460		}
0B0F75                     A  4398    L_173:
                           A  4399    .LINE 460
                           A  4400    
                           A  4401    ;  461		printf("\r\n\r\n");
                           A  4402    .LINE 461
                           A  4403    
0B0F75 01 5F 18 0B         A  4404    	LD	BC,___print_uputch
0B0F79 ED43 04 28 0B       A  4405    	LD	(___print_xputch),BC
0B0F7E 01 F5 2B 0B         A  4406    	LD	BC,L__133
0B0F82 C5                  A  4407    	PUSH	BC
0B0F83 CD EE 16 0B         A  4408    	CALL	___print_sendstring
0B0F87 C1                  A  4409    	POP	BC
                           A  4410    ;  462	}
                           A  4411    .LINE 462
                           A  4412    
0B0F88 DDF9                A  4413    	LD	SP,IX
0B0F8A DDE1                A  4414    	POP	IX
0B0F8C C9                  A  4415    	RET	
                           A  4416    
                           A  4417    
                           A  4418    ;**************************** _calculateCRC32 *
                           A  4419    ;Name                         Addr/Register   S
                           A  4420    ;_vdpfilename                        STATIC    
                           A  4421    ;_flashvdp                           STATIC    
                           A  4422    ;_mos_fclose                         IMPORT  --
                           A  4423    ;_crc32_finalize                     IMPORT  --
                           A  4424    ;_mos_fread                          IMPORT  --
                           A  4425    ;_putch                              IMPORT  --
                           A  4426    ;_crc32                              IMPORT  --
                           A  4427    ;_crc32_initialize                   IMPORT  --
                           A  4428    ;_mosfilename                        STATIC    
                           A  4429    ;_mos_fopen                          IMPORT  --
                           A  4430    ;_flashmos                           STATIC    
                           A  4431    ;___print_sendstring                 IMPORT  --
                           A  4432    ;___print_xputch                     IMPORT    
                           A  4433    ;___print_uputch                     IMPORT  --
                           A  4434    ;_vdpcrc                             STATIC    
                           A  4435    ;_moscrc                             STATIC    
                           A  4436    ;size                                 IX-10    
                           A  4437    ;got                                   IX-7    
                           A  4438    ;ptr                                   IX-4    
                           A  4439    ;file                                  IX-1    
                           A  4440    
                           A  4441    
                           A  4442    ; Stack Frame Size: 16 (bytes)
                           A  4443    ;       Spill Code: 0 (instruction)
                           A  4444    
                           A  4445    
                           A  4446    .ENDFUNC "calculateCRC32",462,"_calculateCRC32"
                           A  4447    	SEGMENT STRSECT
0B2BE5                     A  4448    L__128:
0B2BE5 43616C63 756C6174   A  4449    	DB	"Calculating CRC"
0B2BED 696E6720 435243 
0B2BF4 00                  A  4450    	DB	0
0B2BF5                     A  4451    L__133:
0B2BF5 0D0A0D0A 00         A  4452    	DB	13,10,13,10,0
                           A  4453    	SEGMENT CODE
                           A  4454    ;  463	
                           A  4455    ;  464	int main(int argc, char * argv[]) {	
0B0F8D                     A  4456    _main:
                           A  4457    .DEFINE "_main"
                           A  4458    
                           A  4459    .VALUE _main
                           A  4460    
                           A  4461    .CLASS 2
                           A  4462    
                           A  4463    .TYPE 68
                           A  4464    
                           A  4465    .ENDEF
                           A  4466    
                           A  4467    .BEGFUNC "main",464,"_main"
                           A  4468    
                           A  4469    .LINE 464
                           A  4470    
                           A  4471    .DEFINE "argc"
                           A  4472    
                           A  4473    .CLASS 65
                           A  4474    
                           A  4475    .VALUE 6
                           A  4476    
                           A  4477    .TYPE 4
                           A  4478    
                           A  4479    .ENDEF
                           A  4480    
                           A  4481    .DEFINE "argv"
                           A  4482    
                           A  4483    .CLASS 65
                           A  4484    
                           A  4485    .VALUE 9
                           A  4486    
                           A  4487    .TYPE 290
                           A  4488    
                           A  4489    .ENDEF
                           A  4490    
                           A  4491    .DEFINE "n"
                           A  4492    
                           A  4493    .CLASS 65
                           A  4494    
                           A  4495    .VALUE -3
                           A  4496    
                           A  4497    .TYPE 4
                           A  4498    
                           A  4499    .ENDEF
                           A  4500    
                           A  4501    .DEFINE "sysvars"
                           A  4502    
                           A  4503    .CLASS 65
                           A  4504    
                           A  4505    .VALUE -6
                           A  4506    
                           A  4507    .TAG "NONAME3"
                           A  4508    
                           A  4509    .TYPE 40
                           A  4510    
                           A  4511    .ENDEF
                           A  4512    
0B0F8D DDE5                A  4513    	PUSH	IX
0B0F8F DD210000 00         A  4514    	LD	IX,0
0B0F94 DD39                A  4515    	ADD	IX,SP
0B0F96 C5                  A  4516    	PUSH	BC
0B0F97 C5                  A  4517    	PUSH	BC
                           A  4518    ;  465		sysvar_t *sysvars;
                           A  4519    ;  466		int n;
                           A  4520    ;  467		sysvars = getsysvars();
                           A  4521    .LINE 467
                           A  4522    
0B0F98 CD AF 11 0B         A  4523    	CALL	_getsysvars
0B0F9C DD2FFA              A  4524    	LD	(IX+%FFFFFFFA),HL
                           A  4525    ;  468	
                           A  4526    ;  469		// All checks
                           A  4527    ;  470		if(argc == 1) {
                           A  4528    .LINE 470
                           A  4529    
0B0F9F 01010000            A  4530    	LD	BC,1
0B0FA3 DD2706              A  4531    	LD	HL,(IX+%6)
0B0FA6 B7                  A  4532    	OR	A,A
0B0FA7 ED42                A  4533    	SBC	HL,BC
0B0FA9 20 0B               A  4534    	JR	NZ,L_177
                           A  4535    ;  471			usage();
                           A  4536    .LINE 471
                           A  4537    
0B0FAB CD 50 03 0B         A  4538    	CALL	_usage
                           A  4539    ;  472			return 0;
                           A  4540    .LINE 472
                           A  4541    
0B0FAF B7                  A  4542    	OR	A,A
0B0FB0 ED62                A  4543    	SBC	HL,HL
0B0FB2 C3 84 11 0B         A  4544    	JR	L_216
                           A  4545    ;  473		}
0B0FB6                     A  4546    L_177:
                           A  4547    .LINE 473
                           A  4548    
                           A  4549    ;  474		if(!parseCommands(argc, argv)) {
                           A  4550    .LINE 474
                           A  4551    
0B0FB6 DD0709              A  4552    	LD	BC,(IX+%9)
0B0FB9 C5                  A  4553    	PUSH	BC
0B0FBA DD0706              A  4554    	LD	BC,(IX+%6)
0B0FBD C5                  A  4555    	PUSH	BC
0B0FBE CD B3 09 0B         A  4556    	CALL	_parseCommands
0B0FC2 C1                  A  4557    	POP	BC
0B0FC3 C1                  A  4558    	POP	BC
0B0FC4 B7                  A  4559    	OR	A,A
0B0FC5 20 0C               A  4560    	JR	NZ,L_179
                           A  4561    ;  475			usage();
                           A  4562    .LINE 475
                           A  4563    
0B0FC7 CD 50 03 0B         A  4564    	CALL	_usage
                           A  4565    ;  476			return EXIT_INVALIDPARAMETER;
                           A  4566    .LINE 476
                           A  4567    
0B0FCB 21130000            A  4568    	LD	HL,19
0B0FCF C3 84 11 0B         A  4569    	JR	L_216
                           A  4570    ;  477		}
0B0FD3                     A  4571    L_179:
                           A  4572    .LINE 477
                           A  4573    
                           A  4574    ;  478		if(!filesExist()) return EXIT_FILEN
                           A  4575    .LINE 478
                           A  4576    
0B0FD3 CD 93 0B 0B         A  4577    	CALL	_filesExist
0B0FD7 B7                  A  4578    	OR	A,A
0B0FD8 20 08               A  4579    	JR	NZ,L_181
0B0FDA 21040000            A  4580    	LD	HL,4
0B0FDE C3 84 11 0B         A  4581    	JR	L_216
0B0FE2                     A  4582    L_181:
                           A  4583    ;  479		if(!firmwareContentOK()) {
                           A  4584    .LINE 479
                           A  4585    
0B0FE2 CD 50 0C 0B         A  4586    	CALL	_firmwareContentOK
0B0FE6 B7                  A  4587    	OR	A,A
0B0FE7 20 08               A  4588    	JR	NZ,L_182
                           A  4589    ;  480			return EXIT_INVALIDPARAMETER;
                           A  4590    .LINE 480
                           A  4591    
0B0FE9 21130000            A  4592    	LD	HL,19
0B0FED C3 84 11 0B         A  4593    	JR	L_216
                           A  4594    ;  481		}
0B0FF1                     A  4595    L_182:
                           A  4596    .LINE 481
                           A  4597    
                           A  4598    ;  482	
                           A  4599    ;  483		putch(12);
                           A  4600    .LINE 483
                           A  4601    
0B0FF1 010C0000            A  4602    	LD	BC,12
0B0FF5 C5                  A  4603    	PUSH	BC
0B0FF6 CD E5 00 0B         A  4604    	CALL	_putch
0B0FFA C1                  A  4605    	POP	BC
                           A  4606    ;  484		print_version();
                           A  4607    .LINE 484
                           A  4608    
0B0FFB CD 2F 03 0B         A  4609    	CALL	_print_version
                           A  4610    ;  485		calculateCRC32();
                           A  4611    .LINE 485
                           A  4612    
0B0FFF CD 48 0E 0B         A  4613    	CALL	_calculateCRC32
                           A  4614    ;  486		// Skip showing CRC32 and user inpu
                           A  4615    ;  487		if(!optforce) {
                           A  4616    .LINE 487
                           A  4617    
0B1003 3A 3D 22 0B         A  4618    	LD	A,(_optforce)
0B1007 B7                  A  4619    	OR	A,A
0B1008 20 20               A  4620    	JR	NZ,L_186
                           A  4621    ;  488			putch(12);
                           A  4622    .LINE 488
                           A  4623    
0B100A 010C0000            A  4624    	LD	BC,12
0B100E C5                  A  4625    	PUSH	BC
0B100F CD E5 00 0B         A  4626    	CALL	_putch
0B1013 C1                  A  4627    	POP	BC
                           A  4628    ;  489			print_version();
                           A  4629    .LINE 489
                           A  4630    
0B1014 CD 2F 03 0B         A  4631    	CALL	_print_version
                           A  4632    ;  490			showCRC32();
                           A  4633    .LINE 490
                           A  4634    
0B1018 CD 93 0D 0B         A  4635    	CALL	_showCRC32
                           A  4636    ;  491			if(!getResponse()) return 0;
                           A  4637    .LINE 491
                           A  4638    
0B101C CD 75 03 0B         A  4639    	CALL	_getResponse
0B1020 B7                  A  4640    	OR	A,A
0B1021 20 07               A  4641    	JR	NZ,L_186
0B1023 B7                  A  4642    	OR	A,A
0B1024 ED62                A  4643    	SBC	HL,HL
0B1026 C3 84 11 0B         A  4644    	JR	L_216
                           A  4645    ;  492		}
0B102A                     A  4646    L_186:
                           A  4647    .LINE 492
                           A  4648    
                           A  4649    ;  493		if(optbatch) beep(1);
                           A  4650    .LINE 493
                           A  4651    
0B102A 3A 3C 22 0B         A  4652    	LD	A,(_optbatch)
0B102E B7                  A  4653    	OR	A,A
0B102F 28 0A               A  4654    	JR	Z,L_199
0B1031 01010000            A  4655    	LD	BC,1
0B1035 C5                  A  4656    	PUSH	BC
0B1036 CD 0B 01 0B         A  4657    	CALL	_beep
0B103A C1                  A  4658    	POP	BC
0B103B                     A  4659    L_199:
                           A  4660    ;  494	
                           A  4661    ;  495		if(flashvdp) {
                           A  4662    .LINE 495
                           A  4663    
0B103B 3A 3B 22 0B         A  4664    	LD	A,(_flashvdp)
0B103F B7                  A  4665    	OR	A,A
0B1040 28 5F               A  4666    	JR	Z,L_214
                           A  4667    ;  496			while(sysvars->scrheight == 0);
0B1042                     A  4668    L_188:
                           A  4669    .LINE 496
                           A  4670    
0B1042 DD31FA              A  4671    	LD	IY,(IX+%FFFFFFFA)
0B1045 FD2711              A  4672    	LD	HL,(IY+%11)
0B1048 CD 71 1F 0B         A  4673    	CALL	__scmpzero
0B104C 28 F4               A  4674    	JR	Z,L_188
                           A  4675    ;  497			sysvars->scrheight = 0;
                           A  4676    .LINE 497
                           A  4677    
0B104E DD31FA              A  4678    	LD	IY,(IX+%FFFFFFFA)
0B1051 FD361100            A  4679    	LD	(IY+%11),%0
0B1055 FD361200            A  4680    	LD	(IY+%12),%0
                           A  4681    ;  498			if(update_vdp(vdpfilename)) {
                           A  4682    .LINE 498
                           A  4683    
0B1059 01 84 2D 0B         A  4684    	LD	BC,_vdpfilename
0B105D C5                  A  4685    	PUSH	BC
0B105E CD 4E 04 0B         A  4686    	CALL	_update_vdp
0B1062 C1                  A  4687    	POP	BC
0B1063 B7                  A  4688    	OR	A,A
0B1064 28 29               A  4689    	JR	Z,L_197
                           A  4690    ;  499				echoVDP(1);
                           A  4691    .LINE 499
                           A  4692    
0B1066 01010000            A  4693    	LD	BC,1
0B106A C5                  A  4694    	PUSH	BC
0B106B CD 72 08 0B         A  4695    	CALL	_echoVDP
0B106F C1                  A  4696    	POP	BC
                           A  4697    ;  500				while(sysvars->scrheight ==
0B1070                     A  4698    L_191:
                           A  4699    .LINE 500
                           A  4700    
0B1070 DD31FA              A  4701    	LD	IY,(IX+%FFFFFFFA)
0B1073 FD2711              A  4702    	LD	HL,(IY+%11)
0B1076 CD 71 1F 0B         A  4703    	CALL	__scmpzero
0B107A 28 F4               A  4704    	JR	Z,L_191
                           A  4705    ;  501				if(optbatch) beep(2);
                           A  4706    .LINE 501
                           A  4707    
0B107C 3A 3C 22 0B         A  4708    	LD	A,(_optbatch)
0B1080 B7                  A  4709    	OR	A,A
0B1081 28 1E               A  4710    	JR	Z,L_214
0B1083 01020000            A  4711    	LD	BC,2
0B1087 C5                  A  4712    	PUSH	BC
0B1088 CD 0B 01 0B         A  4713    	CALL	_beep
0B108C C1                  A  4714    	POP	BC
                           A  4715    ;  502			}
                           A  4716    ;  503			else {
                           A  4717    .LINE 503
                           A  4718    
0B108D 18 12               A  4719    	JR	L_214
0B108F                     A  4720    L_197:
                           A  4721    ;  504				if(!optforce && flashmos) {
                           A  4722    .LINE 504
                           A  4723    
0B108F 3A 3D 22 0B         A  4724    	LD	A,(_optforce)
0B1093 B7                  A  4725    	OR	A,A
0B1094 20 0B               A  4726    	JR	NZ,L_214
0B1096 3A 3A 22 0B         A  4727    	LD	A,(_flashmos)
0B109A B7                  A  4728    	OR	A,A
0B109B 28 04               A  4729    	JR	Z,L_214
                           A  4730    ;  505					askEscapeToContinue();
                           A  4731    .LINE 505
                           A  4732    
0B109D CD F9 03 0B         A  4733    	CALL	_askEscapeToContinue
                           A  4734    ;  506				}
                           A  4735    ;  507			}
                           A  4736    ;  508		}
0B10A1                     A  4737    L_214:
                           A  4738    .LINE 508
                           A  4739    
                           A  4740    ;  509	
                           A  4741    ;  510		if(flashmos) {
                           A  4742    .LINE 510
                           A  4743    
0B10A1 3A 3A 22 0B         A  4744    	LD	A,(_flashmos)
0B10A5 B7                  A  4745    	OR	A,A
0B10A6 CA 81 11 0B         A  4746    	JR	Z,L_215
                           A  4747    ;  511			if(update_mos(mosfilename)) {
                           A  4748    .LINE 511
                           A  4749    
0B10AA 01 80 2C 0B         A  4750    	LD	BC,_mosfilename
0B10AE C5                  A  4751    	PUSH	BC
0B10AF CD FE 04 0B         A  4752    	CALL	_update_mos
0B10B3 C1                  A  4753    	POP	BC
0B10B4 B7                  A  4754    	OR	A,A
0B10B5 CA 59 11 0B         A  4755    	JR	Z,L_212
                           A  4756    ;  512				printf("\r\nDone\r\n\r\n");
                           A  4757    .LINE 512
                           A  4758    
0B10B9 01 5F 18 0B         A  4759    	LD	BC,___print_uputch
0B10BD ED43 04 28 0B       A  4760    	LD	(___print_xputch),BC
0B10C2 01 FA 2B 0B         A  4761    	LD	BC,L__151
0B10C6 C5                  A  4762    	PUSH	BC
0B10C7 CD EE 16 0B         A  4763    	CALL	___print_sendstring
0B10CB C1                  A  4764    	POP	BC
                           A  4765    ;  513				if(optbatch) {
                           A  4766    .LINE 513
                           A  4767    
0B10CC 3A 3C 22 0B         A  4768    	LD	A,(_optbatch)
0B10D0 B7                  A  4769    	OR	A,A
0B10D1 28 1F               A  4770    	JR	Z,L_208
                           A  4771    ;  514					printf("Press reset but
                           A  4772    .LINE 514
                           A  4773    
0B10D3 01 5F 18 0B         A  4774    	LD	BC,___print_uputch
0B10D7 ED43 04 28 0B       A  4775    	LD	(___print_xputch),BC
0B10DC 01 05 2C 0B         A  4776    	LD	BC,L__153
0B10E0 C5                  A  4777    	PUSH	BC
0B10E1 CD EE 16 0B         A  4778    	CALL	___print_sendstring
0B10E5 C1                  A  4779    	POP	BC
                           A  4780    ;  515					beep(3);
                           A  4781    .LINE 515
                           A  4782    
0B10E6 01030000            A  4783    	LD	BC,3
0B10EA C5                  A  4784    	PUSH	BC
0B10EB CD 0B 01 0B         A  4785    	CALL	_beep
0B10EF C1                  A  4786    	POP	BC
                           A  4787    ;  516					while(1); // don't repe
0B10F0                     A  4788    L_201:
                           A  4789    .LINE 516
                           A  4790    
0B10F0 18 FE               A  4791    	JR	L_201
                           A  4792    ;  517				}
                           A  4793    ;  518				else {
0B10F2                     A  4794    L_208:
                           A  4795    .LINE 518
                           A  4796    
                           A  4797    ;  519					printf("System reset in
                           A  4798    .LINE 519
                           A  4799    
0B10F2 01 5F 18 0B         A  4800    	LD	BC,___print_uputch
0B10F6 ED43 04 28 0B       A  4801    	LD	(___print_xputch),BC
0B10FB 01 18 2C 0B         A  4802    	LD	BC,L__154
0B10FF C5                  A  4803    	PUSH	BC
0B1100 CD EE 16 0B         A  4804    	CALL	___print_sendstring
0B1104 C1                  A  4805    	POP	BC
                           A  4806    ;  520					for(n = 3; n > 0; n--) 
                           A  4807    .LINE 520
                           A  4808    
0B1105 01030000            A  4809    	LD	BC,3
0B1109 DD0FFD              A  4810    	LD	(IX+%FFFFFFFD),BC
0B110C 18 38               A  4811    	JR	L_205
0B110E                     A  4812    L_203:
                           A  4813    ;  521						printf("%d...", n);
                           A  4814    .LINE 521
                           A  4815    
0B110E 01 5F 18 0B         A  4816    	LD	BC,___print_uputch
0B1112 ED43 04 28 0B       A  4817    	LD	(___print_xputch),BC
0B1117 DD07FD              A  4818    	LD	BC,(IX+%FFFFFFFD)
0B111A CD F7 1E 0B         A  4819    	CALL	__itol
0B111E C5D1                A  4820    	LD	DE,BC
0B1120 4F                  A  4821    	LD	C,A
0B1121 0600                A  4822    	LD	B,%0
0B1123 C5                  A  4823    	PUSH	BC
0B1124 D5                  A  4824    	PUSH	DE
0B1125 CD E5 18 0B         A  4825    	CALL	__u_itoa
0B1129 C1                  A  4826    	POP	BC
0B112A C1                  A  4827    	POP	BC
0B112B 01 29 2C 0B         A  4828    	LD	BC,L__155
0B112F C5                  A  4829    	PUSH	BC
0B1130 CD EE 16 0B         A  4830    	CALL	___print_sendstring
0B1134 C1                  A  4831    	POP	BC
                           A  4832    ;  522						delayms(1000);
                           A  4833    .LINE 522
                           A  4834    
0B1135 01E80300            A  4835    	LD	BC,1000
0B1139 C5                  A  4836    	PUSH	BC
0B113A CD 8B 13 0B         A  4837    	CALL	_delayms
0B113E C1                  A  4838    	POP	BC
0B113F DD07FD              A  4839    	LD	BC,(IX+%FFFFFFFD)
0B1142 0B                  A  4840    	DEC	BC
0B1143 DD0FFD              A  4841    	LD	(IX+%FFFFFFFD),BC
                           A  4842    ;  523					}
0B1146                     A  4843    L_205:
                           A  4844    .LINE 523
                           A  4845    
0B1146 DD07FD              A  4846    	LD	BC,(IX+%FFFFFFFD)
0B1149 B7                  A  4847    	OR	A,A
0B114A ED62                A  4848    	SBC	HL,HL
0B114C B7                  A  4849    	OR	A,A
0B114D ED42                A  4850    	SBC	HL,BC
0B114F FA 0E 11 0B         A  4851    	JP	M,L_203
                           A  4852    ;  524					reset();
                           A  4853    .LINE 524
                           A  4854    
0B1153 CD E5 12 0B         A  4855    	CALL	_reset
                           A  4856    ;  525				}
                           A  4857    ;  526			}
                           A  4858    ;  527			else {
                           A  4859    .LINE 527
                           A  4860    
0B1157 18 28               A  4861    	JR	L_215
0B1159                     A  4862    L_212:
                           A  4863    ;  528				printf("\r\nMultiple errors
                           A  4864    .LINE 528
                           A  4865    
0B1159 01 5F 18 0B         A  4866    	LD	BC,___print_uputch
0B115D ED43 04 28 0B       A  4867    	LD	(___print_xputch),BC
0B1162 01 2D 2C 0B         A  4868    	LD	BC,L__157
0B1166 C5                  A  4869    	PUSH	BC
0B1167 CD EE 16 0B         A  4870    	CALL	___print_sendstring
0B116B C1                  A  4871    	POP	BC
                           A  4872    ;  529				printf("Bare-metal recovery
                           A  4873    .LINE 529
                           A  4874    
0B116C 01 5F 18 0B         A  4875    	LD	BC,___print_uputch
0B1170 ED43 04 28 0B       A  4876    	LD	(___print_xputch),BC
0B1175 01 5D 2C 0B         A  4877    	LD	BC,L__158
0B1179 C5                  A  4878    	PUSH	BC
0B117A CD EE 16 0B         A  4879    	CALL	___print_sendstring
0B117E C1                  A  4880    	POP	BC
                           A  4881    ;  530				while(1); // No live MOS to
0B117F                     A  4882    L_210:
                           A  4883    .LINE 530
                           A  4884    
0B117F 18 FE               A  4885    	JR	L_210
                           A  4886    ;  531			}
                           A  4887    ;  532		}
0B1181                     A  4888    L_215:
                           A  4889    .LINE 532
                           A  4890    
                           A  4891    ;  533		return 0;
                           A  4892    .LINE 533
                           A  4893    
0B1181 B7                  A  4894    	OR	A,A
0B1182 ED62                A  4895    	SBC	HL,HL
                           A  4896    ;  534	}
0B1184                     A  4897    L_216:
                           A  4898    .LINE 534
                           A  4899    
0B1184 DDF9                A  4900    	LD	SP,IX
0B1186 DDE1                A  4901    	POP	IX
0B1188 C9                  A  4902    	RET	
                           A  4903    
                           A  4904    
                           A  4905    ;**************************** _main ***********
                           A  4906    ;Name                         Addr/Register   S
                           A  4907    ;_reset                              IMPORT  --
                           A  4908    ;_delayms                            IMPORT  --
                           A  4909    ;__u_itoa                            IMPORT  --
                           A  4910    ;___print_sendstring                 IMPORT  --
                           A  4911    ;___print_xputch                     IMPORT    
                           A  4912    ;___print_uputch                     IMPORT  --
                           A  4913    ;_mosfilename                        STATIC    
                           A  4914    ;_flashmos                           STATIC    
                           A  4915    ;_vdpfilename                        STATIC    
                           A  4916    ;_flashvdp                           STATIC    
                           A  4917    ;_optbatch                           STATIC    
                           A  4918    ;_optforce                           STATIC    
                           A  4919    ;_putch                              IMPORT  --
                           A  4920    ;_getsysvars                         IMPORT  --
                           A  4921    ;sysvars                               IX-6    
                           A  4922    ;n                                     IX-3    
                           A  4923    ;argv                                  IX+9    
                           A  4924    ;argc                                  IX+6    
                           A  4925    
                           A  4926    
                           A  4927    ; Stack Frame Size: 18 (bytes)
                           A  4928    ;       Spill Code: 0 (instruction)
                           A  4929    
                           A  4930    
                           A  4931    .ENDFUNC "main",534,"_main"
                           A  4932    	SEGMENT STRSECT
0B2BFA                     A  4933    L__151:
0B2BFA 0D0A                A  4934    	DB	13,10
0B2BFC 446F6E65            A  4935    	DB	"Done"
0B2C00 0D0A0D0A 00         A  4936    	DB	13,10,13,10,0
0B2C05                     A  4937    L__153:
0B2C05 50726573 73207265   A  4938    	DB	"Press reset button"
0B2C0D 73657420 62757474 
0B2C15 6F6E 
0B2C17 00                  A  4939    	DB	0
0B2C18                     A  4940    L__154:
0B2C18 53797374 656D2072   A  4941    	DB	"System reset in "
0B2C20 65736574 20696E20 
0B2C28 00                  A  4942    	DB	0
0B2C29                     A  4943    L__155:
0B2C29 2E2E2E              A  4944    	DB	"..."
0B2C2C 00                  A  4945    	DB	0
0B2C2D                     A  4946    L__157:
0B2C2D 0D0A                A  4947    	DB	13,10
0B2C2F 4D756C74 69706C65   A  4948    	DB	"Multiple errors occured during flash w
0B2C37 20657272 6F727320 
0B2C3F 6F636375 72656420 
0B2C47 64757269 6E672066 
0B2C4F 6C617368 20777269 
0B2C57 74652E 
0B2C5A 0D0A00              A  4949    	DB	13,10,0
0B2C5D                     A  4950    L__158:
0B2C5D 42617265 2D6D6574   A  4951    	DB	"Bare-metal recovery required."
0B2C65 616C2072 65636F76 
0B2C6D 65727920 72657175 
0B2C75 69726564 2E 
0B2C7A 0D0A00              A  4952    	DB	13,10,0
                           A  4953    	XREF _memcmp:ROM
                           A  4954    	XREF _strcpy:ROM
                           A  4955    	XREF _getFileSize:ROM
                           A  4956    	XREF _crc32_finalize:ROM
                           A  4957    	XREF _crc32_initialize:ROM
                           A  4958    	XREF _crc32:ROM
                           A  4959    	XREF _delayms:ROM
                           A  4960    	XREF _startVDPupdate:ROM
                           A  4961    	XREF _reset:ROM
                           A  4962    	XREF _fastmemcpy:ROM
                           A  4963    	XREF _lockFlashKeyRegister:ROM
                           A  4964    	XREF _enableFlashKeyRegister:ROM
                           A  4965    	XREF _mos_fread:ROM
                           A  4966    	XREF _mos_fclose:ROM
                           A  4967    	XREF _mos_fopen:ROM
                           A  4968    	XREF _getsysvars:ROM
                           A  4969    	XREF _getch:ROM
                           A  4970    	XREF _tolower:ROM
                           A  4971    	XREF __u_ultoa:ROM
                           A  4972    	XREF __u_itoa:ROM
                           A  4973    	XREF ___print_sendstring:ROM
                           A  4974    	XREF ___print_xputch:ROM
                           A  4975    	XREF ___print_uputch:ROM
                           A  4976    	XREF ___print_fmt:ROM
                           A  4977    	XREF __lcmpu:ROM
                           A  4978    	XREF __iand:ROM
                           A  4979    	XREF __stoiu:ROM
                           A  4980    	XREF __itol:ROM
                           A  4981    	XREF __scmpzero:ROM
                           A  4982    	XREF __icmpzero:ROM
                           A  4983    	XREF __seqcaseD:ROM
                           A  4984    	XREF __ishru_b:ROM
                           A  4985    	XREF __ishrs_b:ROM
                           A  4986    	XDEF _main
                           A  4987    	XDEF _calculateCRC32
                           A  4988    	XDEF _showCRC32
                           A  4989    	XDEF _firmwareContentOK
                           A  4990    	XDEF _filesExist
                           A  4991    	XDEF _parseCommands
                           A  4992    	XDEF _getCommand
                           A  4993    	XDEF _echoVDP
                           A  4994    	XDEF _update_mos
                           A  4995    	XDEF _update_vdp
                           A  4996    	XDEF _askEscapeToContinue
                           A  4997    	XDEF _getResponse
                           A  4998    	XDEF _usage
                           A  4999    	XDEF _print_version
                           A  5000    	XDEF _containsESP32Header
                           A  5001    	XDEF _esp32_magicnumbers
                           A  5002    	XDEF _containsMosHeader
                           A  5003    	XDEF _mos_magicnumbers
                           A  5004    	XDEF _vdp_ota_present
                           A  5005    	XDEF _getCharAt
                           A  5006    	XDEF _beep
                           A  5007    	XDEF _putch
                           A  5008    	XDEF _optforce
                           A  5009    	XDEF _optbatch
                           A  5010    	XDEF _vdpcrc
                           A  5011    	XDEF _vdpfilename
                           A  5012    	XDEF _flashvdp
                           A  5013    	XDEF _moscrc
                           A  5014    	XDEF _mosfilename
                           A  5015    	XDEF _flashmos
                           A  5016    	XDEF _errno
                           A  5017    	END


Errors: 0
Warnings: 0
Lines Assembled: 5018
