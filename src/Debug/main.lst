Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED14-Oct-23     13:39:35     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
0B1B93                     A   144    _errno:
0B1B93                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   161    ;   10	 *                  Sends cls just befo
                           A   162    ;   11	 * 07/06/2023:		Included faster crc
                           A   163    ;   12	 */
                           A   164    ;   13	
                           A   165    ;   14	#include <ez80.h>
                           A   166    ;   15	#include <stdio.h>
                           A   167    ;   16	#include <stdlib.h>
                           A   168    ;   17	#include <ERRNO.H>
                           A   169    ;   18	#include "mos-interface.h"
                           A   170    ;   19	#include "flash.h"
                           A   171    ;   20	#include "agontimer.h"
                           A   172    ;   21	#include "crc32.h"
                           A   173    ;   22	#include "filesize.h"
                           A   174    ;   23	#include "./stdint.h"
                           A   175    ;   24	#include <string.h>
                           A   176    ;   25	
                           A   177    ;   26	#define UNLOCKMATCHLENGTH 9
                           A   178    ;   27	
                           A   179    ;   28	#define EXIT_FILENOTFOUND	4
                           A   180    ;   29	#define EXIT_INVALIDPARAMETER	19
                           A   181    ;   30	
                           A   182    ;   31	int errno; // needed by standard librar
                           A   183    	SEGMENT CODE
                           A   184    ;   32	enum states{firmware,recover,systemrese
                           A   185    ;   33	
                           A   186    ;   34	// separate putch function that doesn't
                           A   187    ;   35	// UART0 initialization done by MOS fir
                           A   188    ;   36	// This utility doesn't run without MOS
                           A   189    ;   37	int putch(int c)
                           A   190    ;   38	{
0B00E5                     A   191    _putch:
                           A   192    .DEFINE "_putch"
                           A   193    
                           A   194    .VALUE _putch
                           A   195    
                           A   196    .CLASS 2
                           A   197    
                           A   198    .TYPE 68
                           A   199    
                           A   200    .ENDEF
                           A   201    
                           A   202    .BEGFUNC "putch",38,"_putch"
                           A   203    
                           A   204    .LINE 38
                           A   205    
                           A   206    .DEFINE "c"
                           A   207    
                           A   208    .CLASS 65
                           A   209    
                           A   210    .VALUE 6
                           A   211    
                           A   212    .TYPE 4
                           A   213    
0B00E5 DDE5                A   214    	PUSH	IX
0B00E7 DD210000 00         A   215    	LD	IX,0
0B00EC DD39                A   216    	ADD	IX,SP
                           A   217    .ENDEF
                           A   218    
                           A   219    ;   39		UINT8 lsr,temt;
                           A   220    ;   40		
                           A   221    ;   41		while((UART0_LSR & 0x40) == 0);
0B00EE                     A   222    L_1:
                           A   223    .LINE 41
                           A   224    
0B00EE ED38C5              A   225    	IN0	A,(197)
0B00F1 E640                A   226    	AND	A,%40
0B00F3 B7ED62              A   227    	UEXT	HL
0B00F6 6F                  A   228    	LD	L,A
0B00F7 CD B8 15 0B         A   229    	CALL	__icmpzero
0B00FB 28 F1               A   230    	JR	Z,L_1
                           A   231    ;   42		UART0_THR = c;
                           A   232    .LINE 42
                           A   233    
0B00FD DD7E06              A   234    	LD	A,(IX+%6)
0B0100 ED39C0              A   235    	OUT0	(192),A
                           A   236    ;   43		return c;
                           A   237    .LINE 43
                           A   238    
0B0103 DD2706              A   239    	LD	HL,(IX+%6)
                           A   240    ;   44	}
                           A   241    .LINE 44
                           A   242    
0B0106 DDF9                A   243    	LD	SP,IX
0B0108 DDE1                A   244    	POP	IX
0B010A C9                  A   245    	RET	
                           A   246    
                           A   247    
                           A   248    ;**************************** _putch **********
                           A   249    ;Name                         Addr/Register   S
                           A   250    ;c                                     IX+6    
                           A   251    
                           A   252    
                           A   253    ; Stack Frame Size: 9 (bytes)
                           A   254    ;       Spill Code: 0 (instruction)
                           A   255    
                           A   256    
                           A   257    .ENDFUNC "putch",44,"_putch"
                           A   258    ;   45	
                           A   259    ;   46	uint8_t getCharAt(uint16_t x, uint16_t 
0B010B                     A   260    _getCharAt:
                           A   261    .DEFINE "_getCharAt"
                           A   262    
                           A   263    .VALUE _getCharAt
                           A   264    
                           A   265    .CLASS 2
                           A   266    
                           A   267    .TYPE 76
                           A   268    
                           A   269    .ENDEF
                           A   270    
                           A   271    .BEGFUNC "getCharAt",46,"_getCharAt"
                           A   272    
                           A   273    .LINE 46
                           A   274    
                           A   275    .DEFINE "x"
                           A   276    
                           A   277    .CLASS 65
                           A   278    
                           A   279    .VALUE 6
                           A   280    
                           A   281    .TYPE 13
                           A   282    
                           A   283    .ENDEF
                           A   284    
                           A   285    .DEFINE "y"
                           A   286    
                           A   287    .CLASS 65
                           A   288    
                           A   289    .VALUE 9
                           A   290    
                           A   291    .TYPE 13
                           A   292    
                           A   293    .ENDEF
                           A   294    
0B010B DDE5                A   295    	PUSH	IX
0B010D DD210000 00         A   296    	LD	IX,0
0B0112 DD39                A   297    	ADD	IX,SP
                           A   298    ;   47		delayms(20);
                           A   299    .LINE 47
                           A   300    
0B0114 01140000            A   301    	LD	BC,20
0B0118 C5                  A   302    	PUSH	BC
0B0119 CD 62 0D 0B         A   303    	CALL	_delayms
0B011D C1                  A   304    	POP	BC
                           A   305    ;   48		putch(23);
                           A   306    .LINE 48
                           A   307    
0B011E 01170000            A   308    	LD	BC,23
0B0122 C5                  A   309    	PUSH	BC
0B0123 CD E5 00 0B         A   310    	CALL	_putch
0B0127 C1                  A   311    	POP	BC
                           A   312    ;   49		putch(0);
                           A   313    .LINE 49
                           A   314    
0B0128 01000000            A   315    	LD	BC,0
0B012C C5                  A   316    	PUSH	BC
0B012D CD E5 00 0B         A   317    	CALL	_putch
0B0131 C1                  A   318    	POP	BC
                           A   319    ;   50		putch(131);
                           A   320    .LINE 50
                           A   321    
0B0132 01830000            A   322    	LD	BC,131
0B0136 C5                  A   323    	PUSH	BC
0B0137 CD E5 00 0B         A   324    	CALL	_putch
0B013B C1                  A   325    	POP	BC
                           A   326    ;   51		putch(x & 0xFF);
                           A   327    .LINE 51
                           A   328    
0B013C DD0706              A   329    	LD	BC,(IX+%6)
0B013F CD F5 11 0B         A   330    	CALL	__stoiu
0B0143 7D                  A   331    	LD	A,L
0B0144 B7ED62              A   332    	UEXT	HL
0B0147 6F                  A   333    	LD	L,A
0B0148 E5                  A   334    	PUSH	HL
0B0149 CD E5 00 0B         A   335    	CALL	_putch
0B014D C1                  A   336    	POP	BC
                           A   337    ;   52		putch((x >> 8) & 0xFF);
                           A   338    .LINE 52
                           A   339    
0B014E DD0706              A   340    	LD	BC,(IX+%6)
0B0151 CD F5 11 0B         A   341    	CALL	__stoiu
0B0155 3E08                A   342    	LD	A,%8
0B0157 CD 65 10 0B         A   343    	CALL	__ishrs_b
0B015B 7D                  A   344    	LD	A,L
0B015C B7ED62              A   345    	UEXT	HL
0B015F 6F                  A   346    	LD	L,A
0B0160 E5                  A   347    	PUSH	HL
0B0161 CD E5 00 0B         A   348    	CALL	_putch
0B0165 C1                  A   349    	POP	BC
                           A   350    ;   53		putch(y & 0xFF);
                           A   351    .LINE 53
                           A   352    
0B0166 DD0709              A   353    	LD	BC,(IX+%9)
0B0169 CD F5 11 0B         A   354    	CALL	__stoiu
0B016D 7D                  A   355    	LD	A,L
0B016E B7ED62              A   356    	UEXT	HL
0B0171 6F                  A   357    	LD	L,A
0B0172 E5                  A   358    	PUSH	HL
0B0173 CD E5 00 0B         A   359    	CALL	_putch
0B0177 C1                  A   360    	POP	BC
                           A   361    ;   54		putch((y >> 8) & 0xFF);
                           A   362    .LINE 54
                           A   363    
0B0178 DD0709              A   364    	LD	BC,(IX+%9)
0B017B CD F5 11 0B         A   365    	CALL	__stoiu
0B017F 3E08                A   366    	LD	A,%8
0B0181 CD 65 10 0B         A   367    	CALL	__ishrs_b
0B0185 7D                  A   368    	LD	A,L
0B0186 B7ED62              A   369    	UEXT	HL
0B0189 6F                  A   370    	LD	L,A
0B018A E5                  A   371    	PUSH	HL
0B018B CD E5 00 0B         A   372    	CALL	_putch
0B018F C1                  A   373    	POP	BC
                           A   374    ;   55		delayms(20);
                           A   375    .LINE 55
                           A   376    
0B0190 01140000            A   377    	LD	BC,20
0B0194 C5                  A   378    	PUSH	BC
0B0195 CD 62 0D 0B         A   379    	CALL	_delayms
0B0199 C1                  A   380    	POP	BC
                           A   381    ;   56		return getsysvar_scrchar();
                           A   382    .LINE 56
                           A   383    
0B019A CD AE 0B 0B         A   384    	CALL	_getsysvar_scrchar
                           A   385    ;   57	}
                           A   386    .LINE 57
                           A   387    
0B019E DDF9                A   388    	LD	SP,IX
0B01A0 DDE1                A   389    	POP	IX
0B01A2 C9                  A   390    	RET	
                           A   391    
                           A   392    
                           A   393    ;**************************** _getCharAt ******
                           A   394    ;Name                         Addr/Register   S
                           A   395    ;_getsysvar_scrchar                  IMPORT  --
                           A   396    ;_putch                              IMPORT  --
                           A   397    ;_delayms                            IMPORT  --
                           A   398    ;y                                     IX+9    
                           A   399    ;x                                     IX+6    
                           A   400    
                           A   401    
                           A   402    ; Stack Frame Size: 12 (bytes)
                           A   403    ;       Spill Code: 0 (instruction)
                           A   404    
                           A   405    
                           A   406    .ENDFUNC "getCharAt",57,"_getCharAt"
                           A   407    ;   58	
                           A   408    ;   59	bool vdp_ota_present(void) {
0B01A3                     A   409    _vdp_ota_present:
                           A   410    .DEFINE "_vdp_ota_present"
                           A   411    
                           A   412    .VALUE _vdp_ota_present
                           A   413    
                           A   414    .CLASS 2
                           A   415    
                           A   416    .TYPE 76
                           A   417    
                           A   418    .ENDEF
                           A   419    
                           A   420    .BEGFUNC "vdp_ota_present",59,"_vdp_ota_present
                           A   421    
                           A   422    .LINE 59
                           A   423    
                           A   424    .DEFINE "n"
                           A   425    
                           A   426    .CLASS 65
                           A   427    
                           A   428    .VALUE -2
                           A   429    
                           A   430    .TYPE 13
                           A   431    
                           A   432    .ENDEF
                           A   433    
                           A   434    .DEFINE "test"
                           A   435    
                           A   436    .CLASS 65
                           A   437    
                           A   438    .VALUE -11
                           A   439    
                           A   440    .DIM 9
                           A   441    
                           A   442    .TYPE 98
                           A   443    
                           A   444    .ENDEF
                           A   445    
0B01A3 DDE5                A   446    	PUSH	IX
0B01A5 DD210000 00         A   447    	LD	IX,0
0B01AA DD39                A   448    	ADD	IX,SP
0B01AC ED22F5              A   449    	LEA	HL,IX+%FFFFFFF5
0B01AF F9                  A   450    	LD	SP,HL
                           A   451    ;   60		char test[UNLOCKMATCHLENGTH];
                           A   452    ;   61		uint16_t n;
                           A   453    ;   62	
                           A   454    ;   63		putch(23);
                           A   455    .LINE 63
                           A   456    
0B01B0 01170000            A   457    	LD	BC,23
0B01B4 C5                  A   458    	PUSH	BC
0B01B5 CD E5 00 0B         A   459    	CALL	_putch
0B01B9 C1                  A   460    	POP	BC
                           A   461    ;   64		putch(29);
                           A   462    .LINE 64
                           A   463    
0B01BA 011D0000            A   464    	LD	BC,29
0B01BE C5                  A   465    	PUSH	BC
0B01BF CD E5 00 0B         A   466    	CALL	_putch
0B01C3 C1                  A   467    	POP	BC
                           A   468    ;   65		putch(0);
                           A   469    .LINE 65
                           A   470    
0B01C4 01000000            A   471    	LD	BC,0
0B01C8 C5                  A   472    	PUSH	BC
0B01C9 CD E5 00 0B         A   473    	CALL	_putch
0B01CD C1                  A   474    	POP	BC
                           A   475    ;   66		printf("unlock");
                           A   476    .LINE 66
                           A   477    
0B01CE 01 FB 11 0B         A   478    	LD	BC,___print_uputch
0B01D2 ED43 04 20 0B       A   479    	LD	(___print_xputch),BC
0B01D7 01 87 20 0B         A   480    	LD	BC,L__3
0B01DB C5                  A   481    	PUSH	BC
0B01DC CD 8A 10 0B         A   482    	CALL	___print_sendstring
0B01E0 C1                  A   483    	POP	BC
                           A   484    ;   67	
                           A   485    ;   68		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   486    .LINE 68
                           A   487    
0B01E1 DD36FE00            A   488    	LD	(IX+%FFFFFFFE),%0
0B01E5 DD36FF00            A   489    	LD	(IX+%FFFFFFFF),%0
0B01E9 18 2A               A   490    	JR	L_8
0B01EB                     A   491    L_6:
0B01EB 01030000            A   492    	LD	BC,3
0B01EF C5                  A   493    	PUSH	BC
0B01F0 DD31FE              A   494    	LD	IY,(IX+%FFFFFFFE)
0B01F3 ED0308              A   495    	LEA	BC,IY+%8
0B01F6 C5                  A   496    	PUSH	BC
0B01F7 CD 0B 01 0B         A   497    	CALL	_getCharAt
0B01FB C1                  A   498    	POP	BC
0B01FC C1                  A   499    	POP	BC
0B01FD DD07FE              A   500    	LD	BC,(IX+%FFFFFFFE)
0B0200 CD F5 11 0B         A   501    	CALL	__stoiu
0B0204 E5C1                A   502    	LD	BC,HL
0B0206 ED22F5              A   503    	LEA	HL,IX+%FFFFFFF5
0B0209 09                  A   504    	ADD	HL,BC
0B020A 77                  A   505    	LD	(HL),A
0B020B DD27FE              A   506    	LD	HL,(IX+%FFFFFFFE)
0B020E 23                  A   507    	INC	HL
0B020F DD75FE              A   508    	LD	(IX+%FFFFFFFE),L
0B0212 DD74FF              A   509    	LD	(IX+%FFFFFFFF),H
0B0215                     A   510    L_8:
0B0215 49010A00            A   511    	LD.LIS	BC,10
0B0219 DD27FE              A   512    	LD	HL,(IX+%FFFFFFFE)
0B021C B7                  A   513    	OR	A,A
0B021D 40ED42              A   514    	SBC.SIS	HL,BC
0B0220 38 C9               A   515    	JR	C,L_6
                           A   516    ;   69		// 3 - line on-screen
                           A   517    ;   70		if(memcmp(test, "unlocked!",UNLOCKM
                           A   518    .LINE 70
                           A   519    
0B0222 01090000            A   520    	LD	BC,9
0B0226 C5                  A   521    	PUSH	BC
0B0227 01 8E 20 0B         A   522    	LD	BC,L__5
0B022B C5                  A   523    	PUSH	BC
0B022C ED65F5              A   524    	PEA	IX+%FFFFFFF5
0B022F CD 8E 15 0B         A   525    	CALL	_memcmp
0B0233 C1                  A   526    	POP	BC
0B0234 C1                  A   527    	POP	BC
0B0235 C1                  A   528    	POP	BC
0B0236 CD B8 15 0B         A   529    	CALL	__icmpzero
0B023A 20 04               A   530    	JR	NZ,L_10
0B023C 3E01                A   531    	LD	A,%1
0B023E 18 01               A   532    	JR	L_12
                           A   533    ;   71		else return false;
0B0240                     A   534    L_10:
                           A   535    .LINE 71
                           A   536    
0B0240 AF                  A   537    	XOR	A,A
                           A   538    ;   72	}
0B0241                     A   539    L_12:
                           A   540    .LINE 72
                           A   541    
0B0241 DDF9                A   542    	LD	SP,IX
0B0243 DDE1                A   543    	POP	IX
0B0245 C9                  A   544    	RET	
                           A   545    
                           A   546    
                           A   547    ;**************************** _vdp_ota_present 
                           A   548    ;Name                         Addr/Register   S
                           A   549    ;_memcmp                             IMPORT  --
                           A   550    ;___print_sendstring                 IMPORT  --
                           A   551    ;___print_xputch                     IMPORT    
                           A   552    ;___print_uputch                     IMPORT  --
                           A   553    ;_putch                              IMPORT  --
                           A   554    ;test                                 IX-11    
                           A   555    ;n                                     IX-2    
                           A   556    
                           A   557    
                           A   558    ; Stack Frame Size: 17 (bytes)
                           A   559    ;       Spill Code: 0 (instruction)
                           A   560    
                           A   561    
                           A   562    .ENDFUNC "vdp_ota_present",72,"_vdp_ota_present
                           A   563    	SEGMENT STRSECT
0B2087                     A   564    L__3:
0B2087 756E6C6F 636B       A   565    	DB	"unlock"
0B208D 00                  A   566    	DB	0
0B208E                     A   567    L__5:
0B208E 756E6C6F 636B6564   A   568    	DB	"unlocked!"
0B2096 21 
0B2097 00                  A   569    	DB	0
                           A   570    	SEGMENT DATA
0B1B8A                     A   571    _mos_magicnumbers:
0B1B8A F3                  A   572    	DB	243
0B1B8B ED                  A   573    	DB	237
0B1B8C 7D                  A   574    	DB	125
0B1B8D 5B                  A   575    	DB	91
0B1B8E C3                  A   576    	DB	195
                           A   577    .DEFINE "mos_magicnumbers"
                           A   578    .ALIAS "_mos_magicnumbers"
                           A   579    .CLASS 69
                           A   580    .VALUE _mos_magicnumbers
                           A   581    .DIM 5
                           A   582    .TYPE 108
                           A   583    .ENDEF
                           A   584    ;   73	
                           A   585    ;   74	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A   586    	SEGMENT CODE
                           A   587    ;   75	#define MOS_MAGICLENGTH 5
                           A   588    ;   76	bool containsMosHeader(uint8_t *filesta
0B0246                     A   589    _containsMosHeader:
                           A   590    .DEFINE "_containsMosHeader"
                           A   591    
                           A   592    .VALUE _containsMosHeader
                           A   593    
                           A   594    .CLASS 2
                           A   595    
                           A   596    .TYPE 76
                           A   597    
                           A   598    .ENDEF
                           A   599    
                           A   600    .BEGFUNC "containsMosHeader",76,"_containsMosHe
                           A   601    
                           A   602    .LINE 76
                           A   603    
                           A   604    .DEFINE "filestart"
                           A   605    
                           A   606    .CLASS 65
                           A   607    
                           A   608    .VALUE 6
                           A   609    
                           A   610    .TYPE 44
                           A   611    
                           A   612    .ENDEF
                           A   613    
                           A   614    .DEFINE "n"
                           A   615    
                           A   616    .CLASS 65
                           A   617    
                           A   618    .VALUE -1
                           A   619    
                           A   620    .TYPE 12
                           A   621    
                           A   622    .ENDEF
                           A   623    
                           A   624    .DEFINE "match"
                           A   625    
                           A   626    .CLASS 65
                           A   627    
                           A   628    .VALUE -2
                           A   629    
                           A   630    .TYPE 12
                           A   631    
                           A   632    .ENDEF
                           A   633    
0B0246 DDE5                A   634    	PUSH	IX
0B0248 DD210000 00         A   635    	LD	IX,0
0B024D DD39                A   636    	ADD	IX,SP
0B024F 3B                  A   637    	DEC	SP
0B0250 3B                  A   638    	DEC	SP
                           A   639    ;   77		uint8_t n;
                           A   640    ;   78		bool match = true;
                           A   641    .LINE 78
                           A   642    
0B0251 DD36FE01            A   643    	LD	(IX+%FFFFFFFE),%1
                           A   644    ;   79	
                           A   645    ;   80		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A   646    .LINE 80
                           A   647    
0B0255 DD36FF00            A   648    	LD	(IX+%FFFFFFFF),%0
0B0259 18 27               A   649    	JR	L_17
0B025B                     A   650    L_15:
0B025B DD7EFF              A   651    	LD	A,(IX+%FFFFFFFF)
0B025E B7ED62              A   652    	UEXT	HL
0B0261 6F                  A   653    	LD	L,A
0B0262 01 8A 1B 0B         A   654    	LD	BC,_mos_magicnumbers
0B0266 09                  A   655    	ADD	HL,BC
0B0267 E5FDE1              A   656    	LD	IY,HL
0B026A DD7EFF              A   657    	LD	A,(IX+%FFFFFFFF)
0B026D B7ED62              A   658    	UEXT	HL
0B0270 6F                  A   659    	LD	L,A
0B0271 DD0706              A   660    	LD	BC,(IX+%6)
0B0274 09                  A   661    	ADD	HL,BC
0B0275 FD7E00              A   662    	LD	A,(IY)
0B0278 BE                  A   663    	CP	A,(HL)
0B0279 28 04               A   664    	JR	Z,L_16
0B027B DD36FE00            A   665    	LD	(IX+%FFFFFFFE),%0
0B027F                     A   666    L_16:
0B027F DD34FF              A   667    	INC	(IX+%FFFFFFFF)
0B0282                     A   668    L_17:
0B0282 DD7EFF              A   669    	LD	A,(IX+%FFFFFFFF)
0B0285 FE05                A   670    	CP	A,%5
0B0287 38 D2               A   671    	JR	C,L_15
                           A   672    ;   81		return match;
                           A   673    .LINE 81
                           A   674    
0B0289 DD7EFE              A   675    	LD	A,(IX+%FFFFFFFE)
                           A   676    ;   82	}
                           A   677    .LINE 82
                           A   678    
0B028C DDF9                A   679    	LD	SP,IX
0B028E DDE1                A   680    	POP	IX
0B0290 C9                  A   681    	RET	
                           A   682    
                           A   683    
                           A   684    ;**************************** _containsMosHeade
                           A   685    ;Name                         Addr/Register   S
                           A   686    ;_mos_magicnumbers                   STATIC    
                           A   687    ;match                                 IX-2    
                           A   688    ;n                                     IX-1    
                           A   689    ;filestart                             IX+6    
                           A   690    
                           A   691    
                           A   692    ; Stack Frame Size: 11 (bytes)
                           A   693    ;       Spill Code: 0 (instruction)
                           A   694    
                           A   695    
                           A   696    .ENDFUNC "containsMosHeader",82,"_containsMosHe
                           A   697    	SEGMENT DATA
0B1B8F                     A   698    _esp32_magicnumbers:
0B1B8F 32                  A   699    	DB	50
0B1B90 54                  A   700    	DB	84
0B1B91 CD                  A   701    	DB	205
0B1B92 AB                  A   702    	DB	171
                           A   703    .DEFINE "esp32_magicnumbers"
                           A   704    .ALIAS "_esp32_magicnumbers"
                           A   705    .CLASS 69
                           A   706    .VALUE _esp32_magicnumbers
                           A   707    .DIM 4
                           A   708    .TYPE 108
                           A   709    .ENDEF
                           A   710    ;   83	
                           A   711    ;   84	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A   712    	SEGMENT CODE
                           A   713    ;   85	#define ESP32_MAGICLENGTH 4
                           A   714    ;   86	#define ESP32_MAGICSTART 0x20
                           A   715    ;   87	bool containsESP32Header(uint8_t *files
0B0291                     A   716    _containsESP32Header:
                           A   717    .DEFINE "_containsESP32Header"
                           A   718    
                           A   719    .VALUE _containsESP32Header
                           A   720    
                           A   721    .CLASS 2
                           A   722    
                           A   723    .TYPE 76
                           A   724    
                           A   725    .ENDEF
                           A   726    
                           A   727    .BEGFUNC "containsESP32Header",87,"_containsESP
                           A   728    
                           A   729    .LINE 87
                           A   730    
                           A   731    .DEFINE "filestart"
                           A   732    
                           A   733    .CLASS 65
                           A   734    
                           A   735    .VALUE 6
                           A   736    
                           A   737    .TYPE 44
                           A   738    
                           A   739    .ENDEF
                           A   740    
                           A   741    .DEFINE "n"
                           A   742    
                           A   743    .CLASS 65
                           A   744    
                           A   745    .VALUE -1
                           A   746    
                           A   747    .TYPE 12
                           A   748    
                           A   749    .ENDEF
                           A   750    
                           A   751    .DEFINE "match"
                           A   752    
                           A   753    .CLASS 65
                           A   754    
                           A   755    .VALUE -2
                           A   756    
                           A   757    .TYPE 12
                           A   758    
                           A   759    .ENDEF
                           A   760    
0B0291 DDE5                A   761    	PUSH	IX
0B0293 DD210000 00         A   762    	LD	IX,0
0B0298 DD39                A   763    	ADD	IX,SP
0B029A 3B                  A   764    	DEC	SP
0B029B 3B                  A   765    	DEC	SP
                           A   766    ;   88		uint8_t n;
                           A   767    ;   89		bool match = true;
                           A   768    .LINE 89
                           A   769    
0B029C DD36FE01            A   770    	LD	(IX+%FFFFFFFE),%1
                           A   771    ;   90	
                           A   772    ;   91		filestart += ESP32_MAGICSTART; // s
                           A   773    .LINE 91
                           A   774    
0B02A0 DD3106              A   775    	LD	IY,(IX+%6)
0B02A3 ED3320              A   776    	LEA	IY,IY+%20
0B02A6 DD3E06              A   777    	LD	(IX+%6),IY
                           A   778    ;   92		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A   779    .LINE 92
                           A   780    
0B02A9 DD36FF00            A   781    	LD	(IX+%FFFFFFFF),%0
0B02AD 18 27               A   782    	JR	L_24
0B02AF                     A   783    L_22:
                           A   784    ;   93			if(esp32_magicnumbers[n] != fil
                           A   785    .LINE 93
                           A   786    
0B02AF DD7EFF              A   787    	LD	A,(IX+%FFFFFFFF)
0B02B2 B7ED62              A   788    	UEXT	HL
0B02B5 6F                  A   789    	LD	L,A
0B02B6 01 8F 1B 0B         A   790    	LD	BC,_esp32_magicnumbers
0B02BA 09                  A   791    	ADD	HL,BC
0B02BB E5FDE1              A   792    	LD	IY,HL
0B02BE DD7EFF              A   793    	LD	A,(IX+%FFFFFFFF)
0B02C1 B7ED62              A   794    	UEXT	HL
0B02C4 6F                  A   795    	LD	L,A
0B02C5 DD0706              A   796    	LD	BC,(IX+%6)
0B02C8 09                  A   797    	ADD	HL,BC
0B02C9 FD7E00              A   798    	LD	A,(IY)
0B02CC BE                  A   799    	CP	A,(HL)
0B02CD 28 04               A   800    	JR	Z,L_23
0B02CF DD36FE00            A   801    	LD	(IX+%FFFFFFFE),%0
                           A   802    ;   94		}
0B02D3                     A   803    L_23:
                           A   804    .LINE 94
                           A   805    
0B02D3 DD34FF              A   806    	INC	(IX+%FFFFFFFF)
0B02D6                     A   807    L_24:
0B02D6 DD7EFF              A   808    	LD	A,(IX+%FFFFFFFF)
0B02D9 FE04                A   809    	CP	A,%4
0B02DB 38 D2               A   810    	JR	C,L_22
                           A   811    ;   95		return match;
                           A   812    .LINE 95
                           A   813    
0B02DD DD7EFE              A   814    	LD	A,(IX+%FFFFFFFE)
                           A   815    ;   96	}
                           A   816    .LINE 96
                           A   817    
0B02E0 DDF9                A   818    	LD	SP,IX
0B02E2 DDE1                A   819    	POP	IX
0B02E4 C9                  A   820    	RET	
                           A   821    
                           A   822    
                           A   823    ;**************************** _containsESP32Hea
                           A   824    ;Name                         Addr/Register   S
                           A   825    ;_esp32_magicnumbers                 STATIC    
                           A   826    ;match                                 IX-2    
                           A   827    ;n                                     IX-1    
                           A   828    ;filestart                             IX+6    
                           A   829    
                           A   830    
                           A   831    ; Stack Frame Size: 11 (bytes)
                           A   832    ;       Spill Code: 0 (instruction)
                           A   833    
                           A   834    
                           A   835    .ENDFUNC "containsESP32Header",96,"_containsESP
                           A   836    ;   97	
                           A   837    ;   98	void print_version(void) {
0B02E5                     A   838    _print_version:
                           A   839    .DEFINE "_print_version"
                           A   840    
                           A   841    .VALUE _print_version
                           A   842    
                           A   843    .CLASS 2
                           A   844    
                           A   845    .TYPE 65
                           A   846    
                           A   847    .ENDEF
                           A   848    
                           A   849    .BEGFUNC "print_version",98,"_print_version"
                           A   850    
0B02E5 DDE5                A   851    	PUSH	IX
0B02E7 DD210000 00         A   852    	LD	IX,0
0B02EC DD39                A   853    	ADD	IX,SP
                           A   854    ;   99		printf("Agon firmware upgrade utili
                           A   855    .LINE 99
                           A   856    
0B02EE 01 FB 11 0B         A   857    	LD	BC,___print_uputch
0B02F2 ED43 04 20 0B       A   858    	LD	(___print_xputch),BC
0B02F7 01 98 20 0B         A   859    	LD	BC,L__14
0B02FB C5                  A   860    	PUSH	BC
0B02FC CD 8A 10 0B         A   861    	CALL	___print_sendstring
0B0300 C1                  A   862    	POP	BC
                           A   863    ;  100	}
                           A   864    .LINE 100
                           A   865    
0B0301 DDF9                A   866    	LD	SP,IX
0B0303 DDE1                A   867    	POP	IX
0B0305 C9                  A   868    	RET	
                           A   869    
                           A   870    
                           A   871    ;**************************** _print_version **
                           A   872    ;Name                         Addr/Register   S
                           A   873    ;___print_sendstring                 IMPORT  --
                           A   874    ;___print_xputch                     IMPORT    
                           A   875    ;___print_uputch                     IMPORT  --
                           A   876    
                           A   877    
                           A   878    ; Stack Frame Size: 6 (bytes)
                           A   879    ;       Spill Code: 0 (instruction)
                           A   880    
                           A   881    
                           A   882    .ENDFUNC "print_version",100,"_print_version"
                           A   883    	SEGMENT STRSECT
0B2098                     A   884    L__14:
0B2098 41676F6E 20666972   A   885    	DB	"Agon firmware upgrade utility v1.4"
0B20A0 6D776172 65207570 
0B20A8 67726164 65207574 
0B20B0 696C6974 79207631 
0B20B8 2E34 
0B20BA 0A0D0A0D 00         A   886    	DB	10,13,10,13,0
                           A   887    	SEGMENT CODE
                           A   888    ;  101	
                           A   889    ;  102	void usage(void) {
0B0306                     A   890    _usage:
                           A   891    .DEFINE "_usage"
                           A   892    
                           A   893    .VALUE _usage
                           A   894    
                           A   895    .CLASS 2
                           A   896    
                           A   897    .TYPE 65
                           A   898    
                           A   899    .ENDEF
                           A   900    
                           A   901    .BEGFUNC "usage",102,"_usage"
                           A   902    
0B0306 DDE5                A   903    	PUSH	IX
0B0308 DD210000 00         A   904    	LD	IX,0
0B030D DD39                A   905    	ADD	IX,SP
                           A   906    ;  103		print_version();
                           A   907    .LINE 103
                           A   908    
0B030F CD E5 02 0B         A   909    	CALL	_print_version
                           A   910    ;  104		printf("Usage: FLASH <mos|vdp> <fil
                           A   911    .LINE 104
                           A   912    
0B0313 01 FB 11 0B         A   913    	LD	BC,___print_uputch
0B0317 ED43 04 20 0B       A   914    	LD	(___print_xputch),BC
0B031C 01 BF 20 0B         A   915    	LD	BC,L__16
0B0320 C5                  A   916    	PUSH	BC
0B0321 CD 8A 10 0B         A   917    	CALL	___print_sendstring
0B0325 C1                  A   918    	POP	BC
                           A   919    ;  105	}
                           A   920    .LINE 105
                           A   921    
0B0326 DDF9                A   922    	LD	SP,IX
0B0328 DDE1                A   923    	POP	IX
0B032A C9                  A   924    	RET	
                           A   925    
                           A   926    
                           A   927    ;**************************** _usage **********
                           A   928    ;Name                         Addr/Register   S
                           A   929    ;___print_sendstring                 IMPORT  --
                           A   930    ;___print_xputch                     IMPORT    
                           A   931    ;___print_uputch                     IMPORT  --
                           A   932    
                           A   933    
                           A   934    ; Stack Frame Size: 6 (bytes)
                           A   935    ;       Spill Code: 0 (instruction)
                           A   936    
                           A   937    
                           A   938    .ENDFUNC "usage",105,"_usage"
                           A   939    	SEGMENT STRSECT
0B20BF                     A   940    L__16:
0B20BF 55736167 653A2046   A   941    	DB	"Usage: FLASH <mos|vdp> <filename>"
0B20C7 4C415348 203C6D6F 
0B20CF 737C7664 703E203C 
0B20D7 66696C65 6E616D65 
0B20DF 3E 
0B20E0 0A0D00              A   942    	DB	10,13,0
                           A   943    	SEGMENT CODE
                           A   944    ;  106	
                           A   945    ;  107	typedef enum {
                           A   946    ;  108		MOS,
                           A   947    ;  109		VDP
                           A   948    ;  110	} flashtype;
                           A   949    ;  111	
                           A   950    ;  112	bool getResponse(flashtype t, uint32_t 
0B032B                     A   951    _getResponse:
                           A   952    .DEFINE "_getResponse"
                           A   953    
                           A   954    .VALUE _getResponse
                           A   955    
                           A   956    .CLASS 2
                           A   957    
                           A   958    .TYPE 76
                           A   959    
                           A   960    .ENDEF
                           A   961    
                           A   962    .BEGFUNC "getResponse",112,"_getResponse"
                           A   963    
                           A   964    .LINE 112
                           A   965    
                           A   966    .DEFINE "t"
                           A   967    
                           A   968    .CLASS 65
                           A   969    
                           A   970    .VALUE 6
                           A   971    
                           A   972    .TYPE 4
                           A   973    
                           A   974    .ENDEF
                           A   975    
                           A   976    .DEFINE "crc"
                           A   977    
                           A   978    .CLASS 65
                           A   979    
                           A   980    .VALUE 9
                           A   981    
                           A   982    .TYPE 15
                           A   983    
                           A   984    .ENDEF
                           A   985    
                           A   986    .DEFINE "response"
                           A   987    
                           A   988    .CLASS 65
                           A   989    
                           A   990    .VALUE -1
                           A   991    
                           A   992    .TYPE 12
                           A   993    
                           A   994    .ENDEF
                           A   995    
0B032B DDE5                A   996    	PUSH	IX
0B032D DD210000 00         A   997    	LD	IX,0
0B0332 DD39                A   998    	ADD	IX,SP
0B0334 3B                  A   999    	DEC	SP
                           A  1000    ;  113		uint8_t response = 0;
                           A  1001    .LINE 113
                           A  1002    
0B0335 DD36FF00            A  1003    	LD	(IX+%FFFFFFFF),%0
                           A  1004    ;  114	
                           A  1005    ;  115		switch(t) {
                           A  1006    .LINE 115
                           A  1007    
0B0339 DD2706              A  1008    	LD	HL,(IX+%6)
0B033C CD 9A 18 0B         A  1009    	CALL	__case8D
0B0340 E9                  A  1010    	JP	(HL)
0B0341                     A  1011    L__18:
0B0341 0200                A  1012    	DW	2
0B0343 00                  A  1013    	DB	0
0B0344 4E030B              A  1014    	DW24	L_29	
                           A  1015    
0B0347 01                  A  1016    	DB	1
0B0348 8F030B              A  1017    	DW24	L_30	
                           A  1018    
0B034B D7030B              A  1019    	DW24	L_32	
                           A  1020    
                           A  1021    ;  116			case MOS:
0B034E                     A  1022    L_29:
                           A  1023    .LINE 116
                           A  1024    
                           A  1025    ;  117				printf("\r\n\r\n0x%04lX - f
                           A  1026    .LINE 117
                           A  1027    
0B034E 01 FB 11 0B         A  1028    	LD	BC,___print_uputch
0B0352 ED43 04 20 0B       A  1029    	LD	(___print_xputch),BC
0B0357 01 E3 20 0B         A  1030    	LD	BC,L__19
0B035B C5                  A  1031    	PUSH	BC
0B035C CD 8A 10 0B         A  1032    	CALL	___print_sendstring
0B0360 C1                  A  1033    	POP	BC
0B0361 3E04                A  1034    	LD	A,%4
0B0363 32 A9 1B 0B         A  1035    	LD	(___print_fmt+5),A
0B0367 3E60                A  1036    	LD	A,%60
0B0369 32 A5 1B 0B         A  1037    	LD	(___print_fmt+1),A
0B036D 3E78                A  1038    	LD	A,%78
0B036F 32 A8 1B 0B         A  1039    	LD	(___print_fmt+4),A
0B0373 DD4E0C              A  1040    	LD	C,(IX+%C)
0B0376 0600                A  1041    	LD	B,%0
0B0378 C5                  A  1042    	PUSH	BC
0B0379 DD0709              A  1043    	LD	BC,(IX+%9)
0B037C C5                  A  1044    	PUSH	BC
0B037D CD 54 19 0B         A  1045    	CALL	__u_ultoa
0B0381 C1                  A  1046    	POP	BC
0B0382 C1                  A  1047    	POP	BC
0B0383 01 EA 20 0B         A  1048    	LD	BC,L__20
0B0387 C5                  A  1049    	PUSH	BC
0B0388 CD 8A 10 0B         A  1050    	CALL	___print_sendstring
0B038C C1                  A  1051    	POP	BC
                           A  1052    ;  118				break;
                           A  1053    .LINE 118
                           A  1054    
0B038D 18 48               A  1055    	JR	L_32
                           A  1056    ;  119			case VDP:
0B038F                     A  1057    L_30:
                           A  1058    .LINE 119
                           A  1059    
                           A  1060    ;  120				printf("\r\n\r\n0x%04lX - f
                           A  1061    .LINE 120
                           A  1062    
0B038F 01 FB 11 0B         A  1063    	LD	BC,___print_uputch
0B0393 ED43 04 20 0B       A  1064    	LD	(___print_xputch),BC
0B0398 01 01 21 0B         A  1065    	LD	BC,L__21
0B039C C5                  A  1066    	PUSH	BC
0B039D CD 8A 10 0B         A  1067    	CALL	___print_sendstring
0B03A1 C1                  A  1068    	POP	BC
0B03A2 3E04                A  1069    	LD	A,%4
0B03A4 32 A9 1B 0B         A  1070    	LD	(___print_fmt+5),A
0B03A8 3E60                A  1071    	LD	A,%60
0B03AA 32 A5 1B 0B         A  1072    	LD	(___print_fmt+1),A
0B03AE 3E78                A  1073    	LD	A,%78
0B03B0 32 A8 1B 0B         A  1074    	LD	(___print_fmt+4),A
0B03B4 DD4E0C              A  1075    	LD	C,(IX+%C)
0B03B7 0600                A  1076    	LD	B,%0
0B03B9 C5                  A  1077    	PUSH	BC
0B03BA DD0709              A  1078    	LD	BC,(IX+%9)
0B03BD C5                  A  1079    	PUSH	BC
0B03BE CD 54 19 0B         A  1080    	CALL	__u_ultoa
0B03C2 C1                  A  1081    	POP	BC
0B03C3 C1                  A  1082    	POP	BC
0B03C4 01 08 21 0B         A  1083    	LD	BC,L__22
0B03C8 C5                  A  1084    	PUSH	BC
0B03C9 CD 8A 10 0B         A  1085    	CALL	___print_sendstring
0B03CD C1                  A  1086    	POP	BC
                           A  1087    ;  121				break;
                           A  1088    .LINE 121
                           A  1089    
0B03CE 18 07               A  1090    	JR	L_32
                           A  1091    ;  122		}
                           A  1092    ;  123	
                           A  1093    ;  124		while((response != 'y') && (respons
0B03D0                     A  1094    L_33:
                           A  1095    .LINE 124
                           A  1096    
0B03D0 CD 70 0B 0B         A  1097    	CALL	_getch
0B03D4 DD77FF              A  1098    	LD	(IX+%FFFFFFFF),A
0B03D7                     A  1099    L_32:
0B03D7 DD7EFF              A  1100    	LD	A,(IX+%FFFFFFFF)
0B03DA FE79                A  1101    	CP	A,%79
0B03DC 28 07               A  1102    	JR	Z,L_35
0B03DE DD7EFF              A  1103    	LD	A,(IX+%FFFFFFFF)
0B03E1 FE6E                A  1104    	CP	A,%6E
0B03E3 20 EB               A  1105    	JR	NZ,L_33
0B03E5                     A  1106    L_35:
                           A  1107    ;  125		printf("\r\nUser abort\n\r\n\r");
                           A  1108    .LINE 125
                           A  1109    
0B03E5 01 FB 11 0B         A  1110    	LD	BC,___print_uputch
0B03E9 ED43 04 20 0B       A  1111    	LD	(___print_xputch),BC
0B03EE 01 1F 21 0B         A  1112    	LD	BC,L__25
0B03F2 C5                  A  1113    	PUSH	BC
0B03F3 CD 8A 10 0B         A  1114    	CALL	___print_sendstring
0B03F7 C1                  A  1115    	POP	BC
                           A  1116    ;  126		return response == 'y';
                           A  1117    .LINE 126
                           A  1118    
0B03F8 DD7EFF              A  1119    	LD	A,(IX+%FFFFFFFF)
0B03FB FE79                A  1120    	CP	A,%79
0B03FD 20 04               A  1121    	JR	NZ,L__27
0B03FF 3E01                A  1122    	LD	A,%1
0B0401 18 01               A  1123    	JR	L__28
0B0403                     A  1124    L__27:
0B0403 AF                  A  1125    	XOR	A,A
0B0404                     A  1126    L__28:
                           A  1127    ;  127	}
                           A  1128    .LINE 127
                           A  1129    
0B0404 DDF9                A  1130    	LD	SP,IX
0B0406 DDE1                A  1131    	POP	IX
0B0408 C9                  A  1132    	RET	
                           A  1133    
                           A  1134    
                           A  1135    ;**************************** _getResponse ****
                           A  1136    ;Name                         Addr/Register   S
                           A  1137    ;_getch                              IMPORT  --
                           A  1138    ;__u_ultoa                           IMPORT  --
                           A  1139    ;___print_fmt                        IMPORT    
                           A  1140    ;___print_sendstring                 IMPORT  --
                           A  1141    ;___print_xputch                     IMPORT    
                           A  1142    ;___print_uputch                     IMPORT  --
                           A  1143    ;response                              IX-1    
                           A  1144    ;crc                                   IX+9    
                           A  1145    ;t                                     IX+6    
                           A  1146    
                           A  1147    
                           A  1148    ; Stack Frame Size: 16 (bytes)
                           A  1149    ;       Spill Code: 0 (instruction)
                           A  1150    
                           A  1151    
                           A  1152    .ENDFUNC "getResponse",127,"_getResponse"
                           A  1153    	SEGMENT STRSECT
0B20E3                     A  1154    L__19:
0B20E3 0D0A0D0A            A  1155    	DB	13,10,13,10
0B20E7 3078                A  1156    	DB	"0x"
0B20E9 00                  A  1157    	DB	0
0B20EA                     A  1158    L__20:
0B20EA 202D2066 6C617368   A  1159    	DB	" - flash to MOS (y/n)?"
0B20F2 20746F20 4D4F5320 
0B20FA 28792F6E 293F 
0B2100 00                  A  1160    	DB	0
0B2101                     A  1161    L__21:
0B2101 0D0A0D0A            A  1162    	DB	13,10,13,10
0B2105 3078                A  1163    	DB	"0x"
0B2107 00                  A  1164    	DB	0
0B2108                     A  1165    L__22:
0B2108 202D2066 6C617368   A  1166    	DB	" - flash to VDP (y/n)?"
0B2110 20746F20 56445020 
0B2118 28792F6E 293F 
0B211E 00                  A  1167    	DB	0
0B211F                     A  1168    L__25:
0B211F 0D0A                A  1169    	DB	13,10
0B2121 55736572 2061626F   A  1170    	DB	"User abort"
0B2129 7274 
0B212B 0A0D0A0D 00         A  1171    	DB	10,13,10,13,0
                           A  1172    	SEGMENT CODE
                           A  1173    ;  128	
                           A  1174    ;  129	uint8_t update_vdp(char *filename) {
0B0409                     A  1175    _update_vdp:
                           A  1176    .DEFINE "_update_vdp"
                           A  1177    
                           A  1178    .VALUE _update_vdp
                           A  1179    
                           A  1180    .CLASS 2
                           A  1181    
                           A  1182    .TYPE 76
                           A  1183    
                           A  1184    .ENDEF
                           A  1185    
                           A  1186    .BEGFUNC "update_vdp",129,"_update_vdp"
                           A  1187    
                           A  1188    .LINE 129
                           A  1189    
                           A  1190    .DEFINE "filename"
                           A  1191    
                           A  1192    .CLASS 65
                           A  1193    
                           A  1194    .VALUE 6
                           A  1195    
                           A  1196    .TYPE 34
                           A  1197    
                           A  1198    .ENDEF
                           A  1199    
                           A  1200    .DEFINE "file"
                           A  1201    
                           A  1202    .CLASS 65
                           A  1203    
                           A  1204    .VALUE -1
                           A  1205    
                           A  1206    .TYPE 12
                           A  1207    
                           A  1208    .ENDEF
                           A  1209    
                           A  1210    .DEFINE "size"
                           A  1211    
                           A  1212    .CLASS 65
                           A  1213    
                           A  1214    .VALUE -4
                           A  1215    
                           A  1216    .TYPE 14
                           A  1217    
                           A  1218    .ENDEF
                           A  1219    
                           A  1220    .DEFINE "filesize"
                           A  1221    
                           A  1222    .CLASS 65
                           A  1223    
                           A  1224    .VALUE -7
                           A  1225    
                           A  1226    .TYPE 14
                           A  1227    
                           A  1228    .ENDEF
                           A  1229    
                           A  1230    .DEFINE "crcresult"
                           A  1231    
                           A  1232    .CLASS 65
                           A  1233    
                           A  1234    .VALUE -11
                           A  1235    
                           A  1236    .TYPE 15
                           A  1237    
                           A  1238    .ENDEF
                           A  1239    
                           A  1240    .DEFINE "buffer"
                           A  1241    
                           A  1242    .CLASS 65
                           A  1243    
                           A  1244    .VALUE -47
                           A  1245    
                           A  1246    .DIM 36
                           A  1247    
                           A  1248    .TYPE 108
                           A  1249    
                           A  1250    .ENDEF
                           A  1251    
0B0409 DDE5                A  1252    	PUSH	IX
0B040B DD210000 00         A  1253    	LD	IX,0
0B0410 DD39                A  1254    	ADD	IX,SP
0B0412 ED22D1              A  1255    	LEA	HL,IX+%FFFFFFD1
0B0415 F9                  A  1256    	LD	SP,HL
                           A  1257    ;  130		uint8_t file;
                           A  1258    ;  131		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  1259    ;  132		uint24_t filesize;
                           A  1260    ;  133		uint32_t crcresult;
                           A  1261    ;  134		uint24_t size, n;
                           A  1262    ;  135		uint8_t response;
                           A  1263    ;  136	
                           A  1264    ;  137		putch(12); // cls
                           A  1265    .LINE 137
                           A  1266    
0B0416 010C0000            A  1267    	LD	BC,12
0B041A C5                  A  1268    	PUSH	BC
0B041B CD E5 00 0B         A  1269    	CALL	_putch
0B041F C1                  A  1270    	POP	BC
                           A  1271    ;  138		print_version();	
                           A  1272    .LINE 138
                           A  1273    
0B0420 CD E5 02 0B         A  1274    	CALL	_print_version
                           A  1275    ;  139		printf("Unlocking VDP updater...\r\
                           A  1276    .LINE 139
                           A  1277    
0B0424 01 FB 11 0B         A  1278    	LD	BC,___print_uputch
0B0428 ED43 04 20 0B       A  1279    	LD	(___print_xputch),BC
0B042D 01 30 21 0B         A  1280    	LD	BC,L__30
0B0431 C5                  A  1281    	PUSH	BC
0B0432 CD 8A 10 0B         A  1282    	CALL	___print_sendstring
0B0436 C1                  A  1283    	POP	BC
                           A  1284    ;  140		
                           A  1285    ;  141		if(!vdp_ota_present()) {
                           A  1286    .LINE 141
                           A  1287    
0B0437 CD A3 01 0B         A  1288    	CALL	_vdp_ota_present
0B043B B7                  A  1289    	OR	A,A
0B043C 20 18               A  1290    	JR	NZ,L_38
                           A  1291    ;  142			printf(" failed - incompatible 
                           A  1292    .LINE 142
                           A  1293    
0B043E 01 FB 11 0B         A  1294    	LD	BC,___print_uputch
0B0442 ED43 04 20 0B       A  1295    	LD	(___print_xputch),BC
0B0447 01 4B 21 0B         A  1296    	LD	BC,L__32
0B044B C5                  A  1297    	PUSH	BC
0B044C CD 8A 10 0B         A  1298    	CALL	___print_sendstring
0B0450 C1                  A  1299    	POP	BC
                           A  1300    ;  143			return 0;
                           A  1301    .LINE 143
                           A  1302    
0B0451 AF                  A  1303    	XOR	A,A
0B0452 C3 C4 05 0B         A  1304    	JR	L_50
                           A  1305    ;  144		}
0B0456                     A  1306    L_38:
                           A  1307    .LINE 144
                           A  1308    
                           A  1309    ;  145	
                           A  1310    ;  146		file = mos_fopen(filename, fa_read)
                           A  1311    .LINE 146
                           A  1312    
0B0456 01010000            A  1313    	LD	BC,1
0B045A C5                  A  1314    	PUSH	BC
0B045B DD0706              A  1315    	LD	BC,(IX+%6)
0B045E C5                  A  1316    	PUSH	BC
0B045F CD BA 0B 0B         A  1317    	CALL	_mos_fopen
0B0463 C1                  A  1318    	POP	BC
0B0464 C1                  A  1319    	POP	BC
0B0465 DD77FF              A  1320    	LD	(IX+%FFFFFFFF),A
                           A  1321    ;  147		if(!file) {
                           A  1322    .LINE 147
                           A  1323    
0B0468 B7                  A  1324    	OR	A,A
0B0469 20 2C               A  1325    	JR	NZ,L_40
                           A  1326    ;  148			printf("Error opening \"%s\"\n\
                           A  1327    .LINE 148
                           A  1328    
0B046B 01 FB 11 0B         A  1329    	LD	BC,___print_uputch
0B046F ED43 04 20 0B       A  1330    	LD	(___print_xputch),BC
0B0474 01 68 21 0B         A  1331    	LD	BC,L__34
0B0478 C5                  A  1332    	PUSH	BC
0B0479 CD 8A 10 0B         A  1333    	CALL	___print_sendstring
0B047D C1                  A  1334    	POP	BC
0B047E DD0706              A  1335    	LD	BC,(IX+%6)
0B0481 C5                  A  1336    	PUSH	BC
0B0482 CD 8A 10 0B         A  1337    	CALL	___print_sendstring
0B0486 C1                  A  1338    	POP	BC
0B0487 01 78 21 0B         A  1339    	LD	BC,L__35
0B048B C5                  A  1340    	PUSH	BC
0B048C CD 8A 10 0B         A  1341    	CALL	___print_sendstring
0B0490 C1                  A  1342    	POP	BC
                           A  1343    ;  149			return EXIT_FILENOTFOUND;
                           A  1344    .LINE 149
                           A  1345    
0B0491 3E04                A  1346    	LD	A,%4
0B0493 C3 C4 05 0B         A  1347    	JR	L_50
                           A  1348    ;  150		}
0B0497                     A  1349    L_40:
                           A  1350    .LINE 150
                           A  1351    
                           A  1352    ;  151	
                           A  1353    ;  152		mos_fread(file, (char *)buffer, ESP
                           A  1354    .LINE 152
                           A  1355    
0B0497 01240000            A  1356    	LD	BC,36
0B049B C5                  A  1357    	PUSH	BC
0B049C ED65D1              A  1358    	PEA	IX+%FFFFFFD1
0B049F DD4EFF              A  1359    	LD	C,(IX+%FFFFFFFF)
0B04A2 0600                A  1360    	LD	B,%0
0B04A4 C5                  A  1361    	PUSH	BC
0B04A5 CD FC 0B 0B         A  1362    	CALL	_mos_fread
0B04A9 C1                  A  1363    	POP	BC
0B04AA C1                  A  1364    	POP	BC
0B04AB C1                  A  1365    	POP	BC
                           A  1366    ;  153		if(!containsESP32Header(buffer)) {
                           A  1367    .LINE 153
                           A  1368    
0B04AC ED65D1              A  1369    	PEA	IX+%FFFFFFD1
0B04AF CD 91 02 0B         A  1370    	CALL	_containsESP32Header
0B04B3 C1                  A  1371    	POP	BC
0B04B4 B7                  A  1372    	OR	A,A
0B04B5 20 24               A  1373    	JR	NZ,L_42
                           A  1374    ;  154			printf("File does not contain v
                           A  1375    .LINE 154
                           A  1376    
0B04B7 01 FB 11 0B         A  1377    	LD	BC,___print_uputch
0B04BB ED43 04 20 0B       A  1378    	LD	(___print_xputch),BC
0B04C0 01 7C 21 0B         A  1379    	LD	BC,L__37
0B04C4 C5                  A  1380    	PUSH	BC
0B04C5 CD 8A 10 0B         A  1381    	CALL	___print_sendstring
0B04C9 C1                  A  1382    	POP	BC
                           A  1383    ;  155			mos_fclose(file);
                           A  1384    .LINE 155
                           A  1385    
0B04CA DD4EFF              A  1386    	LD	C,(IX+%FFFFFFFF)
0B04CD 0600                A  1387    	LD	B,%0
0B04CF C5                  A  1388    	PUSH	BC
0B04D0 CD D2 0B 0B         A  1389    	CALL	_mos_fclose
0B04D4 C1                  A  1390    	POP	BC
                           A  1391    ;  156			return EXIT_INVALIDPARAMETER;
                           A  1392    .LINE 156
                           A  1393    
0B04D5 3E13                A  1394    	LD	A,%13
0B04D7 C3 C4 05 0B         A  1395    	JR	L_50
                           A  1396    ;  157		}
0B04DB                     A  1397    L_42:
                           A  1398    .LINE 157
                           A  1399    
                           A  1400    ;  158		printf("\r\nValid ESP32 code\r\nCal
                           A  1401    .LINE 158
                           A  1402    
0B04DB 01 FB 11 0B         A  1403    	LD	BC,___print_uputch
0B04DF ED43 04 20 0B       A  1404    	LD	(___print_xputch),BC
0B04E4 01 A5 21 0B         A  1405    	LD	BC,L__38
0B04E8 C5                  A  1406    	PUSH	BC
0B04E9 CD 8A 10 0B         A  1407    	CALL	___print_sendstring
0B04ED C1                  A  1408    	POP	BC
                           A  1409    ;  159		crc32_initialize();
                           A  1410    .LINE 159
                           A  1411    
0B04EE CD 48 0F 0B         A  1412    	CALL	_crc32_initialize
                           A  1413    ;  160		mos_flseek(file, 0);
                           A  1414    .LINE 160
                           A  1415    
0B04F2 01000000            A  1416    	LD	BC,0
0B04F6 C5                  A  1417    	PUSH	BC
0B04F7 C5                  A  1418    	PUSH	BC
0B04F8 DD4EFF              A  1419    	LD	C,(IX+%FFFFFFFF)
0B04FB 0600                A  1420    	LD	B,%0
0B04FD C5                  A  1421    	PUSH	BC
0B04FE CD 76 0C 0B         A  1422    	CALL	_mos_flseek
0B0502 C1                  A  1423    	POP	BC
0B0503 C1                  A  1424    	POP	BC
0B0504 C1                  A  1425    	POP	BC
                           A  1426    ;  161		while(1) {
0B0505                     A  1427    L_46:
                           A  1428    .LINE 161
                           A  1429    
                           A  1430    ;  162			size = mos_fread(file, (char *)
                           A  1431    .LINE 162
                           A  1432    
0B0505 01004000            A  1433    	LD	BC,16384
0B0509 C5                  A  1434    	PUSH	BC
0B050A 01000005            A  1435    	LD	BC,327680
0B050E C5                  A  1436    	PUSH	BC
0B050F DD4EFF              A  1437    	LD	C,(IX+%FFFFFFFF)
0B0512 0600                A  1438    	LD	B,%0
0B0514 C5                  A  1439    	PUSH	BC
0B0515 CD FC 0B 0B         A  1440    	CALL	_mos_fread
0B0519 C1                  A  1441    	POP	BC
0B051A C1                  A  1442    	POP	BC
0B051B C1                  A  1443    	POP	BC
0B051C DD2FFC              A  1444    	LD	(IX+%FFFFFFFC),HL
                           A  1445    ;  163			if(size == 0) break;
                           A  1446    .LINE 163
                           A  1447    
0B051F CD B8 15 0B         A  1448    	CALL	__icmpzero
0B0523 28 1B               A  1449    	JR	Z,L_47
                           A  1450    ;  164			putch('.');
                           A  1451    .LINE 164
                           A  1452    
0B0525 012E0000            A  1453    	LD	BC,46
0B0529 C5                  A  1454    	PUSH	BC
0B052A CD E5 00 0B         A  1455    	CALL	_putch
0B052E C1                  A  1456    	POP	BC
                           A  1457    ;  165			crc32((char *)BUFFER1, size);
                           A  1458    .LINE 165
                           A  1459    
0B052F DD07FC              A  1460    	LD	BC,(IX+%FFFFFFFC)
0B0532 C5                  A  1461    	PUSH	BC
0B0533 01000005            A  1462    	LD	BC,327680
0B0537 C5                  A  1463    	PUSH	BC
0B0538 CD 9A 0F 0B         A  1464    	CALL	_crc32
0B053C C1                  A  1465    	POP	BC
0B053D C1                  A  1466    	POP	BC
0B053E 18 C5               A  1467    	JR	L_46
                           A  1468    ;  166		}
0B0540                     A  1469    L_47:
                           A  1470    .LINE 166
                           A  1471    
                           A  1472    ;  167		crcresult = crc32_finalize();
                           A  1473    .LINE 167
                           A  1474    
0B0540 CD 5D 0F 0B         A  1475    	CALL	_crc32_finalize
0B0544 DD2FF5              A  1476    	LD	(IX+%FFFFFFF5),HL
0B0547 DD73F8              A  1477    	LD	(IX+%FFFFFFF8),E
                           A  1478    ;  168		if(!getResponse(VDP, crcresult)) {
                           A  1479    .LINE 168
                           A  1480    
0B054A DD4EF8              A  1481    	LD	C,(IX+%FFFFFFF8)
0B054D 0600                A  1482    	LD	B,%0
0B054F C5                  A  1483    	PUSH	BC
0B0550 DD07F5              A  1484    	LD	BC,(IX+%FFFFFFF5)
0B0553 C5                  A  1485    	PUSH	BC
0B0554 01010000            A  1486    	LD	BC,1
0B0558 C5                  A  1487    	PUSH	BC
0B0559 CD 2B 03 0B         A  1488    	CALL	_getResponse
0B055D C1                  A  1489    	POP	BC
0B055E C1                  A  1490    	POP	BC
0B055F C1                  A  1491    	POP	BC
0B0560 B7                  A  1492    	OR	A,A
0B0561 20 0E               A  1493    	JR	NZ,L_49
                           A  1494    ;  169			mos_fclose(file);
                           A  1495    .LINE 169
                           A  1496    
0B0563 DD4EFF              A  1497    	LD	C,(IX+%FFFFFFFF)
0B0566 0600                A  1498    	LD	B,%0
0B0568 C5                  A  1499    	PUSH	BC
0B0569 CD D2 0B 0B         A  1500    	CALL	_mos_fclose
0B056D C1                  A  1501    	POP	BC
                           A  1502    ;  170			return 0;
                           A  1503    .LINE 170
                           A  1504    
0B056E AF                  A  1505    	XOR	A,A
0B056F 18 53               A  1506    	JR	L_50
                           A  1507    ;  171		}
0B0571                     A  1508    L_49:
                           A  1509    .LINE 171
                           A  1510    
                           A  1511    ;  172		// Do actual work here
                           A  1512    ;  173		mos_flseek(file, 0); // reset to ze
                           A  1513    .LINE 173
                           A  1514    
0B0571 01000000            A  1515    	LD	BC,0
0B0575 C5                  A  1516    	PUSH	BC
0B0576 C5                  A  1517    	PUSH	BC
0B0577 DD4EFF              A  1518    	LD	C,(IX+%FFFFFFFF)
0B057A 0600                A  1519    	LD	B,%0
0B057C C5                  A  1520    	PUSH	BC
0B057D CD 76 0C 0B         A  1521    	CALL	_mos_flseek
0B0581 C1                  A  1522    	POP	BC
0B0582 C1                  A  1523    	POP	BC
0B0583 C1                  A  1524    	POP	BC
                           A  1525    ;  174		printf("Updating VDP firmware\r\n")
                           A  1526    .LINE 174
                           A  1527    
0B0584 01 FB 11 0B         A  1528    	LD	BC,___print_uputch
0B0588 ED43 04 20 0B       A  1529    	LD	(___print_xputch),BC
0B058D 01 CB 21 0B         A  1530    	LD	BC,L__41
0B0591 C5                  A  1531    	PUSH	BC
0B0592 CD 8A 10 0B         A  1532    	CALL	___print_sendstring
0B0596 C1                  A  1533    	POP	BC
                           A  1534    ;  175		filesize = getFileSize(file);	
                           A  1535    .LINE 175
                           A  1536    
0B0597 DD4EFF              A  1537    	LD	C,(IX+%FFFFFFFF)
0B059A 0600                A  1538    	LD	B,%0
0B059C C5                  A  1539    	PUSH	BC
0B059D CD FA 0F 0B         A  1540    	CALL	_getFileSize
0B05A1 C1                  A  1541    	POP	BC
0B05A2 DD2FF9              A  1542    	LD	(IX+%FFFFFFF9),HL
                           A  1543    ;  176		startVDPupdate(file, filesize);
                           A  1544    .LINE 176
                           A  1545    
0B05A5 E5C1                A  1546    	LD	BC,HL
0B05A7 C5                  A  1547    	PUSH	BC
0B05A8 DD4EFF              A  1548    	LD	C,(IX+%FFFFFFFF)
0B05AB 0600                A  1549    	LD	B,%0
0B05AD C5                  A  1550    	PUSH	BC
0B05AE CD E1 0C 0B         A  1551    	CALL	_startVDPupdate
0B05B2 C1                  A  1552    	POP	BC
0B05B3 C1                  A  1553    	POP	BC
                           A  1554    ;  177		mos_fclose(file);
                           A  1555    .LINE 177
                           A  1556    
0B05B4 DD4EFF              A  1557    	LD	C,(IX+%FFFFFFFF)
0B05B7 0600                A  1558    	LD	B,%0
0B05B9 C5                  A  1559    	PUSH	BC
0B05BA CD D2 0B 0B         A  1560    	CALL	_mos_fclose
0B05BE C1                  A  1561    	POP	BC
                           A  1562    ;  178		reset();
                           A  1563    .LINE 178
                           A  1564    
0B05BF CD C0 0C 0B         A  1565    	CALL	_reset
                           A  1566    ;  179		return 0; // will never return, but
                           A  1567    .LINE 179
                           A  1568    
0B05C3 AF                  A  1569    	XOR	A,A
                           A  1570    ;  180	}
0B05C4                     A  1571    L_50:
                           A  1572    .LINE 180
                           A  1573    
0B05C4 DDF9                A  1574    	LD	SP,IX
0B05C6 DDE1                A  1575    	POP	IX
0B05C8 C9                  A  1576    	RET	
                           A  1577    
                           A  1578    
                           A  1579    ;**************************** _update_vdp *****
                           A  1580    ;Name                         Addr/Register   S
                           A  1581    ;_reset                              IMPORT  --
                           A  1582    ;_startVDPupdate                     IMPORT  --
                           A  1583    ;_getFileSize                        IMPORT  --
                           A  1584    ;_crc32_finalize                     IMPORT  --
                           A  1585    ;_crc32                              IMPORT  --
                           A  1586    ;_mos_flseek                         IMPORT  --
                           A  1587    ;_crc32_initialize                   IMPORT  --
                           A  1588    ;_mos_fclose                         IMPORT  --
                           A  1589    ;_mos_fread                          IMPORT  --
                           A  1590    ;_mos_fopen                          IMPORT  --
                           A  1591    ;___print_sendstring                 IMPORT  --
                           A  1592    ;___print_xputch                     IMPORT    
                           A  1593    ;___print_uputch                     IMPORT  --
                           A  1594    ;_putch                              IMPORT  --
                           A  1595    ;buffer                               IX-47    
                           A  1596    ;crcresult                            IX-11    
                           A  1597    ;filesize                              IX-7    
                           A  1598    ;size                                  IX-4    
                           A  1599    ;file                                  IX-1    
                           A  1600    ;filename                              IX+6    
                           A  1601    
                           A  1602    
                           A  1603    ; Stack Frame Size: 56 (bytes)
                           A  1604    ;       Spill Code: 0 (instruction)
                           A  1605    
                           A  1606    
                           A  1607    .ENDFUNC "update_vdp",180,"_update_vdp"
                           A  1608    	SEGMENT STRSECT
0B2130                     A  1609    L__30:
0B2130 556E6C6F 636B696E   A  1610    	DB	"Unlocking VDP updater..."
0B2138 67205644 50207570 
0B2140 64617465 722E2E2E 
0B2148 0D0A00              A  1611    	DB	13,10,0
0B214B                     A  1612    L__32:
0B214B 20666169 6C656420   A  1613    	DB	" failed - incompatible VDP"
0B2153 2D20696E 636F6D70 
0B215B 61746962 6C652056 
0B2163 4450 
0B2165 0D0A00              A  1614    	DB	13,10,0
0B2168                     A  1615    L__34:
0B2168 4572726F 72206F70   A  1616    	DB	"Error opening \""
0B2170 656E696E 672022 
0B2177 00                  A  1617    	DB	0
0B2178                     A  1618    L__35:
0B2178 22                  A  1619    	DB	"\""
0B2179 0A0D00              A  1620    	DB	10,13,0
0B217C                     A  1621    L__37:
0B217C 46696C65 20646F65   A  1622    	DB	"File does not contain valid ESP32 code
0B2184 73206E6F 7420636F 
0B218C 6E746169 6E207661 
0B2194 6C696420 45535033 
0B219C 3220636F 6465 
0B21A2 0D0A00              A  1623    	DB	13,10,0
0B21A5                     A  1624    L__38:
0B21A5 0D0A                A  1625    	DB	13,10
0B21A7 56616C69 64204553   A  1626    	DB	"Valid ESP32 code"
0B21AF 50333220 636F6465 
0B21B7 0D0A                A  1627    	DB	13,10
0B21B9 43616C63 756C6174   A  1628    	DB	"Calculating CRC32"
0B21C1 696E6720 43524333 
0B21C9 32 
0B21CA 00                  A  1629    	DB	0
0B21CB                     A  1630    L__41:
0B21CB 55706461 74696E67   A  1631    	DB	"Updating VDP firmware"
0B21D3 20564450 20666972 
0B21DB 6D776172 65 
0B21E0 0D0A00              A  1632    	DB	13,10,0
                           A  1633    	SEGMENT CODE
                           A  1634    ;  181	
                           A  1635    ;  182	uint8_t update_mos(char *filename) {
0B05C9                     A  1636    _update_mos:
                           A  1637    .DEFINE "_update_mos"
                           A  1638    
                           A  1639    .VALUE _update_mos
                           A  1640    
                           A  1641    .CLASS 2
                           A  1642    
                           A  1643    .TYPE 76
                           A  1644    
                           A  1645    .ENDEF
                           A  1646    
                           A  1647    .BEGFUNC "update_mos",182,"_update_mos"
                           A  1648    
                           A  1649    .LINE 182
                           A  1650    
                           A  1651    .DEFINE "filename"
                           A  1652    
                           A  1653    .CLASS 65
                           A  1654    
                           A  1655    .VALUE 6
                           A  1656    
                           A  1657    .TYPE 34
                           A  1658    
                           A  1659    .ENDEF
                           A  1660    
                           A  1661    .DEFINE "counter"
                           A  1662    
                           A  1663    .CLASS 65
                           A  1664    
                           A  1665    .VALUE -3
                           A  1666    
                           A  1667    .TYPE 14
                           A  1668    
                           A  1669    .ENDEF
                           A  1670    
                           A  1671    .DEFINE "file"
                           A  1672    
                           A  1673    .CLASS 65
                           A  1674    
                           A  1675    .VALUE -4
                           A  1676    
                           A  1677    .TYPE 12
                           A  1678    
                           A  1679    .ENDEF
                           A  1680    
                           A  1681    .DEFINE "response"
                           A  1682    
                           A  1683    .CLASS 65
                           A  1684    
                           A  1685    .VALUE -5
                           A  1686    
                           A  1687    .TYPE 12
                           A  1688    
                           A  1689    .ENDEF
                           A  1690    
                           A  1691    .DEFINE "addressfrom"
                           A  1692    
                           A  1693    .CLASS 65
                           A  1694    
                           A  1695    .VALUE -8
                           A  1696    
                           A  1697    .TYPE 14
                           A  1698    
                           A  1699    .ENDEF
                           A  1700    
                           A  1701    .DEFINE "state"
                           A  1702    
                           A  1703    .CLASS 65
                           A  1704    
                           A  1705    .VALUE -11
                           A  1706    
                           A  1707    .TYPE 4
                           A  1708    
                           A  1709    .ENDEF
                           A  1710    
                           A  1711    .DEFINE "pagemax"
                           A  1712    
                           A  1713    .CLASS 65
                           A  1714    
                           A  1715    .VALUE -14
                           A  1716    
                           A  1717    .TYPE 14
                           A  1718    
                           A  1719    .ENDEF
                           A  1720    
                           A  1721    .DEFINE "addressto"
                           A  1722    
                           A  1723    .CLASS 65
                           A  1724    
                           A  1725    .VALUE -17
                           A  1726    
                           A  1727    .TYPE 14
                           A  1728    
                           A  1729    .ENDEF
                           A  1730    
                           A  1731    .DEFINE "ptr"
                           A  1732    
                           A  1733    .CLASS 65
                           A  1734    
                           A  1735    .VALUE -20
                           A  1736    
                           A  1737    .TYPE 34
                           A  1738    
                           A  1739    .ENDEF
                           A  1740    
                           A  1741    .DEFINE "size"
                           A  1742    
                           A  1743    .CLASS 65
                           A  1744    
                           A  1745    .VALUE -23
                           A  1746    
                           A  1747    .TYPE 14
                           A  1748    
                           A  1749    .ENDEF
                           A  1750    
                           A  1751    .DEFINE "value"
                           A  1752    
                           A  1753    .CLASS 65
                           A  1754    
                           A  1755    .VALUE -24
                           A  1756    
                           A  1757    .TYPE 12
                           A  1758    
                           A  1759    .ENDEF
                           A  1760    
                           A  1761    .DEFINE "got"
                           A  1762    
                           A  1763    .CLASS 65
                           A  1764    
                           A  1765    .VALUE -27
                           A  1766    
                           A  1767    .TYPE 14
                           A  1768    
                           A  1769    .ENDEF
                           A  1770    
                           A  1771    .DEFINE "lastpagebytes"
                           A  1772    
                           A  1773    .CLASS 65
                           A  1774    
                           A  1775    .VALUE -30
                           A  1776    
                           A  1777    .TYPE 14
                           A  1778    
                           A  1779    .ENDEF
                           A  1780    
                           A  1781    .DEFINE "crcresult"
                           A  1782    
                           A  1783    .CLASS 65
                           A  1784    
                           A  1785    .VALUE -34
                           A  1786    
                           A  1787    .TYPE 15
                           A  1788    
                           A  1789    .ENDEF
                           A  1790    
                           A  1791    .DEFINE "filesize"
                           A  1792    
                           A  1793    .CLASS 65
                           A  1794    
                           A  1795    .VALUE -40
                           A  1796    
                           A  1797    .TYPE 14
                           A  1798    
                           A  1799    .ENDEF
                           A  1800    
                           A  1801    .DEFINE "crcexpected"
                           A  1802    
                           A  1803    .CLASS 65
                           A  1804    
                           A  1805    .VALUE -44
                           A  1806    
                           A  1807    .TYPE 15
                           A  1808    
                           A  1809    .ENDEF
                           A  1810    
                           A  1811    .DEFINE "crcbackup"
                           A  1812    
                           A  1813    .CLASS 65
                           A  1814    
                           A  1815    .VALUE -48
                           A  1816    
                           A  1817    .TYPE 15
                           A  1818    
                           A  1819    .ENDEF
                           A  1820    
0B05C9 DDE5                A  1821    	PUSH	IX
0B05CB DD210000 00         A  1822    	LD	IX,0
0B05D0 DD39                A  1823    	ADD	IX,SP
0B05D2 ED22D0              A  1824    	LEA	HL,IX+%FFFFFFD0
0B05D5 F9                  A  1825    	LD	SP,HL
                           A  1826    ;  183		UINT32 crcexpected,crcresult,crcbac
                           A  1827    ;  184		UINT24 size = 0;
                           A  1828    .LINE 184
                           A  1829    
0B05D6 01000000            A  1830    	LD	BC,0
0B05DA DD0FE9              A  1831    	LD	(IX+%FFFFFFE9),BC
                           A  1832    ;  185		UINT24 got;
                           A  1833    ;  186		UINT8 file;
                           A  1834    ;  187		char* ptr = (char*)BUFFER1;
                           A  1835    .LINE 187
                           A  1836    
0B05DD 01000005            A  1837    	LD	BC,327680
0B05E1 DD0FEC              A  1838    	LD	(IX+%FFFFFFEC),BC
                           A  1839    ;  188		UINT8 response;
                           A  1840    ;  189		UINT8 value;
                           A  1841    ;  190		UINT24 counter,pagemax, lastpagebyt
                           A  1842    ;  191		UINT24 addressto,addressfrom;
                           A  1843    ;  192		enum states state;
                           A  1844    ;  193		uint24_t filesize;
                           A  1845    ;  194	
                           A  1846    ;  195		putch(12); // cls
                           A  1847    .LINE 195
                           A  1848    
0B05E4 010C0000            A  1849    	LD	BC,12
0B05E8 C5                  A  1850    	PUSH	BC
0B05E9 CD E5 00 0B         A  1851    	CALL	_putch
0B05ED C1                  A  1852    	POP	BC
                           A  1853    ;  196		print_version();	
                           A  1854    .LINE 196
                           A  1855    
0B05EE CD E5 02 0B         A  1856    	CALL	_print_version
                           A  1857    ;  197		
                           A  1858    ;  198		file = mos_fopen(filename, fa_read)
                           A  1859    .LINE 198
                           A  1860    
0B05F2 01010000            A  1861    	LD	BC,1
0B05F6 C5                  A  1862    	PUSH	BC
0B05F7 DD0706              A  1863    	LD	BC,(IX+%6)
0B05FA C5                  A  1864    	PUSH	BC
0B05FB CD BA 0B 0B         A  1865    	CALL	_mos_fopen
0B05FF C1                  A  1866    	POP	BC
0B0600 C1                  A  1867    	POP	BC
0B0601 DD77FC              A  1868    	LD	(IX+%FFFFFFFC),A
                           A  1869    ;  199		if(!file)
                           A  1870    .LINE 199
                           A  1871    
0B0604 B7                  A  1872    	OR	A,A
0B0605 20 2C               A  1873    	JR	NZ,L_52
                           A  1874    ;  200		{
                           A  1875    ;  201			printf("Error opening \"%s\"\n\
                           A  1876    .LINE 201
                           A  1877    
0B0607 01 FB 11 0B         A  1878    	LD	BC,___print_uputch
0B060B ED43 04 20 0B       A  1879    	LD	(___print_xputch),BC
0B0610 01 E3 21 0B         A  1880    	LD	BC,L__44
0B0614 C5                  A  1881    	PUSH	BC
0B0615 CD 8A 10 0B         A  1882    	CALL	___print_sendstring
0B0619 C1                  A  1883    	POP	BC
0B061A DD0706              A  1884    	LD	BC,(IX+%6)
0B061D C5                  A  1885    	PUSH	BC
0B061E CD 8A 10 0B         A  1886    	CALL	___print_sendstring
0B0622 C1                  A  1887    	POP	BC
0B0623 01 F3 21 0B         A  1888    	LD	BC,L__45
0B0627 C5                  A  1889    	PUSH	BC
0B0628 CD 8A 10 0B         A  1890    	CALL	___print_sendstring
0B062C C1                  A  1891    	POP	BC
                           A  1892    ;  202			return EXIT_FILENOTFOUND;
                           A  1893    .LINE 202
                           A  1894    
0B062D 3E04                A  1895    	LD	A,%4
0B062F C3 DD 0A 0B         A  1896    	JR	L_112
                           A  1897    ;  203		}
0B0633                     A  1898    L_52:
                           A  1899    .LINE 203
                           A  1900    
                           A  1901    ;  204	
                           A  1902    ;  205		filesize = getFileSize(file);
                           A  1903    .LINE 205
                           A  1904    
0B0633 DD4EFC              A  1905    	LD	C,(IX+%FFFFFFFC)
0B0636 0600                A  1906    	LD	B,%0
0B0638 C5                  A  1907    	PUSH	BC
0B0639 CD FA 0F 0B         A  1908    	CALL	_getFileSize
0B063D C1                  A  1909    	POP	BC
0B063E DD2FD8              A  1910    	LD	(IX+%FFFFFFD8),HL
                           A  1911    ;  206		if(filesize > FLASHSIZE) {
                           A  1912    .LINE 206
                           A  1913    
0B0641 E5C1                A  1914    	LD	BC,HL
0B0643 21000002            A  1915    	LD	HL,131072
0B0647 B7                  A  1916    	OR	A,A
0B0648 ED42                A  1917    	SBC	HL,BC
0B064A 30 24               A  1918    	JR	NC,L_54
                           A  1919    ;  207			printf("Too large for 128KB emb
                           A  1920    .LINE 207
                           A  1921    
0B064C 01 FB 11 0B         A  1922    	LD	BC,___print_uputch
0B0650 ED43 04 20 0B       A  1923    	LD	(___print_xputch),BC
0B0655 01 F7 21 0B         A  1924    	LD	BC,L__47
0B0659 C5                  A  1925    	PUSH	BC
0B065A CD 8A 10 0B         A  1926    	CALL	___print_sendstring
0B065E C1                  A  1927    	POP	BC
                           A  1928    ;  208			mos_fclose(file);
                           A  1929    .LINE 208
                           A  1930    
0B065F DD4EFC              A  1931    	LD	C,(IX+%FFFFFFFC)
0B0662 0600                A  1932    	LD	B,%0
0B0664 C5                  A  1933    	PUSH	BC
0B0665 CD D2 0B 0B         A  1934    	CALL	_mos_fclose
0B0669 C1                  A  1935    	POP	BC
                           A  1936    ;  209			return EXIT_INVALIDPARAMETER;
                           A  1937    .LINE 209
                           A  1938    
0B066A 3E13                A  1939    	LD	A,%13
0B066C C3 DD 0A 0B         A  1940    	JR	L_112
                           A  1941    ;  210		}
0B0670                     A  1942    L_54:
                           A  1943    .LINE 210
                           A  1944    
                           A  1945    ;  211	
                           A  1946    ;  212		mos_fread(file, (char *)BUFFER1, MO
                           A  1947    .LINE 212
                           A  1948    
0B0670 01050000            A  1949    	LD	BC,5
0B0674 C5                  A  1950    	PUSH	BC
0B0675 01000005            A  1951    	LD	BC,327680
0B0679 C5                  A  1952    	PUSH	BC
0B067A DD4EFC              A  1953    	LD	C,(IX+%FFFFFFFC)
0B067D 0600                A  1954    	LD	B,%0
0B067F C5                  A  1955    	PUSH	BC
0B0680 CD FC 0B 0B         A  1956    	CALL	_mos_fread
0B0684 C1                  A  1957    	POP	BC
0B0685 C1                  A  1958    	POP	BC
0B0686 C1                  A  1959    	POP	BC
                           A  1960    ;  213		if(!containsMosHeader((uint8_t *)BU
                           A  1961    .LINE 213
                           A  1962    
0B0687 01000005            A  1963    	LD	BC,327680
0B068B C5                  A  1964    	PUSH	BC
0B068C CD 46 02 0B         A  1965    	CALL	_containsMosHeader
0B0690 C1                  A  1966    	POP	BC
0B0691 B7                  A  1967    	OR	A,A
0B0692 20 24               A  1968    	JR	NZ,L_56
                           A  1969    ;  214			printf("File does not contain v
                           A  1970    .LINE 214
                           A  1971    
0B0694 01 FB 11 0B         A  1972    	LD	BC,___print_uputch
0B0698 ED43 04 20 0B       A  1973    	LD	(___print_xputch),BC
0B069D 01 1C 22 0B         A  1974    	LD	BC,L__49
0B06A1 C5                  A  1975    	PUSH	BC
0B06A2 CD 8A 10 0B         A  1976    	CALL	___print_sendstring
0B06A6 C1                  A  1977    	POP	BC
                           A  1978    ;  215			mos_fclose(file);
                           A  1979    .LINE 215
                           A  1980    
0B06A7 DD4EFC              A  1981    	LD	C,(IX+%FFFFFFFC)
0B06AA 0600                A  1982    	LD	B,%0
0B06AC C5                  A  1983    	PUSH	BC
0B06AD CD D2 0B 0B         A  1984    	CALL	_mos_fclose
0B06B1 C1                  A  1985    	POP	BC
                           A  1986    ;  216			return EXIT_INVALIDPARAMETER;
                           A  1987    .LINE 216
                           A  1988    
0B06B2 3E13                A  1989    	LD	A,%13
0B06B4 C3 DD 0A 0B         A  1990    	JR	L_112
                           A  1991    ;  217		}
0B06B8                     A  1992    L_56:
                           A  1993    .LINE 217
                           A  1994    
                           A  1995    ;  218		printf("\r\nValid ez80 code\r\nCalc
                           A  1996    .LINE 218
                           A  1997    
0B06B8 01 FB 11 0B         A  1998    	LD	BC,___print_uputch
0B06BC ED43 04 20 0B       A  1999    	LD	(___print_xputch),BC
0B06C1 01 50 22 0B         A  2000    	LD	BC,L__50
0B06C5 C5                  A  2001    	PUSH	BC
0B06C6 CD 8A 10 0B         A  2002    	CALL	___print_sendstring
0B06CA C1                  A  2003    	POP	BC
                           A  2004    ;  219	
                           A  2005    ;  220		crc32_initialize();
                           A  2006    .LINE 220
                           A  2007    
0B06CB CD 48 0F 0B         A  2008    	CALL	_crc32_initialize
                           A  2009    ;  221		mos_flseek(file, 0);
                           A  2010    .LINE 221
                           A  2011    
0B06CF 01000000            A  2012    	LD	BC,0
0B06D3 C5                  A  2013    	PUSH	BC
0B06D4 C5                  A  2014    	PUSH	BC
0B06D5 DD4EFC              A  2015    	LD	C,(IX+%FFFFFFFC)
0B06D8 0600                A  2016    	LD	B,%0
0B06DA C5                  A  2017    	PUSH	BC
0B06DB CD 76 0C 0B         A  2018    	CALL	_mos_flseek
0B06DF C1                  A  2019    	POP	BC
0B06E0 C1                  A  2020    	POP	BC
0B06E1 C1                  A  2021    	POP	BC
                           A  2022    ;  222		
                           A  2023    ;  223		// Read file to memory
                           A  2024    ;  224		while((got = mos_fread(file, ptr, B
                           A  2025    .LINE 224
                           A  2026    
0B06E2 18 22               A  2027    	JR	L_57
0B06E4                     A  2028    L_58:
                           A  2029    ;  225			crc32(ptr, got);
                           A  2030    .LINE 225
                           A  2031    
0B06E4 DD07E5              A  2032    	LD	BC,(IX+%FFFFFFE5)
0B06E7 C5                  A  2033    	PUSH	BC
0B06E8 DD07EC              A  2034    	LD	BC,(IX+%FFFFFFEC)
0B06EB C5                  A  2035    	PUSH	BC
0B06EC CD 9A 0F 0B         A  2036    	CALL	_crc32
0B06F0 C1                  A  2037    	POP	BC
0B06F1 C1                  A  2038    	POP	BC
                           A  2039    ;  226			ptr += got;
                           A  2040    .LINE 226
                           A  2041    
0B06F2 DD07E5              A  2042    	LD	BC,(IX+%FFFFFFE5)
0B06F5 DD27EC              A  2043    	LD	HL,(IX+%FFFFFFEC)
0B06F8 09                  A  2044    	ADD	HL,BC
0B06F9 DD2FEC              A  2045    	LD	(IX+%FFFFFFEC),HL
                           A  2046    ;  227			putch('.');
                           A  2047    .LINE 227
                           A  2048    
0B06FC 012E0000            A  2049    	LD	BC,46
0B0700 C5                  A  2050    	PUSH	BC
0B0701 CD E5 00 0B         A  2051    	CALL	_putch
0B0705 C1                  A  2052    	POP	BC
                           A  2053    ;  228		}		
0B0706                     A  2054    L_57:
                           A  2055    .LINE 228
                           A  2056    
0B0706 01004000            A  2057    	LD	BC,16384
0B070A C5                  A  2058    	PUSH	BC
0B070B DD07EC              A  2059    	LD	BC,(IX+%FFFFFFEC)
0B070E C5                  A  2060    	PUSH	BC
0B070F DD4EFC              A  2061    	LD	C,(IX+%FFFFFFFC)
0B0712 0600                A  2062    	LD	B,%0
0B0714 C5                  A  2063    	PUSH	BC
0B0715 CD FC 0B 0B         A  2064    	CALL	_mos_fread
0B0719 C1                  A  2065    	POP	BC
0B071A C1                  A  2066    	POP	BC
0B071B C1                  A  2067    	POP	BC
0B071C DD2FE5              A  2068    	LD	(IX+%FFFFFFE5),HL
0B071F E5C1                A  2069    	LD	BC,HL
0B0721 B7                  A  2070    	OR	A,A
0B0722 ED62                A  2071    	SBC	HL,HL
0B0724 B7                  A  2072    	OR	A,A
0B0725 ED42                A  2073    	SBC	HL,BC
0B0727 38 BB               A  2074    	JR	C,L_58
                           A  2075    ;  229		crcresult = crc32_finalize();
                           A  2076    .LINE 229
                           A  2077    
0B0729 CD 5D 0F 0B         A  2078    	CALL	_crc32_finalize
0B072D DD2FDE              A  2079    	LD	(IX+%FFFFFFDE),HL
0B0730 DD73E1              A  2080    	LD	(IX+%FFFFFFE1),E
                           A  2081    ;  230		if(!getResponse(MOS, crcresult)) {
                           A  2082    .LINE 230
                           A  2083    
0B0733 DD4EE1              A  2084    	LD	C,(IX+%FFFFFFE1)
0B0736 0600                A  2085    	LD	B,%0
0B0738 C5                  A  2086    	PUSH	BC
0B0739 DD07DE              A  2087    	LD	BC,(IX+%FFFFFFDE)
0B073C C5                  A  2088    	PUSH	BC
0B073D 01000000            A  2089    	LD	BC,0
0B0741 C5                  A  2090    	PUSH	BC
0B0742 CD 2B 03 0B         A  2091    	CALL	_getResponse
0B0746 C1                  A  2092    	POP	BC
0B0747 C1                  A  2093    	POP	BC
0B0748 C1                  A  2094    	POP	BC
0B0749 B7                  A  2095    	OR	A,A
0B074A 20 10               A  2096    	JR	NZ,L_61
                           A  2097    ;  231			mos_fclose(file);
                           A  2098    .LINE 231
                           A  2099    
0B074C DD4EFC              A  2100    	LD	C,(IX+%FFFFFFFC)
0B074F 0600                A  2101    	LD	B,%0
0B0751 C5                  A  2102    	PUSH	BC
0B0752 CD D2 0B 0B         A  2103    	CALL	_mos_fclose
0B0756 C1                  A  2104    	POP	BC
                           A  2105    ;  232			return 0;
                           A  2106    .LINE 232
                           A  2107    
0B0757 AF                  A  2108    	XOR	A,A
0B0758 C3 DD 0A 0B         A  2109    	JR	L_112
                           A  2110    ;  233		}
0B075C                     A  2111    L_61:
                           A  2112    .LINE 233
                           A  2113    
                           A  2114    ;  234	
                           A  2115    ;  235		mos_fclose(file);
                           A  2116    .LINE 235
                           A  2117    
0B075C DD4EFC              A  2118    	LD	C,(IX+%FFFFFFFC)
0B075F 0600                A  2119    	LD	B,%0
0B0761 C5                  A  2120    	PUSH	BC
0B0762 CD D2 0B 0B         A  2121    	CALL	_mos_fclose
0B0766 C1                  A  2122    	POP	BC
                           A  2123    ;  236		return 0;	
                           A  2124    .LINE 236
                           A  2125    
0B0767 AF                  A  2126    	XOR	A,A
0B0768 C3 DD 0A 0B         A  2127    	JR	L_112
                           A  2128    ;  237		
                           A  2129    ;  238		printf("\rFile size    : %d byte(s)
                           A  2130    ;  239	
                           A  2131    ;  240		if(!containsMosHeader((uint8_t *)pt
                           A  2132    ;  241			printf("File does not contain v
                           A  2133    ;  242			return EXIT_INVALIDPARAMETER;
                           A  2134    ;  243		}
                           A  2135    ;  244	
                           A  2136    ;  245		crcexpected = 0;
                           A  2137    ;  246		printf("Testing CRC32: 0x%08lx\n\r"
                           A  2138    ;  247		crcresult = crc32((char*)BUFFER1, s
                           A  2139    ;  248		printf("CRC32 result : 0x%08lx\n\r"
                           A  2140    ;  249	
                           A  2141    ;  250		if(crcexpected != crcresult)
                           A  2142    ;  251		{
                           A  2143    ;  252			printf("\n\rMismatch - aborting
                           A  2144    ;  253			return 0;
                           A  2145    ;  254		}
                           A  2146    .LINE 254
                           A  2147    
                           A  2148    ;  255		printf("\n\rOK\n\r\n\r");
                           A  2149    .LINE 255
                           A  2150    
                           A  2151    ;  256	
                           A  2152    ;  257		// Ask user to continue
                           A  2153    ;  258		printf("Erase and program flash (y/
                           A  2154    .LINE 258
                           A  2155    
                           A  2156    ;  259		response = 0;
                           A  2157    .LINE 259
                           A  2158    
                           A  2159    ;  260		while((response != 'y') && (respons
                           A  2160    .LINE 260
                           A  2161    
0B076C                     A  2162    L_68:
0B076C CD 70 0B 0B         A  2163    	CALL	_getch
0B0770 DD77FB              A  2164    	LD	(IX+%FFFFFFFB),A
0B0773                     A  2165    L_67:
0B0773 DD7EFB              A  2166    	LD	A,(IX+%FFFFFFFB)
0B0776 FE79                A  2167    	CP	A,%79
0B0778 28 07               A  2168    	JR	Z,L_110
0B077A DD7EFB              A  2169    	LD	A,(IX+%FFFFFFFB)
0B077D FE6E                A  2170    	CP	A,%6E
0B077F 20 EB               A  2171    	JR	NZ,L_68
0B0781                     A  2172    L_110:
                           A  2173    ;  261		if(response == 'y')
                           A  2174    .LINE 261
                           A  2175    
0B0781 DD7EFB              A  2176    	LD	A,(IX+%FFFFFFFB)
0B0784 FE79                A  2177    	CP	A,%79
0B0786 C2 C9 0A 0B         A  2178    	JR	NZ,L_109
                           A  2179    ;  262		{
                           A  2180    ;  263			printf("\r\nBacking up existing
                           A  2181    .LINE 263
                           A  2182    
0B078A 01 FB 11 0B         A  2183    	LD	BC,___print_uputch
0B078E ED43 04 20 0B       A  2184    	LD	(___print_xputch),BC
0B0793 01 9E 22 0B         A  2185    	LD	BC,L__58
0B0797 C5                  A  2186    	PUSH	BC
0B0798 CD 8A 10 0B         A  2187    	CALL	___print_sendstring
0B079C C1                  A  2188    	POP	BC
                           A  2189    ;  264			fastmemcpy(BUFFER2, 0x0, FLASHS
                           A  2190    .LINE 264
                           A  2191    
0B079D 01000002            A  2192    	LD	BC,131072
0B07A1 C5                  A  2193    	PUSH	BC
0B07A2 01000000            A  2194    	LD	BC,0
0B07A6 C5                  A  2195    	PUSH	BC
0B07A7 01000007            A  2196    	LD	BC,458752
0B07AB C5                  A  2197    	PUSH	BC
0B07AC CD C2 0C 0B         A  2198    	CALL	_fastmemcpy
0B07B0 C1                  A  2199    	POP	BC
0B07B1 C1                  A  2200    	POP	BC
0B07B2 C1                  A  2201    	POP	BC
                           A  2202    ;  265			crcbackup = crc32((char*)0x0, F
                           A  2203    .LINE 265
                           A  2204    
0B07B3 01000002            A  2205    	LD	BC,131072
0B07B7 C5                  A  2206    	PUSH	BC
0B07B8 01000000            A  2207    	LD	BC,0
0B07BC C5                  A  2208    	PUSH	BC
0B07BD CD 9A 0F 0B         A  2209    	CALL	_crc32
0B07C1 C1                  A  2210    	POP	BC
0B07C2 C1                  A  2211    	POP	BC
0B07C3 DD2FD0              A  2212    	LD	(IX+%FFFFFFD0),HL
0B07C6 DD73D3              A  2213    	LD	(IX+%FFFFFFD3),E
                           A  2214    ;  266			
                           A  2215    ;  267			di();							
                           A  2216    .LINE 267
                           A  2217    
0B07C9 F3                  A  2218    	di
                           A  2219    ;  268	
                           A  2220    ;  269			// start address in flash
                           A  2221    ;  270			addressto = FLASHSTART;
                           A  2222    .LINE 270
                           A  2223    
0B07CA 01000000            A  2224    	LD	BC,0
0B07CE DD0FEF              A  2225    	LD	(IX+%FFFFFFEF),BC
                           A  2226    ;  271			addressfrom = BUFFER1;
                           A  2227    .LINE 271
                           A  2228    
0B07D1 01000005            A  2229    	LD	BC,327680
0B07D5 DD0FF8              A  2230    	LD	(IX+%FFFFFFF8),BC
                           A  2231    ;  272			
                           A  2232    ;  273			state = firmware;		
                           A  2233    .LINE 273
                           A  2234    
0B07D8 01000000            A  2235    	LD	BC,0
0B07DC DD0FF5              A  2236    	LD	(IX+%FFFFFFF5),BC
                           A  2237    ;  274			while(1)
0B07DF                     A  2238    L_107:
                           A  2239    .LINE 274
                           A  2240    
                           A  2241    ;  275			{
                           A  2242    ;  276				switch(state)
                           A  2243    .LINE 276
                           A  2244    
0B07DF DD27F5              A  2245    	LD	HL,(IX+%FFFFFFF5)
0B07E2 CD 9A 18 0B         A  2246    	CALL	__case8D
0B07E6 E9                  A  2247    	JP	(HL)
0B07E7                     A  2248    L__59:
0B07E7 0200                A  2249    	DW	2
0B07E9 00                  A  2250    	DB	0
0B07EA F4070B              A  2251    	DW24	L_69	
                           A  2252    
0B07ED 01                  A  2253    	DB	1
0B07EE FF070B              A  2254    	DW24	L_70	
                           A  2255    
0B07F1 11080B              A  2256    	DW24	L_71	
                           A  2257    
                           A  2258    ;  277				{
                           A  2259    ;  278					case firmware:
0B07F4                     A  2260    L_69:
                           A  2261    .LINE 278
                           A  2262    
                           A  2263    ;  279						// start address in
                           A  2264    ;  280						addressfrom = BUFFE
                           A  2265    .LINE 280
                           A  2266    
0B07F4 01000005            A  2267    	LD	BC,327680
0B07F8 DD0FF8              A  2268    	LD	(IX+%FFFFFFF8),BC
                           A  2269    ;  281						break;
                           A  2270    .LINE 281
                           A  2271    
0B07FB C3 91 08 0B         A  2272    	JR	L_77
                           A  2273    ;  282					case recover:
0B07FF                     A  2274    L_70:
                           A  2275    .LINE 282
                           A  2276    
                           A  2277    ;  283						// start address in
                           A  2278    ;  284						addressfrom = BUFFE
                           A  2279    .LINE 284
                           A  2280    
0B07FF 01000007            A  2281    	LD	BC,458752
0B0803 DD0FF8              A  2282    	LD	(IX+%FFFFFFF8),BC
                           A  2283    ;  285						size = FLASHSIZE;	
                           A  2284    .LINE 285
                           A  2285    
0B0806 01000002            A  2286    	LD	BC,131072
0B080A DD0FE9              A  2287    	LD	(IX+%FFFFFFE9),BC
                           A  2288    ;  286						break;
                           A  2289    .LINE 286
                           A  2290    
0B080D C3 91 08 0B         A  2291    	JR	L_77
                           A  2292    ;  287					default:
0B0811                     A  2293    L_71:
                           A  2294    .LINE 287
                           A  2295    
                           A  2296    ;  288						// RESET SYSTEM
                           A  2297    ;  289						printf("\r\n");
                           A  2298    .LINE 289
                           A  2299    
0B0811 01 FB 11 0B         A  2300    	LD	BC,___print_uputch
0B0815 ED43 04 20 0B       A  2301    	LD	(___print_xputch),BC
0B081A 01 C1 22 0B         A  2302    	LD	BC,L__60
0B081E C5                  A  2303    	PUSH	BC
0B081F CD 8A 10 0B         A  2304    	CALL	___print_sendstring
0B0823 C1                  A  2305    	POP	BC
                           A  2306    ;  290						for(counter = 5; co
                           A  2307    .LINE 290
                           A  2308    
0B0824 01050000            A  2309    	LD	BC,5
0B0828 DD0FFD              A  2310    	LD	(IX+%FFFFFFFD),BC
0B082B 18 41               A  2311    	JR	L_75
0B082D                     A  2312    L_73:
                           A  2313    ;  291						{
                           A  2314    ;  292							printf("\rReset
                           A  2315    .LINE 292
                           A  2316    
0B082D 01 FB 11 0B         A  2317    	LD	BC,___print_uputch
0B0831 ED43 04 20 0B       A  2318    	LD	(___print_xputch),BC
0B0836 01 C4 22 0B         A  2319    	LD	BC,L__61
0B083A C5                  A  2320    	PUSH	BC
0B083B CD 8A 10 0B         A  2321    	CALL	___print_sendstring
0B083F C1                  A  2322    	POP	BC
0B0840 DD07FD              A  2323    	LD	BC,(IX+%FFFFFFFD)
0B0843 AF                  A  2324    	XOR	A,A
0B0844 C5D1                A  2325    	LD	DE,BC
0B0846 4F                  A  2326    	LD	C,A
0B0847 0600                A  2327    	LD	B,%0
0B0849 C5                  A  2328    	PUSH	BC
0B084A D5                  A  2329    	PUSH	DE
0B084B CD 81 12 0B         A  2330    	CALL	__u_itoa
0B084F C1                  A  2331    	POP	BC
0B0850 C1                  A  2332    	POP	BC
0B0851 01730000            A  2333    	LD	BC,115
0B0855 C5                  A  2334    	PUSH	BC
0B0856 CD FB 11 0B         A  2335    	CALL	___print_uputch
0B085A C1                  A  2336    	POP	BC
                           A  2337    ;  293							delayms(1000);
                           A  2338    .LINE 293
                           A  2339    
0B085B 01E80300            A  2340    	LD	BC,1000
0B085F C5                  A  2341    	PUSH	BC
0B0860 CD 62 0D 0B         A  2342    	CALL	_delayms
0B0864 C1                  A  2343    	POP	BC
0B0865 DD31FD              A  2344    	LD	IY,(IX+%FFFFFFFD)
0B0868 ED33FF              A  2345    	LEA	IY,IY+%FFFFFFFF
0B086B DD3EFD              A  2346    	LD	(IX+%FFFFFFFD),IY
                           A  2347    ;  294						}
0B086E                     A  2348    L_75:
                           A  2349    .LINE 294
                           A  2350    
0B086E DD07FD              A  2351    	LD	BC,(IX+%FFFFFFFD)
0B0871 B7                  A  2352    	OR	A,A
0B0872 ED62                A  2353    	SBC	HL,HL
0B0874 B7                  A  2354    	OR	A,A
0B0875 ED42                A  2355    	SBC	HL,BC
0B0877 38 B4               A  2356    	JR	C,L_73
                           A  2357    ;  295						putch(12);
                           A  2358    .LINE 295
                           A  2359    
0B0879 010C0000            A  2360    	LD	BC,12
0B087D C5                  A  2361    	PUSH	BC
0B087E CD E5 00 0B         A  2362    	CALL	_putch
0B0882 C1                  A  2363    	POP	BC
                           A  2364    ;  296						delayms(500);
                           A  2365    .LINE 296
                           A  2366    
0B0883 01F40100            A  2367    	LD	BC,500
0B0887 C5                  A  2368    	PUSH	BC
0B0888 CD 62 0D 0B         A  2369    	CALL	_delayms
0B088C C1                  A  2370    	POP	BC
                           A  2371    ;  297						reset();
                           A  2372    .LINE 297
                           A  2373    
0B088D CD C0 0C 0B         A  2374    	CALL	_reset
                           A  2375    ;  298				}
0B0891                     A  2376    L_77:
                           A  2377    .LINE 298
                           A  2378    
                           A  2379    ;  299		
                           A  2380    ;  300				// Unprotect and erase flas
                           A  2381    ;  301				printf("\r\nErasing flash..
                           A  2382    .LINE 301
                           A  2383    
0B0891 01 FB 11 0B         A  2384    	LD	BC,___print_uputch
0B0895 ED43 04 20 0B       A  2385    	LD	(___print_xputch),BC
0B089A 01 CF 22 0B         A  2386    	LD	BC,L__63
0B089E C5                  A  2387    	PUSH	BC
0B089F CD 8A 10 0B         A  2388    	CALL	___print_sendstring
0B08A3 C1                  A  2389    	POP	BC
                           A  2390    ;  302				enableFlashKeyRegister();	
                           A  2391    .LINE 302
                           A  2392    
0B08A4 CD 95 0C 0B         A  2393    	CALL	_enableFlashKeyRegister
                           A  2394    ;  303				FLASH_PROT = 0;				
                           A  2395    .LINE 303
                           A  2396    
0B08A8 AF                  A  2397    	XOR	A,A
0B08A9 ED39FA              A  2398    	OUT0	(250),A
                           A  2399    ;  304				enableFlashKeyRegister();	
                           A  2400    .LINE 304
                           A  2401    
0B08AC CD 95 0C 0B         A  2402    	CALL	_enableFlashKeyRegister
                           A  2403    ;  305				FLASH_FDIV = 0x5F;			
                           A  2404    .LINE 305
                           A  2405    
0B08B0 3E5F                A  2406    	LD	A,%5F
0B08B2 ED39F9              A  2407    	OUT0	(249),A
                           A  2408    ;  306				
                           A  2409    ;  307				for(counter = 0; counter < 
                           A  2410    .LINE 307
                           A  2411    
0B08B5 01000000            A  2412    	LD	BC,0
0B08B9 DD0FFD              A  2413    	LD	(IX+%FFFFFFFD),BC
0B08BC 18 1C               A  2414    	JR	L_83
0B08BE                     A  2415    L_81:
                           A  2416    ;  308				{
                           A  2417    ;  309					FLASH_PAGE = counter;
                           A  2418    .LINE 309
                           A  2419    
0B08BE DD7EFD              A  2420    	LD	A,(IX+%FFFFFFFD)
0B08C1 ED39FC              A  2421    	OUT0	(252),A
                           A  2422    ;  310					FLASH_PGCTL = 0x02;		
                           A  2423    .LINE 310
                           A  2424    
0B08C4 3E02                A  2425    	LD	A,%2
0B08C6 ED39FF              A  2426    	OUT0	(255),A
                           A  2427    ;  311	
                           A  2428    ;  312					do
0B08C9                     A  2429    L_79:
                           A  2430    .LINE 312
                           A  2431    
                           A  2432    ;  313					{
                           A  2433    ;  314						value = FLASH_PGCTL
                           A  2434    .LINE 314
                           A  2435    
0B08C9 ED38FF              A  2436    	IN0	A,(255)
0B08CC DD77E8              A  2437    	LD	(IX+%FFFFFFE8),A
                           A  2438    ;  315					}
                           A  2439    ;  316					while(value & 0x02);// 
                           A  2440    .LINE 316
                           A  2441    
0B08CF E602                A  2442    	AND	A,%2
0B08D1 20 F6               A  2443    	JR	NZ,L_79
0B08D3 DD07FD              A  2444    	LD	BC,(IX+%FFFFFFFD)
0B08D6 03                  A  2445    	INC	BC
0B08D7 DD0FFD              A  2446    	LD	(IX+%FFFFFFFD),BC
                           A  2447    ;  317				}
0B08DA                     A  2448    L_83:
                           A  2449    .LINE 317
                           A  2450    
0B08DA 01800000            A  2451    	LD	BC,128
0B08DE DD27FD              A  2452    	LD	HL,(IX+%FFFFFFFD)
0B08E1 B7                  A  2453    	OR	A,A
0B08E2 ED42                A  2454    	SBC	HL,BC
0B08E4 38 D8               A  2455    	JR	C,L_81
                           A  2456    ;  318				
                           A  2457    ;  319				printf("\r\nWriting new fir
                           A  2458    .LINE 319
                           A  2459    
0B08E6 01 FB 11 0B         A  2460    	LD	BC,___print_uputch
0B08EA ED43 04 20 0B       A  2461    	LD	(___print_xputch),BC
0B08EF 01 E3 22 0B         A  2462    	LD	BC,L__66
0B08F3 C5                  A  2463    	PUSH	BC
0B08F4 CD 8A 10 0B         A  2464    	CALL	___print_sendstring
0B08F8 C1                  A  2465    	POP	BC
                           A  2466    ;  320				
                           A  2467    ;  321				// determine number of page
                           A  2468    ;  322				pagemax = size/PAGESIZE;
                           A  2469    .LINE 322
                           A  2470    
0B08F9 DD27E9              A  2471    	LD	HL,(IX+%FFFFFFE9)
0B08FC 3E0A                A  2472    	LD	A,%A
0B08FE CD 6E 18 0B         A  2473    	CALL	__ishru_b
0B0902 DD2FF2              A  2474    	LD	(IX+%FFFFFFF2),HL
                           A  2475    ;  323				if(size%PAGESIZE) // last p
                           A  2476    .LINE 323
                           A  2477    
0B0905 01FF0300            A  2478    	LD	BC,1023
0B0909 DD27E9              A  2479    	LD	HL,(IX+%FFFFFFE9)
0B090C CD 00 19 0B         A  2480    	CALL	__iand
0B0910 DD2FDB              A  2481    	LD	(IX+%FFFFFFDB),HL
0B0913 CD B8 15 0B         A  2482    	CALL	__icmpzero
0B0917 28 0F               A  2483    	JR	Z,L_86
                           A  2484    ;  324				{
                           A  2485    ;  325					pagemax += 1;
                           A  2486    .LINE 325
                           A  2487    
0B0919 DD07F2              A  2488    	LD	BC,(IX+%FFFFFFF2)
0B091C 03                  A  2489    	INC	BC
0B091D DD0FF2              A  2490    	LD	(IX+%FFFFFFF2),BC
                           A  2491    ;  326					lastpagebytes = size%PA
                           A  2492    .LINE 326
                           A  2493    
0B0920 DD07DB              A  2494    	LD	BC,(IX+%FFFFFFDB)
0B0923 DD0FE2              A  2495    	LD	(IX+%FFFFFFE2),BC
                           A  2496    ;  327				}
                           A  2497    ;  328				else lastpagebytes = PAGESI
                           A  2498    .LINE 328
                           A  2499    
0B0926 18 07               A  2500    	JR	L_94
0B0928                     A  2501    L_86:
0B0928 01000400            A  2502    	LD	BC,1024
0B092C DD0FE2              A  2503    	LD	(IX+%FFFFFFE2),BC
0B092F                     A  2504    L_94:
                           A  2505    ;  329				
                           A  2506    ;  330				// write out each page to f
                           A  2507    ;  331				for(counter = 0; counter < 
                           A  2508    .LINE 331
                           A  2509    
0B092F 01000000            A  2510    	LD	BC,0
0B0933 DD0FFD              A  2511    	LD	(IX+%FFFFFFFD),BC
0B0936 C3 E2 09 0B         A  2512    	JR	L_93
0B093A                     A  2513    L_91:
                           A  2514    ;  332				{
                           A  2515    ;  333					printf("\rWriting flash
                           A  2516    .LINE 333
                           A  2517    
0B093A 01 FB 11 0B         A  2518    	LD	BC,___print_uputch
0B093E ED43 04 20 0B       A  2519    	LD	(___print_xputch),BC
0B0943 01 FF 22 0B         A  2520    	LD	BC,L__68
0B0947 C5                  A  2521    	PUSH	BC
0B0948 CD 8A 10 0B         A  2522    	CALL	___print_sendstring
0B094C C1                  A  2523    	POP	BC
0B094D 3E03                A  2524    	LD	A,%3
0B094F 32 A9 1B 0B         A  2525    	LD	(___print_fmt+5),A
0B0953 3E40                A  2526    	LD	A,%40
0B0955 32 A5 1B 0B         A  2527    	LD	(___print_fmt+1),A
0B0959 DD07FD              A  2528    	LD	BC,(IX+%FFFFFFFD)
0B095C 03                  A  2529    	INC	BC
0B095D AF                  A  2530    	XOR	A,A
0B095E C5D1                A  2531    	LD	DE,BC
0B0960 4F                  A  2532    	LD	C,A
0B0961 0600                A  2533    	LD	B,%0
0B0963 C5                  A  2534    	PUSH	BC
0B0964 D5                  A  2535    	PUSH	DE
0B0965 CD 81 12 0B         A  2536    	CALL	__u_itoa
0B0969 C1                  A  2537    	POP	BC
0B096A C1                  A  2538    	POP	BC
0B096B 012F0000            A  2539    	LD	BC,47
0B096F C5                  A  2540    	PUSH	BC
0B0970 CD FB 11 0B         A  2541    	CALL	___print_uputch
0B0974 C1                  A  2542    	POP	BC
0B0975 3E03                A  2543    	LD	A,%3
0B0977 32 A9 1B 0B         A  2544    	LD	(___print_fmt+5),A
0B097B 3E40                A  2545    	LD	A,%40
0B097D 32 A5 1B 0B         A  2546    	LD	(___print_fmt+1),A
0B0981 DD07F2              A  2547    	LD	BC,(IX+%FFFFFFF2)
0B0984 AF                  A  2548    	XOR	A,A
0B0985 C5D1                A  2549    	LD	DE,BC
0B0987 4F                  A  2550    	LD	C,A
0B0988 0600                A  2551    	LD	B,%0
0B098A C5                  A  2552    	PUSH	BC
0B098B D5                  A  2553    	PUSH	DE
0B098C CD 81 12 0B         A  2554    	CALL	__u_itoa
0B0990 C1                  A  2555    	POP	BC
0B0991 C1                  A  2556    	POP	BC
                           A  2557    ;  334					
                           A  2558    ;  335					if(counter == (pagemax 
                           A  2559    .LINE 335
                           A  2560    
0B0992 DD31F2              A  2561    	LD	IY,(IX+%FFFFFFF2)
0B0995 ED23FF              A  2562    	LEA	HL,IY+%FFFFFFFF
0B0998 DD07FD              A  2563    	LD	BC,(IX+%FFFFFFFD)
0B099B B7                  A  2564    	OR	A,A
0B099C ED42                A  2565    	SBC	HL,BC
0B099E 20 15               A  2566    	JR	NZ,L_89
                           A  2567    ;  336						fastmemcpy(addresst
                           A  2568    .LINE 336
                           A  2569    
0B09A0 DD07E2              A  2570    	LD	BC,(IX+%FFFFFFE2)
0B09A3 C5                  A  2571    	PUSH	BC
0B09A4 DD07F8              A  2572    	LD	BC,(IX+%FFFFFFF8)
0B09A7 C5                  A  2573    	PUSH	BC
0B09A8 DD07EF              A  2574    	LD	BC,(IX+%FFFFFFEF)
0B09AB C5                  A  2575    	PUSH	BC
0B09AC CD C2 0C 0B         A  2576    	CALL	_fastmemcpy
0B09B0 C1                  A  2577    	POP	BC
0B09B1 C1                  A  2578    	POP	BC
0B09B2 C1                  A  2579    	POP	BC
                           A  2580    ;  337						//printf("Fake copy
                           A  2581    ;  338					else 
                           A  2582    .LINE 338
                           A  2583    
0B09B3 18 14               A  2584    	JR	L_90
0B09B5                     A  2585    L_89:
                           A  2586    ;  339						fastmemcpy(addresst
                           A  2587    .LINE 339
                           A  2588    
0B09B5 01000400            A  2589    	LD	BC,1024
0B09B9 C5                  A  2590    	PUSH	BC
0B09BA DD07F8              A  2591    	LD	BC,(IX+%FFFFFFF8)
0B09BD C5                  A  2592    	PUSH	BC
0B09BE DD07EF              A  2593    	LD	BC,(IX+%FFFFFFEF)
0B09C1 C5                  A  2594    	PUSH	BC
0B09C2 CD C2 0C 0B         A  2595    	CALL	_fastmemcpy
0B09C6 C1                  A  2596    	POP	BC
0B09C7 C1                  A  2597    	POP	BC
0B09C8 C1                  A  2598    	POP	BC
0B09C9                     A  2599    L_90:
                           A  2600    ;  340						//printf("Fake copy
                           A  2601    ;  341				
                           A  2602    ;  342					addressto += PAGESIZE;
                           A  2603    .LINE 342
                           A  2604    
0B09C9 01000400            A  2605    	LD	BC,1024
0B09CD DD27EF              A  2606    	LD	HL,(IX+%FFFFFFEF)
0B09D0 09                  A  2607    	ADD	HL,BC
0B09D1 DD2FEF              A  2608    	LD	(IX+%FFFFFFEF),HL
                           A  2609    ;  343					addressfrom += PAGESIZE
                           A  2610    .LINE 343
                           A  2611    
0B09D4 DD27F8              A  2612    	LD	HL,(IX+%FFFFFFF8)
0B09D7 09                  A  2613    	ADD	HL,BC
0B09D8 DD2FF8              A  2614    	LD	(IX+%FFFFFFF8),HL
0B09DB DD07FD              A  2615    	LD	BC,(IX+%FFFFFFFD)
0B09DE 03                  A  2616    	INC	BC
0B09DF DD0FFD              A  2617    	LD	(IX+%FFFFFFFD),BC
                           A  2618    ;  344				}
0B09E2                     A  2619    L_93:
                           A  2620    .LINE 344
                           A  2621    
0B09E2 DD07F2              A  2622    	LD	BC,(IX+%FFFFFFF2)
0B09E5 DD27FD              A  2623    	LD	HL,(IX+%FFFFFFFD)
0B09E8 B7                  A  2624    	OR	A,A
0B09E9 ED42                A  2625    	SBC	HL,BC
0B09EB DA 3A 09 0B         A  2626    	JR	C,L_91
                           A  2627    ;  345				lockFlashKeyRegister();	// 
                           A  2628    .LINE 345
                           A  2629    
0B09EF CD AD 0C 0B         A  2630    	CALL	_lockFlashKeyRegister
                           A  2631    ;  346				printf("\r\n");
                           A  2632    .LINE 346
                           A  2633    
0B09F3 01 FB 11 0B         A  2634    	LD	BC,___print_uputch
0B09F7 ED43 04 20 0B       A  2635    	LD	(___print_xputch),BC
0B09FC 01 14 23 0B         A  2636    	LD	BC,L__71
0B0A00 C5                  A  2637    	PUSH	BC
0B0A01 CD 8A 10 0B         A  2638    	CALL	___print_sendstring
0B0A05 C1                  A  2639    	POP	BC
                           A  2640    ;  347				
                           A  2641    ;  348				//Verify correct CRC in fla
                           A  2642    ;  349				printf("Verifying flash che
                           A  2643    .LINE 349
                           A  2644    
0B0A06 01 FB 11 0B         A  2645    	LD	BC,___print_uputch
0B0A0A ED43 04 20 0B       A  2646    	LD	(___print_xputch),BC
0B0A0F 01 17 23 0B         A  2647    	LD	BC,L__72
0B0A13 C5                  A  2648    	PUSH	BC
0B0A14 CD 8A 10 0B         A  2649    	CALL	___print_sendstring
0B0A18 C1                  A  2650    	POP	BC
                           A  2651    ;  350				crcresult = crc32((char*)FL
                           A  2652    .LINE 350
                           A  2653    
0B0A19 DD07E9              A  2654    	LD	BC,(IX+%FFFFFFE9)
0B0A1C C5                  A  2655    	PUSH	BC
0B0A1D 01000000            A  2656    	LD	BC,0
0B0A21 C5                  A  2657    	PUSH	BC
0B0A22 CD 9A 0F 0B         A  2658    	CALL	_crc32
0B0A26 C1                  A  2659    	POP	BC
0B0A27 C1                  A  2660    	POP	BC
0B0A28 DD2FDE              A  2661    	LD	(IX+%FFFFFFDE),HL
0B0A2B DD73E1              A  2662    	LD	(IX+%FFFFFFE1),E
                           A  2663    ;  351	
                           A  2664    ;  352				if(state == recover) crcexp
                           A  2665    .LINE 352
                           A  2666    
0B0A2E 01010000            A  2667    	LD	BC,1
0B0A32 DD27F5              A  2668    	LD	HL,(IX+%FFFFFFF5)
0B0A35 B7                  A  2669    	OR	A,A
0B0A36 ED42                A  2670    	SBC	HL,BC
0B0A38 20 0C               A  2671    	JR	NZ,L_105
0B0A3A DD07D0              A  2672    	LD	BC,(IX+%FFFFFFD0)
0B0A3D DD7ED3              A  2673    	LD	A,(IX+%FFFFFFD3)
0B0A40 DD0FD4              A  2674    	LD	(IX+%FFFFFFD4),BC
0B0A43 DD77D7              A  2675    	LD	(IX+%FFFFFFD7),A
0B0A46                     A  2676    L_105:
                           A  2677    ;  353				
                           A  2678    ;  354				if(crcresult == crcexpected
                           A  2679    .LINE 354
                           A  2680    
0B0A46 DD27DE              A  2681    	LD	HL,(IX+%FFFFFFDE)
0B0A49 DD5EE1              A  2682    	LD	E,(IX+%FFFFFFE1)
0B0A4C DD07D4              A  2683    	LD	BC,(IX+%FFFFFFD4)
0B0A4F DD7ED7              A  2684    	LD	A,(IX+%FFFFFFD7)
0B0A52 CD DD 18 0B         A  2685    	CALL	__lcmpu
0B0A56 20 1E               A  2686    	JR	NZ,L_104
                           A  2687    ;  355				{
                           A  2688    ;  356					printf("- OK\r\n");
                           A  2689    .LINE 356
                           A  2690    
0B0A58 01 FB 11 0B         A  2691    	LD	BC,___print_uputch
0B0A5C ED43 04 20 0B       A  2692    	LD	(___print_xputch),BC
0B0A61 01 34 23 0B         A  2693    	LD	BC,L__75
0B0A65 C5                  A  2694    	PUSH	BC
0B0A66 CD 8A 10 0B         A  2695    	CALL	___print_sendstring
0B0A6A C1                  A  2696    	POP	BC
                           A  2697    ;  357					state = systemreset;
                           A  2698    .LINE 357
                           A  2699    
0B0A6B 01020000            A  2700    	LD	BC,2
0B0A6F DD0FF5              A  2701    	LD	(IX+%FFFFFFF5),BC
                           A  2702    ;  358				}
                           A  2703    ;  359				else // CRC Failure - next 
                           A  2704    .LINE 359
                           A  2705    
0B0A72 C3 DF 07 0B         A  2706    	JR	L_107
0B0A76                     A  2707    L_104:
                           A  2708    ;  360				{	 // User interaction no
                           A  2709    ;  361					switch(state)
                           A  2710    .LINE 361
                           A  2711    
0B0A76 DD27F5              A  2712    	LD	HL,(IX+%FFFFFFF5)
0B0A79 CD 9A 18 0B         A  2713    	CALL	__case8D
0B0A7D E9                  A  2714    	JP	(HL)
0B0A7E                     A  2715    L__76:
0B0A7E 0200                A  2716    	DW	2
0B0A80 00                  A  2717    	DB	0
0B0A81 8B0A0B              A  2718    	DW24	L_97	
                           A  2719    
0B0A84 01                  A  2720    	DB	1
0B0A85 A90A0B              A  2721    	DW24	L_98	
                           A  2722    
0B0A88 BE0A0B              A  2723    	DW24	L_101	
                           A  2724    
                           A  2725    ;  362					{
                           A  2726    ;  363						case firmware:
0B0A8B                     A  2727    L_97:
                           A  2728    .LINE 363
                           A  2729    
                           A  2730    ;  364							printf("\r\nErr
                           A  2731    .LINE 364
                           A  2732    
0B0A8B 01 FB 11 0B         A  2733    	LD	BC,___print_uputch
0B0A8F ED43 04 20 0B       A  2734    	LD	(___print_xputch),BC
0B0A94 01 3B 23 0B         A  2735    	LD	BC,L__77
0B0A98 C5                  A  2736    	PUSH	BC
0B0A99 CD 8A 10 0B         A  2737    	CALL	___print_sendstring
0B0A9D C1                  A  2738    	POP	BC
                           A  2739    ;  365							state = recover
                           A  2740    .LINE 365
                           A  2741    
0B0A9E 01010000            A  2742    	LD	BC,1
0B0AA2 DD0FF5              A  2743    	LD	(IX+%FFFFFFF5),BC
                           A  2744    ;  366							break;
                           A  2745    .LINE 366
                           A  2746    
0B0AA5 C3 DF 07 0B         A  2747    	JR	L_107
                           A  2748    ;  367						case recover:
0B0AA9                     A  2749    L_98:
                           A  2750    .LINE 367
                           A  2751    
                           A  2752    ;  368							printf("\r\nErr
                           A  2753    .LINE 368
                           A  2754    
0B0AA9 01 FB 11 0B         A  2755    	LD	BC,___print_uputch
0B0AAD ED43 04 20 0B       A  2756    	LD	(___print_xputch),BC
0B0AB2 01 88 23 0B         A  2757    	LD	BC,L__78
0B0AB6 C5                  A  2758    	PUSH	BC
0B0AB7 CD 8A 10 0B         A  2759    	CALL	___print_sendstring
0B0ABB C1                  A  2760    	POP	BC
                           A  2761    ;  369							while(1); // no
0B0ABC                     A  2762    L_100:
                           A  2763    .LINE 369
                           A  2764    
0B0ABC 18 FE               A  2765    	JR	L_100
                           A  2766    ;  370						default:
0B0ABE                     A  2767    L_101:
                           A  2768    .LINE 370
                           A  2769    
                           A  2770    ;  371							state = recover
                           A  2771    .LINE 371
                           A  2772    
0B0ABE 01010000            A  2773    	LD	BC,1
0B0AC2 DD0FF5              A  2774    	LD	(IX+%FFFFFFF5),BC
0B0AC5 C3 DF 07 0B         A  2775    	JR	L_107
                           A  2776    ;  372					}
                           A  2777    ;  373				}
                           A  2778    ;  374			}		
                           A  2779    ;  375		}
                           A  2780    ;  376		else printf("\n\rUser abort\n\r");
0B0AC9                     A  2781    L_109:
                           A  2782    .LINE 376
                           A  2783    
0B0AC9 01 FB 11 0B         A  2784    	LD	BC,___print_uputch
0B0ACD ED43 04 20 0B       A  2785    	LD	(___print_xputch),BC
0B0AD2 01 C5 23 0B         A  2786    	LD	BC,L__79
0B0AD6 C5                  A  2787    	PUSH	BC
0B0AD7 CD 8A 10 0B         A  2788    	CALL	___print_sendstring
0B0ADB C1                  A  2789    	POP	BC
                           A  2790    ;  377		
                           A  2791    ;  378		return 0;
                           A  2792    .LINE 378
                           A  2793    
0B0ADC AF                  A  2794    	XOR	A,A
                           A  2795    ;  379	}
0B0ADD                     A  2796    L_112:
                           A  2797    .LINE 379
                           A  2798    
0B0ADD DDF9                A  2799    	LD	SP,IX
0B0ADF DDE1                A  2800    	POP	IX
0B0AE1 C9                  A  2801    	RET	
                           A  2802    
                           A  2803    
                           A  2804    ;**************************** _update_mos *****
                           A  2805    ;Name                         Addr/Register   S
                           A  2806    ;_lockFlashKeyRegister               IMPORT  --
                           A  2807    ;___print_fmt                        IMPORT    
                           A  2808    ;_enableFlashKeyRegister             IMPORT  --
                           A  2809    ;_reset                              IMPORT  --
                           A  2810    ;_delayms                            IMPORT  --
                           A  2811    ;__u_itoa                            IMPORT  --
                           A  2812    ;_fastmemcpy                         IMPORT  --
                           A  2813    ;_getch                              IMPORT  --
                           A  2814    ;_crc32_finalize                     IMPORT  --
                           A  2815    ;_crc32                              IMPORT  --
                           A  2816    ;_mos_flseek                         IMPORT  --
                           A  2817    ;_crc32_initialize                   IMPORT  --
                           A  2818    ;_mos_fread                          IMPORT  --
                           A  2819    ;_mos_fclose                         IMPORT  --
                           A  2820    ;_getFileSize                        IMPORT  --
                           A  2821    ;___print_sendstring                 IMPORT  --
                           A  2822    ;___print_xputch                     IMPORT    
                           A  2823    ;___print_uputch                     IMPORT  --
                           A  2824    ;_mos_fopen                          IMPORT  --
                           A  2825    ;_putch                              IMPORT  --
                           A  2826    ;crcbackup                            IX-48    
                           A  2827    ;crcexpected                          IX-44    
                           A  2828    ;filesize                             IX-40    
                           A  2829    ;G_0                                  IX-37    
                           A  2830    ;crcresult                            IX-34    
                           A  2831    ;lastpagebytes                        IX-30    
                           A  2832    ;got                                  IX-27    
                           A  2833    ;value                                IX-24    
                           A  2834    ;size                                 IX-23    
                           A  2835    ;ptr                                  IX-20    
                           A  2836    ;addressto                            IX-17    
                           A  2837    ;pagemax                              IX-14    
                           A  2838    ;state                                IX-11    
                           A  2839    ;addressfrom                           IX-8    
                           A  2840    ;response                              IX-5    
                           A  2841    ;file                                  IX-4    
                           A  2842    ;counter                               IX-3    
                           A  2843    ;filename                              IX+6    
                           A  2844    
                           A  2845    
                           A  2846    ; Stack Frame Size: 57 (bytes)
                           A  2847    ;       Spill Code: 0 (instruction)
                           A  2848    
                           A  2849    
                           A  2850    .ENDFUNC "update_mos",379,"_update_mos"
                           A  2851    	SEGMENT STRSECT
0B21E3                     A  2852    L__44:
0B21E3 4572726F 72206F70   A  2853    	DB	"Error opening \""
0B21EB 656E696E 672022 
0B21F2 00                  A  2854    	DB	0
0B21F3                     A  2855    L__45:
0B21F3 22                  A  2856    	DB	"\""
0B21F4 0A0D00              A  2857    	DB	10,13,0
0B21F7                     A  2858    L__47:
0B21F7 546F6F20 6C617267   A  2859    	DB	"Too large for 128KB embedded flash"
0B21FF 6520666F 72203132 
0B2207 384B4220 656D6265 
0B220F 64646564 20666C61 
0B2217 7368 
0B2219 0D0A00              A  2860    	DB	13,10,0
0B221C                     A  2861    L__49:
0B221C 46696C65 20646F65   A  2862    	DB	"File does not contain valid MOS ez80 s
0B2224 73206E6F 7420636F 
0B222C 6E746169 6E207661 
0B2234 6C696420 4D4F5320 
0B223C 657A3830 20737461 
0B2244 72747570 20636F64 
0B224C 65 
0B224D 0D0A00              A  2863    	DB	13,10,0
0B2250                     A  2864    L__50:
0B2250 0D0A                A  2865    	DB	13,10
0B2252 56616C69 6420657A   A  2866    	DB	"Valid ez80 code"
0B225A 38302063 6F6465 
0B2261 0D0A                A  2867    	DB	13,10
0B2263 43616C63 756C6174   A  2868    	DB	"Calculating CRC32"
0B226B 696E6720 43524333 
0B2273 32 
0B2274 00                  A  2869    	DB	0
0B2275                     A  2870    L__53:
0B2275 0A0D                A  2871    	DB	10,13
0B2277 4F4B                A  2872    	DB	"OK"
0B2279 0A0D0A0D 00         A  2873    	DB	10,13,10,13,0
0B227E                     A  2874    L__54:
0B227E 45726173 6520616E   A  2875    	DB	"Erase and program flash (y/n)? "
0B2286 64207072 6F677261 
0B228E 6D20666C 61736820 
0B2296 28792F6E 293F20 
0B229D 00                  A  2876    	DB	0
0B229E                     A  2877    L__58:
0B229E 0D0A                A  2878    	DB	13,10
0B22A0 4261636B 696E6720   A  2879    	DB	"Backing up existing firmware... "
0B22A8 75702065 78697374 
0B22B0 696E6720 6669726D 
0B22B8 77617265 2E2E2E20 
0B22C0 00                  A  2880    	DB	0
0B22C1                     A  2881    L__60:
0B22C1 0D0A00              A  2882    	DB	13,10,0
0B22C4                     A  2883    L__61:
0B22C4 0D                  A  2884    	DB	13
0B22C5 52657365 7420696E   A  2885    	DB	"Reset in "
0B22CD 20 
0B22CE 00                  A  2886    	DB	0
0B22CF                     A  2887    L__63:
0B22CF 0D0A                A  2888    	DB	13,10
0B22D1 45726173 696E6720   A  2889    	DB	"Erasing flash... "
0B22D9 666C6173 682E2E2E 
0B22E1 20 
0B22E2 00                  A  2890    	DB	0
0B22E3                     A  2891    L__66:
0B22E3 0D0A                A  2892    	DB	13,10
0B22E5 57726974 696E6720   A  2893    	DB	"Writing new firmware..."
0B22ED 6E657720 6669726D 
0B22F5 77617265 2E2E2E 
0B22FC 0D0A00              A  2894    	DB	13,10,0
0B22FF                     A  2895    L__68:
0B22FF 0D                  A  2896    	DB	13
0B2300 57726974 696E6720   A  2897    	DB	"Writing flash page "
0B2308 666C6173 68207061 
0B2310 676520 
0B2313 00                  A  2898    	DB	0
0B2314                     A  2899    L__71:
0B2314 0D0A00              A  2900    	DB	13,10,0
0B2317                     A  2901    L__72:
0B2317 56657269 6679696E   A  2902    	DB	"Verifying flash checksum... "
0B231F 6720666C 61736820 
0B2327 63686563 6B73756D 
0B232F 2E2E2E20 
0B2333 00                  A  2903    	DB	0
0B2334                     A  2904    L__75:
0B2334 2D204F4B            A  2905    	DB	"- OK"
0B2338 0D0A00              A  2906    	DB	13,10,0
0B233B                     A  2907    L__77:
0B233B 0D0A                A  2908    	DB	13,10
0B233D 4572726F 72206F63   A  2909    	DB	"Error occured during flash write"
0B2345 63757265 64206475 
0B234D 72696E67 20666C61 
0B2355 73682077 72697465 
0B235D 0D0A                A  2910    	DB	13,10
0B235F 41747465 6D707469   A  2911    	DB	"Attempting to flash backup firmware...
0B2367 6E672074 6F20666C 
0B236F 61736820 6261636B 
0B2377 75702066 69726D77 
0B237F 6172652E 2E2E 
0B2385 0D0A00              A  2912    	DB	13,10,0
0B2388                     A  2913    L__78:
0B2388 0D0A                A  2914    	DB	13,10
0B238A 4572726F 72206F63   A  2915    	DB	"Error occured during flash write"
0B2392 63757265 64206475 
0B239A 72696E67 20666C61 
0B23A2 73682077 72697465 
0B23AA 0D0A                A  2916    	DB	13,10
0B23AC 4261636B 75702072   A  2917    	DB	"Backup recovery failed"
0B23B4 65636F76 65727920 
0B23BC 6661696C 6564 
0B23C2 0D0A00              A  2918    	DB	13,10,0
0B23C5                     A  2919    L__79:
0B23C5 0A0D                A  2920    	DB	10,13
0B23C7 55736572 2061626F   A  2921    	DB	"User abort"
0B23CF 7274 
0B23D1 0A0D00              A  2922    	DB	10,13,0
                           A  2923    	SEGMENT CODE
                           A  2924    ;  380	
                           A  2925    ;  381	int main(int argc, char * argv[]) {
0B0AE2                     A  2926    _main:
                           A  2927    .DEFINE "_main"
                           A  2928    
                           A  2929    .VALUE _main
                           A  2930    
                           A  2931    .CLASS 2
                           A  2932    
                           A  2933    .TYPE 68
                           A  2934    
                           A  2935    .ENDEF
                           A  2936    
                           A  2937    .BEGFUNC "main",381,"_main"
                           A  2938    
                           A  2939    .LINE 381
                           A  2940    
                           A  2941    .DEFINE "argc"
                           A  2942    
                           A  2943    .CLASS 65
                           A  2944    
                           A  2945    .VALUE 6
                           A  2946    
                           A  2947    .TYPE 4
                           A  2948    
                           A  2949    .ENDEF
                           A  2950    
                           A  2951    .DEFINE "argv"
                           A  2952    
                           A  2953    .CLASS 65
                           A  2954    
                           A  2955    .VALUE 9
                           A  2956    
                           A  2957    .TYPE 290
                           A  2958    
                           A  2959    .ENDEF
                           A  2960    
0B0AE2 DDE5                A  2961    	PUSH	IX
0B0AE4 DD210000 00         A  2962    	LD	IX,0
0B0AE9 DD39                A  2963    	ADD	IX,SP
                           A  2964    ;  382	
                           A  2965    ;  383		if(argc != 3) {
                           A  2966    .LINE 383
                           A  2967    
0B0AEB 01030000            A  2968    	LD	BC,3
0B0AEF DD2706              A  2969    	LD	HL,(IX+%6)
0B0AF2 B7                  A  2970    	OR	A,A
0B0AF3 ED42                A  2971    	SBC	HL,BC
0B0AF5 28 09               A  2972    	JR	Z,L_118
                           A  2973    ;  384			usage();
                           A  2974    .LINE 384
                           A  2975    
0B0AF7 CD 06 03 0B         A  2976    	CALL	_usage
                           A  2977    ;  385			return 0;
                           A  2978    .LINE 385
                           A  2979    
0B0AFB B7                  A  2980    	OR	A,A
0B0AFC ED62                A  2981    	SBC	HL,HL
0B0AFE 18 6B               A  2982    	JR	L_119
                           A  2983    ;  386		}
0B0B00                     A  2984    L_118:
                           A  2985    .LINE 386
                           A  2986    
                           A  2987    ;  387	
                           A  2988    ;  388		if(memcmp(argv[1], "mos", 3) == 0) 
                           A  2989    .LINE 388
                           A  2990    
0B0B00 C5                  A  2991    	PUSH	BC
0B0B01 01 D4 23 0B         A  2992    	LD	BC,L__82
0B0B05 C5                  A  2993    	PUSH	BC
0B0B06 DD3109              A  2994    	LD	IY,(IX+%9)
0B0B09 ED2303              A  2995    	LEA	HL,IY+%3
0B0B0C ED07                A  2996    	LD	BC,(HL)
0B0B0E C5                  A  2997    	PUSH	BC
0B0B0F CD 8E 15 0B         A  2998    	CALL	_memcmp
0B0B13 C1                  A  2999    	POP	BC
0B0B14 C1                  A  3000    	POP	BC
0B0B15 C1                  A  3001    	POP	BC
0B0B16 CD B8 15 0B         A  3002    	CALL	__icmpzero
0B0B1A 20 14               A  3003    	JR	NZ,L_117
                           A  3004    ;  389			return update_mos(argv[2]);
                           A  3005    .LINE 389
                           A  3006    
0B0B1C DD3109              A  3007    	LD	IY,(IX+%9)
0B0B1F ED2306              A  3008    	LEA	HL,IY+%6
0B0B22 ED07                A  3009    	LD	BC,(HL)
0B0B24 C5                  A  3010    	PUSH	BC
0B0B25 CD C9 05 0B         A  3011    	CALL	_update_mos
0B0B29 C1                  A  3012    	POP	BC
0B0B2A B7ED62              A  3013    	UEXT	HL
0B0B2D 6F                  A  3014    	LD	L,A
0B0B2E 18 3B               A  3015    	JR	L_119
                           A  3016    ;  390		}
                           A  3017    ;  391		else {
0B0B30                     A  3018    L_117:
                           A  3019    .LINE 391
                           A  3020    
                           A  3021    ;  392			if(memcmp(argv[1], "vdp", 3) ==
                           A  3022    .LINE 392
                           A  3023    
0B0B30 01030000            A  3024    	LD	BC,3
0B0B34 C5                  A  3025    	PUSH	BC
0B0B35 01 D8 23 0B         A  3026    	LD	BC,L__84
0B0B39 C5                  A  3027    	PUSH	BC
0B0B3A DD3109              A  3028    	LD	IY,(IX+%9)
0B0B3D ED2303              A  3029    	LEA	HL,IY+%3
0B0B40 ED07                A  3030    	LD	BC,(HL)
0B0B42 C5                  A  3031    	PUSH	BC
0B0B43 CD 8E 15 0B         A  3032    	CALL	_memcmp
0B0B47 C1                  A  3033    	POP	BC
0B0B48 C1                  A  3034    	POP	BC
0B0B49 C1                  A  3035    	POP	BC
0B0B4A CD B8 15 0B         A  3036    	CALL	__icmpzero
0B0B4E 20 14               A  3037    	JR	NZ,L_115
                           A  3038    ;  393				return update_vdp(argv[2]);
                           A  3039    .LINE 393
                           A  3040    
0B0B50 DD3109              A  3041    	LD	IY,(IX+%9)
0B0B53 ED2306              A  3042    	LEA	HL,IY+%6
0B0B56 ED07                A  3043    	LD	BC,(HL)
0B0B58 C5                  A  3044    	PUSH	BC
0B0B59 CD 09 04 0B         A  3045    	CALL	_update_vdp
0B0B5D C1                  A  3046    	POP	BC
0B0B5E B7ED62              A  3047    	UEXT	HL
0B0B61 6F                  A  3048    	LD	L,A
0B0B62 18 07               A  3049    	JR	L_119
                           A  3050    ;  394			}
                           A  3051    ;  395			else {
0B0B64                     A  3052    L_115:
                           A  3053    .LINE 395
                           A  3054    
                           A  3055    ;  396				usage();
                           A  3056    .LINE 396
                           A  3057    
0B0B64 CD 06 03 0B         A  3058    	CALL	_usage
                           A  3059    ;  397				return 0;
                           A  3060    .LINE 397
                           A  3061    
0B0B68 B7                  A  3062    	OR	A,A
0B0B69 ED62                A  3063    	SBC	HL,HL
                           A  3064    ;  398			}
                           A  3065    ;  399		}
                           A  3066    ;  400	}
0B0B6B                     A  3067    L_119:
                           A  3068    .LINE 400
                           A  3069    
0B0B6B DDF9                A  3070    	LD	SP,IX
0B0B6D DDE1                A  3071    	POP	IX
0B0B6F C9                  A  3072    	RET	
                           A  3073    
                           A  3074    
                           A  3075    ;**************************** _main ***********
                           A  3076    ;Name                         Addr/Register   S
                           A  3077    ;_memcmp                             IMPORT  --
                           A  3078    ;argv                                  IX+9    
                           A  3079    ;argc                                  IX+6    
                           A  3080    
                           A  3081    
                           A  3082    ; Stack Frame Size: 12 (bytes)
                           A  3083    ;       Spill Code: 0 (instruction)
                           A  3084    
                           A  3085    
                           A  3086    .ENDFUNC "main",400,"_main"
                           A  3087    	SEGMENT STRSECT
0B23D4                     A  3088    L__82:
0B23D4 6D6F73              A  3089    	DB	"mos"
0B23D7 00                  A  3090    	DB	0
0B23D8                     A  3091    L__84:
0B23D8 766470              A  3092    	DB	"vdp"
0B23DB 00                  A  3093    	DB	0
                           A  3094    	XREF _memcmp:ROM
                           A  3095    	XREF _getFileSize:ROM
                           A  3096    	XREF _crc32_finalize:ROM
                           A  3097    	XREF _crc32_initialize:ROM
                           A  3098    	XREF _crc32:ROM
                           A  3099    	XREF _delayms:ROM
                           A  3100    	XREF _startVDPupdate:ROM
                           A  3101    	XREF _reset:ROM
                           A  3102    	XREF _fastmemcpy:ROM
                           A  3103    	XREF _lockFlashKeyRegister:ROM
                           A  3104    	XREF _enableFlashKeyRegister:ROM
                           A  3105    	XREF _mos_flseek:ROM
                           A  3106    	XREF _mos_fread:ROM
                           A  3107    	XREF _mos_fclose:ROM
                           A  3108    	XREF _mos_fopen:ROM
                           A  3109    	XREF _getsysvar_scrchar:ROM
                           A  3110    	XREF _getch:ROM
                           A  3111    	XREF __u_ultoa:ROM
                           A  3112    	XREF __u_itoa:ROM
                           A  3113    	XREF ___print_sendstring:ROM
                           A  3114    	XREF ___print_xputch:ROM
                           A  3115    	XREF ___print_uputch:ROM
                           A  3116    	XREF ___print_fmt:ROM
                           A  3117    	XREF __lcmpu:ROM
                           A  3118    	XREF __iand:ROM
                           A  3119    	XREF __stoiu:ROM
                           A  3120    	XREF __icmpzero:ROM
                           A  3121    	XREF __case8D:ROM
                           A  3122    	XREF __ishru_b:ROM
                           A  3123    	XREF __ishrs_b:ROM
                           A  3124    	XDEF _main
                           A  3125    	XDEF _update_mos
                           A  3126    	XDEF _update_vdp
                           A  3127    	XDEF _getResponse
                           A  3128    	XDEF _usage
                           A  3129    	XDEF _print_version
                           A  3130    	XDEF _containsESP32Header
                           A  3131    	XDEF _esp32_magicnumbers
                           A  3132    	XDEF _containsMosHeader
                           A  3133    	XDEF _mos_magicnumbers
                           A  3134    	XDEF _vdp_ota_present
                           A  3135    	XDEF _getCharAt
                           A  3136    	XDEF _putch
                           A  3137    	XDEF _errno
                           A  3138    	END


Errors: 0
Warnings: 0
Lines Assembled: 3139
