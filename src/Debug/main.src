; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
	SEGMENT BSS
_errno:
	DS	3
.DEFINE "errno"
.ALIAS "_errno"
.CLASS 83
.VALUE _errno
.TYPE 4
.ENDEF
;    1	/*
;    2	 * Title:			Agon MOS firmware upgrade utility
;    3	 * Author:			Jeroen Venema
;    4	 * Created:			17/12/2022
;    5	 * Last Updated:	17/12/2022
;    6	 * 
;    7	 * Modinfo:
;    8	 * 17/12/2022:		Initial version
;    9	 * 05/04/2022:		Changed timer to 5sec at reset.
;   10	 *                  Sends cls just before reset
;   11	 * 07/06/2023:		Included faster crc32, by Leigh Brown
;   12	 */
;   13	
;   14	#include <ez80.h>
;   15	#include <stdio.h>
;   16	#include <stdlib.h>
;   17	#include <ERRNO.H>
;   18	#include "mos-interface.h"
;   19	#include "flash.h"
;   20	#include "agontimer.h"
;   21	#include "crc32.h"
;   22	#include "filesize.h"
;   23	#include "./stdint.h"
;   24	#include <string.h>
;   25	
;   26	#define UNLOCKMATCHLENGTH 9
;   27	
;   28	#define EXIT_FILENOTFOUND	4
;   29	#define EXIT_INVALIDPARAMETER	19
;   30	
;   31	int errno; // needed by standard library
	SEGMENT CODE
;   32	enum states{firmware,recover,systemreset};
;   33	
;   34	// separate putch function that doesn't rely on a running MOS firmware
;   35	// UART0 initialization done by MOS firmware previously
;   36	// This utility doesn't run without MOS to load it anyway
;   37	int putch(int c)
;   38	{
_putch:
.DEFINE "_putch"

.VALUE _putch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "putch",38,"_putch"

.LINE 38

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 4

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
.ENDEF

;   39		UINT8 lsr,temt;
;   40		
;   41		while((UART0_LSR & 0x40) == 0);
L_1:
.LINE 41

	IN0	A,(197)
	AND	A,%40
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_1
;   42		UART0_THR = c;
.LINE 42

	LD	A,(IX+%6)
	OUT0	(192),A
;   43		return c;
.LINE 43

	LD	HL,(IX+%6)
;   44	}
.LINE 44

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch",44,"_putch"
;   45	
;   46	uint8_t getCharAt(uint16_t x, uint16_t y) {
_getCharAt:
.DEFINE "_getCharAt"

.VALUE _getCharAt

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getCharAt",46,"_getCharAt"

.LINE 46

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   47		delayms(20);
.LINE 47

	LD	BC,20
	PUSH	BC
	CALL	_delayms
	POP	BC
;   48		putch(23);
.LINE 48

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   49		putch(0);
.LINE 49

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   50		putch(131);
.LINE 50

	LD	BC,131
	PUSH	BC
	CALL	_putch
	POP	BC
;   51		putch(x & 0xFF);
.LINE 51

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   52		putch((x >> 8) & 0xFF);
.LINE 52

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   53		putch(y & 0xFF);
.LINE 53

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   54		putch((y >> 8) & 0xFF);
.LINE 54

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   55		delayms(20);
.LINE 55

	LD	BC,20
	PUSH	BC
	CALL	_delayms
	POP	BC
;   56		return getsysvar_scrchar();
.LINE 56

	CALL	_getsysvar_scrchar
;   57	}
.LINE 57

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCharAt ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_scrchar                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getCharAt",57,"_getCharAt"
;   58	
;   59	bool vdp_ota_present(void) {
_vdp_ota_present:
.DEFINE "_vdp_ota_present"

.VALUE _vdp_ota_present

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_ota_present",59,"_vdp_ota_present"

.LINE 59

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "test"

.CLASS 65

.VALUE -11

.DIM 9

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF5
	LD	SP,HL
;   60		char test[UNLOCKMATCHLENGTH];
;   61		uint16_t n;
;   62	
;   63		putch(23);
.LINE 63

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   64		putch(29);
.LINE 64

	LD	BC,29
	PUSH	BC
	CALL	_putch
	POP	BC
;   65		putch(0);
.LINE 65

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   66		printf("unlock");
.LINE 66

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__3
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   67	
;   68		for(n = 0; n < UNLOCKMATCHLENGTH+1; n++) test[n] = getCharAt(n+8, 3);
.LINE 68

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_8
L_6:
	LD	BC,3
	PUSH	BC
	LD	IY,(IX+%FFFFFFFE)
	LEA	BC,IY+%8
	PUSH	BC
	CALL	_getCharAt
	POP	BC
	POP	BC
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IX+%FFFFFFF5
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
L_8:
	LD.LIS	BC,10
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_6
;   69		// 3 - line on-screen
;   70		if(memcmp(test, "unlocked!",UNLOCKMATCHLENGTH) == 0) return true;
.LINE 70

	LD	BC,9
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	PEA	IX+%FFFFFFF5
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_10
	LD	A,%1
	JR	L_12
;   71		else return false;
L_10:
.LINE 71

	XOR	A,A
;   72	}
L_12:
.LINE 72

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_ota_present ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;test                                 IX-11      9   variable
;n                                     IX-2      2   variable


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_ota_present",72,"_vdp_ota_present"
	SEGMENT STRSECT
L__3:
	DB	"unlock"
	DB	0
L__5:
	DB	"unlocked!"
	DB	0
	SEGMENT DATA
_mos_magicnumbers:
	DB	243
	DB	237
	DB	125
	DB	91
	DB	195
.DEFINE "mos_magicnumbers"
.ALIAS "_mos_magicnumbers"
.CLASS 69
.VALUE _mos_magicnumbers
.DIM 5
.TYPE 108
.ENDEF
;   73	
;   74	uint8_t mos_magicnumbers[] = {0xF3, 0xED, 0x7D, 0x5B, 0xC3};
	SEGMENT CODE
;   75	#define MOS_MAGICLENGTH 5
;   76	bool containsMosHeader(uint8_t *filestart) {
_containsMosHeader:
.DEFINE "_containsMosHeader"

.VALUE _containsMosHeader

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsMosHeader",76,"_containsMosHeader"

.LINE 76

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;   77		uint8_t n;
;   78		bool match = true;
.LINE 78

	LD	(IX+%FFFFFFFE),%1
;   79	
;   80		for(n = 0; n < MOS_MAGICLENGTH; n++) if(mos_magicnumbers[n] != filestart[n]) match = false;
.LINE 80

	LD	(IX+%FFFFFFFF),%0
	JR	L_17
L_15:
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_mos_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_16
	LD	(IX+%FFFFFFFE),%0
L_16:
	INC	(IX+%FFFFFFFF)
L_17:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%5
	JR	C,L_15
;   81		return match;
.LINE 81

	LD	A,(IX+%FFFFFFFE)
;   82	}
.LINE 82

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsMosHeader ***************************
;Name                         Addr/Register   Size   Type
;_mos_magicnumbers                   STATIC      5   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsMosHeader",82,"_containsMosHeader"
	SEGMENT DATA
_esp32_magicnumbers:
	DB	50
	DB	84
	DB	205
	DB	171
.DEFINE "esp32_magicnumbers"
.ALIAS "_esp32_magicnumbers"
.CLASS 69
.VALUE _esp32_magicnumbers
.DIM 4
.TYPE 108
.ENDEF
;   83	
;   84	uint8_t esp32_magicnumbers[] = {0x32, 0x54, 0xCD, 0xAB};
	SEGMENT CODE
;   85	#define ESP32_MAGICLENGTH 4
;   86	#define ESP32_MAGICSTART 0x20
;   87	bool containsESP32Header(uint8_t *filestart) {
_containsESP32Header:
.DEFINE "_containsESP32Header"

.VALUE _containsESP32Header

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsESP32Header",87,"_containsESP32Header"

.LINE 87

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;   88		uint8_t n;
;   89		bool match = true;
.LINE 89

	LD	(IX+%FFFFFFFE),%1
;   90	
;   91		filestart += ESP32_MAGICSTART; // start of ESP32 magic header
.LINE 91

	LD	IY,(IX+%6)
	LEA	IY,IY+%20
	LD	(IX+%6),IY
;   92		for(n = 0; n < ESP32_MAGICLENGTH; n++) {
.LINE 92

	LD	(IX+%FFFFFFFF),%0
	JR	L_24
L_22:
;   93			if(esp32_magicnumbers[n] != filestart[n]) match = false;
.LINE 93

	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_esp32_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_23
	LD	(IX+%FFFFFFFE),%0
;   94		}
L_23:
.LINE 94

	INC	(IX+%FFFFFFFF)
L_24:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%4
	JR	C,L_22
;   95		return match;
.LINE 95

	LD	A,(IX+%FFFFFFFE)
;   96	}
.LINE 96

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsESP32Header ***************************
;Name                         Addr/Register   Size   Type
;_esp32_magicnumbers                 STATIC      4   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsESP32Header",96,"_containsESP32Header"
;   97	
;   98	void print_version(void) {
_print_version:
.DEFINE "_print_version"

.VALUE _print_version

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "print_version",98,"_print_version"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   99		printf("Agon firmware upgrade utility v1.4\n\r\n\r");
.LINE 99

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__14
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  100	}
.LINE 100

	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_version ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "print_version",100,"_print_version"
	SEGMENT STRSECT
L__14:
	DB	"Agon firmware upgrade utility v1.4"
	DB	10,13,10,13,0
	SEGMENT CODE
;  101	
;  102	void usage(void) {
_usage:
.DEFINE "_usage"

.VALUE _usage

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "usage",102,"_usage"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  103		print_version();
.LINE 103

	CALL	_print_version
;  104		printf("Usage: FLASH <mos|vdp> <filename>\n\r");
.LINE 104

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__16
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  105	}
.LINE 105

	LD	SP,IX
	POP	IX
	RET	


;**************************** _usage ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "usage",105,"_usage"
	SEGMENT STRSECT
L__16:
	DB	"Usage: FLASH <mos|vdp> <filename>"
	DB	10,13,0
	SEGMENT CODE
;  106	
;  107	uint8_t update_vdp(char *filename) {
_update_vdp:
.DEFINE "_update_vdp"

.VALUE _update_vdp

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_vdp",107,"_update_vdp"

.LINE 107

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -4

.TYPE 14

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -40

.DIM 36

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD8
	LD	SP,HL
;  108		uint8_t file;
;  109		uint8_t buffer[ESP32_MAGICLENGTH + ESP32_MAGICSTART];
;  110		uint24_t filesize;
;  111	
;  112		putch(12); // cls
.LINE 112

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  113		print_version();	
.LINE 113

	CALL	_print_version
;  114		printf("Unlocking VDP updater...\r\n");
.LINE 114

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__18
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  115		
;  116		if(!vdp_ota_present()) {
.LINE 116

	CALL	_vdp_ota_present
	OR	A,A
	JR	NZ,L_30
;  117			printf(" failed - incompatible VDP\r\n");
.LINE 117

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__20
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  118			return 0;
.LINE 118

	XOR	A,A
	JR	L_35
;  119		}
L_30:
.LINE 119

;  120	
;  121		file = mos_fopen(filename, fa_read);
.LINE 121

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  122		if(!file) {
.LINE 122

	OR	A,A
	JR	NZ,L_32
;  123			printf("Error opening \"%s\"\n\r",filename);
.LINE 123

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__22
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__23
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  124			return EXIT_FILENOTFOUND;
.LINE 124

	LD	A,%4
	JR	L_35
;  125		}
L_32:
.LINE 125

;  126	
;  127		mos_fread(file, (char *)buffer, ESP32_MAGICLENGTH + ESP32_MAGICSTART);
.LINE 127

	LD	BC,36
	PUSH	BC
	PEA	IX+%FFFFFFD8
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  128		if(!containsESP32Header(buffer)) {
.LINE 128

	PEA	IX+%FFFFFFD8
	CALL	_containsESP32Header
	POP	BC
	OR	A,A
	JR	NZ,L_34
;  129			printf("File does not contain valid ESP32 code\r\n");
.LINE 129

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__25
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  130			return EXIT_INVALIDPARAMETER;
.LINE 130

	LD	A,%13
	JR	L_35
;  131		}
L_34:
.LINE 131

;  132	
;  133		mos_flseek(file, 0); // reset to zero, because we read part of the header already
.LINE 133

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_flseek
	POP	BC
	POP	BC
	POP	BC
;  134	
;  135		// Do actual work here
;  136		printf("Updating VDP firmware\r\n");
.LINE 136

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__26
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  137		filesize = getFileSize(file);	
.LINE 137

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFFC),HL
;  138		startVDPupdate(file, filesize);
.LINE 138

	LD	BC,HL
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_startVDPupdate
	POP	BC
	POP	BC
;  139		mos_fclose(file);
.LINE 139

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  140		reset();
.LINE 140

	CALL	_reset
;  141		return 0; // will never return, but let's give the compiler a break
.LINE 141

	XOR	A,A
;  142	}
L_35:
.LINE 142

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_vdp ***************************
;Name                         Addr/Register   Size   Type
;_reset                              IMPORT  -----   function
;_mos_fclose                         IMPORT  -----   function
;_startVDPupdate                     IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_mos_flseek                         IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;buffer                               IX-40     36   variable
;filesize                              IX-4      3   variable
;file                                  IX-1      1   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 49 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_vdp",142,"_update_vdp"
	SEGMENT STRSECT
L__18:
	DB	"Unlocking VDP updater..."
	DB	13,10,0
L__20:
	DB	" failed - incompatible VDP"
	DB	13,10,0
L__22:
	DB	"Error opening \""
	DB	0
L__23:
	DB	"\""
	DB	10,13,0
L__25:
	DB	"File does not contain valid ESP32 code"
	DB	13,10,0
L__26:
	DB	"Updating VDP firmware"
	DB	13,10,0
	SEGMENT CODE
;  143	
;  144	uint8_t update_mos(char *filename) {
_update_mos:
.DEFINE "_update_mos"

.VALUE _update_mos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_mos",144,"_update_mos"

.LINE 144

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -6

.TYPE 14

.ENDEF

.DEFINE "response"

.CLASS 65

.VALUE -7

.TYPE 12

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -10

.TYPE 14

.ENDEF

.DEFINE "state"

.CLASS 65

.VALUE -13

.TYPE 4

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -16

.TYPE 14

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -19

.TYPE 34

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -22

.TYPE 14

.ENDEF

.DEFINE "crcresult"

.CLASS 65

.VALUE -26

.TYPE 15

.ENDEF

.DEFINE "got"

.CLASS 65

.VALUE -29

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -30

.TYPE 12

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -31

.TYPE 12

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -34

.TYPE 14

.ENDEF

.DEFINE "crcexpected"

.CLASS 65

.VALUE -38

.TYPE 15

.ENDEF

.DEFINE "crcbackup"

.CLASS 65

.VALUE -45

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD3
	LD	SP,HL
;  145		UINT32 crcexpected,crcresult,crcbackup;
;  146		UINT24 size = 0;
.LINE 146

	LD	BC,0
	LD	(IX+%FFFFFFFA),BC
;  147		UINT24 got;
;  148		UINT8 file;
;  149		char* ptr = (char*)BUFFER1;
.LINE 149

	LD	BC,327680
	LD	(IX+%FFFFFFED),BC
;  150		UINT8 response;
;  151		UINT8 value;
;  152		UINT24 counter,pagemax, lastpagebytes;
;  153		UINT24 addressto,addressfrom;
;  154		enum states state;
;  155		
;  156		printf("Agon MOS firmware upgrade utility v1.4\n\r\n\r");
.LINE 156

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__28
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  157		
;  158		return 0; // DISABLE FOR NOW
.LINE 158

	XOR	A,A
	JR	L_93
;  159	
;  160		file = mos_fopen(filename, fa_read);
;  161		if(!file)
;  162		{
;  163			printf("Error opening \"%s\"\n\r",filename);
;  164			return EXIT_FILENOTFOUND;
;  165		}
;  166		
;  167		printf("Loading file : %s\n\r",filename);
;  168		printf("File size    : %d byte(s)", size);
;  169	
;  170		// Read file to memory
;  171		while((got = mos_fread(file, ptr, BLOCKSIZE)) > 0)
L_39:
.LINE 171

;  172		{
;  173			ptr += got;
.LINE 173

	LD	BC,(IX+%FFFFFFE3)
	LD	HL,(IX+%FFFFFFED)
	ADD	HL,BC
	LD	(IX+%FFFFFFED),HL
;  174			size += got;
.LINE 174

	LD	BC,(IX+%FFFFFFE3)
	LD	HL,(IX+%FFFFFFFA)
	ADD	HL,BC
	LD	(IX+%FFFFFFFA),HL
;  175			printf("\rFile size    : %d byte(s)", size);
.LINE 175

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__29
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFFA)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__30
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,16384
	PUSH	BC
	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	LD	C,(IX+%FFFFFFE1)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFE3),HL
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_39
;  176		}		
;  177		mos_fclose(file);	
.LINE 177

	LD	C,(IX+%FFFFFFE1)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  178		printf("\rFile size    : %d byte(s)\n\r", size);
.LINE 178

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__32
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFFA)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__33
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  179		if(size > FLASHSIZE)
.LINE 179

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,131072
	OR	A,A
	SBC	HL,BC
	JR	NC,L_43
;  180		{
;  181			printf("Too large for 128KB flash - aborting\r\n");
.LINE 181

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__35
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  182			return 0;
.LINE 182

	XOR	A,A
	JR	L_93
;  183		}
L_43:
.LINE 183

;  184	
;  185		if(!containsMosHeader((uint8_t *)ptr)) {
.LINE 185

	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	CALL	_containsMosHeader
	POP	BC
	OR	A,A
	JR	NZ,L_44
;  186			printf("File does not contain valid MOS ez80 startup code\r\n");
.LINE 186

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__37
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  187			return EXIT_INVALIDPARAMETER;
.LINE 187

	LD	A,%13
	JR	L_93
;  188		}
L_44:
.LINE 188

;  189	
;  190		crcexpected = 0;
.LINE 190

	LD	BC,0
	XOR	A,A
	LD	(IX+%FFFFFFDA),BC
	LD	(IX+%FFFFFFDD),A
;  191		printf("Testing CRC32: 0x%08lx\n\r",crcexpected);
.LINE 191

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__38
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%8
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__39
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  192		crcresult = crc32((char*)BUFFER1, size);
.LINE 192

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFE6),HL
	LD	(IX+%FFFFFFE9),E
;  193		printf("CRC32 result : 0x%08lx\n\r",crcresult);
.LINE 193

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__40
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%8
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	C,(IX+%FFFFFFE9)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%FFFFFFE6)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__41
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  194	
;  195		if(crcexpected != crcresult)
.LINE 195

	LD	HL,(IX+%FFFFFFDA)
	LD	E,(IX+%FFFFFFDD)
	LD	BC,(IX+%FFFFFFE6)
	LD	A,(IX+%FFFFFFE9)
	CALL	__lcmpu
	JR	Z,L_46
;  196		{
;  197			printf("\n\rMismatch - aborting\n\r");
.LINE 197

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__43
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  198			return 0;
.LINE 198

	XOR	A,A
	JR	L_93
;  199		}
L_46:
.LINE 199

;  200		printf("\n\rOK\n\r\n\r");
.LINE 200

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__44
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  201	
;  202		// Ask user to continue
;  203		printf("Erase and program flash (y/n)? ");
.LINE 203

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__45
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  204		response = 0;
.LINE 204

	LD	(IX+%FFFFFFF9),%0
;  205		while((response != 'y') && (response != 'n')) response = getch();
.LINE 205

	JR	L_48
L_49:
	CALL	_getch
	LD	(IX+%FFFFFFF9),A
L_48:
	LD	A,(IX+%FFFFFFF9)
	CP	A,%79
	JR	Z,L_91
	LD	A,(IX+%FFFFFFF9)
	CP	A,%6E
	JR	NZ,L_49
L_91:
;  206		if(response == 'y')
.LINE 206

	LD	A,(IX+%FFFFFFF9)
	CP	A,%79
	JR	NZ,L_90
;  207		{
;  208			printf("\r\nBacking up existing firmware... ");
.LINE 208

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__49
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  209			fastmemcpy(BUFFER2, 0x0, FLASHSIZE);	
.LINE 209

	LD	BC,131072
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,458752
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  210			crcbackup = crc32((char*)0x0, FLASHSIZE);
.LINE 210

	LD	BC,131072
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFD3),HL
	LD	(IX+%FFFFFFD6),E
;  211			
;  212			di();								// prohibit any access to the old MOS firmware
.LINE 212

	di
;  213	
;  214			// start address in flash
;  215			addressto = FLASHSTART;
.LINE 215

	LD	BC,0
	LD	(IX+%FFFFFFEA),BC
;  216			addressfrom = BUFFER1;
.LINE 216

	LD	BC,327680
	LD	(IX+%FFFFFFF6),BC
;  217			
;  218			state = firmware;		
.LINE 218

	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
;  219			while(1)
L_88:
.LINE 219

;  220			{
;  221				switch(state)
.LINE 221

	LD	HL,(IX+%FFFFFFF3)
	CALL	__case8D
	JP	(HL)
L__50:
	DW	2
	DB	0
	DW24	L_50	

	DB	1
	DW24	L_51	

	DW24	L_52	

;  222				{
;  223					case firmware:
L_50:
.LINE 223

;  224						// start address in flash
;  225						addressfrom = BUFFER1;					
.LINE 225

	LD	BC,327680
	LD	(IX+%FFFFFFF6),BC
;  226						break;
.LINE 226

	JR	L_58
;  227					case recover:
L_51:
.LINE 227

;  228						// start address in flash
;  229						addressfrom = BUFFER2;
.LINE 229

	LD	BC,458752
	LD	(IX+%FFFFFFF6),BC
;  230						size = FLASHSIZE;			// entire backup buffer
.LINE 230

	LD	BC,131072
	LD	(IX+%FFFFFFFA),BC
;  231						break;
.LINE 231

	JR	L_58
;  232					default:
L_52:
.LINE 232

;  233						// RESET SYSTEM
;  234						printf("\r\n");
.LINE 234

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__51
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  235						for(counter = 5; counter >0; counter--)
.LINE 235

	LD	BC,5
	LD	(IX+%FFFFFFFD),BC
	JR	L_56
L_54:
;  236						{
;  237							printf("\rReset in %ds",counter);
.LINE 237

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__52
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFFD)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,115
	PUSH	BC
	CALL	___print_uputch
	POP	BC
;  238							delayms(1000);
.LINE 238

	LD	BC,1000
	PUSH	BC
	CALL	_delayms
	POP	BC
	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%FFFFFFFD),IY
;  239						}
L_56:
.LINE 239

	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_54
;  240						putch(12);
.LINE 240

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  241						delayms(500);
.LINE 241

	LD	BC,500
	PUSH	BC
	CALL	_delayms
	POP	BC
;  242						reset();
.LINE 242

	CALL	_reset
;  243				}
L_58:
.LINE 243

;  244		
;  245				// Unprotect and erase flash
;  246				printf("\r\nErasing flash... ");
.LINE 246

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__54
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  247				enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
.LINE 247

	CALL	_enableFlashKeyRegister
;  248				FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
.LINE 248

	XOR	A,A
	OUT0	(250),A
;  249				enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
.LINE 249

	CALL	_enableFlashKeyRegister
;  250				FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
.LINE 250

	LD	A,%5F
	OUT0	(249),A
;  251				
;  252				for(counter = 0; counter < FLASHPAGES; counter++)
.LINE 252

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_64
L_62:
;  253				{
;  254					FLASH_PAGE = counter;
.LINE 254

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;  255					FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 255

	LD	A,%2
	OUT0	(255),A
;  256	
;  257					do
L_60:
.LINE 257

;  258					{
;  259						value = FLASH_PGCTL;
.LINE 259

	IN0	A,(255)
	LD	(IX+%FFFFFFE2),A
;  260					}
;  261					while(value & 0x02);// wait for completion of erase			
.LINE 261

	AND	A,%2
	JR	NZ,L_60
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  262				}
L_64:
.LINE 262

	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_62
;  263				
;  264				printf("\r\nWriting new firmware...\r\n");
.LINE 264

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__57
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  265				
;  266				// determine number of pages to write
;  267				pagemax = size/PAGESIZE;
.LINE 267

	LD	HL,(IX+%FFFFFFFA)
	LD	A,%A
	CALL	__ishru_b
	LD	(IX+%FFFFFFF0),HL
;  268				if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 268

	LD	BC,1023
	LD	HL,(IX+%FFFFFFFA)
	CALL	__iand
	LD	(IX+%FFFFFFD7),HL
	CALL	__icmpzero
	JR	Z,L_67
;  269				{
;  270					pagemax += 1;
.LINE 270

	LD	BC,(IX+%FFFFFFF0)
	INC	BC
	LD	(IX+%FFFFFFF0),BC
;  271					lastpagebytes = size%PAGESIZE;			
.LINE 271

	LD	BC,(IX+%FFFFFFD7)
	LD	(IX+%FFFFFFDE),BC
;  272				}
;  273				else lastpagebytes = PAGESIZE; // normal last page
.LINE 273

	JR	L_75
L_67:
	LD	BC,1024
	LD	(IX+%FFFFFFDE),BC
L_75:
;  274				
;  275				// write out each page to flash
;  276				for(counter = 0; counter < pagemax; counter++)
.LINE 276

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_74
L_72:
;  277				{
;  278					printf("\rWriting flash page %03d/%03d", counter+1, pagemax);
.LINE 278

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__59
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,47
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFF0)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
;  279					
;  280					if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 280

	LD	IY,(IX+%FFFFFFF0)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_70
;  281						fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 281

	LD	BC,(IX+%FFFFFFDE)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF6)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  282						//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, lastpagebytes);
;  283					else 
.LINE 283

	JR	L_71
L_70:
;  284						fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 284

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF6)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_71:
;  285						//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, PAGESIZE);
;  286				
;  287					addressto += PAGESIZE;
.LINE 287

	LD	BC,1024
	LD	HL,(IX+%FFFFFFEA)
	ADD	HL,BC
	LD	(IX+%FFFFFFEA),HL
;  288					addressfrom += PAGESIZE;
.LINE 288

	LD	HL,(IX+%FFFFFFF6)
	ADD	HL,BC
	LD	(IX+%FFFFFFF6),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  289				}
L_74:
.LINE 289

	LD	BC,(IX+%FFFFFFF0)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_72
;  290				lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 290

	CALL	_lockFlashKeyRegister
;  291				printf("\r\n");
.LINE 291

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__62
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  292				
;  293				//Verify correct CRC in flash
;  294				printf("Verifying flash checksum... ");
.LINE 294

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__63
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  295				crcresult = crc32((char*)FLASHSTART, size);
.LINE 295

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFE6),HL
	LD	(IX+%FFFFFFE9),E
;  296	
;  297				if(state == recover) crcexpected = crcbackup;
.LINE 297

	LD	BC,1
	LD	HL,(IX+%FFFFFFF3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_86
	LD	BC,(IX+%FFFFFFD3)
	LD	A,(IX+%FFFFFFD6)
	LD	(IX+%FFFFFFDA),BC
	LD	(IX+%FFFFFFDD),A
L_86:
;  298				
;  299				if(crcresult == crcexpected)
.LINE 299

	LD	HL,(IX+%FFFFFFE6)
	LD	E,(IX+%FFFFFFE9)
	LD	BC,(IX+%FFFFFFDA)
	LD	A,(IX+%FFFFFFDD)
	CALL	__lcmpu
	JR	NZ,L_85
;  300				{
;  301					printf("- OK\r\n");
.LINE 301

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__66
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  302					state = systemreset;
.LINE 302

	LD	BC,2
	LD	(IX+%FFFFFFF3),BC
;  303				}
;  304				else // CRC Failure - next action depends on current state
.LINE 304

	JR	L_88
L_85:
;  305				{	 // User interaction not possible without MOS handling interrupts
;  306					switch(state)
.LINE 306

	LD	HL,(IX+%FFFFFFF3)
	CALL	__case8D
	JP	(HL)
L__67:
	DW	2
	DB	0
	DW24	L_78	

	DB	1
	DW24	L_79	

	DW24	L_82	

;  307					{
;  308						case firmware:
L_78:
.LINE 308

;  309							printf("\r\nError occured during flash write\r\nAttempting to flash backup firmware...\r\n");
.LINE 309

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__68
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  310							state = recover;
.LINE 310

	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
;  311							break;
.LINE 311

	JR	L_88
;  312						case recover:
L_79:
.LINE 312

;  313							printf("\r\nError occured during flash write\r\nBackup recovery failed\r\n");
.LINE 313

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__69
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  314							while(1); // no more options unfortunately, system needs a firmware programmer
L_81:
.LINE 314

	JR	L_81
;  315						default:
L_82:
.LINE 315

;  316							state = recover;
.LINE 316

	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
	JR	L_88
;  317					}
;  318				}
;  319			}		
;  320		}
;  321		else printf("\n\rUser abort\n\r");
L_90:
.LINE 321

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__70
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  322		
;  323		return 0;
.LINE 323

	XOR	A,A
;  324	}
L_93:
.LINE 324

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_mos ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_enableFlashKeyRegister             IMPORT  -----   function
;_reset                              IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;_getch                              IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;__u_ultoa                           IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;_mos_fclose                         IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;crcbackup                            IX-45      4   variable
;G_0                                  IX-41      3   variable
;crcexpected                          IX-38      4   variable
;lastpagebytes                        IX-34      3   variable
;file                                 IX-31      1   variable
;value                                IX-30      1   variable
;got                                  IX-29      3   variable
;crcresult                            IX-26      4   variable
;addressto                            IX-22      3   variable
;ptr                                  IX-19      3   variable
;pagemax                              IX-16      3   variable
;state                                IX-13      3   variable
;addressfrom                          IX-10      3   variable
;response                              IX-7      1   variable
;size                                  IX-6      3   variable
;counter                               IX-3      3   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 54 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_mos",324,"_update_mos"
	SEGMENT STRSECT
L__28:
	DB	"Agon MOS firmware upgrade utility v1.4"
	DB	10,13,10,13,0
L__29:
	DB	13
	DB	"File size    : "
	DB	0
L__30:
	DB	" byte(s)"
	DB	0
L__32:
	DB	13
	DB	"File size    : "
	DB	0
L__33:
	DB	" byte(s)"
	DB	10,13,0
L__35:
	DB	"Too large for 128KB flash - aborting"
	DB	13,10,0
L__37:
	DB	"File does not contain valid MOS ez80 startup code"
	DB	13,10,0
L__38:
	DB	"Testing CRC32: 0x"
	DB	0
L__39:
	DB	10,13,0
L__40:
	DB	"CRC32 result : 0x"
	DB	0
L__41:
	DB	10,13,0
L__43:
	DB	10,13
	DB	"Mismatch - aborting"
	DB	10,13,0
L__44:
	DB	10,13
	DB	"OK"
	DB	10,13,10,13,0
L__45:
	DB	"Erase and program flash (y/n)? "
	DB	0
L__49:
	DB	13,10
	DB	"Backing up existing firmware... "
	DB	0
L__51:
	DB	13,10,0
L__52:
	DB	13
	DB	"Reset in "
	DB	0
L__54:
	DB	13,10
	DB	"Erasing flash... "
	DB	0
L__57:
	DB	13,10
	DB	"Writing new firmware..."
	DB	13,10,0
L__59:
	DB	13
	DB	"Writing flash page "
	DB	0
L__62:
	DB	13,10,0
L__63:
	DB	"Verifying flash checksum... "
	DB	0
L__66:
	DB	"- OK"
	DB	13,10,0
L__68:
	DB	13,10
	DB	"Error occured during flash write"
	DB	13,10
	DB	"Attempting to flash backup firmware..."
	DB	13,10,0
L__69:
	DB	13,10
	DB	"Error occured during flash write"
	DB	13,10
	DB	"Backup recovery failed"
	DB	13,10,0
L__70:
	DB	10,13
	DB	"User abort"
	DB	10,13,0
	SEGMENT CODE
;  325	
;  326	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",326,"_main"

.LINE 326

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  327	
;  328		if(argc != 3) {
.LINE 328

	LD	BC,3
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_99
;  329			usage();
.LINE 329

	CALL	_usage
;  330			return 0;
.LINE 330

	OR	A,A
	SBC	HL,HL
	JR	L_100
;  331		}
L_99:
.LINE 331

;  332	
;  333		if(memcmp(argv[1], "mos", 3) == 0) {
.LINE 333

	PUSH	BC
	LD	BC,L__73
	PUSH	BC
	LD	IY,(IX+%9)
	LEA	HL,IY+%3
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_98
;  334			return update_mos(argv[2]);
.LINE 334

	LD	IY,(IX+%9)
	LEA	HL,IY+%6
	LD	BC,(HL)
	PUSH	BC
	CALL	_update_mos
	POP	BC
	UEXT	HL
	LD	L,A
	JR	L_100
;  335		}
;  336		else {
L_98:
.LINE 336

;  337			if(memcmp(argv[1], "vdp", 3) == 0) {
.LINE 337

	LD	BC,3
	PUSH	BC
	LD	BC,L__75
	PUSH	BC
	LD	IY,(IX+%9)
	LEA	HL,IY+%3
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_96
;  338				return update_vdp(argv[2]);
.LINE 338

	LD	IY,(IX+%9)
	LEA	HL,IY+%6
	LD	BC,(HL)
	PUSH	BC
	CALL	_update_vdp
	POP	BC
	UEXT	HL
	LD	L,A
	JR	L_100
;  339			}
;  340			else {
L_96:
.LINE 340

;  341				usage();
.LINE 341

	CALL	_usage
;  342				return 0;
.LINE 342

	OR	A,A
	SBC	HL,HL
;  343			}
;  344		}
;  345	}
L_100:
.LINE 345

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",345,"_main"
	SEGMENT STRSECT
L__73:
	DB	"mos"
	DB	0
L__75:
	DB	"vdp"
	DB	0
	XREF _memcmp:ROM
	XREF _getFileSize:ROM
	XREF _crc32:ROM
	XREF _delayms:ROM
	XREF _startVDPupdate:ROM
	XREF _reset:ROM
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _enableFlashKeyRegister:ROM
	XREF _mos_flseek:ROM
	XREF _mos_fread:ROM
	XREF _mos_fclose:ROM
	XREF _mos_fopen:ROM
	XREF _getsysvar_scrchar:ROM
	XREF _getch:ROM
	XREF __u_ultoa:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF ___print_fmt:ROM
	XREF __lcmpu:ROM
	XREF __iand:ROM
	XREF __stoiu:ROM
	XREF __icmpzero:ROM
	XREF __case8D:ROM
	XREF __ishru_b:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _update_mos
	XDEF _update_vdp
	XDEF _usage
	XDEF _print_version
	XDEF _containsESP32Header
	XDEF _esp32_magicnumbers
	XDEF _containsMosHeader
	XDEF _mos_magicnumbers
	XDEF _vdp_ota_present
	XDEF _getCharAt
	XDEF _putch
	XDEF _errno
	END
