; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",51
.DEFINE "clock"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "vpd_protocol_flags"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keyascii"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keymods"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorX"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorY"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrchar"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixel"
.VALUE 10
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "audioChannel"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "audioSuccess"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrwidth"
.VALUE 15
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrheight"
.VALUE 17
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrcols"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrrows"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrcolours"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixelIndex"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycode"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keydown"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycount"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc"
.VALUE 26
.CLASS 8
.DIM 6
.TYPE 108
.ENDEF
.DEFINE "rtc_spare"
.VALUE 32
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.DEFINE "keydelay"
.VALUE 34
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyrate"
.VALUE 36
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyled"
.VALUE 38
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrmode"
.VALUE 39
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc_enable"
.VALUE 40
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseX"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseY"
.VALUE 43
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseButtons"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseWheel"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseXDelta"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseYDelta"
.VALUE 49
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME5"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME6"
	SEGMENT BSS
_errno:
	DS	3
.DEFINE "errno"
.ALIAS "_errno"
.CLASS 83
.VALUE _errno
.TYPE 4
.ENDEF
	SEGMENT DATA
_flashmos:
	DB	0
.DEFINE "flashmos"
.ALIAS "_flashmos"
.CLASS 69
.VALUE _flashmos
.TYPE 12
.ENDEF
	SEGMENT BSS
_mosfilename:
	DS	256
.DEFINE "mosfilename"
.ALIAS "_mosfilename"
.CLASS 83
.VALUE _mosfilename
.DIM 256
.TYPE 98
.ENDEF
_moscrc:
	DS	4*1
.DEFINE "moscrc"
.ALIAS "_moscrc"
.CLASS 83
.VALUE _moscrc
.TYPE 15
.ENDEF
	SEGMENT DATA
_flashvdp:
	DB	0
.DEFINE "flashvdp"
.ALIAS "_flashvdp"
.CLASS 69
.VALUE _flashvdp
.TYPE 12
.ENDEF
	SEGMENT BSS
_vdpfilename:
	DS	256
.DEFINE "vdpfilename"
.ALIAS "_vdpfilename"
.CLASS 83
.VALUE _vdpfilename
.DIM 256
.TYPE 98
.ENDEF
_vdpcrc:
	DS	4*1
.DEFINE "vdpcrc"
.ALIAS "_vdpcrc"
.CLASS 83
.VALUE _vdpcrc
.TYPE 15
.ENDEF
	SEGMENT DATA
_silent:
	DB	0
.DEFINE "silent"
.ALIAS "_silent"
.CLASS 69
.VALUE _silent
.TYPE 12
.ENDEF
;    1	/*
;    2	 * Title:			Agon firmware upgrade utility
;    3	 * Author:			Jeroen Venema
;    4	 * Created:			17/12/2022
;    5	 * Last Updated:	14/10/2023
;    6	 * 
;    7	 * Modinfo:
;    8	 * 17/12/2022:		Initial version
;    9	 * 05/04/2022:		Changed timer to 5sec at reset.
;   10	 *                  Sends cls just before reset
;   11	 * 07/06/2023:		Included faster crc32, by Leigh Brown
;   12	 * 14/10/2023:		VDP update code, MOS update rewritten for simplicity
;   13	 */
;   14	
;   15	#include <ez80.h>
;   16	#include <stdio.h>
;   17	#include <stdlib.h>
;   18	#include <ERRNO.H>
;   19	#include <ctype.h>
;   20	#include "mos-interface.h"
;   21	#include "flash.h"
;   22	#include "agontimer.h"
;   23	#include "crc32.h"
;   24	#include "filesize.h"
;   25	#include "./stdint.h"
;   26	#include <string.h>
;   27	
;   28	#define UNLOCKMATCHLENGTH 9
;   29	#define EXIT_FILENOTFOUND	4
;   30	#define EXIT_INVALIDPARAMETER	19
;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
;   32	#define DEFAULT_VDPFIRMWARE	"firmware.bin"
;   33	
;   34	#define CMDUNKNOWN	0
;   35	#define CMDALL		1
;   36	#define CMDMOS		2
;   37	#define CMDVDP		3
;   38	#define CMDSILENT	4
;   39	
;   40	int errno; // needed by standard library
;   41	enum states{firmware,retry,systemreset};
;   42	
;   43	bool		flashmos = false;
;   44	char		mosfilename[256];
;   45	uint32_t	moscrc;
;   46	bool		flashvdp = false;
;   47	char		vdpfilename[256];
;   48	uint32_t	vdpcrc;
;   49	bool		silent = false;
	SEGMENT CODE
;   50	
;   51	// separate putch function that doesn't rely on a running MOS firmware
;   52	// UART0 initialization done by MOS firmware previously
;   53	// This utility doesn't run without MOS to load it anyway
;   54	int putch(int c)
;   55	{
_putch:
.DEFINE "_putch"

.VALUE _putch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "putch",55,"_putch"

.LINE 55

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 4

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
.ENDEF

;   56		UINT8 lsr,temt;
;   57		
;   58		while((UART0_LSR & 0x40) == 0);
L_1:
.LINE 58

	IN0	A,(197)
	AND	A,%40
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_1
;   59		UART0_THR = c;
.LINE 59

	LD	A,(IX+%6)
	OUT0	(192),A
;   60		return c;
.LINE 60

	LD	HL,(IX+%6)
;   61	}
.LINE 61

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch",61,"_putch"
;   62	
;   63	void beep(unsigned int number) {
_beep:
.DEFINE "_beep"

.VALUE _beep

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "beep",63,"_beep"

.LINE 63

.DEFINE "number"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   64		while(number--) {
.LINE 64

	JR	L_5
L_6:
;   65			putch(7);
.LINE 65

	LD	BC,7
	PUSH	BC
	CALL	_putch
	POP	BC
;   66			delayms(250);
.LINE 66

	LD	BC,250
	PUSH	BC
	CALL	_delayms
	POP	BC
;   67		}
L_5:
.LINE 67

	LD	HL,(IX+%6)
	LD	IY,(IX+%6)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%6),IY
	CALL	__icmpzero
	JR	NZ,L_6
;   68	}
.LINE 68

	LD	SP,IX
	POP	IX
	RET	


;**************************** _beep ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_putch                              IMPORT  -----   function
;number                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "beep",68,"_beep"
;   69	
;   70	uint8_t getCharAt(uint16_t x, uint16_t y) {
_getCharAt:
.DEFINE "_getCharAt"

.VALUE _getCharAt

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getCharAt",70,"_getCharAt"

.LINE 70

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "sysvars"

.CLASS 65

.VALUE -3

.TAG "NONAME3"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   71		sysvar_t *sysvars = getsysvars();
.LINE 71

	CALL	_getsysvars
	LD	(IX+%FFFFFFFD),HL
;   72		delayms(20);
.LINE 72

	LD	BC,20
	PUSH	BC
	CALL	_delayms
	POP	BC
;   73		putch(23);
.LINE 73

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   74		putch(0);
.LINE 74

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   75		putch(131);
.LINE 75

	LD	BC,131
	PUSH	BC
	CALL	_putch
	POP	BC
;   76		putch(x & 0xFF);
.LINE 76

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   77		putch((x >> 8) & 0xFF);
.LINE 77

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   78		putch(y & 0xFF);
.LINE 78

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   79		putch((y >> 8) & 0xFF);
.LINE 79

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   80		delayms(100);
.LINE 80

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;   81		return sysvars->scrchar;
.LINE 81

	LD	IY,(IX+%FFFFFFFD)
	LD	A,(IY+%9)
;   82	}
.LINE 82

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCharAt ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;_getsysvars                         IMPORT  -----   function
;sysvars                               IX-3      3   variable
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getCharAt",82,"_getCharAt"
;   83	
;   84	bool vdp_ota_present(void) {
_vdp_ota_present:
.DEFINE "_vdp_ota_present"

.VALUE _vdp_ota_present

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_ota_present",84,"_vdp_ota_present"

.LINE 84

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "test"

.CLASS 65

.VALUE -11

.DIM 9

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF5
	LD	SP,HL
;   85		char test[UNLOCKMATCHLENGTH];
;   86		uint16_t n;
;   87	
;   88		putch(23);
.LINE 88

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   89		putch(0);
.LINE 89

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   90		putch(0xA1);
.LINE 90

	LD	BC,161
	PUSH	BC
	CALL	_putch
	POP	BC
;   91		putch(0);
.LINE 91

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   92		printf("unlock");
.LINE 92

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__5
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   93	
;   94		for(n = 0; n < UNLOCKMATCHLENGTH+1; n++) test[n] = getCharAt(n+8, 3);
.LINE 94

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_12
L_10:
	LD	BC,3
	PUSH	BC
	LD	IY,(IX+%FFFFFFFE)
	LEA	BC,IY+%8
	PUSH	BC
	CALL	_getCharAt
	POP	BC
	POP	BC
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IX+%FFFFFFF5
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
L_12:
	LD.LIS	BC,10
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_10
;   95		// 3 - line on-screen
;   96		if(memcmp(test, "unlocked!",UNLOCKMATCHLENGTH) == 0) return true;
.LINE 96

	LD	BC,9
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	PEA	IX+%FFFFFFF5
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_14
	LD	A,%1
	JR	L_16
;   97		else return false;
L_14:
.LINE 97

	XOR	A,A
;   98	}
L_16:
.LINE 98

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_ota_present ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;test                                 IX-11      9   variable
;n                                     IX-2      2   variable


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_ota_present",98,"_vdp_ota_present"
	SEGMENT STRSECT
L__5:
	DB	"unlock"
	DB	0
L__7:
	DB	"unlocked!"
	DB	0
	SEGMENT DATA
_mos_magicnumbers:
	DB	243
	DB	237
	DB	125
	DB	91
	DB	195
.DEFINE "mos_magicnumbers"
.ALIAS "_mos_magicnumbers"
.CLASS 69
.VALUE _mos_magicnumbers
.DIM 5
.TYPE 108
.ENDEF
;   99	
;  100	uint8_t mos_magicnumbers[] = {0xF3, 0xED, 0x7D, 0x5B, 0xC3};
	SEGMENT CODE
;  101	#define MOS_MAGICLENGTH 5
;  102	bool containsMosHeader(uint8_t *filestart) {
_containsMosHeader:
.DEFINE "_containsMosHeader"

.VALUE _containsMosHeader

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsMosHeader",102,"_containsMosHeader"

.LINE 102

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  103		uint8_t n;
;  104		bool match = true;
.LINE 104

	LD	(IX+%FFFFFFFE),%1
;  105	
;  106		for(n = 0; n < MOS_MAGICLENGTH; n++) if(mos_magicnumbers[n] != filestart[n]) match = false;
.LINE 106

	LD	(IX+%FFFFFFFF),%0
	JR	L_21
L_19:
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_mos_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_20
	LD	(IX+%FFFFFFFE),%0
L_20:
	INC	(IX+%FFFFFFFF)
L_21:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%5
	JR	C,L_19
;  107		return match;
.LINE 107

	LD	A,(IX+%FFFFFFFE)
;  108	}
.LINE 108

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsMosHeader ***************************
;Name                         Addr/Register   Size   Type
;_mos_magicnumbers                   STATIC      5   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsMosHeader",108,"_containsMosHeader"
	SEGMENT DATA
_esp32_magicnumbers:
	DB	50
	DB	84
	DB	205
	DB	171
.DEFINE "esp32_magicnumbers"
.ALIAS "_esp32_magicnumbers"
.CLASS 69
.VALUE _esp32_magicnumbers
.DIM 4
.TYPE 108
.ENDEF
;  109	
;  110	uint8_t esp32_magicnumbers[] = {0x32, 0x54, 0xCD, 0xAB};
	SEGMENT CODE
;  111	#define ESP32_MAGICLENGTH 4
;  112	#define ESP32_MAGICSTART 0x20
;  113	bool containsESP32Header(uint8_t *filestart) {
_containsESP32Header:
.DEFINE "_containsESP32Header"

.VALUE _containsESP32Header

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsESP32Header",113,"_containsESP32Header"

.LINE 113

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  114		uint8_t n;
;  115		bool match = true;
.LINE 115

	LD	(IX+%FFFFFFFE),%1
;  116	
;  117		filestart += ESP32_MAGICSTART; // start of ESP32 magic header
.LINE 117

	LD	IY,(IX+%6)
	LEA	IY,IY+%20
	LD	(IX+%6),IY
;  118		for(n = 0; n < ESP32_MAGICLENGTH; n++) {
.LINE 118

	LD	(IX+%FFFFFFFF),%0
	JR	L_28
L_26:
;  119			if(esp32_magicnumbers[n] != filestart[n]) match = false;
.LINE 119

	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_esp32_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_27
	LD	(IX+%FFFFFFFE),%0
;  120		}
L_27:
.LINE 120

	INC	(IX+%FFFFFFFF)
L_28:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%4
	JR	C,L_26
;  121		return match;
.LINE 121

	LD	A,(IX+%FFFFFFFE)
;  122	}
.LINE 122

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsESP32Header ***************************
;Name                         Addr/Register   Size   Type
;_esp32_magicnumbers                 STATIC      4   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsESP32Header",122,"_containsESP32Header"
;  123	
;  124	void print_version(void) {
_print_version:
.DEFINE "_print_version"

.VALUE _print_version

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "print_version",124,"_print_version"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  125		printf("Agon firmware upgrade utility v1.6\n\r\n\r");
.LINE 125

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__16
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  126	}
.LINE 126

	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_version ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "print_version",126,"_print_version"
	SEGMENT STRSECT
L__16:
	DB	"Agon firmware upgrade utility v1.6"
	DB	10,13,10,13,0
	SEGMENT CODE
;  127	
;  128	void usage(void) {
_usage:
.DEFINE "_usage"

.VALUE _usage

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "usage",128,"_usage"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  129		print_version();
.LINE 129

	CALL	_print_version
;  130		printf("Usage: FLASH [full | [mos <filename>] [vdp <filename>]] <-s|-silent>\n\r");
.LINE 130

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__18
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  131	}
.LINE 131

	LD	SP,IX
	POP	IX
	RET	


;**************************** _usage ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "usage",131,"_usage"
	SEGMENT STRSECT
L__18:
	DB	"Usage: FLASH [full | [mos <filename>] [vdp <filename>]] <-s|-silent>"
	DB	10,13,0
	SEGMENT CODE
;  132	
;  133	typedef enum {
;  134		MOS,
;  135		VDP
;  136	} flashtype;
;  137	
;  138	bool getResponse(void) {
_getResponse:
.DEFINE "_getResponse"

.VALUE _getResponse

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getResponse",138,"_getResponse"

.LINE 138

.DEFINE "response"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  139		uint8_t response = 0;
.LINE 139

	LD	(IX+%FFFFFFFF),%0
;  140	
;  141		printf("Flash firmware (y/n)?");
.LINE 141

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__20
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  142		while((response != 'y') && (response != 'n')) response = tolower(getch());
.LINE 142

	JR	L_34
L_35:
	CALL	_getch
	LD	B,A
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	HL
	CALL	_tolower
	POP	BC
	LD	(IX+%FFFFFFFF),L
L_34:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%79
	JR	Z,L_38
	LD	A,(IX+%FFFFFFFF)
	CP	A,%6E
	JR	NZ,L_35
L_38:
;  143		if(response == 'n') printf("\r\nUser abort\n\r\n\r");
.LINE 143

	LD	A,(IX+%FFFFFFFF)
	CP	A,%6E
	JR	NZ,L_37
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__24
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  144		else printf("\r\n\r\n");
.LINE 144

	JR	L_39
L_37:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__25
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_39:
;  145		return response == 'y';
.LINE 145

	LD	A,(IX+%FFFFFFFF)
	CP	A,%79
	JR	NZ,L__27
	LD	A,%1
	JR	L__28
L__27:
	XOR	A,A
L__28:
;  146	}
.LINE 146

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getResponse ***************************
;Name                         Addr/Register   Size   Type
;_getch                              IMPORT  -----   function
;_tolower                            IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;response                              IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getResponse",146,"_getResponse"
	SEGMENT STRSECT
L__20:
	DB	"Flash firmware (y/n)?"
	DB	0
L__24:
	DB	13,10
	DB	"User abort"
	DB	10,13,10,13,0
L__25:
	DB	13,10,13,10,0
	SEGMENT CODE
;  147	
;  148	uint8_t update_vdp(char *filename) {
_update_vdp:
.DEFINE "_update_vdp"

.VALUE _update_vdp

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_vdp",148,"_update_vdp"

.LINE 148

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -4

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;  149		uint8_t file;
;  150		uint24_t filesize;
;  151		uint24_t size, n;
;  152	
;  153		putch(12); // cls
.LINE 153

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  154		print_version();	
.LINE 154

	CALL	_print_version
;  155		printf("Unlocking VDP updater...\r\n");
.LINE 155

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__30
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  156		
;  157		if(!vdp_ota_present()) {
.LINE 157

	CALL	_vdp_ota_present
	OR	A,A
	JR	NZ,L_42
;  158			printf(" failed - incompatible VDP\r\n");
.LINE 158

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__32
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  159			beep(5);
.LINE 159

	LD	BC,5
	PUSH	BC
	CALL	_beep
	POP	BC
;  160			return 0;
.LINE 160

	XOR	A,A
	JR	L_43
;  161		}
L_42:
.LINE 161

;  162	
;  163		file = mos_fopen(filename, fa_read);
.LINE 163

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  164		// Do actual work here
;  165		printf("Updating VDP firmware\r\n");
.LINE 165

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__33
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  166		filesize = getFileSize(file);	
.LINE 166

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFFC),HL
;  167		startVDPupdate(file, filesize);
.LINE 167

	LD	BC,HL
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_startVDPupdate
	POP	BC
	POP	BC
;  168		mos_fclose(file);
.LINE 168

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  169		return 0;
.LINE 169

	XOR	A,A
;  170	}
L_43:
.LINE 170

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_vdp ***************************
;Name                         Addr/Register   Size   Type
;_mos_fclose                         IMPORT  -----   function
;_startVDPupdate                     IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;filesize                              IX-4      3   variable
;file                                  IX-1      1   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_vdp",170,"_update_vdp"
	SEGMENT STRSECT
L__30:
	DB	"Unlocking VDP updater..."
	DB	13,10,0
L__32:
	DB	" failed - incompatible VDP"
	DB	13,10,0
L__33:
	DB	"Updating VDP firmware"
	DB	13,10,0
	SEGMENT CODE
;  171	
;  172	bool update_mos(char *filename) {
_update_mos:
.DEFINE "_update_mos"

.VALUE _update_mos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_mos",172,"_update_mos"

.LINE 172

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "attempt"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -9

.TYPE 14

.ENDEF

.DEFINE "success"

.CLASS 65

.VALUE -10

.TYPE 12

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -13

.TYPE 14

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -16

.TYPE 14

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -17

.TYPE 12

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -20

.TYPE 34

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -23

.TYPE 14

.ENDEF

.DEFINE "got"

.CLASS 65

.VALUE -26

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -27

.TYPE 12

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -30

.TYPE 14

.ENDEF

.DEFINE "crcresult"

.CLASS 65

.VALUE -34

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFDB
	LD	SP,HL
;  173		uint32_t crcresult;
;  174		uint24_t got;
;  175		uint8_t file;
;  176		char* ptr = (char*)BUFFER1;
.LINE 176

	LD	BC,327680
	LD	(IX+%FFFFFFEC),BC
;  177		uint8_t value;
;  178		uint24_t counter,pagemax, lastpagebytes;
;  179		uint24_t addressto,addressfrom;
;  180		uint24_t filesize;
;  181		int attempt;
;  182		bool success = false;
.LINE 182

	LD	(IX+%FFFFFFF6),%0
;  183	
;  184		putch(12); // cls
.LINE 184

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  185		print_version();	
.LINE 185

	CALL	_print_version
;  186		
;  187		printf("Programming MOS firmware to ez80 flash...\r\n\r\n");
.LINE 187

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__35
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  188		printf("Reading MOS firmware");
.LINE 188

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__36
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  189		file = mos_fopen(filename, fa_read);
.LINE 189

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFEF),A
;  190		filesize = getFileSize(file);
.LINE 190

	LD	C,(IX+%FFFFFFEF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFE9),HL
;  191		// Read file to memory
;  192		crc32_initialize();
.LINE 192

	CALL	_crc32_initialize
;  193		while((got = mos_fread(file, ptr, BLOCKSIZE)) > 0) {
.LINE 193

	JR	L_44
L_45:
;  194			crc32(ptr, got);
.LINE 194

	LD	BC,(IX+%FFFFFFE6)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEC)
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  195			ptr += got;
.LINE 195

	LD	BC,(IX+%FFFFFFE6)
	LD	HL,(IX+%FFFFFFEC)
	ADD	HL,BC
	LD	(IX+%FFFFFFEC),HL
;  196			putch('.');
.LINE 196

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  197		}
L_44:
.LINE 197

	LD	BC,16384
	PUSH	BC
	LD	BC,(IX+%FFFFFFEC)
	PUSH	BC
	LD	C,(IX+%FFFFFFEF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFE6),HL
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_45
;  198		crcresult = crc32_finalize();
.LINE 198

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFDE),HL
	LD	(IX+%FFFFFFE1),E
;  199		printf("\r\n");
.LINE 199

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__38
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  200		// Final memory check to given crc32
;  201		if(crcresult != moscrc) {
.LINE 201

	LD	HL,(_moscrc)
	LD	A,(_moscrc+3)
	LD	E,A
	LD	BC,(IX+%FFFFFFDE)
	LD	A,(IX+%FFFFFFE1)
	CALL	__lcmpu
	JR	Z,L_48
;  202			printf("Error reading file to memory\r\n");
.LINE 202

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__40
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  203			return false;
.LINE 203

	XOR	A,A
	JR	L_77
;  204		}
L_48:
.LINE 204

;  205		printf("\r\n");	
.LINE 205

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__41
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  206		// Actual work here	
;  207		di();								// prohibit any access to the old MOS firmware
.LINE 207

	di
;  208	
;  209		attempt = 0;
.LINE 209

	LD	BC,0
	LD	(IX+%FFFFFFFA),BC
;  210		while((!success) && (attempt < 3)) {
.LINE 210

	JR	L_74
L_75:
;  211			// start address in flash
;  212			addressto = FLASHSTART;
.LINE 212

	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
;  213			addressfrom = BUFFER1;
.LINE 213

	LD	BC,327680
	LD	(IX+%FFFFFFF0),BC
;  214			// Write attempt#
;  215			if(attempt > 0) printf("Retry attempt #%d\r\n", attempt);
.LINE 215

	LD	BC,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	P,L_51
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__43
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFFA)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__44
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_51:
;  216			// Unprotect and erase flash
;  217			printf("Erasing flash... ");
.LINE 217

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__45
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  218			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
.LINE 218

	CALL	_enableFlashKeyRegister
;  219			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
.LINE 219

	XOR	A,A
	OUT0	(250),A
;  220			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
.LINE 220

	CALL	_enableFlashKeyRegister
;  221			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
.LINE 221

	LD	A,%5F
	OUT0	(249),A
;  222			
;  223			for(counter = 0; counter < FLASHPAGES; counter++)
.LINE 223

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_57
L_55:
;  224			{
;  225				FLASH_PAGE = counter;
.LINE 225

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;  226				FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 226

	LD	A,%2
	OUT0	(255),A
;  227	
;  228				do
L_53:
.LINE 228

;  229				{
;  230					value = FLASH_PGCTL;
.LINE 230

	IN0	A,(255)
	LD	(IX+%FFFFFFE5),A
;  231				}
;  232				while(value & 0x02);// wait for completion of erase			
.LINE 232

	AND	A,%2
	JR	NZ,L_53
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  233			}
L_57:
.LINE 233

	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_55
;  234			printf("\r\n");
.LINE 234

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__48
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  235					
;  236			// determine number of pages to write
;  237			pagemax = filesize/PAGESIZE;
.LINE 237

	LD	HL,(IX+%FFFFFFE9)
	LD	A,%A
	CALL	__ishru_b
	LD	(IX+%FFFFFFF7),HL
;  238			if(filesize%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 238

	LD	BC,1023
	LD	HL,(IX+%FFFFFFE9)
	CALL	__iand
	LD	(IX+%FFFFFFDB),HL
	CALL	__icmpzero
	JR	Z,L_60
;  239			{
;  240				pagemax += 1;
.LINE 240

	LD	BC,(IX+%FFFFFFF7)
	INC	BC
	LD	(IX+%FFFFFFF7),BC
;  241				lastpagebytes = filesize%PAGESIZE;			
.LINE 241

	LD	BC,(IX+%FFFFFFDB)
	LD	(IX+%FFFFFFE2),BC
;  242			}
;  243			else lastpagebytes = PAGESIZE; // normal last page
.LINE 243

	JR	L_68
L_60:
	LD	BC,1024
	LD	(IX+%FFFFFFE2),BC
L_68:
;  244			
;  245			// write out each page to flash
;  246			for(counter = 0; counter < pagemax; counter++)
.LINE 246

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_67
L_65:
;  247			{
;  248				printf("\rWriting flash page %03d/%03d", counter+1, pagemax);
.LINE 248

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__50
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,47
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFF7)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
;  249				
;  250				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 250

	LD	IY,(IX+%FFFFFFF7)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_63
;  251					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 251

	LD	BC,(IX+%FFFFFFE2)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF0)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF3)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  252					//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, lastpagebytes);
;  253				else 
.LINE 253

	JR	L_64
L_63:
;  254					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 254

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF0)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF3)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_64:
;  255					//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, PAGESIZE);
;  256			
;  257				addressto += PAGESIZE;
.LINE 257

	LD	BC,1024
	LD	HL,(IX+%FFFFFFF3)
	ADD	HL,BC
	LD	(IX+%FFFFFFF3),HL
;  258				addressfrom += PAGESIZE;
.LINE 258

	LD	HL,(IX+%FFFFFFF0)
	ADD	HL,BC
	LD	(IX+%FFFFFFF0),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  259			}
L_67:
.LINE 259

	LD	BC,(IX+%FFFFFFF7)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_65
;  260			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 260

	CALL	_lockFlashKeyRegister
;  261			printf("\r\nCalculating Flash CRC - ");
.LINE 261

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__53
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  262			crc32_initialize();
.LINE 262

	CALL	_crc32_initialize
;  263			crc32(FLASHSTART, filesize);
.LINE 263

	LD	BC,(IX+%FFFFFFE9)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  264			crcresult = crc32_finalize();
.LINE 264

	CALL	_crc32_finalize
	LD	BC,HL
	LD	(IX+%FFFFFFDE),BC
	LD	(IX+%FFFFFFE1),E
;  265			if(crcresult == moscrc) {
.LINE 265

	LD	HL,(_moscrc)
	LD	A,(_moscrc+3)
	LD	E,A
	LD	A,(IX+%FFFFFFE1)
	CALL	__lcmpu
	JR	NZ,L_71
;  266				printf("OK\r\n");
.LINE 266

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__55
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  267				success = true;
.LINE 267

	LD	(IX+%FFFFFFF6),%1
;  268			}
;  269			else {
.LINE 269

	JR	L_73
L_71:
;  270				printf("ERROR\r\n");
.LINE 270

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__56
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  271			}
L_73:
.LINE 271

;  272			attempt++;
.LINE 272

	LD	BC,(IX+%FFFFFFFA)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
;  273		}
L_74:
.LINE 273

	LD	A,(IX+%FFFFFFF6)
	OR	A,A
	JR	NZ,L_76
	LD	BC,3
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	JP	M,L_75
L_76:
;  274		printf("\r\n");
.LINE 274

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__59
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  275		return success;
.LINE 275

	LD	A,(IX+%FFFFFFF6)
;  276	}
L_77:
.LINE 276

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_mos ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;_enableFlashKeyRegister             IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;_moscrc                             STATIC      4   variable
;_crc32_finalize                     IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;_crc32_initialize                   IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;G_0                                  IX-37      3   variable
;crcresult                            IX-34      4   variable
;lastpagebytes                        IX-30      3   variable
;value                                IX-27      1   variable
;got                                  IX-26      3   variable
;filesize                             IX-23      3   variable
;ptr                                  IX-20      3   variable
;file                                 IX-17      1   variable
;addressfrom                          IX-16      3   variable
;addressto                            IX-13      3   variable
;success                              IX-10      1   variable
;pagemax                               IX-9      3   variable
;attempt                               IX-6      3   variable
;counter                               IX-3      3   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 46 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_mos",276,"_update_mos"
	SEGMENT STRSECT
L__35:
	DB	"Programming MOS firmware to ez80 flash..."
	DB	13,10,13,10,0
L__36:
	DB	"Reading MOS firmware"
	DB	0
L__38:
	DB	13,10,0
L__40:
	DB	"Error reading file to memory"
	DB	13,10,0
L__41:
	DB	13,10,0
L__43:
	DB	"Retry attempt #"
	DB	0
L__44:
	DB	13,10,0
L__45:
	DB	"Erasing flash... "
	DB	0
L__48:
	DB	13,10,0
L__50:
	DB	13
	DB	"Writing flash page "
	DB	0
L__53:
	DB	13,10
	DB	"Calculating Flash CRC - "
	DB	0
L__55:
	DB	"OK"
	DB	13,10,0
L__56:
	DB	"ERROR"
	DB	13,10,0
L__59:
	DB	13,10,0
	SEGMENT CODE
;  277	
;  278	void echoVDP(uint8_t value) {
_echoVDP:
.DEFINE "_echoVDP"

.VALUE _echoVDP

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "echoVDP",278,"_echoVDP"

.LINE 278

.DEFINE "value"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  279		putch(23);
.LINE 279

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  280		putch(0);
.LINE 280

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  281		putch(0x80);
.LINE 281

	LD	BC,128
	PUSH	BC
	CALL	_putch
	POP	BC
;  282		putch(value);
.LINE 282

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  283		delayms(100);
.LINE 283

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;  284	}
.LINE 284

	LD	SP,IX
	POP	IX
	RET	


;**************************** _echoVDP ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_putch                              IMPORT  -----   function
;value                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "echoVDP",284,"_echoVDP"
;  285	
;  286	int getCommand(const char *command) {
_getCommand:
.DEFINE "_getCommand"

.VALUE _getCommand

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "getCommand",286,"_getCommand"

.LINE 286

.DEFINE "command"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  287		if(memcmp(command, "all", 4) == 0) return CMDALL;
.LINE 287

	LD	BC,4
	PUSH	BC
	LD	BC,L__62
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_81
	LD	HL,1
	JR	L_87
L_81:
;  288		if(memcmp(command, "mos", 3) == 0) return CMDMOS;
.LINE 288

	LD	BC,3
	PUSH	BC
	LD	BC,L__64
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_83
	LD	HL,2
	JR	L_87
L_83:
;  289		if(memcmp(command, "vdp", 3) == 0) return CMDVDP;
.LINE 289

	LD	BC,3
	PUSH	BC
	LD	BC,L__66
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_85
	LD	HL,3
	JR	L_87
L_85:
;  290		if(memcmp(command, "silent", 6) == 0) return CMDSILENT;
.LINE 290

	LD	BC,6
	PUSH	BC
	LD	BC,L__68
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_86
	LD	HL,4
	JR	L_87
L_86:
;  291		return CMDUNKNOWN;
.LINE 291

	OR	A,A
	SBC	HL,HL
;  292	}
L_87:
.LINE 292

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCommand ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;command                               IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getCommand",292,"_getCommand"
	SEGMENT STRSECT
L__62:
	DB	"all"
	DB	0
L__64:
	DB	"mos"
	DB	0
L__66:
	DB	"vdp"
	DB	0
L__68:
	DB	"silent"
	DB	0
	SEGMENT CODE
;  293	
;  294	bool parseCommands(int argc, char *argv[]) {
_parseCommands:
.DEFINE "_parseCommands"

.VALUE _parseCommands

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "parseCommands",294,"_parseCommands"

.LINE 294

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "argcounter"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "command"

.CLASS 65

.VALUE -15

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF1
	LD	SP,HL
;  295		int argcounter;
;  296		int command;
;  297	
;  298		argcounter = 1;
.LINE 298

	LD	BC,1
	LD	(IX+%FFFFFFFD),BC
;  299		while(argcounter < argc) {
.LINE 299

	JR	L_114
L_115:
;  300			command = getCommand(argv[argcounter]);
.LINE 300

	LD	HL,(IX+%FFFFFFFD)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_getCommand
	POP	BC
	LD	(IX+%FFFFFFF1),HL
;  301			switch(command) {
.LINE 301

	CALL	__seqcaseD
	JP	(HL)
L__71:
	DW	5
	DW	0
	DB	0
	DW24	L_88	

	DW24	L_89	

	DW24	L_93	

	DW24	L_101	

	DW24	L_109	

	DW24	L_113	

;  302				case CMDUNKNOWN:
L_88:
.LINE 302

;  303					return false;
.LINE 303

	XOR	A,A
	JR	L_122
;  304					break;
;  305				case CMDALL:
L_89:
.LINE 305

;  306					if(flashmos || flashvdp) return false;
.LINE 306

	LD	A,(_flashmos)
	OR	A,A
	JR	NZ,L_91
	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_92
L_91:
	XOR	A,A
	JR	L_122
L_92:
;  307					strcpy(mosfilename, DEFAULT_MOSFIRMWARE);
.LINE 307

	LD	BC,L__74
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  308					strcpy(vdpfilename, DEFAULT_VDPFIRMWARE);
.LINE 308

	LD	BC,L__75
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  309					flashmos = true;
.LINE 309

	LD	A,%1
	LD	(_flashmos),A
;  310					flashvdp = true;
.LINE 310

	LD	(_flashvdp),A
;  311					break;
.LINE 311

	JR	L_113
;  312				case CMDMOS:
L_93:
.LINE 312

;  313					if(flashmos) return false;
.LINE 313

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_99
	XOR	A,A
	JR	L_122
L_99:
;  314					if((argc > (argcounter+1)) && (getCommand(argv[argcounter + 1]) == CMDUNKNOWN)) {
.LINE 314

	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
	LD	BC,(IX+%6)
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	JP	P,L_98
	LD	HL,(IX+%FFFFFFFA)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_getCommand
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_98
;  315						strcpy(mosfilename, argv[argcounter + 1]);
.LINE 315

	LD	HL,(IX+%FFFFFFFA)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  316						argcounter++;
.LINE 316

	LD	BC,(IX+%FFFFFFFA)
	LD	(IX+%FFFFFFFD),BC
;  317					}
;  318					else {
.LINE 318

	JR	L_100
L_98:
;  319						strcpy(mosfilename, DEFAULT_MOSFIRMWARE);
.LINE 319

	LD	BC,L__79
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  320					}
L_100:
.LINE 320

;  321					flashmos = true;
.LINE 321

	LD	A,%1
	LD	(_flashmos),A
;  322					break;
.LINE 322

	JR	L_113
;  323				case CMDVDP:
L_101:
.LINE 323

;  324					if(flashvdp) return false;
.LINE 324

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_107
	XOR	A,A
	JR	L_122
L_107:
;  325					if((argc > (argcounter+1)) && (getCommand(argv[argcounter + 1]) == CMDUNKNOWN)) {
.LINE 325

	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFF7),BC
	LD	BC,(IX+%6)
	LD	HL,(IX+%FFFFFFF7)
	OR	A,A
	SBC	HL,BC
	JP	P,L_106
	LD	HL,(IX+%FFFFFFF7)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_getCommand
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_106
;  326						strcpy(vdpfilename, argv[argcounter + 1]);
.LINE 326

	LD	HL,(IX+%FFFFFFF7)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  327						argcounter++;
.LINE 327

	LD	BC,(IX+%FFFFFFF7)
	LD	(IX+%FFFFFFFD),BC
;  328					}
;  329					else {
.LINE 329

	JR	L_108
L_106:
;  330						strcpy(vdpfilename, DEFAULT_VDPFIRMWARE);
.LINE 330

	LD	BC,L__83
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  331					}
L_108:
.LINE 331

;  332					flashvdp = true;
.LINE 332

	LD	A,%1
	LD	(_flashvdp),A
;  333					break;
.LINE 333

	JR	L_113
;  334				case CMDSILENT:
L_109:
.LINE 334

;  335					if(silent) return false;
.LINE 335

	LD	A,(_silent)
	OR	A,A
	JR	Z,L_111
	XOR	A,A
	JR	L_122
L_111:
;  336					silent = true;
.LINE 336

	LD	A,%1
	LD	(_silent),A
;  337					break;
;  338			}
L_113:
.LINE 338

;  339			argcounter++;
.LINE 339

	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  340		}
L_114:
.LINE 340

	LD	BC,(IX+%6)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JP	M,L_115
;  341		return (flashvdp || flashmos);
.LINE 341

	LD	A,(_flashvdp)
	OR	A,A
	JR	NZ,L_117
	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_118
L_117:
;  342	}
.LINE 342

	LD	BC,1
	LD	(IX+%FFFFFFF4),BC
	JR	L_119
L_118:
	LD	BC,0
	LD	(IX+%FFFFFFF4),BC
L_119:
	LD	A,(IX+%FFFFFFF4)
L_122:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _parseCommands ***************************
;Name                         Addr/Register   Size   Type
;_silent                             STATIC      1   variable
;_vdpfilename                        STATIC    256   variable
;_mosfilename                        STATIC    256   variable
;_strcpy                             IMPORT  -----   function
;_flashvdp                           STATIC      1   variable
;_flashmos                           STATIC      1   variable
;command                              IX-15      3   variable
;temp120                              IX-12      3   variable
;G_4                                   IX-9      3   variable
;G_1                                   IX-6      3   variable
;argcounter                            IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "parseCommands",342,"_parseCommands"
	SEGMENT STRSECT
L__74:
	DB	"MOS.bin"
	DB	0
L__75:
	DB	"firmware.bin"
	DB	0
L__79:
	DB	"MOS.bin"
	DB	0
L__83:
	DB	"firmware.bin"
	DB	0
	SEGMENT CODE
;  343	
;  344	bool filesExist(void) {
_filesExist:
.DEFINE "_filesExist"

.VALUE _filesExist

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "filesExist",344,"_filesExist"

.LINE 344

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "filesexist"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  345		uint8_t file;
;  346		bool filesexist = true;
.LINE 346

	LD	(IX+%FFFFFFFE),%1
;  347	
;  348		if(flashmos) {
.LINE 348

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_129
;  349			file = mos_fopen(mosfilename, fa_read);
.LINE 349

	LD	BC,1
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  350			if(!file) {
.LINE 350

	OR	A,A
	JR	NZ,L_124
;  351				printf("Error opening MOS firmware \"%s\"\n\r",mosfilename);
.LINE 351

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__91
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__92
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  352				filesexist = false;
.LINE 352

	LD	(IX+%FFFFFFFE),%0
;  353			}
L_124:
.LINE 353

;  354			mos_fclose(file);
.LINE 354

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  355		}
L_129:
.LINE 355

;  356	
;  357		if(flashvdp) {
.LINE 357

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_130
;  358			file = mos_fopen(vdpfilename, fa_read);
.LINE 358

	LD	BC,1
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  359			if(!file) {
.LINE 359

	OR	A,A
	JR	NZ,L_127
;  360				printf("Error opening VDP firmware \"%s\"\n\r",vdpfilename);
.LINE 360

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__95
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__96
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  361				filesexist = false;
.LINE 361

	LD	(IX+%FFFFFFFE),%0
;  362			}
L_127:
.LINE 362

;  363			mos_fclose(file);
.LINE 363

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  364		}
L_130:
.LINE 364

;  365	
;  366		return filesexist;
.LINE 366

	LD	A,(IX+%FFFFFFFE)
;  367	}
.LINE 367

	LD	SP,IX
	POP	IX
	RET	


;**************************** _filesExist ***************************
;Name                         Addr/Register   Size   Type
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_mos_fclose                         IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_mos_fopen                          IMPORT  -----   function
;_flashmos                           STATIC      1   variable
;filesexist                            IX-2      1   variable
;file                                  IX-1      1   variable


; Stack Frame Size: 8 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "filesExist",367,"_filesExist"
	SEGMENT STRSECT
L__91:
	DB	"Error opening MOS firmware \""
	DB	0
L__92:
	DB	"\""
	DB	10,13,0
L__95:
	DB	"Error opening VDP firmware \""
	DB	0
L__96:
	DB	"\""
	DB	10,13,0
	SEGMENT CODE
;  368	
;  369	bool firmwareContentOK(void) {
_firmwareContentOK:
.DEFINE "_firmwareContentOK"

.VALUE _firmwareContentOK

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "firmwareContentOK",369,"_firmwareContentOK"

.LINE 369

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "validfirmware"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -5

.TYPE 14

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -41

.DIM 36

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD7
	LD	SP,HL
;  370		uint8_t file;
;  371		uint24_t filesize;
;  372		uint8_t buffer[ESP32_MAGICLENGTH + ESP32_MAGICSTART];
;  373		bool validfirmware = true;
.LINE 373

	LD	(IX+%FFFFFFFE),%1
;  374	
;  375		if(flashmos) {
.LINE 375

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_140
;  376			file = mos_fopen(mosfilename, fa_read);
.LINE 376

	LD	BC,1
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  377			mos_fread(file, (char *)BUFFER1, MOS_MAGICLENGTH);
.LINE 377

	LD	BC,5
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  378			if(!containsMosHeader((uint8_t *)BUFFER1)) {
.LINE 378

	LD	BC,327680
	PUSH	BC
	CALL	_containsMosHeader
	POP	BC
	OR	A,A
	JR	NZ,L_133
;  379				printf("\"%s\" does not contain valid MOS ez80 startup code\r\n", mosfilename);
.LINE 379

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,34
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__100
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  380				validfirmware = false;
.LINE 380

	LD	(IX+%FFFFFFFE),%0
;  381			}
L_133:
.LINE 381

;  382			filesize = getFileSize(file);
.LINE 382

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFFB),HL
;  383			if(filesize > FLASHSIZE) {
.LINE 383

	LD	BC,HL
	LD	HL,131072
	OR	A,A
	SBC	HL,BC
	JR	NC,L_135
;  384				printf("\"%s\" too large for 128KB embedded flash\r\n", mosfilename);
.LINE 384

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,34
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__102
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  385				validfirmware = false;
.LINE 385

	LD	(IX+%FFFFFFFE),%0
;  386			}
L_135:
.LINE 386

;  387			mos_fclose(file);
.LINE 387

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  388		}
L_140:
.LINE 388

;  389		if(flashvdp) {
.LINE 389

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_141
;  390			file = mos_fopen(vdpfilename, fa_read);
.LINE 390

	LD	BC,1
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  391			mos_fread(file, (char *)buffer, ESP32_MAGICLENGTH + ESP32_MAGICSTART);
.LINE 391

	LD	BC,36
	PUSH	BC
	PEA	IX+%FFFFFFD7
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  392			if(!containsESP32Header(buffer)) {
.LINE 392

	PEA	IX+%FFFFFFD7
	CALL	_containsESP32Header
	POP	BC
	OR	A,A
	JR	NZ,L_138
;  393				printf("\"%s\" does not contain valid ESP32 code\r\n", vdpfilename);
.LINE 393

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,34
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__105
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  394				validfirmware = false;
.LINE 394

	LD	(IX+%FFFFFFFE),%0
;  395			}
L_138:
.LINE 395

;  396			mos_fclose(file);
.LINE 396

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  397		}
L_141:
.LINE 397

;  398		return validfirmware;
.LINE 398

	LD	A,(IX+%FFFFFFFE)
;  399	}
.LINE 399

	LD	SP,IX
	POP	IX
	RET	


;**************************** _firmwareContentOK ***************************
;Name                         Addr/Register   Size   Type
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_mos_fclose                         IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_mos_fopen                          IMPORT  -----   function
;_flashmos                           STATIC      1   variable
;buffer                               IX-41     36   variable
;filesize                              IX-5      3   variable
;validfirmware                         IX-2      1   variable
;file                                  IX-1      1   variable


; Stack Frame Size: 47 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "firmwareContentOK",399,"_firmwareContentOK"
	SEGMENT STRSECT
L__100:
	DB	"\" does not contain valid MOS ez80 startup code"
	DB	13,10,0
L__102:
	DB	"\" too large for 128KB embedded flash"
	DB	13,10,0
L__105:
	DB	"\" does not contain valid ESP32 code"
	DB	13,10,0
	SEGMENT CODE
;  400	
;  401	void showCRC32(void) {
_showCRC32:
.DEFINE "_showCRC32"

.VALUE _showCRC32

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "showCRC32",401,"_showCRC32"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  402		if(flashmos) printf("MOS CRC 0x%04lX\r\n", moscrc);
.LINE 402

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_145
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__108
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%4
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	A,(_moscrc+3)
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	BC,(_moscrc)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__109
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_145:
;  403		if(flashvdp) printf("VDP CRC 0x%04lX\r\n", vdpcrc);
.LINE 403

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_146
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__111
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%4
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	A,(_vdpcrc+3)
	LD	C,A
	LD	B,%0
	PUSH	BC
	LD	BC,(_vdpcrc)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__112
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_146:
;  404		printf("\r\n");
.LINE 404

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__113
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  405	}
.LINE 405

	LD	SP,IX
	POP	IX
	RET	


;**************************** _showCRC32 ***************************
;Name                         Addr/Register   Size   Type
;_vdpcrc                             STATIC      4   variable
;_flashvdp                           STATIC      1   variable
;_moscrc                             STATIC      4   variable
;__u_ultoa                           IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_flashmos                           STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "showCRC32",405,"_showCRC32"
	SEGMENT STRSECT
L__108:
	DB	"MOS CRC 0x"
	DB	0
L__109:
	DB	13,10,0
L__111:
	DB	"VDP CRC 0x"
	DB	0
L__112:
	DB	13,10,0
L__113:
	DB	13,10,0
	SEGMENT CODE
;  406	
;  407	void calculateCRC32(void) {
_calculateCRC32:
.DEFINE "_calculateCRC32"

.VALUE _calculateCRC32

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "calculateCRC32",407,"_calculateCRC32"

.LINE 407

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -4

.TYPE 34

.ENDEF

.DEFINE "got"

.CLASS 65

.VALUE -7

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -10

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	PUSH	BC
	DEC	SP
;  408		uint8_t file;
;  409		uint24_t got,size;
;  410		char* ptr;
;  411	
;  412		moscrc = 0;
.LINE 412

	LD	BC,0
	XOR	A,A
	LD	(_moscrc),BC
	LD	(_moscrc+3),A
;  413		vdpcrc = 0;
.LINE 413

	XOR	A,A
	LD	(_vdpcrc),BC
	LD	(_vdpcrc+3),A
;  414	
;  415		printf("Calculating CRC");
.LINE 415

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__115
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  416	
;  417		if(flashmos) {
.LINE 417

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_158
;  418			ptr = (char*)BUFFER1;
.LINE 418

	LD	BC,327680
	LD	(IX+%FFFFFFFC),BC
;  419			file = mos_fopen(mosfilename, fa_read);
.LINE 419

	LD	BC,1
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  420			crc32_initialize();
.LINE 420

	CALL	_crc32_initialize
;  421			
;  422			// Read file to memory
;  423			while((got = mos_fread(file, ptr, BLOCKSIZE)) > 0) {
.LINE 423

	JR	L_148
L_149:
;  424				crc32(ptr, got);
.LINE 424

	LD	BC,(IX+%FFFFFFF9)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  425				ptr += got;
.LINE 425

	LD	BC,(IX+%FFFFFFF9)
	LD	HL,(IX+%FFFFFFFC)
	ADD	HL,BC
	LD	(IX+%FFFFFFFC),HL
;  426				putch('.');
.LINE 426

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  427			}		
L_148:
.LINE 427

	LD	BC,16384
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFF9),HL
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_149
;  428			moscrc = crc32_finalize();
.LINE 428

	CALL	_crc32_finalize
	LD	(_moscrc),HL
	LD	A,E
	LD	(_moscrc+3),A
;  429			mos_fclose(file);
.LINE 429

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  430		}
L_158:
.LINE 430

;  431		if(flashvdp) {
.LINE 431

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_159
;  432			file = mos_fopen(vdpfilename, fa_read);
.LINE 432

	LD	BC,1
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  433			crc32_initialize();
.LINE 433

	CALL	_crc32_initialize
;  434			while(1) {
L_155:
.LINE 434

;  435				size = mos_fread(file, (char *)BUFFER1, BLOCKSIZE);
.LINE 435

	LD	BC,16384
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFF6),HL
;  436				if(size == 0) break;
.LINE 436

	CALL	__icmpzero
	JR	Z,L_156
;  437				putch('.');
.LINE 437

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  438				crc32((char *)BUFFER1, size);
.LINE 438

	LD	BC,(IX+%FFFFFFF6)
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
	JR	L_155
;  439			}
L_156:
.LINE 439

;  440			vdpcrc = crc32_finalize();
.LINE 440

	CALL	_crc32_finalize
	LD	(_vdpcrc),HL
	LD	A,E
	LD	(_vdpcrc+3),A
;  441			mos_fclose(file);
.LINE 441

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  442		}
L_159:
.LINE 442

;  443		printf("\r\n\r\n");
.LINE 443

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__120
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  444	}
.LINE 444

	LD	SP,IX
	POP	IX
	RET	


;**************************** _calculateCRC32 ***************************
;Name                         Addr/Register   Size   Type
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_mos_fclose                         IMPORT  -----   function
;_crc32_finalize                     IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;_crc32_initialize                   IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_mos_fopen                          IMPORT  -----   function
;_flashmos                           STATIC      1   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_vdpcrc                             STATIC      4   variable
;_moscrc                             STATIC      4   variable
;size                                 IX-10      3   variable
;got                                   IX-7      3   variable
;ptr                                   IX-4      3   variable
;file                                  IX-1      1   variable


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "calculateCRC32",444,"_calculateCRC32"
	SEGMENT STRSECT
L__115:
	DB	"Calculating CRC"
	DB	0
L__120:
	DB	13,10,13,10,0
	SEGMENT CODE
;  445	
;  446	int main(int argc, char * argv[]) {	
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",446,"_main"

.LINE 446

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "sysvars"

.CLASS 65

.VALUE -6

.TAG "NONAME3"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;  447		sysvar_t *sysvars;
;  448		int n;
;  449		sysvars = getsysvars();
.LINE 449

	CALL	_getsysvars
	LD	(IX+%FFFFFFFA),HL
;  450	
;  451		// All checks
;  452		if(argc == 1) {
.LINE 452

	LD	BC,1
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_163
;  453			usage();
.LINE 453

	CALL	_usage
;  454			return 0;
.LINE 454

	OR	A,A
	SBC	HL,HL
	JR	L_192
;  455		}
L_163:
.LINE 455

;  456		if(!parseCommands(argc, argv)) {
.LINE 456

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_parseCommands
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_165
;  457			usage();
.LINE 457

	CALL	_usage
;  458			return EXIT_INVALIDPARAMETER;
.LINE 458

	LD	HL,19
	JR	L_192
;  459		}
L_165:
.LINE 459

;  460		if(!filesExist()) return EXIT_FILENOTFOUND;
.LINE 460

	CALL	_filesExist
	OR	A,A
	JR	NZ,L_167
	LD	HL,4
	JR	L_192
L_167:
;  461		if(!firmwareContentOK()) {
.LINE 461

	CALL	_firmwareContentOK
	OR	A,A
	JR	NZ,L_168
;  462			return EXIT_INVALIDPARAMETER;
.LINE 462

	LD	HL,19
	JR	L_192
;  463		}
L_168:
.LINE 463

;  464	
;  465		calculateCRC32();
.LINE 465

	CALL	_calculateCRC32
;  466		// Skip showing CRC32 and user input when 'silent' is requested
;  467		if(!silent) {
.LINE 467

	LD	A,(_silent)
	OR	A,A
	JR	NZ,L_179
;  468			putch(12);
.LINE 468

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  469			print_version();
.LINE 469

	CALL	_print_version
;  470			showCRC32();
.LINE 470

	CALL	_showCRC32
;  471			if(!getResponse()) return 0;
.LINE 471

	CALL	_getResponse
	OR	A,A
	JR	NZ,L_179
	OR	A,A
	SBC	HL,HL
	JR	L_192
;  472		}
L_179:
.LINE 472

;  473	
;  474		if(flashvdp) {
.LINE 474

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_190
;  475			while(sysvars->scrheight == 0); // wait for 1st feedback from VDP
L_172:
.LINE 475

	LD	IY,(IX+%FFFFFFFA)
	LD	HL,(IY+%11)
	CALL	__scmpzero
	JR	Z,L_172
;  476			//beep(1);
;  477			sysvars->scrheight = 0;
.LINE 477

	LD	IY,(IX+%FFFFFFFA)
	LD	(IY+%11),%0
	LD	(IY+%12),%0
;  478			if(flashvdp) update_vdp(vdpfilename);
.LINE 478

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_175
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_update_vdp
	POP	BC
L_175:
;  479			echoVDP(1);
.LINE 479

	LD	BC,1
	PUSH	BC
	CALL	_echoVDP
	POP	BC
;  480			while(sysvars->scrheight == 0);
L_177:
.LINE 480

	LD	IY,(IX+%FFFFFFFA)
	LD	HL,(IY+%11)
	CALL	__scmpzero
	JR	Z,L_177
;  481		}
L_190:
.LINE 481

;  482		if(flashmos) {
.LINE 482

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_191
;  483			//beep(2);
;  484			if(update_mos(mosfilename)) {
.LINE 484

	LD	BC,_mosfilename
	PUSH	BC
	CALL	_update_mos
	POP	BC
	OR	A,A
	JR	Z,L_188
;  485				printf("\r\nDone\r\n\r\n");
.LINE 485

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__134
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  486				//beep(3);
;  487				//printf("Press reset button");
;  488				//while(1);
;  489				printf("System reset in ");
.LINE 489

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__135
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  490				for(n = 3; n > 0; n--) {
.LINE 490

	LD	BC,3
	LD	(IX+%FFFFFFFD),BC
	JR	L_183
L_181:
;  491					printf("%d...", n);
.LINE 491

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,(IX+%FFFFFFFD)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__136
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  492					delayms(1000);
.LINE 492

	LD	BC,1000
	PUSH	BC
	CALL	_delayms
	POP	BC
	LD	BC,(IX+%FFFFFFFD)
	DEC	BC
	LD	(IX+%FFFFFFFD),BC
;  493				}
L_183:
.LINE 493

	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_181
;  494				reset();
.LINE 494

	CALL	_reset
;  495			}
;  496			else {
.LINE 496

	JR	L_191
L_188:
;  497				printf("\r\nMultiple errors occured during flash write.\r\n");
.LINE 497

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__138
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  498				printf("System needs bare-metal recovery.\r\n");
.LINE 498

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__139
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  499				while(1); // nothing alive to return to
L_186:
.LINE 499

	JR	L_186
;  500			}
;  501		}
L_191:
.LINE 501

;  502		return 0;
.LINE 502

	OR	A,A
	SBC	HL,HL
;  503	}
L_192:
.LINE 503

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_reset                              IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_flashmos                           STATIC      1   variable
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_putch                              IMPORT  -----   function
;_silent                             STATIC      1   variable
;_getsysvars                         IMPORT  -----   function
;sysvars                               IX-6      3   variable
;n                                     IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",503,"_main"
	SEGMENT STRSECT
L__134:
	DB	13,10
	DB	"Done"
	DB	13,10,13,10,0
L__135:
	DB	"System reset in "
	DB	0
L__136:
	DB	"..."
	DB	0
L__138:
	DB	13,10
	DB	"Multiple errors occured during flash write."
	DB	13,10,0
L__139:
	DB	"System needs bare-metal recovery."
	DB	13,10,0
	XREF _memcmp:ROM
	XREF _strcpy:ROM
	XREF _getFileSize:ROM
	XREF _crc32_finalize:ROM
	XREF _crc32_initialize:ROM
	XREF _crc32:ROM
	XREF _delayms:ROM
	XREF _startVDPupdate:ROM
	XREF _reset:ROM
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _enableFlashKeyRegister:ROM
	XREF _mos_fread:ROM
	XREF _mos_fclose:ROM
	XREF _mos_fopen:ROM
	XREF _getsysvars:ROM
	XREF _getch:ROM
	XREF _tolower:ROM
	XREF __u_ultoa:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF ___print_fmt:ROM
	XREF __lcmpu:ROM
	XREF __iand:ROM
	XREF __stoiu:ROM
	XREF __itol:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __seqcaseD:ROM
	XREF __ishru_b:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _calculateCRC32
	XDEF _showCRC32
	XDEF _firmwareContentOK
	XDEF _filesExist
	XDEF _parseCommands
	XDEF _getCommand
	XDEF _echoVDP
	XDEF _update_mos
	XDEF _update_vdp
	XDEF _getResponse
	XDEF _usage
	XDEF _print_version
	XDEF _containsESP32Header
	XDEF _esp32_magicnumbers
	XDEF _containsMosHeader
	XDEF _mos_magicnumbers
	XDEF _vdp_ota_present
	XDEF _getCharAt
	XDEF _beep
	XDEF _putch
	XDEF _silent
	XDEF _vdpcrc
	XDEF _vdpfilename
	XDEF _flashvdp
	XDEF _moscrc
	XDEF _mosfilename
	XDEF _flashmos
	XDEF _errno
	END
