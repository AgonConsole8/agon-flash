; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
	SEGMENT BSS
_errno:
	DS	3
.DEFINE "errno"
.ALIAS "_errno"
.CLASS 83
.VALUE _errno
.TYPE 4
.ENDEF
;    1	/*
;    2	 * Title:			Agon firmware upgrade utility
;    3	 * Author:			Jeroen Venema
;    4	 * Created:			17/12/2022
;    5	 * Last Updated:	14/10/2023
;    6	 * 
;    7	 * Modinfo:
;    8	 * 17/12/2022:		Initial version
;    9	 * 05/04/2022:		Changed timer to 5sec at reset.
;   10	 *                  Sends cls just before reset
;   11	 * 07/06/2023:		Included faster crc32, by Leigh Brown
;   12	 * 14/10/2023:		VDP update code, MOS update rewritten for simplicity
;   13	 */
;   14	
;   15	#include <ez80.h>
;   16	#include <stdio.h>
;   17	#include <stdlib.h>
;   18	#include <ERRNO.H>
;   19	#include "mos-interface.h"
;   20	#include "flash.h"
;   21	#include "agontimer.h"
;   22	#include "crc32.h"
;   23	#include "filesize.h"
;   24	#include "./stdint.h"
;   25	#include <string.h>
;   26	
;   27	#define UNLOCKMATCHLENGTH 9
;   28	
;   29	#define EXIT_FILENOTFOUND	4
;   30	#define EXIT_INVALIDPARAMETER	19
;   31	
;   32	int errno; // needed by standard library
	SEGMENT CODE
;   33	enum states{firmware,retry,systemreset};
;   34	
;   35	// separate putch function that doesn't rely on a running MOS firmware
;   36	// UART0 initialization done by MOS firmware previously
;   37	// This utility doesn't run without MOS to load it anyway
;   38	int putch(int c)
;   39	{
_putch:
.DEFINE "_putch"

.VALUE _putch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "putch",39,"_putch"

.LINE 39

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 4

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
.ENDEF

;   40		UINT8 lsr,temt;
;   41		
;   42		while((UART0_LSR & 0x40) == 0);
L_1:
.LINE 42

	IN0	A,(197)
	AND	A,%40
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_1
;   43		UART0_THR = c;
.LINE 43

	LD	A,(IX+%6)
	OUT0	(192),A
;   44		return c;
.LINE 44

	LD	HL,(IX+%6)
;   45	}
.LINE 45

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch",45,"_putch"
;   46	
;   47	uint8_t getCharAt(uint16_t x, uint16_t y) {
_getCharAt:
.DEFINE "_getCharAt"

.VALUE _getCharAt

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getCharAt",47,"_getCharAt"

.LINE 47

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   48		delayms(20);
.LINE 48

	LD	BC,20
	PUSH	BC
	CALL	_delayms
	POP	BC
;   49		putch(23);
.LINE 49

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   50		putch(0);
.LINE 50

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   51		putch(131);
.LINE 51

	LD	BC,131
	PUSH	BC
	CALL	_putch
	POP	BC
;   52		putch(x & 0xFF);
.LINE 52

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   53		putch((x >> 8) & 0xFF);
.LINE 53

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   54		putch(y & 0xFF);
.LINE 54

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   55		putch((y >> 8) & 0xFF);
.LINE 55

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   56		delayms(20);
.LINE 56

	LD	BC,20
	PUSH	BC
	CALL	_delayms
	POP	BC
;   57		return getsysvar_scrchar();
.LINE 57

	CALL	_getsysvar_scrchar
;   58	}
.LINE 58

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCharAt ***************************
;Name                         Addr/Register   Size   Type
;_getsysvar_scrchar                  IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getCharAt",58,"_getCharAt"
;   59	
;   60	bool vdp_ota_present(void) {
_vdp_ota_present:
.DEFINE "_vdp_ota_present"

.VALUE _vdp_ota_present

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_ota_present",60,"_vdp_ota_present"

.LINE 60

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "test"

.CLASS 65

.VALUE -11

.DIM 9

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF5
	LD	SP,HL
;   61		char test[UNLOCKMATCHLENGTH];
;   62		uint16_t n;
;   63	
;   64		putch(23);
.LINE 64

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   65		putch(29);
.LINE 65

	LD	BC,29
	PUSH	BC
	CALL	_putch
	POP	BC
;   66		putch(0);
.LINE 66

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   67		printf("unlock");
.LINE 67

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__3
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   68	
;   69		for(n = 0; n < UNLOCKMATCHLENGTH+1; n++) test[n] = getCharAt(n+8, 3);
.LINE 69

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_8
L_6:
	LD	BC,3
	PUSH	BC
	LD	IY,(IX+%FFFFFFFE)
	LEA	BC,IY+%8
	PUSH	BC
	CALL	_getCharAt
	POP	BC
	POP	BC
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IX+%FFFFFFF5
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
L_8:
	LD.LIS	BC,10
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_6
;   70		// 3 - line on-screen
;   71		if(memcmp(test, "unlocked!",UNLOCKMATCHLENGTH) == 0) return true;
.LINE 71

	LD	BC,9
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	PEA	IX+%FFFFFFF5
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_10
	LD	A,%1
	JR	L_12
;   72		else return false;
L_10:
.LINE 72

	XOR	A,A
;   73	}
L_12:
.LINE 73

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_ota_present ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;test                                 IX-11      9   variable
;n                                     IX-2      2   variable


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_ota_present",73,"_vdp_ota_present"
	SEGMENT STRSECT
L__3:
	DB	"unlock"
	DB	0
L__5:
	DB	"unlocked!"
	DB	0
	SEGMENT DATA
_mos_magicnumbers:
	DB	243
	DB	237
	DB	125
	DB	91
	DB	195
.DEFINE "mos_magicnumbers"
.ALIAS "_mos_magicnumbers"
.CLASS 69
.VALUE _mos_magicnumbers
.DIM 5
.TYPE 108
.ENDEF
;   74	
;   75	uint8_t mos_magicnumbers[] = {0xF3, 0xED, 0x7D, 0x5B, 0xC3};
	SEGMENT CODE
;   76	#define MOS_MAGICLENGTH 5
;   77	bool containsMosHeader(uint8_t *filestart) {
_containsMosHeader:
.DEFINE "_containsMosHeader"

.VALUE _containsMosHeader

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsMosHeader",77,"_containsMosHeader"

.LINE 77

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;   78		uint8_t n;
;   79		bool match = true;
.LINE 79

	LD	(IX+%FFFFFFFE),%1
;   80	
;   81		for(n = 0; n < MOS_MAGICLENGTH; n++) if(mos_magicnumbers[n] != filestart[n]) match = false;
.LINE 81

	LD	(IX+%FFFFFFFF),%0
	JR	L_17
L_15:
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_mos_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_16
	LD	(IX+%FFFFFFFE),%0
L_16:
	INC	(IX+%FFFFFFFF)
L_17:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%5
	JR	C,L_15
;   82		return match;
.LINE 82

	LD	A,(IX+%FFFFFFFE)
;   83	}
.LINE 83

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsMosHeader ***************************
;Name                         Addr/Register   Size   Type
;_mos_magicnumbers                   STATIC      5   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsMosHeader",83,"_containsMosHeader"
	SEGMENT DATA
_esp32_magicnumbers:
	DB	50
	DB	84
	DB	205
	DB	171
.DEFINE "esp32_magicnumbers"
.ALIAS "_esp32_magicnumbers"
.CLASS 69
.VALUE _esp32_magicnumbers
.DIM 4
.TYPE 108
.ENDEF
;   84	
;   85	uint8_t esp32_magicnumbers[] = {0x32, 0x54, 0xCD, 0xAB};
	SEGMENT CODE
;   86	#define ESP32_MAGICLENGTH 4
;   87	#define ESP32_MAGICSTART 0x20
;   88	bool containsESP32Header(uint8_t *filestart) {
_containsESP32Header:
.DEFINE "_containsESP32Header"

.VALUE _containsESP32Header

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsESP32Header",88,"_containsESP32Header"

.LINE 88

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;   89		uint8_t n;
;   90		bool match = true;
.LINE 90

	LD	(IX+%FFFFFFFE),%1
;   91	
;   92		filestart += ESP32_MAGICSTART; // start of ESP32 magic header
.LINE 92

	LD	IY,(IX+%6)
	LEA	IY,IY+%20
	LD	(IX+%6),IY
;   93		for(n = 0; n < ESP32_MAGICLENGTH; n++) {
.LINE 93

	LD	(IX+%FFFFFFFF),%0
	JR	L_24
L_22:
;   94			if(esp32_magicnumbers[n] != filestart[n]) match = false;
.LINE 94

	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_esp32_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_23
	LD	(IX+%FFFFFFFE),%0
;   95		}
L_23:
.LINE 95

	INC	(IX+%FFFFFFFF)
L_24:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%4
	JR	C,L_22
;   96		return match;
.LINE 96

	LD	A,(IX+%FFFFFFFE)
;   97	}
.LINE 97

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsESP32Header ***************************
;Name                         Addr/Register   Size   Type
;_esp32_magicnumbers                 STATIC      4   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsESP32Header",97,"_containsESP32Header"
;   98	
;   99	void print_version(void) {
_print_version:
.DEFINE "_print_version"

.VALUE _print_version

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "print_version",99,"_print_version"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  100		printf("Agon firmware upgrade utility v1.4\n\r\n\r");
.LINE 100

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__14
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  101	}
.LINE 101

	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_version ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "print_version",101,"_print_version"
	SEGMENT STRSECT
L__14:
	DB	"Agon firmware upgrade utility v1.4"
	DB	10,13,10,13,0
	SEGMENT CODE
;  102	
;  103	void usage(void) {
_usage:
.DEFINE "_usage"

.VALUE _usage

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "usage",103,"_usage"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  104		print_version();
.LINE 104

	CALL	_print_version
;  105		printf("Usage: FLASH <mos|vdp> <filename>\n\r");
.LINE 105

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__16
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  106	}
.LINE 106

	LD	SP,IX
	POP	IX
	RET	


;**************************** _usage ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "usage",106,"_usage"
	SEGMENT STRSECT
L__16:
	DB	"Usage: FLASH <mos|vdp> <filename>"
	DB	10,13,0
	SEGMENT CODE
;  107	
;  108	typedef enum {
;  109		MOS,
;  110		VDP
;  111	} flashtype;
;  112	
;  113	bool getResponse(flashtype t, uint32_t crc) {
_getResponse:
.DEFINE "_getResponse"

.VALUE _getResponse

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getResponse",113,"_getResponse"

.LINE 113

.DEFINE "t"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "crc"

.CLASS 65

.VALUE 9

.TYPE 15

.ENDEF

.DEFINE "response"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  114		uint8_t response = 0;
.LINE 114

	LD	(IX+%FFFFFFFF),%0
;  115	
;  116		switch(t) {
.LINE 116

	LD	HL,(IX+%6)
	CALL	__case8D
	JP	(HL)
L__18:
	DW	2
	DB	0
	DW24	L_29	

	DB	1
	DW24	L_30	

	DW24	L_32	

;  117			case MOS:
L_29:
.LINE 117

;  118				printf("\r\n\r\n0x%04lX - flash to MOS (y/n)?", crc);
.LINE 118

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__19
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%4
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	C,(IX+%C)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__20
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  119				break;
.LINE 119

	JR	L_32
;  120			case VDP:
L_30:
.LINE 120

;  121				printf("\r\n\r\n0x%04lX - flash to VDP (y/n)?", crc);
.LINE 121

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__21
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%4
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	C,(IX+%C)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%9)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__22
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  122				break;
.LINE 122

	JR	L_32
;  123		}
;  124	
;  125		while((response != 'y') && (response != 'n')) response = getch();
L_33:
.LINE 125

	CALL	_getch
	LD	(IX+%FFFFFFFF),A
L_32:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%79
	JR	Z,L_37
	LD	A,(IX+%FFFFFFFF)
	CP	A,%6E
	JR	NZ,L_33
L_37:
;  126		if(response == 'n') printf("\r\nUser abort\n\r\n\r");
.LINE 126

	LD	A,(IX+%FFFFFFFF)
	CP	A,%6E
	JR	NZ,L_36
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__26
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  127		else printf("\r\n\r\n");
.LINE 127

	JR	L_38
L_36:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__27
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_38:
;  128		return response == 'y';
.LINE 128

	LD	A,(IX+%FFFFFFFF)
	CP	A,%79
	JR	NZ,L__29
	LD	A,%1
	JR	L__30
L__29:
	XOR	A,A
L__30:
;  129	}
.LINE 129

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getResponse ***************************
;Name                         Addr/Register   Size   Type
;_getch                              IMPORT  -----   function
;__u_ultoa                           IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;response                              IX-1      1   variable
;crc                                   IX+9      4   parameter
;t                                     IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getResponse",129,"_getResponse"
	SEGMENT STRSECT
L__19:
	DB	13,10,13,10
	DB	"0x"
	DB	0
L__20:
	DB	" - flash to MOS (y/n)?"
	DB	0
L__21:
	DB	13,10,13,10
	DB	"0x"
	DB	0
L__22:
	DB	" - flash to VDP (y/n)?"
	DB	0
L__26:
	DB	13,10
	DB	"User abort"
	DB	10,13,10,13,0
L__27:
	DB	13,10,13,10,0
	SEGMENT CODE
;  130	
;  131	uint8_t update_vdp(char *filename) {
_update_vdp:
.DEFINE "_update_vdp"

.VALUE _update_vdp

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_vdp",131,"_update_vdp"

.LINE 131

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -4

.TYPE 14

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -7

.TYPE 14

.ENDEF

.DEFINE "crcresult"

.CLASS 65

.VALUE -11

.TYPE 15

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -47

.DIM 36

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD1
	LD	SP,HL
;  132		uint8_t file;
;  133		uint8_t buffer[ESP32_MAGICLENGTH + ESP32_MAGICSTART];
;  134		uint24_t filesize;
;  135		uint32_t crcresult;
;  136		uint24_t size, n;
;  137		uint8_t response;
;  138	
;  139		putch(12); // cls
.LINE 139

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  140		print_version();	
.LINE 140

	CALL	_print_version
;  141		printf("Unlocking VDP updater...\r\n");
.LINE 141

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__32
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  142		
;  143		if(!vdp_ota_present()) {
.LINE 143

	CALL	_vdp_ota_present
	OR	A,A
	JR	NZ,L_41
;  144			printf(" failed - incompatible VDP\r\n");
.LINE 144

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__34
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  145			return 0;
.LINE 145

	XOR	A,A
	JR	L_53
;  146		}
L_41:
.LINE 146

;  147	
;  148		file = mos_fopen(filename, fa_read);
.LINE 148

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  149		if(!file) {
.LINE 149

	OR	A,A
	JR	NZ,L_43
;  150			printf("Error opening \"%s\"\n\r",filename);
.LINE 150

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__36
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__37
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  151			return EXIT_FILENOTFOUND;
.LINE 151

	LD	A,%4
	JR	L_53
;  152		}
L_43:
.LINE 152

;  153	
;  154		mos_fread(file, (char *)buffer, ESP32_MAGICLENGTH + ESP32_MAGICSTART);
.LINE 154

	LD	BC,36
	PUSH	BC
	PEA	IX+%FFFFFFD1
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  155		if(!containsESP32Header(buffer)) {
.LINE 155

	PEA	IX+%FFFFFFD1
	CALL	_containsESP32Header
	POP	BC
	OR	A,A
	JR	NZ,L_45
;  156			printf("File does not contain valid ESP32 code\r\n");
.LINE 156

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__39
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  157			mos_fclose(file);
.LINE 157

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  158			return EXIT_INVALIDPARAMETER;
.LINE 158

	LD	A,%13
	JR	L_53
;  159		}
L_45:
.LINE 159

;  160		printf("\r\nValid ESP32 code\r\nCalculating CRC32");
.LINE 160

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__40
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  161		crc32_initialize();
.LINE 161

	CALL	_crc32_initialize
;  162		mos_flseek(file, 0);
.LINE 162

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_flseek
	POP	BC
	POP	BC
	POP	BC
;  163		while(1) {
L_49:
.LINE 163

;  164			size = mos_fread(file, (char *)BUFFER1, BLOCKSIZE);
.LINE 164

	LD	BC,16384
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFC),HL
;  165			if(size == 0) break;
.LINE 165

	CALL	__icmpzero
	JR	Z,L_50
;  166			putch('.');
.LINE 166

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  167			crc32((char *)BUFFER1, size);
.LINE 167

	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
	JR	L_49
;  168		}
L_50:
.LINE 168

;  169		crcresult = crc32_finalize();
.LINE 169

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFF5),HL
	LD	(IX+%FFFFFFF8),E
;  170		if(!getResponse(VDP, crcresult)) {
.LINE 170

	LD	C,(IX+%FFFFFFF8)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%FFFFFFF5)
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_getResponse
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_52
;  171			mos_fclose(file);
.LINE 171

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  172			return 0;
.LINE 172

	XOR	A,A
	JR	L_53
;  173		}
L_52:
.LINE 173

;  174		// Do actual work here
;  175		mos_flseek(file, 0); // reset to zero, because we read part of the header already
.LINE 175

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_flseek
	POP	BC
	POP	BC
	POP	BC
;  176		printf("Updating VDP firmware\r\n");
.LINE 176

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__43
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  177		filesize = getFileSize(file);	
.LINE 177

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFF9),HL
;  178		startVDPupdate(file, filesize);
.LINE 178

	LD	BC,HL
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_startVDPupdate
	POP	BC
	POP	BC
;  179		mos_fclose(file);
.LINE 179

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  180		reset();
.LINE 180

	CALL	_reset
;  181		return 0; // will never return, but let's give the compiler a break
.LINE 181

	XOR	A,A
;  182	}
L_53:
.LINE 182

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_vdp ***************************
;Name                         Addr/Register   Size   Type
;_reset                              IMPORT  -----   function
;_startVDPupdate                     IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_crc32_finalize                     IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;_mos_flseek                         IMPORT  -----   function
;_crc32_initialize                   IMPORT  -----   function
;_mos_fclose                         IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;buffer                               IX-47     36   variable
;crcresult                            IX-11      4   variable
;filesize                              IX-7      3   variable
;size                                  IX-4      3   variable
;file                                  IX-1      1   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 56 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_vdp",182,"_update_vdp"
	SEGMENT STRSECT
L__32:
	DB	"Unlocking VDP updater..."
	DB	13,10,0
L__34:
	DB	" failed - incompatible VDP"
	DB	13,10,0
L__36:
	DB	"Error opening \""
	DB	0
L__37:
	DB	"\""
	DB	10,13,0
L__39:
	DB	"File does not contain valid ESP32 code"
	DB	13,10,0
L__40:
	DB	13,10
	DB	"Valid ESP32 code"
	DB	13,10
	DB	"Calculating CRC32"
	DB	0
L__43:
	DB	"Updating VDP firmware"
	DB	13,10,0
	SEGMENT CODE
;  183	
;  184	uint8_t update_mos(char *filename) {
_update_mos:
.DEFINE "_update_mos"

.VALUE _update_mos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_mos",184,"_update_mos"

.LINE 184

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -7

.TYPE 14

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -10

.TYPE 14

.ENDEF

.DEFINE "state"

.CLASS 65

.VALUE -13

.TYPE 4

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -16

.TYPE 14

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -19

.TYPE 14

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -22

.TYPE 34

.ENDEF

.DEFINE "crcresult"

.CLASS 65

.VALUE -26

.TYPE 15

.ENDEF

.DEFINE "got"

.CLASS 65

.VALUE -29

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -30

.TYPE 12

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -33

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -39

.TYPE 14

.ENDEF

.DEFINE "crcexpected"

.CLASS 65

.VALUE -43

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD5
	LD	SP,HL
;  185		uint32_t crcexpected,crcresult;
;  186		uint24_t size = 0;
.LINE 186

	LD	BC,0
	LD	(IX+%FFFFFFD9),BC
;  187		uint24_t got;
;  188		uint8_t file;
;  189		char* ptr = (char*)BUFFER1;
.LINE 189

	LD	BC,327680
	LD	(IX+%FFFFFFEA),BC
;  190		uint8_t value;
;  191		uint24_t counter,pagemax, lastpagebytes;
;  192		uint24_t addressto,addressfrom;
;  193		enum states state;
;  194		uint24_t filesize;
;  195	
;  196		putch(12); // cls
.LINE 196

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  197		print_version();	
.LINE 197

	CALL	_print_version
;  198		
;  199		file = mos_fopen(filename, fa_read);
.LINE 199

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFC),A
;  200		if(!file)
.LINE 200

	OR	A,A
	JR	NZ,L_55
;  201		{
;  202			printf("Error opening \"%s\"\n\r",filename);
.LINE 202

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__46
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__47
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  203			return EXIT_FILENOTFOUND;
.LINE 203

	LD	A,%4
	JR	L_100
;  204		}
L_55:
.LINE 204

;  205	
;  206		mos_fread(file, (char *)BUFFER1, MOS_MAGICLENGTH);
.LINE 206

	LD	BC,5
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  207		if(!containsMosHeader((uint8_t *)BUFFER1)) {
.LINE 207

	LD	BC,327680
	PUSH	BC
	CALL	_containsMosHeader
	POP	BC
	OR	A,A
	JR	NZ,L_57
;  208			printf("File does not contain valid MOS ez80 startup code\r\n");
.LINE 208

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__49
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  209			mos_fclose(file);
.LINE 209

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  210			return EXIT_INVALIDPARAMETER;
.LINE 210

	LD	A,%13
	JR	L_100
;  211		}
L_57:
.LINE 211

;  212	
;  213		filesize = getFileSize(file);
.LINE 213

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFF0),HL
;  214		if(filesize > FLASHSIZE) {
.LINE 214

	LD	BC,HL
	LD	HL,131072
	OR	A,A
	SBC	HL,BC
	JR	NC,L_59
;  215			printf("File too large for 128KB embedded flash\r\n");
.LINE 215

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__51
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  216			mos_fclose(file);
.LINE 216

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  217			return EXIT_INVALIDPARAMETER;
.LINE 217

	LD	A,%13
	JR	L_100
;  218		}
L_59:
.LINE 218

;  219	
;  220		printf("\r\nValid ez80 code\r\nCalculating CRC32");
.LINE 220

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__52
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  221	
;  222		crc32_initialize();
.LINE 222

	CALL	_crc32_initialize
;  223		mos_flseek(file, 0);
.LINE 223

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_flseek
	POP	BC
	POP	BC
	POP	BC
;  224		
;  225		// Read file to memory
;  226		while((got = mos_fread(file, ptr, BLOCKSIZE)) > 0) {
.LINE 226

	JR	L_60
L_61:
;  227			crc32(ptr, got);
.LINE 227

	LD	BC,(IX+%FFFFFFE3)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  228			ptr += got;
.LINE 228

	LD	BC,(IX+%FFFFFFE3)
	LD	HL,(IX+%FFFFFFEA)
	ADD	HL,BC
	LD	(IX+%FFFFFFEA),HL
;  229			putch('.');
.LINE 229

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  230		}		
L_60:
.LINE 230

	LD	BC,16384
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFE3),HL
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_61
;  231		crcresult = crc32_finalize();
.LINE 231

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFE6),HL
	LD	(IX+%FFFFFFE9),E
;  232		if(!getResponse(MOS, crcresult)) {
.LINE 232

	LD	C,(IX+%FFFFFFE9)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%FFFFFFE6)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_getResponse
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_64
;  233			mos_fclose(file);
.LINE 233

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  234			return 0;
.LINE 234

	XOR	A,A
	JR	L_100
;  235		}
L_64:
.LINE 235

;  236	
;  237		// Actual work here	
;  238		di();								// prohibit any access to the old MOS firmware
.LINE 238

	di
;  239	
;  240		// start address in flash
;  241		addressto = FLASHSTART;
.LINE 241

	LD	BC,0
	LD	(IX+%FFFFFFED),BC
;  242		addressfrom = BUFFER1;
.LINE 242

	LD	BC,327680
	LD	(IX+%FFFFFFF9),BC
;  243		
;  244		crcexpected = crcresult;
.LINE 244

	LD	BC,(IX+%FFFFFFE6)
	LD	A,(IX+%FFFFFFE9)
	LD	(IX+%FFFFFFD5),BC
	LD	(IX+%FFFFFFD8),A
;  245		state = firmware;
.LINE 245

	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
;  246		size = filesize;	
.LINE 246

	LD	BC,(IX+%FFFFFFF0)
	LD	(IX+%FFFFFFD9),BC
;  247		while(1)
L_98:
.LINE 247

;  248		{
;  249			switch(state)
.LINE 249

	LD	HL,(IX+%FFFFFFF3)
	CALL	__case8D
	JP	(HL)
L__55:
	DW	2
	DB	0
	DW24	L_65	

	DB	1
	DW24	L_66	

	DW24	L_67	

;  250			{
;  251				case firmware:
L_65:
.LINE 251

;  252					// start address in flash
;  253					addressfrom = BUFFER1;
.LINE 253

	LD	BC,327680
	LD	(IX+%FFFFFFF9),BC
;  254					crc32_initialize();
.LINE 254

	CALL	_crc32_initialize
;  255					break;
.LINE 255

	JR	L_70
;  256				case retry:
L_66:
.LINE 256

;  257					// start address in flash
;  258					addressfrom = BUFFER1;
.LINE 258

	LD	BC,327680
	LD	(IX+%FFFFFFF9),BC
;  259					crc32_initialize();
.LINE 259

	CALL	_crc32_initialize
;  260					break;
.LINE 260

	JR	L_70
;  261				default:
L_67:
.LINE 261

;  262					// RESET SYSTEM
;  263					printf("\r\n");
.LINE 263

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__56
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  264					printf("Done\r\n");
.LINE 264

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__57
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  265					printf("Press reset button");
.LINE 265

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__58
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  266					while(1); // force cold boot for the user, so VDP will reset optimally
L_69:
.LINE 266

	JR	L_69
;  267			}
L_70:
.LINE 267

;  268	
;  269			// Unprotect and erase flash
;  270			printf("Erasing flash... ");
.LINE 270

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__59
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  271			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
.LINE 271

	CALL	_enableFlashKeyRegister
;  272			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
.LINE 272

	XOR	A,A
	OUT0	(250),A
;  273			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
.LINE 273

	CALL	_enableFlashKeyRegister
;  274			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
.LINE 274

	LD	A,%5F
	OUT0	(249),A
;  275			
;  276			for(counter = 0; counter < FLASHPAGES; counter++)
.LINE 276

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_76
L_74:
;  277			{
;  278				FLASH_PAGE = counter;
.LINE 278

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;  279				FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 279

	LD	A,%2
	OUT0	(255),A
;  280	
;  281				do
L_72:
.LINE 281

;  282				{
;  283					value = FLASH_PGCTL;
.LINE 283

	IN0	A,(255)
	LD	(IX+%FFFFFFE2),A
;  284				}
;  285				while(value & 0x02);// wait for completion of erase			
.LINE 285

	AND	A,%2
	JR	NZ,L_72
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  286			}
L_76:
.LINE 286

	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_74
;  287			
;  288			printf("\r\nWriting new firmware...\r\n");
.LINE 288

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__62
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  289			
;  290			// determine number of pages to write
;  291			pagemax = size/PAGESIZE;
.LINE 291

	LD	HL,(IX+%FFFFFFF0)
	LD	A,%A
	CALL	__ishru_b
	LD	(IX+%FFFFFFF6),HL
;  292			if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 292

	LD	BC,1023
	LD	HL,(IX+%FFFFFFF0)
	CALL	__iand
	LD	(IX+%FFFFFFDC),HL
	CALL	__icmpzero
	JR	Z,L_79
;  293			{
;  294				pagemax += 1;
.LINE 294

	LD	BC,(IX+%FFFFFFF6)
	INC	BC
	LD	(IX+%FFFFFFF6),BC
;  295				lastpagebytes = size%PAGESIZE;			
.LINE 295

	LD	BC,(IX+%FFFFFFDC)
	LD	(IX+%FFFFFFDF),BC
;  296			}
;  297			else lastpagebytes = PAGESIZE; // normal last page
.LINE 297

	JR	L_87
L_79:
	LD	BC,1024
	LD	(IX+%FFFFFFDF),BC
L_87:
;  298			
;  299			// write out each page to flash
;  300			for(counter = 0; counter < pagemax; counter++)
.LINE 300

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_86
L_84:
;  301			{
;  302				printf("\rWriting flash page %03d/%03d", counter+1, pagemax);
.LINE 302

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__64
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,47
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFF6)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
;  303				
;  304				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 304

	LD	IY,(IX+%FFFFFFF6)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_82
;  305					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 305

	LD	BC,(IX+%FFFFFFDF)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF9)
	PUSH	BC
	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  306					//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, lastpagebytes);
;  307				else 
.LINE 307

	JR	L_83
L_82:
;  308					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 308

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF9)
	PUSH	BC
	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_83:
;  309					//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, PAGESIZE);
;  310			
;  311				addressto += PAGESIZE;
.LINE 311

	LD	BC,1024
	LD	HL,(IX+%FFFFFFED)
	ADD	HL,BC
	LD	(IX+%FFFFFFED),HL
;  312				addressfrom += PAGESIZE;
.LINE 312

	LD	HL,(IX+%FFFFFFF9)
	ADD	HL,BC
	LD	(IX+%FFFFFFF9),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  313			}
L_86:
.LINE 313

	LD	BC,(IX+%FFFFFFF6)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_84
;  314			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 314

	CALL	_lockFlashKeyRegister
;  315			printf("\r\n");
.LINE 315

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__67
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  316			
;  317			//Verify correct CRC in flash
;  318			printf("Verifying flash checksum... ");
.LINE 318

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__68
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  319			crc32((char*)FLASHSTART, size);
.LINE 319

	LD	BC,(IX+%FFFFFFF0)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  320			crcresult = crc32_finalize();
.LINE 320

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFE6),HL
	LD	(IX+%FFFFFFE9),E
;  321	
;  322			if(crcresult == crcexpected)
.LINE 322

	LD	HL,(IX+%FFFFFFE6)
	LD	E,(IX+%FFFFFFE9)
	LD	BC,(IX+%FFFFFFD5)
	LD	A,(IX+%FFFFFFD8)
	CALL	__lcmpu
	JR	NZ,L_96
;  323			{
;  324				printf("- OK\r\n");
.LINE 324

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__70
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  325				state = systemreset;
.LINE 325

	LD	BC,2
	LD	(IX+%FFFFFFF3),BC
;  326			}
;  327			else // CRC Failure - next action depends on current state
.LINE 327

	JR	L_98
L_96:
;  328			{	 // User interaction not possible without MOS handling interrupts
;  329				switch(state)
.LINE 329

	LD	HL,(IX+%FFFFFFF3)
	CALL	__case8D
	JP	(HL)
L__71:
	DW	2
	DB	0
	DW24	L_89	

	DB	1
	DW24	L_90	

	DW24	L_93	

;  330				{
;  331					case firmware:
L_89:
.LINE 331

;  332						printf("\r\nError occured during flash write\r\nRetry...\r\n");
.LINE 332

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__72
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  333						state = retry;
.LINE 333

	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
;  334						break;
.LINE 334

	JR	L_98
;  335					case retry:
L_90:
.LINE 335

;  336						printf("\r\nRetry failed\r\n");
.LINE 336

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__73
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  337						while(1); // no more options unfortunately, system needs a firmware programmer
L_92:
.LINE 337

	JR	L_92
;  338					default:
L_93:
.LINE 338

;  339						state = retry;
.LINE 339

	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
	JR	L_98
;  340				}
;  341			}
;  342		}		
;  343		return 0;
;  344	}
L_100:
.LINE 344

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_mos ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;_enableFlashKeyRegister             IMPORT  -----   function
;_crc32_finalize                     IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;_mos_flseek                         IMPORT  -----   function
;_crc32_initialize                   IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_mos_fclose                         IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;_putch                              IMPORT  -----   function
;crcexpected                          IX-43      4   variable
;size                                 IX-39      3   variable
;G_0                                  IX-36      3   variable
;lastpagebytes                        IX-33      3   variable
;value                                IX-30      1   variable
;got                                  IX-29      3   variable
;crcresult                            IX-26      4   variable
;ptr                                  IX-22      3   variable
;addressto                            IX-19      3   variable
;filesize                             IX-16      3   variable
;state                                IX-13      3   variable
;pagemax                              IX-10      3   variable
;addressfrom                           IX-7      3   variable
;file                                  IX-4      1   variable
;counter                               IX-3      3   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_mos",344,"_update_mos"
	SEGMENT STRSECT
L__46:
	DB	"Error opening \""
	DB	0
L__47:
	DB	"\""
	DB	10,13,0
L__49:
	DB	"File does not contain valid MOS ez80 startup code"
	DB	13,10,0
L__51:
	DB	"File too large for 128KB embedded flash"
	DB	13,10,0
L__52:
	DB	13,10
	DB	"Valid ez80 code"
	DB	13,10
	DB	"Calculating CRC32"
	DB	0
L__56:
	DB	13,10,0
L__57:
	DB	"Done"
	DB	13,10,0
L__58:
	DB	"Press reset button"
	DB	0
L__59:
	DB	"Erasing flash... "
	DB	0
L__62:
	DB	13,10
	DB	"Writing new firmware..."
	DB	13,10,0
L__64:
	DB	13
	DB	"Writing flash page "
	DB	0
L__67:
	DB	13,10,0
L__68:
	DB	"Verifying flash checksum... "
	DB	0
L__70:
	DB	"- OK"
	DB	13,10,0
L__72:
	DB	13,10
	DB	"Error occured during flash write"
	DB	13,10
	DB	"Retry..."
	DB	13,10,0
L__73:
	DB	13,10
	DB	"Retry failed"
	DB	13,10,0
	SEGMENT CODE
;  345	
;  346	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",346,"_main"

.LINE 346

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  347	
;  348		if(argc != 3) {
.LINE 348

	LD	BC,3
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_106
;  349			usage();
.LINE 349

	CALL	_usage
;  350			return 0;
.LINE 350

	OR	A,A
	SBC	HL,HL
	JR	L_107
;  351		}
L_106:
.LINE 351

;  352	
;  353		if(memcmp(argv[1], "mos", 3) == 0) {
.LINE 353

	PUSH	BC
	LD	BC,L__76
	PUSH	BC
	LD	IY,(IX+%9)
	LEA	HL,IY+%3
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_105
;  354			return update_mos(argv[2]);
.LINE 354

	LD	IY,(IX+%9)
	LEA	HL,IY+%6
	LD	BC,(HL)
	PUSH	BC
	CALL	_update_mos
	POP	BC
	UEXT	HL
	LD	L,A
	JR	L_107
;  355		}
;  356		else {
L_105:
.LINE 356

;  357			if(memcmp(argv[1], "vdp", 3) == 0) {
.LINE 357

	LD	BC,3
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	LD	IY,(IX+%9)
	LEA	HL,IY+%3
	LD	BC,(HL)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_103
;  358				return update_vdp(argv[2]);
.LINE 358

	LD	IY,(IX+%9)
	LEA	HL,IY+%6
	LD	BC,(HL)
	PUSH	BC
	CALL	_update_vdp
	POP	BC
	UEXT	HL
	LD	L,A
	JR	L_107
;  359			}
;  360			else {
L_103:
.LINE 360

;  361				usage();
.LINE 361

	CALL	_usage
;  362				return 0;
.LINE 362

	OR	A,A
	SBC	HL,HL
;  363			}
;  364		}
;  365	}
L_107:
.LINE 365

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",365,"_main"
	SEGMENT STRSECT
L__76:
	DB	"mos"
	DB	0
L__78:
	DB	"vdp"
	DB	0
	XREF _memcmp:ROM
	XREF _getFileSize:ROM
	XREF _crc32_finalize:ROM
	XREF _crc32_initialize:ROM
	XREF _crc32:ROM
	XREF _delayms:ROM
	XREF _startVDPupdate:ROM
	XREF _reset:ROM
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _enableFlashKeyRegister:ROM
	XREF _mos_flseek:ROM
	XREF _mos_fread:ROM
	XREF _mos_fclose:ROM
	XREF _mos_fopen:ROM
	XREF _getsysvar_scrchar:ROM
	XREF _getch:ROM
	XREF __u_ultoa:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF ___print_fmt:ROM
	XREF __lcmpu:ROM
	XREF __iand:ROM
	XREF __stoiu:ROM
	XREF __icmpzero:ROM
	XREF __case8D:ROM
	XREF __ishru_b:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _update_mos
	XDEF _update_vdp
	XDEF _getResponse
	XDEF _usage
	XDEF _print_version
	XDEF _containsESP32Header
	XDEF _esp32_magicnumbers
	XDEF _containsMosHeader
	XDEF _mos_magicnumbers
	XDEF _vdp_ota_present
	XDEF _getCharAt
	XDEF _putch
	XDEF _errno
	END
