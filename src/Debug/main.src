; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",51
.DEFINE "clock"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "vpd_protocol_flags"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keyascii"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keymods"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorX"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorY"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrchar"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixel"
.VALUE 10
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "audioChannel"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "audioSuccess"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrwidth"
.VALUE 15
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrheight"
.VALUE 17
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrcols"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrrows"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrcolours"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixelIndex"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycode"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keydown"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycount"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc"
.VALUE 26
.CLASS 8
.DIM 6
.TYPE 108
.ENDEF
.DEFINE "rtc_spare"
.VALUE 32
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.DEFINE "keydelay"
.VALUE 34
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyrate"
.VALUE 36
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyled"
.VALUE 38
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrmode"
.VALUE 39
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc_enable"
.VALUE 40
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseX"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseY"
.VALUE 43
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseButtons"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseWheel"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseXDelta"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseYDelta"
.VALUE 49
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME3"
.BEGREC "NONAME4",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME4"
.BEGREC "NONAME5",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME5"
.BEGREC "NONAME6",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME5"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME6"
	SEGMENT BSS
_errno:
	DS	3
.DEFINE "errno"
.ALIAS "_errno"
.CLASS 83
.VALUE _errno
.TYPE 4
.ENDEF
;    1	/*
;    2	 * Title:			Agon firmware upgrade utility
;    3	 * Author:			Jeroen Venema
;    4	 * Created:			17/12/2022
;    5	 * Last Updated:	14/10/2023
;    6	 * 
;    7	 * Modinfo:
;    8	 * 17/12/2022:		Initial version
;    9	 * 05/04/2022:		Changed timer to 5sec at reset.
;   10	 *                  Sends cls just before reset
;   11	 * 07/06/2023:		Included faster crc32, by Leigh Brown
;   12	 * 14/10/2023:		VDP update code, MOS update rewritten for simplicity
;   13	 */
;   14	
;   15	#include <ez80.h>
;   16	#include <stdio.h>
;   17	#include <stdlib.h>
;   18	#include <ERRNO.H>
;   19	#include <ctype.h>
;   20	#include "mos-interface.h"
;   21	#include "flash.h"
;   22	#include "agontimer.h"
;   23	#include "crc32.h"
;   24	#include "filesize.h"
;   25	#include "./stdint.h"
;   26	#include <string.h>
;   27	
;   28	#define UNLOCKMATCHLENGTH 9
;   29	#define EXIT_FILENOTFOUND	4
;   30	#define EXIT_INVALIDPARAMETER	19
;   31	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
;   32	#define DEFAULT_VDPFIRMWARE	"firmware.bin"
;   33	
;   34	#define CMDUNKNOWN	0
;   35	#define CMDALL		1
;   36	#define CMDMOS		2
;   37	#define CMDVDP		3
;   38	#define CMDSILENT	4
;   39	
;   40	int errno; // needed by standard library
	SEGMENT CODE
;   41	enum states{firmware,retry,systemreset};
;   42	
;   43	// separate putch function that doesn't rely on a running MOS firmware
;   44	// UART0 initialization done by MOS firmware previously
;   45	// This utility doesn't run without MOS to load it anyway
;   46	int putch(int c)
;   47	{
_putch:
.DEFINE "_putch"

.VALUE _putch

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "putch",47,"_putch"

.LINE 47

.DEFINE "c"

.CLASS 65

.VALUE 6

.TYPE 4

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
.ENDEF

;   48		UINT8 lsr,temt;
;   49		
;   50		while((UART0_LSR & 0x40) == 0);
L_1:
.LINE 50

	IN0	A,(197)
	AND	A,%40
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_1
;   51		UART0_THR = c;
.LINE 51

	LD	A,(IX+%6)
	OUT0	(192),A
;   52		return c;
.LINE 52

	LD	HL,(IX+%6)
;   53	}
.LINE 53

	LD	SP,IX
	POP	IX
	RET	


;**************************** _putch ***************************
;Name                         Addr/Register   Size   Type
;c                                     IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "putch",53,"_putch"
;   54	
;   55	void beep(unsigned int number) {
_beep:
.DEFINE "_beep"

.VALUE _beep

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "beep",55,"_beep"

.LINE 55

.DEFINE "number"

.CLASS 65

.VALUE 6

.TYPE 14

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   56		while(number--) {
.LINE 56

	JR	L_5
L_6:
;   57			putch(7);
.LINE 57

	LD	BC,7
	PUSH	BC
	CALL	_putch
	POP	BC
;   58			delayms(250);
.LINE 58

	LD	BC,250
	PUSH	BC
	CALL	_delayms
	POP	BC
;   59		}
L_5:
.LINE 59

	LD	HL,(IX+%6)
	LD	IY,(IX+%6)
	LEA	IY,IY+%FFFFFFFF
	LD	(IX+%6),IY
	CALL	__icmpzero
	JR	NZ,L_6
;   60	}
.LINE 60

	LD	SP,IX
	POP	IX
	RET	


;**************************** _beep ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_putch                              IMPORT  -----   function
;number                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "beep",60,"_beep"
;   61	
;   62	uint8_t getCharAt(uint16_t x, uint16_t y) {
_getCharAt:
.DEFINE "_getCharAt"

.VALUE _getCharAt

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getCharAt",62,"_getCharAt"

.LINE 62

.DEFINE "x"

.CLASS 65

.VALUE 6

.TYPE 13

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE 9

.TYPE 13

.ENDEF

.DEFINE "sysvars"

.CLASS 65

.VALUE -3

.TAG "NONAME3"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   63		sysvar_t *sysvars = getsysvars();
.LINE 63

	CALL	_getsysvars
	LD	(IX+%FFFFFFFD),HL
;   64		delayms(20);
.LINE 64

	LD	BC,20
	PUSH	BC
	CALL	_delayms
	POP	BC
;   65		putch(23);
.LINE 65

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   66		putch(0);
.LINE 66

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   67		putch(131);
.LINE 67

	LD	BC,131
	PUSH	BC
	CALL	_putch
	POP	BC
;   68		putch(x & 0xFF);
.LINE 68

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   69		putch((x >> 8) & 0xFF);
.LINE 69

	LD	BC,(IX+%6)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   70		putch(y & 0xFF);
.LINE 70

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   71		putch((y >> 8) & 0xFF);
.LINE 71

	LD	BC,(IX+%9)
	CALL	__stoiu
	LD	A,%8
	CALL	__ishrs_b
	LD	A,L
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   72		delayms(100);
.LINE 72

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;   73		return sysvars->scrchar;
.LINE 73

	LD	IY,(IX+%FFFFFFFD)
	LD	A,(IY+%9)
;   74	}
.LINE 74

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCharAt ***************************
;Name                         Addr/Register   Size   Type
;_putch                              IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;_getsysvars                         IMPORT  -----   function
;sysvars                               IX-3      3   variable
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getCharAt",74,"_getCharAt"
;   75	
;   76	bool vdp_ota_present(void) {
_vdp_ota_present:
.DEFINE "_vdp_ota_present"

.VALUE _vdp_ota_present

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "vdp_ota_present",76,"_vdp_ota_present"

.LINE 76

.DEFINE "n"

.CLASS 65

.VALUE -2

.TYPE 13

.ENDEF

.DEFINE "test"

.CLASS 65

.VALUE -11

.DIM 9

.TYPE 98

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF5
	LD	SP,HL
;   77		char test[UNLOCKMATCHLENGTH];
;   78		uint16_t n;
;   79	
;   80		putch(23);
.LINE 80

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;   81		putch(0);
.LINE 81

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   82		putch(0xA1);
.LINE 82

	LD	BC,161
	PUSH	BC
	CALL	_putch
	POP	BC
;   83		putch(0);
.LINE 83

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   84		printf("unlock");
.LINE 84

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__5
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   85	
;   86		for(n = 0; n < UNLOCKMATCHLENGTH+1; n++) test[n] = getCharAt(n+8, 3);
.LINE 86

	LD	(IX+%FFFFFFFE),%0
	LD	(IX+%FFFFFFFF),%0
	JR	L_12
L_10:
	LD	BC,3
	PUSH	BC
	LD	IY,(IX+%FFFFFFFE)
	LEA	BC,IY+%8
	PUSH	BC
	CALL	_getCharAt
	POP	BC
	POP	BC
	LD	BC,(IX+%FFFFFFFE)
	CALL	__stoiu
	LD	BC,HL
	LEA	HL,IX+%FFFFFFF5
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+%FFFFFFFE)
	INC	HL
	LD	(IX+%FFFFFFFE),L
	LD	(IX+%FFFFFFFF),H
L_12:
	LD.LIS	BC,10
	LD	HL,(IX+%FFFFFFFE)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_10
;   87		// 3 - line on-screen
;   88		if(memcmp(test, "unlocked!",UNLOCKMATCHLENGTH) == 0) return true;
.LINE 88

	LD	BC,9
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	PEA	IX+%FFFFFFF5
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_14
	LD	A,%1
	JR	L_16
;   89		else return false;
L_14:
.LINE 89

	XOR	A,A
;   90	}
L_16:
.LINE 90

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vdp_ota_present ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;test                                 IX-11      9   variable
;n                                     IX-2      2   variable


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vdp_ota_present",90,"_vdp_ota_present"
	SEGMENT STRSECT
L__5:
	DB	"unlock"
	DB	0
L__7:
	DB	"unlocked!"
	DB	0
	SEGMENT DATA
_mos_magicnumbers:
	DB	243
	DB	237
	DB	125
	DB	91
	DB	195
.DEFINE "mos_magicnumbers"
.ALIAS "_mos_magicnumbers"
.CLASS 69
.VALUE _mos_magicnumbers
.DIM 5
.TYPE 108
.ENDEF
;   91	
;   92	uint8_t mos_magicnumbers[] = {0xF3, 0xED, 0x7D, 0x5B, 0xC3};
	SEGMENT CODE
;   93	#define MOS_MAGICLENGTH 5
;   94	bool containsMosHeader(uint8_t *filestart) {
_containsMosHeader:
.DEFINE "_containsMosHeader"

.VALUE _containsMosHeader

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsMosHeader",94,"_containsMosHeader"

.LINE 94

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;   95		uint8_t n;
;   96		bool match = true;
.LINE 96

	LD	(IX+%FFFFFFFE),%1
;   97	
;   98		for(n = 0; n < MOS_MAGICLENGTH; n++) if(mos_magicnumbers[n] != filestart[n]) match = false;
.LINE 98

	LD	(IX+%FFFFFFFF),%0
	JR	L_21
L_19:
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_mos_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_20
	LD	(IX+%FFFFFFFE),%0
L_20:
	INC	(IX+%FFFFFFFF)
L_21:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%5
	JR	C,L_19
;   99		return match;
.LINE 99

	LD	A,(IX+%FFFFFFFE)
;  100	}
.LINE 100

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsMosHeader ***************************
;Name                         Addr/Register   Size   Type
;_mos_magicnumbers                   STATIC      5   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsMosHeader",100,"_containsMosHeader"
	SEGMENT DATA
_esp32_magicnumbers:
	DB	50
	DB	84
	DB	205
	DB	171
.DEFINE "esp32_magicnumbers"
.ALIAS "_esp32_magicnumbers"
.CLASS 69
.VALUE _esp32_magicnumbers
.DIM 4
.TYPE 108
.ENDEF
;  101	
;  102	uint8_t esp32_magicnumbers[] = {0x32, 0x54, 0xCD, 0xAB};
	SEGMENT CODE
;  103	#define ESP32_MAGICLENGTH 4
;  104	#define ESP32_MAGICSTART 0x20
;  105	bool containsESP32Header(uint8_t *filestart) {
_containsESP32Header:
.DEFINE "_containsESP32Header"

.VALUE _containsESP32Header

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "containsESP32Header",105,"_containsESP32Header"

.LINE 105

.DEFINE "filestart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "n"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "match"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  106		uint8_t n;
;  107		bool match = true;
.LINE 107

	LD	(IX+%FFFFFFFE),%1
;  108	
;  109		filestart += ESP32_MAGICSTART; // start of ESP32 magic header
.LINE 109

	LD	IY,(IX+%6)
	LEA	IY,IY+%20
	LD	(IX+%6),IY
;  110		for(n = 0; n < ESP32_MAGICLENGTH; n++) {
.LINE 110

	LD	(IX+%FFFFFFFF),%0
	JR	L_28
L_26:
;  111			if(esp32_magicnumbers[n] != filestart[n]) match = false;
.LINE 111

	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,_esp32_magicnumbers
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IX+%FFFFFFFF)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+%6)
	ADD	HL,BC
	LD	A,(IY)
	CP	A,(HL)
	JR	Z,L_27
	LD	(IX+%FFFFFFFE),%0
;  112		}
L_27:
.LINE 112

	INC	(IX+%FFFFFFFF)
L_28:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%4
	JR	C,L_26
;  113		return match;
.LINE 113

	LD	A,(IX+%FFFFFFFE)
;  114	}
.LINE 114

	LD	SP,IX
	POP	IX
	RET	


;**************************** _containsESP32Header ***************************
;Name                         Addr/Register   Size   Type
;_esp32_magicnumbers                 STATIC      4   variable
;match                                 IX-2      1   variable
;n                                     IX-1      1   variable
;filestart                             IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "containsESP32Header",114,"_containsESP32Header"
;  115	
;  116	void print_version(void) {
_print_version:
.DEFINE "_print_version"

.VALUE _print_version

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "print_version",116,"_print_version"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  117		printf("Agon firmware upgrade utility v1.6\n\r\n\r");
.LINE 117

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__16
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  118	}
.LINE 118

	LD	SP,IX
	POP	IX
	RET	


;**************************** _print_version ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "print_version",118,"_print_version"
	SEGMENT STRSECT
L__16:
	DB	"Agon firmware upgrade utility v1.6"
	DB	10,13,10,13,0
	SEGMENT CODE
;  119	
;  120	void usage(void) {
_usage:
.DEFINE "_usage"

.VALUE _usage

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "usage",120,"_usage"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  121		print_version();
.LINE 121

	CALL	_print_version
;  122		printf("Usage: FLASH [full | [mos <filename>] [vdp <filename>]] <-s|-silent>\n\r");
.LINE 122

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__18
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  123	}
.LINE 123

	LD	SP,IX
	POP	IX
	RET	


;**************************** _usage ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "usage",123,"_usage"
	SEGMENT STRSECT
L__18:
	DB	"Usage: FLASH [full | [mos <filename>] [vdp <filename>]] <-s|-silent>"
	DB	10,13,0
	SEGMENT CODE
;  124	
;  125	typedef enum {
;  126		MOS,
;  127		VDP
;  128	} flashtype;
;  129	
;  130	bool getResponse(void) {
_getResponse:
.DEFINE "_getResponse"

.VALUE _getResponse

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "getResponse",130,"_getResponse"

.LINE 130

.DEFINE "response"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
;  131		uint8_t response = 0;
.LINE 131

	LD	(IX+%FFFFFFFF),%0
;  132	
;  133		printf("Flash firmware (y/n)?");
.LINE 133

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__20
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  134		while((response != 'y') && (response != 'n')) response = tolower(getch());
.LINE 134

	JR	L_34
L_35:
	CALL	_getch
	LD	B,A
	LD	A,B
	SEXT	HL
	LD	L,B
	PUSH	HL
	CALL	_tolower
	POP	BC
	LD	(IX+%FFFFFFFF),L
L_34:
	LD	A,(IX+%FFFFFFFF)
	CP	A,%79
	JR	Z,L_38
	LD	A,(IX+%FFFFFFFF)
	CP	A,%6E
	JR	NZ,L_35
L_38:
;  135		if(response == 'n') printf("\r\nUser abort\n\r\n\r");
.LINE 135

	LD	A,(IX+%FFFFFFFF)
	CP	A,%6E
	JR	NZ,L_37
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__24
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  136		else printf("\r\n\r\n");
.LINE 136

	JR	L_39
L_37:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__25
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_39:
;  137		return response == 'y';
.LINE 137

	LD	A,(IX+%FFFFFFFF)
	CP	A,%79
	JR	NZ,L__27
	LD	A,%1
	JR	L__28
L__27:
	XOR	A,A
L__28:
;  138	}
.LINE 138

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getResponse ***************************
;Name                         Addr/Register   Size   Type
;_getch                              IMPORT  -----   function
;_tolower                            IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;response                              IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getResponse",138,"_getResponse"
	SEGMENT STRSECT
L__20:
	DB	"Flash firmware (y/n)?"
	DB	0
L__24:
	DB	13,10
	DB	"User abort"
	DB	10,13,10,13,0
L__25:
	DB	13,10,13,10,0
	SEGMENT CODE
;  139	
;  140	uint8_t update_vdp(char *filename) {
_update_vdp:
.DEFINE "_update_vdp"

.VALUE _update_vdp

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_vdp",140,"_update_vdp"

.LINE 140

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -4

.TYPE 14

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -40

.DIM 36

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD8
	LD	SP,HL
;  141		uint8_t file;
;  142		uint8_t buffer[ESP32_MAGICLENGTH + ESP32_MAGICSTART];
;  143		uint24_t filesize;
;  144		//uint32_t crcresult;
;  145		uint24_t size, n;
;  146		uint8_t response;
;  147	
;  148		putch(12); // cls
.LINE 148

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  149		print_version();	
.LINE 149

	CALL	_print_version
;  150		printf("Unlocking VDP updater...\r\n");
.LINE 150

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__30
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  151		
;  152		if(!vdp_ota_present()) {
.LINE 152

	CALL	_vdp_ota_present
	OR	A,A
	JR	NZ,L_42
;  153			printf(" failed - incompatible VDP\r\n");
.LINE 153

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__32
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  154			beep(5);
.LINE 154

	LD	BC,5
	PUSH	BC
	CALL	_beep
	POP	BC
;  155			return 0;
.LINE 155

	XOR	A,A
	JR	L_47
;  156		}
L_42:
.LINE 156

;  157		//vdp_ota_present();
;  158	
;  159		file = mos_fopen(filename, fa_read);
.LINE 159

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  160		if(!file) {
.LINE 160

	OR	A,A
	JR	NZ,L_44
;  161			printf("Error opening \"%s\"\n\r",filename);
.LINE 161

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__34
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__35
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  162			return EXIT_FILENOTFOUND;
.LINE 162

	LD	A,%4
	JR	L_47
;  163		}
L_44:
.LINE 163

;  164	
;  165		mos_fread(file, (char *)buffer, ESP32_MAGICLENGTH + ESP32_MAGICSTART);
.LINE 165

	LD	BC,36
	PUSH	BC
	PEA	IX+%FFFFFFD8
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  166		if(!containsESP32Header(buffer)) {
.LINE 166

	PEA	IX+%FFFFFFD8
	CALL	_containsESP32Header
	POP	BC
	OR	A,A
	JR	NZ,L_46
;  167			printf("File does not contain valid ESP32 code\r\n");
.LINE 167

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__37
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  168			mos_fclose(file);
.LINE 168

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  169			return EXIT_INVALIDPARAMETER;
.LINE 169

	LD	A,%13
	JR	L_47
;  170		}
L_46:
.LINE 170

;  171		//printf("\r\nValid ESP32 code\r\nCalculating CRC32");
;  172		printf("\r\nValid ESP32 code\r\n");
.LINE 172

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__38
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  173		//crc32_initialize();
;  174		//mos_flseek(file, 0);
;  175		//while(1) {
;  176		//	size = mos_fread(file, (char *)BUFFER1, BLOCKSIZE);
;  177		//	if(size == 0) break;
;  178		//	putch('.');
;  179			//crc32((char *)BUFFER1, size);
;  180		//}
;  181		//crcresult = crc32_finalize();
;  182	
;  183		// Do actual work here
;  184		mos_flseek(file, 0); // reset to zero, because we read part of the header already
.LINE 184

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_flseek
	POP	BC
	POP	BC
	POP	BC
;  185		printf("Updating VDP firmware\r\n");
.LINE 185

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__39
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  186		filesize = getFileSize(file);	
.LINE 186

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFFC),HL
;  187		startVDPupdate(file, filesize);
.LINE 187

	LD	BC,HL
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_startVDPupdate
	POP	BC
	POP	BC
;  188		mos_fclose(file);
.LINE 188

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  189		//reset();
;  190		return 0; // will never return, but let's give the compiler a break
.LINE 190

	XOR	A,A
;  191	}
L_47:
.LINE 191

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_vdp ***************************
;Name                         Addr/Register   Size   Type
;_startVDPupdate                     IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_mos_flseek                         IMPORT  -----   function
;_mos_fclose                         IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_putch                              IMPORT  -----   function
;buffer                               IX-40     36   variable
;filesize                              IX-4      3   variable
;file                                  IX-1      1   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 49 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_vdp",191,"_update_vdp"
	SEGMENT STRSECT
L__30:
	DB	"Unlocking VDP updater..."
	DB	13,10,0
L__32:
	DB	" failed - incompatible VDP"
	DB	13,10,0
L__34:
	DB	"Error opening \""
	DB	0
L__35:
	DB	"\""
	DB	10,13,0
L__37:
	DB	"File does not contain valid ESP32 code"
	DB	13,10,0
L__38:
	DB	13,10
	DB	"Valid ESP32 code"
	DB	13,10,0
L__39:
	DB	"Updating VDP firmware"
	DB	13,10,0
	SEGMENT CODE
;  192	
;  193	uint8_t update_mos(char *filename) {
_update_mos:
.DEFINE "_update_mos"

.VALUE _update_mos

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "update_mos",193,"_update_mos"

.LINE 193

.DEFINE "filename"

.CLASS 65

.VALUE 6

.TYPE 34

.ENDEF

.DEFINE "counter"

.CLASS 65

.VALUE -3

.TYPE 14

.ENDEF

.DEFINE "file"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

.DEFINE "addressfrom"

.CLASS 65

.VALUE -7

.TYPE 14

.ENDEF

.DEFINE "pagemax"

.CLASS 65

.VALUE -10

.TYPE 14

.ENDEF

.DEFINE "state"

.CLASS 65

.VALUE -13

.TYPE 4

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -16

.TYPE 14

.ENDEF

.DEFINE "addressto"

.CLASS 65

.VALUE -19

.TYPE 14

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -22

.TYPE 34

.ENDEF

.DEFINE "got"

.CLASS 65

.VALUE -25

.TYPE 14

.ENDEF

.DEFINE "value"

.CLASS 65

.VALUE -26

.TYPE 12

.ENDEF

.DEFINE "crcresult"

.CLASS 65

.VALUE -30

.TYPE 15

.ENDEF

.DEFINE "lastpagebytes"

.CLASS 65

.VALUE -33

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -39

.TYPE 14

.ENDEF

.DEFINE "crcexpected"

.CLASS 65

.VALUE -43

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD5
	LD	SP,HL
;  194		uint32_t crcexpected,crcresult;
;  195		uint24_t size = 0;
.LINE 195

	LD	BC,0
	LD	(IX+%FFFFFFD9),BC
;  196		uint24_t got;
;  197		uint8_t file;
;  198		char* ptr = (char*)BUFFER1;
.LINE 198

	LD	BC,327680
	LD	(IX+%FFFFFFEA),BC
;  199		uint8_t value;
;  200		uint24_t counter,pagemax, lastpagebytes;
;  201		uint24_t addressto,addressfrom;
;  202		enum states state;
;  203		uint24_t filesize;
;  204	
;  205		putch(12); // cls
.LINE 205

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  206		print_version();	
.LINE 206

	CALL	_print_version
;  207		
;  208		file = mos_fopen(filename, fa_read);
.LINE 208

	LD	BC,1
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFC),A
;  209		if(!file)
.LINE 209

	OR	A,A
	JR	NZ,L_49
;  210		{
;  211			printf("Error opening \"%s\"\n\r",filename);
.LINE 211

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__42
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__43
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  212			return EXIT_FILENOTFOUND;
.LINE 212

	LD	A,%4
	JR	L_90
;  213		}
L_49:
.LINE 213

;  214	
;  215		mos_fread(file, (char *)BUFFER1, MOS_MAGICLENGTH);
.LINE 215

	LD	BC,5
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  216		if(!containsMosHeader((uint8_t *)BUFFER1)) {
.LINE 216

	LD	BC,327680
	PUSH	BC
	CALL	_containsMosHeader
	POP	BC
	OR	A,A
	JR	NZ,L_51
;  217			printf("File does not contain valid MOS ez80 startup code\r\n");
.LINE 217

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__45
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  218			mos_fclose(file);
.LINE 218

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  219			return EXIT_INVALIDPARAMETER;
.LINE 219

	LD	A,%13
	JR	L_90
;  220		}
L_51:
.LINE 220

;  221	
;  222		filesize = getFileSize(file);
.LINE 222

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFF0),HL
;  223		if(filesize > FLASHSIZE) {
.LINE 223

	LD	BC,HL
	LD	HL,131072
	OR	A,A
	SBC	HL,BC
	JR	NC,L_53
;  224			printf("File too large for 128KB embedded flash\r\n");
.LINE 224

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__47
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  225			mos_fclose(file);
.LINE 225

	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  226			return EXIT_INVALIDPARAMETER;
.LINE 226

	LD	A,%13
	JR	L_90
;  227		}
L_53:
.LINE 227

;  228	
;  229		printf("\r\nValid ez80 code\r\nCalculating CRC32");
.LINE 229

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__48
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  230	
;  231		crc32_initialize();
.LINE 231

	CALL	_crc32_initialize
;  232		mos_flseek(file, 0);
.LINE 232

	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_flseek
	POP	BC
	POP	BC
	POP	BC
;  233		
;  234		// Read file to memory
;  235		while((got = mos_fread(file, ptr, BLOCKSIZE)) > 0) {
.LINE 235

	JR	L_54
L_55:
;  236			crc32(ptr, got);
.LINE 236

	LD	BC,(IX+%FFFFFFE7)
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  237			ptr += got;
.LINE 237

	LD	BC,(IX+%FFFFFFE7)
	LD	HL,(IX+%FFFFFFEA)
	ADD	HL,BC
	LD	(IX+%FFFFFFEA),HL
;  238			putch('.');
.LINE 238

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  239		}		
L_54:
.LINE 239

	LD	BC,16384
	PUSH	BC
	LD	BC,(IX+%FFFFFFEA)
	PUSH	BC
	LD	C,(IX+%FFFFFFFC)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFE7),HL
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_55
;  240		crcresult = crc32_finalize();
.LINE 240

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFE2),HL
	LD	(IX+%FFFFFFE5),E
;  241		// Actual work here	
;  242		di();								// prohibit any access to the old MOS firmware
.LINE 242

	di
;  243	
;  244		// start address in flash
;  245		addressto = FLASHSTART;
.LINE 245

	LD	BC,0
	LD	(IX+%FFFFFFED),BC
;  246		addressfrom = BUFFER1;
.LINE 246

	LD	BC,327680
	LD	(IX+%FFFFFFF9),BC
;  247		
;  248		crcexpected = crcresult;
.LINE 248

	LD	BC,(IX+%FFFFFFE2)
	LD	A,(IX+%FFFFFFE5)
	LD	(IX+%FFFFFFD5),BC
	LD	(IX+%FFFFFFD8),A
;  249		state = firmware;
.LINE 249

	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
;  250		size = filesize;	
.LINE 250

	LD	BC,(IX+%FFFFFFF0)
	LD	(IX+%FFFFFFD9),BC
;  251		while(1)
L_88:
.LINE 251

;  252		{
;  253			switch(state)
.LINE 253

	LD	HL,(IX+%FFFFFFF3)
	CALL	__case8D
	JP	(HL)
L__50:
	DW	2
	DB	0
	DW24	L_57	

	DB	1
	DW24	L_58	

	DW24	L_59	

;  254			{
;  255				case firmware:
L_57:
.LINE 255

;  256					// start address in flash
;  257					addressfrom = BUFFER1;
.LINE 257

	LD	BC,327680
	LD	(IX+%FFFFFFF9),BC
;  258					crc32_initialize();
.LINE 258

	CALL	_crc32_initialize
;  259					break;
.LINE 259

	JR	L_60
;  260				case retry:
L_58:
.LINE 260

;  261					// start address in flash
;  262					addressfrom = BUFFER1;
.LINE 262

	LD	BC,327680
	LD	(IX+%FFFFFFF9),BC
;  263					crc32_initialize();
.LINE 263

	CALL	_crc32_initialize
;  264					break;
.LINE 264

	JR	L_60
;  265				default:
L_59:
.LINE 265

;  266					// RESET SYSTEM
;  267					printf("\r\n");
.LINE 267

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__51
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  268					printf("Done\r\n");
.LINE 268

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__52
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  269					//printf("Press reset button");
;  270					//while(1); // force cold boot for the user, so VDP will reset optimally
;  271					return 0;
.LINE 271

	XOR	A,A
	JR	L_90
;  272			}
L_60:
.LINE 272

;  273	
;  274			// Unprotect and erase flash
;  275			printf("Erasing flash... ");
.LINE 275

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__53
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  276			enableFlashKeyRegister();	// unlock Flash Key Register, so we can write to the Flash Write/Erase protection registers
.LINE 276

	CALL	_enableFlashKeyRegister
;  277			FLASH_PROT = 0;				// disable protection on all 8x16KB blocks in the flash
.LINE 277

	XOR	A,A
	OUT0	(250),A
;  278			enableFlashKeyRegister();	// will need to unlock again after previous write to the flash protection register
.LINE 278

	CALL	_enableFlashKeyRegister
;  279			FLASH_FDIV = 0x5F;			// Ceiling(18Mhz * 5,1us) = 95, or 0x5F
.LINE 279

	LD	A,%5F
	OUT0	(249),A
;  280			
;  281			for(counter = 0; counter < FLASHPAGES; counter++)
.LINE 281

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_66
L_64:
;  282			{
;  283				FLASH_PAGE = counter;
.LINE 283

	LD	A,(IX+%FFFFFFFD)
	OUT0	(252),A
;  284				FLASH_PGCTL = 0x02;			// Page erase bit enable, start erase
.LINE 284

	LD	A,%2
	OUT0	(255),A
;  285	
;  286				do
L_62:
.LINE 286

;  287				{
;  288					value = FLASH_PGCTL;
.LINE 288

	IN0	A,(255)
	LD	(IX+%FFFFFFE6),A
;  289				}
;  290				while(value & 0x02);// wait for completion of erase			
.LINE 290

	AND	A,%2
	JR	NZ,L_62
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  291			}
L_66:
.LINE 291

	LD	BC,128
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_64
;  292			
;  293			printf("\r\nWriting new firmware...\r\n");
.LINE 293

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__56
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  294			
;  295			// determine number of pages to write
;  296			pagemax = size/PAGESIZE;
.LINE 296

	LD	HL,(IX+%FFFFFFF0)
	LD	A,%A
	CALL	__ishru_b
	LD	(IX+%FFFFFFF6),HL
;  297			if(size%PAGESIZE) // last page has less than PAGESIZE bytes
.LINE 297

	LD	BC,1023
	LD	HL,(IX+%FFFFFFF0)
	CALL	__iand
	LD	(IX+%FFFFFFDC),HL
	CALL	__icmpzero
	JR	Z,L_69
;  298			{
;  299				pagemax += 1;
.LINE 299

	LD	BC,(IX+%FFFFFFF6)
	INC	BC
	LD	(IX+%FFFFFFF6),BC
;  300				lastpagebytes = size%PAGESIZE;			
.LINE 300

	LD	BC,(IX+%FFFFFFDC)
	LD	(IX+%FFFFFFDF),BC
;  301			}
;  302			else lastpagebytes = PAGESIZE; // normal last page
.LINE 302

	JR	L_77
L_69:
	LD	BC,1024
	LD	(IX+%FFFFFFDF),BC
L_77:
;  303			
;  304			// write out each page to flash
;  305			for(counter = 0; counter < pagemax; counter++)
.LINE 305

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_76
L_74:
;  306			{
;  307				printf("\rWriting flash page %03d/%03d", counter+1, pagemax);
.LINE 307

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__58
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,47
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	A,%3
	LD	(___print_fmt+5),A
	LD	A,%40
	LD	(___print_fmt+1),A
	LD	BC,(IX+%FFFFFFF6)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
;  308				
;  309				if(counter == (pagemax - 1)) // last page to write - might need to write less than PAGESIZE
.LINE 309

	LD	IY,(IX+%FFFFFFF6)
	LEA	HL,IY+%FFFFFFFF
	LD	BC,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_72
;  310					fastmemcpy(addressto,addressfrom,lastpagebytes);				
.LINE 310

	LD	BC,(IX+%FFFFFFDF)
	PUSH	BC
	LD	BC,(IX+%FFFFFFF9)
	PUSH	BC
	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
;  311					//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, lastpagebytes);
;  312				else 
.LINE 312

	JR	L_73
L_72:
;  313					fastmemcpy(addressto,addressfrom,PAGESIZE);
.LINE 313

	LD	BC,1024
	PUSH	BC
	LD	BC,(IX+%FFFFFFF9)
	PUSH	BC
	LD	BC,(IX+%FFFFFFED)
	PUSH	BC
	CALL	_fastmemcpy
	POP	BC
	POP	BC
	POP	BC
L_73:
;  314					//printf("Fake copy to %lx, from %lx, %lx bytes\r\n",addressto, addressfrom, PAGESIZE);
;  315			
;  316				addressto += PAGESIZE;
.LINE 316

	LD	BC,1024
	LD	HL,(IX+%FFFFFFED)
	ADD	HL,BC
	LD	(IX+%FFFFFFED),HL
;  317				addressfrom += PAGESIZE;
.LINE 317

	LD	HL,(IX+%FFFFFFF9)
	ADD	HL,BC
	LD	(IX+%FFFFFFF9),HL
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  318			}
L_76:
.LINE 318

	LD	BC,(IX+%FFFFFFF6)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	C,L_74
;  319			lockFlashKeyRegister();	// lock the flash before WARM reset
.LINE 319

	CALL	_lockFlashKeyRegister
;  320			printf("\r\n");
.LINE 320

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__61
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  321			
;  322			//Verify correct CRC in flash
;  323			printf("Verifying flash checksum... ");
.LINE 323

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__62
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  324			crc32((char*)FLASHSTART, size);
.LINE 324

	LD	BC,(IX+%FFFFFFF0)
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  325			crcresult = crc32_finalize();
.LINE 325

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFE2),HL
	LD	(IX+%FFFFFFE5),E
;  326	
;  327			if(crcresult == crcexpected)
.LINE 327

	LD	HL,(IX+%FFFFFFE2)
	LD	E,(IX+%FFFFFFE5)
	LD	BC,(IX+%FFFFFFD5)
	LD	A,(IX+%FFFFFFD8)
	CALL	__lcmpu
	JR	NZ,L_86
;  328			{
;  329				printf("- OK\r\n");
.LINE 329

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__64
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  330				state = systemreset;
.LINE 330

	LD	BC,2
	LD	(IX+%FFFFFFF3),BC
;  331			}
;  332			else // CRC Failure - next action depends on current state
.LINE 332

	JR	L_88
L_86:
;  333			{	 // User interaction not possible without MOS handling interrupts
;  334				switch(state)
.LINE 334

	LD	HL,(IX+%FFFFFFF3)
	CALL	__case8D
	JP	(HL)
L__65:
	DW	2
	DB	0
	DW24	L_79	

	DB	1
	DW24	L_80	

	DW24	L_83	

;  335				{
;  336					case firmware:
L_79:
.LINE 336

;  337						printf("\r\nError occured during flash write\r\nRetry...\r\n");
.LINE 337

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__66
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  338						state = retry;
.LINE 338

	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
;  339						break;
.LINE 339

	JR	L_88
;  340					case retry:
L_80:
.LINE 340

;  341						printf("\r\nRetry failed\r\n");
.LINE 341

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__67
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  342						while(1); // no more options unfortunately, system needs a firmware programmer
L_82:
.LINE 342

	JR	L_82
;  343					default:
L_83:
.LINE 343

;  344						state = retry;
.LINE 344

	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
	JR	L_88
;  345				}
;  346			}
;  347		}		
;  348		return 0;
;  349	}
L_90:
.LINE 349

	LD	SP,IX
	POP	IX
	RET	


;**************************** _update_mos ***************************
;Name                         Addr/Register   Size   Type
;_lockFlashKeyRegister               IMPORT  -----   function
;_fastmemcpy                         IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;_enableFlashKeyRegister             IMPORT  -----   function
;_crc32_finalize                     IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;_mos_flseek                         IMPORT  -----   function
;_crc32_initialize                   IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;_mos_fclose                         IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mos_fopen                          IMPORT  -----   function
;_putch                              IMPORT  -----   function
;crcexpected                          IX-43      4   variable
;size                                 IX-39      3   variable
;G_0                                  IX-36      3   variable
;lastpagebytes                        IX-33      3   variable
;crcresult                            IX-30      4   variable
;value                                IX-26      1   variable
;got                                  IX-25      3   variable
;ptr                                  IX-22      3   variable
;addressto                            IX-19      3   variable
;filesize                             IX-16      3   variable
;state                                IX-13      3   variable
;pagemax                              IX-10      3   variable
;addressfrom                           IX-7      3   variable
;file                                  IX-4      1   variable
;counter                               IX-3      3   variable
;filename                              IX+6      3   parameter


; Stack Frame Size: 52 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "update_mos",349,"_update_mos"
	SEGMENT STRSECT
L__42:
	DB	"Error opening \""
	DB	0
L__43:
	DB	"\""
	DB	10,13,0
L__45:
	DB	"File does not contain valid MOS ez80 startup code"
	DB	13,10,0
L__47:
	DB	"File too large for 128KB embedded flash"
	DB	13,10,0
L__48:
	DB	13,10
	DB	"Valid ez80 code"
	DB	13,10
	DB	"Calculating CRC32"
	DB	0
L__51:
	DB	13,10,0
L__52:
	DB	"Done"
	DB	13,10,0
L__53:
	DB	"Erasing flash... "
	DB	0
L__56:
	DB	13,10
	DB	"Writing new firmware..."
	DB	13,10,0
L__58:
	DB	13
	DB	"Writing flash page "
	DB	0
L__61:
	DB	13,10,0
L__62:
	DB	"Verifying flash checksum... "
	DB	0
L__64:
	DB	"- OK"
	DB	13,10,0
L__66:
	DB	13,10
	DB	"Error occured during flash write"
	DB	13,10
	DB	"Retry..."
	DB	13,10,0
L__67:
	DB	13,10
	DB	"Retry failed"
	DB	13,10,0
	SEGMENT CODE
;  350	
;  351	void echoVDP(uint8_t value) {
_echoVDP:
.DEFINE "_echoVDP"

.VALUE _echoVDP

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "echoVDP",351,"_echoVDP"

.LINE 351

.DEFINE "value"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  352		putch(23);
.LINE 352

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;  353		putch(0);
.LINE 353

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;  354		putch(0x80);
.LINE 354

	LD	BC,128
	PUSH	BC
	CALL	_putch
	POP	BC
;  355		putch(value);
.LINE 355

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;  356		delayms(100);
.LINE 356

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;  357	}
.LINE 357

	LD	SP,IX
	POP	IX
	RET	


;**************************** _echoVDP ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_putch                              IMPORT  -----   function
;value                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "echoVDP",357,"_echoVDP"
;  358	
;  359	int getCommand(const char *command) {
_getCommand:
.DEFINE "_getCommand"

.VALUE _getCommand

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "getCommand",359,"_getCommand"

.LINE 359

.DEFINE "command"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  360		if(memcmp(command, "all", 4) == 0) return CMDALL;
.LINE 360

	LD	BC,4
	PUSH	BC
	LD	BC,L__70
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_94
	LD	HL,1
	JR	L_100
L_94:
;  361		if(memcmp(command, "mos", 3) == 0) return CMDMOS;
.LINE 361

	LD	BC,3
	PUSH	BC
	LD	BC,L__72
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_96
	LD	HL,2
	JR	L_100
L_96:
;  362		if(memcmp(command, "vdp", 3) == 0) return CMDVDP;
.LINE 362

	LD	BC,3
	PUSH	BC
	LD	BC,L__74
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_98
	LD	HL,3
	JR	L_100
L_98:
;  363		if(memcmp(command, "silent", 6) == 0) return CMDSILENT;
.LINE 363

	LD	BC,6
	PUSH	BC
	LD	BC,L__76
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_memcmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_99
	LD	HL,4
	JR	L_100
L_99:
;  364		return CMDUNKNOWN;
.LINE 364

	OR	A,A
	SBC	HL,HL
;  365	}
L_100:
.LINE 365

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCommand ***************************
;Name                         Addr/Register   Size   Type
;_memcmp                             IMPORT  -----   function
;command                               IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getCommand",365,"_getCommand"
	SEGMENT STRSECT
L__70:
	DB	"all"
	DB	0
L__72:
	DB	"mos"
	DB	0
L__74:
	DB	"vdp"
	DB	0
L__76:
	DB	"silent"
	DB	0
	SEGMENT DATA
_flashmos:
	DB	0
.DEFINE "flashmos"
.ALIAS "_flashmos"
.CLASS 69
.VALUE _flashmos
.TYPE 12
.ENDEF
	SEGMENT BSS
_mosfilename:
	DS	256
.DEFINE "mosfilename"
.ALIAS "_mosfilename"
.CLASS 83
.VALUE _mosfilename
.DIM 256
.TYPE 98
.ENDEF
	SEGMENT DATA
_flashvdp:
	DB	0
.DEFINE "flashvdp"
.ALIAS "_flashvdp"
.CLASS 69
.VALUE _flashvdp
.TYPE 12
.ENDEF
	SEGMENT BSS
_vdpfilename:
	DS	256
.DEFINE "vdpfilename"
.ALIAS "_vdpfilename"
.CLASS 83
.VALUE _vdpfilename
.DIM 256
.TYPE 98
.ENDEF
	SEGMENT DATA
_silent:
	DB	0
.DEFINE "silent"
.ALIAS "_silent"
.CLASS 69
.VALUE _silent
.TYPE 12
.ENDEF
;  366	
;  367	bool flashmos = false;
;  368	char mosfilename[256];
;  369	bool flashvdp = false;
;  370	char vdpfilename[256];
;  371	bool silent = false;
	SEGMENT CODE
;  372	
;  373	bool parseCommands(int argc, char *argv[]) {
_parseCommands:
.DEFINE "_parseCommands"

.VALUE _parseCommands

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "parseCommands",373,"_parseCommands"

.LINE 373

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "argcounter"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "command"

.CLASS 65

.VALUE -15

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF1
	LD	SP,HL
;  374		int argcounter;
;  375		int command;
;  376	
;  377		argcounter = 1;
.LINE 377

	LD	BC,1
	LD	(IX+%FFFFFFFD),BC
;  378		while(argcounter < argc) {
.LINE 378

	JR	L_127
L_128:
;  379			command = getCommand(argv[argcounter]);
.LINE 379

	LD	HL,(IX+%FFFFFFFD)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_getCommand
	POP	BC
	LD	(IX+%FFFFFFF1),HL
;  380			switch(command) {
.LINE 380

	CALL	__seqcaseD
	JP	(HL)
L__79:
	DW	5
	DW	0
	DB	0
	DW24	L_101	

	DW24	L_102	

	DW24	L_106	

	DW24	L_114	

	DW24	L_122	

	DW24	L_126	

;  381				case CMDUNKNOWN:
L_101:
.LINE 381

;  382					return false;
.LINE 382

	XOR	A,A
	JR	L_135
;  383					break;
;  384				case CMDALL:
L_102:
.LINE 384

;  385					if(flashmos || flashvdp) return false;
.LINE 385

	LD	A,(_flashmos)
	OR	A,A
	JR	NZ,L_104
	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_105
L_104:
	XOR	A,A
	JR	L_135
L_105:
;  386					strcpy(mosfilename, DEFAULT_MOSFIRMWARE);
.LINE 386

	LD	BC,L__82
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  387					strcpy(vdpfilename, DEFAULT_VDPFIRMWARE);
.LINE 387

	LD	BC,L__83
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  388					flashmos = true;
.LINE 388

	LD	A,%1
	LD	(_flashmos),A
;  389					flashvdp = true;
.LINE 389

	LD	(_flashvdp),A
;  390					break;
.LINE 390

	JR	L_126
;  391				case CMDMOS:
L_106:
.LINE 391

;  392					if(flashmos) return false;
.LINE 392

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_112
	XOR	A,A
	JR	L_135
L_112:
;  393					if((argc > (argcounter+1)) && (getCommand(argv[argcounter + 1]) == CMDUNKNOWN)) {
.LINE 393

	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
	LD	BC,(IX+%6)
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	JP	P,L_111
	LD	HL,(IX+%FFFFFFFA)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_getCommand
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_111
;  394						strcpy(mosfilename, argv[argcounter + 1]);
.LINE 394

	LD	HL,(IX+%FFFFFFFA)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  395						argcounter++;
.LINE 395

	LD	BC,(IX+%FFFFFFFA)
	LD	(IX+%FFFFFFFD),BC
;  396					}
;  397					else {
.LINE 397

	JR	L_113
L_111:
;  398						strcpy(mosfilename, DEFAULT_MOSFIRMWARE);
.LINE 398

	LD	BC,L__87
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  399					}
L_113:
.LINE 399

;  400					flashmos = true;
.LINE 400

	LD	A,%1
	LD	(_flashmos),A
;  401					break;
.LINE 401

	JR	L_126
;  402				case CMDVDP:
L_114:
.LINE 402

;  403					if(flashvdp) return false;
.LINE 403

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_120
	XOR	A,A
	JR	L_135
L_120:
;  404					if((argc > (argcounter+1)) && (getCommand(argv[argcounter + 1]) == CMDUNKNOWN)) {
.LINE 404

	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFF7),BC
	LD	BC,(IX+%6)
	LD	HL,(IX+%FFFFFFF7)
	OR	A,A
	SBC	HL,BC
	JP	P,L_119
	LD	HL,(IX+%FFFFFFF7)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_getCommand
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_119
;  405						strcpy(vdpfilename, argv[argcounter + 1]);
.LINE 405

	LD	HL,(IX+%FFFFFFF7)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+%9)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  406						argcounter++;
.LINE 406

	LD	BC,(IX+%FFFFFFF7)
	LD	(IX+%FFFFFFFD),BC
;  407					}
;  408					else {
.LINE 408

	JR	L_121
L_119:
;  409						strcpy(vdpfilename, DEFAULT_VDPFIRMWARE);
.LINE 409

	LD	BC,L__91
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;  410					}
L_121:
.LINE 410

;  411					flashvdp = true;
.LINE 411

	LD	A,%1
	LD	(_flashvdp),A
;  412					break;
.LINE 412

	JR	L_126
;  413				case CMDSILENT:
L_122:
.LINE 413

;  414					if(silent) return false;
.LINE 414

	LD	A,(_silent)
	OR	A,A
	JR	Z,L_124
	XOR	A,A
	JR	L_135
L_124:
;  415					silent = true;
.LINE 415

	LD	A,%1
	LD	(_silent),A
;  416					break;
;  417			}
L_126:
.LINE 417

;  418			argcounter++;
.LINE 418

	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;  419		}
L_127:
.LINE 419

	LD	BC,(IX+%6)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JP	M,L_128
;  420		return (flashvdp || flashmos);
.LINE 420

	LD	A,(_flashvdp)
	OR	A,A
	JR	NZ,L_130
	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_131
L_130:
;  421	}
.LINE 421

	LD	BC,1
	LD	(IX+%FFFFFFF4),BC
	JR	L_132
L_131:
	LD	BC,0
	LD	(IX+%FFFFFFF4),BC
L_132:
	LD	A,(IX+%FFFFFFF4)
L_135:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _parseCommands ***************************
;Name                         Addr/Register   Size   Type
;_silent                             STATIC      1   variable
;_vdpfilename                        STATIC    256   variable
;_mosfilename                        STATIC    256   variable
;_strcpy                             IMPORT  -----   function
;_flashvdp                           STATIC      1   variable
;_flashmos                           STATIC      1   variable
;command                              IX-15      3   variable
;temp133                              IX-12      3   variable
;G_4                                   IX-9      3   variable
;G_1                                   IX-6      3   variable
;argcounter                            IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "parseCommands",421,"_parseCommands"
	SEGMENT STRSECT
L__82:
	DB	"MOS.bin"
	DB	0
L__83:
	DB	"firmware.bin"
	DB	0
L__87:
	DB	"MOS.bin"
	DB	0
L__91:
	DB	"firmware.bin"
	DB	0
	SEGMENT CODE
;  422	
;  423	bool filesExist(void) {
_filesExist:
.DEFINE "_filesExist"

.VALUE _filesExist

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "filesExist",423,"_filesExist"

.LINE 423

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "filesexist"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	DEC	SP
	DEC	SP
;  424		uint8_t file;
;  425		bool filesexist = true;
.LINE 425

	LD	(IX+%FFFFFFFE),%1
;  426	
;  427		if(flashmos) {
.LINE 427

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_142
;  428			file = mos_fopen(mosfilename, fa_read);
.LINE 428

	LD	BC,1
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  429			if(!file) {
.LINE 429

	OR	A,A
	JR	NZ,L_137
;  430				printf("Error opening MOS firmware \"%s\"\n\r",mosfilename);
.LINE 430

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__99
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__100
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  431				filesexist = false;
.LINE 431

	LD	(IX+%FFFFFFFE),%0
;  432			}
L_137:
.LINE 432

;  433			mos_fclose(file);
.LINE 433

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  434		}
L_142:
.LINE 434

;  435	
;  436		if(flashvdp) {
.LINE 436

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_143
;  437			file = mos_fopen(vdpfilename, fa_read);
.LINE 437

	LD	BC,1
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  438			if(!file) {
.LINE 438

	OR	A,A
	JR	NZ,L_140
;  439				printf("Error opening VDP firmware \"%s\"\n\r",vdpfilename);
.LINE 439

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__103
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__104
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  440				filesexist = false;
.LINE 440

	LD	(IX+%FFFFFFFE),%0
;  441			}
L_140:
.LINE 441

;  442			mos_fclose(file);
.LINE 442

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  443		}
L_143:
.LINE 443

;  444	
;  445		return filesexist;
.LINE 445

	LD	A,(IX+%FFFFFFFE)
;  446	}
.LINE 446

	LD	SP,IX
	POP	IX
	RET	


;**************************** _filesExist ***************************
;Name                         Addr/Register   Size   Type
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_mos_fclose                         IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_mos_fopen                          IMPORT  -----   function
;_flashmos                           STATIC      1   variable
;filesexist                            IX-2      1   variable
;file                                  IX-1      1   variable


; Stack Frame Size: 8 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "filesExist",446,"_filesExist"
	SEGMENT STRSECT
L__99:
	DB	"Error opening MOS firmware \""
	DB	0
L__100:
	DB	"\""
	DB	10,13,0
L__103:
	DB	"Error opening VDP firmware \""
	DB	0
L__104:
	DB	"\""
	DB	10,13,0
	SEGMENT CODE
;  447	
;  448	bool firmwareContentOK(void) {
_firmwareContentOK:
.DEFINE "_firmwareContentOK"

.VALUE _firmwareContentOK

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "firmwareContentOK",448,"_firmwareContentOK"

.LINE 448

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "validfirmware"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "filesize"

.CLASS 65

.VALUE -5

.TYPE 14

.ENDEF

.DEFINE "buffer"

.CLASS 65

.VALUE -41

.DIM 36

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD7
	LD	SP,HL
;  449		uint8_t file;
;  450		uint24_t filesize;
;  451		uint8_t buffer[ESP32_MAGICLENGTH + ESP32_MAGICSTART];
;  452		bool validfirmware = true;
.LINE 452

	LD	(IX+%FFFFFFFE),%1
;  453	
;  454		if(flashmos) {
.LINE 454

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_153
;  455			file = mos_fopen(mosfilename, fa_read);
.LINE 455

	LD	BC,1
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  456			mos_fread(file, (char *)BUFFER1, MOS_MAGICLENGTH);
.LINE 456

	LD	BC,5
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  457			if(!containsMosHeader((uint8_t *)BUFFER1)) {
.LINE 457

	LD	BC,327680
	PUSH	BC
	CALL	_containsMosHeader
	POP	BC
	OR	A,A
	JR	NZ,L_146
;  458				printf("\"%s\" does not contain valid MOS ez80 startup code\r\n", mosfilename);
.LINE 458

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,34
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__108
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  459				validfirmware = false;
.LINE 459

	LD	(IX+%FFFFFFFE),%0
;  460			}
L_146:
.LINE 460

;  461			filesize = getFileSize(file);
.LINE 461

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_getFileSize
	POP	BC
	LD	(IX+%FFFFFFFB),HL
;  462			if(filesize > FLASHSIZE) {
.LINE 462

	LD	BC,HL
	LD	HL,131072
	OR	A,A
	SBC	HL,BC
	JR	NC,L_148
;  463				printf("\"%s\" too large for 128KB embedded flash\r\n", mosfilename);
.LINE 463

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,34
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__110
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  464				validfirmware = false;
.LINE 464

	LD	(IX+%FFFFFFFE),%0
;  465			}
L_148:
.LINE 465

;  466			mos_fclose(file);
.LINE 466

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  467		}
L_153:
.LINE 467

;  468		if(flashvdp) {
.LINE 468

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_154
;  469			file = mos_fopen(vdpfilename, fa_read);
.LINE 469

	LD	BC,1
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  470			mos_fread(file, (char *)buffer, ESP32_MAGICLENGTH + ESP32_MAGICSTART);
.LINE 470

	LD	BC,36
	PUSH	BC
	PEA	IX+%FFFFFFD7
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
;  471			if(!containsESP32Header(buffer)) {
.LINE 471

	PEA	IX+%FFFFFFD7
	CALL	_containsESP32Header
	POP	BC
	OR	A,A
	JR	NZ,L_151
;  472				printf("\"%s\" does not contain valid ESP32 code\r\n", vdpfilename);
.LINE 472

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,34
	PUSH	BC
	CALL	___print_uputch
	POP	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,L__113
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  473				validfirmware = false;
.LINE 473

	LD	(IX+%FFFFFFFE),%0
;  474			}
L_151:
.LINE 474

;  475			mos_fclose(file);
.LINE 475

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  476		}
L_154:
.LINE 476

;  477		return validfirmware;
.LINE 477

	LD	A,(IX+%FFFFFFFE)
;  478	}
.LINE 478

	LD	SP,IX
	POP	IX
	RET	


;**************************** _firmwareContentOK ***************************
;Name                         Addr/Register   Size   Type
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_mos_fclose                         IMPORT  -----   function
;_getFileSize                        IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_mos_fopen                          IMPORT  -----   function
;_flashmos                           STATIC      1   variable
;buffer                               IX-41     36   variable
;filesize                              IX-5      3   variable
;validfirmware                         IX-2      1   variable
;file                                  IX-1      1   variable


; Stack Frame Size: 47 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "firmwareContentOK",478,"_firmwareContentOK"
	SEGMENT STRSECT
L__108:
	DB	"\" does not contain valid MOS ez80 startup code"
	DB	13,10,0
L__110:
	DB	"\" too large for 128KB embedded flash"
	DB	13,10,0
L__113:
	DB	"\" does not contain valid ESP32 code"
	DB	13,10,0
	SEGMENT CODE
;  479	void showCRC32(void) {
_showCRC32:
.DEFINE "_showCRC32"

.VALUE _showCRC32

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "showCRC32",479,"_showCRC32"

.LINE 479

.DEFINE "file"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -4

.TYPE 34

.ENDEF

.DEFINE "got"

.CLASS 65

.VALUE -7

.TYPE 14

.ENDEF

.DEFINE "size"

.CLASS 65

.VALUE -10

.TYPE 14

.ENDEF

.DEFINE "vdpcrc"

.CLASS 65

.VALUE -14

.TYPE 15

.ENDEF

.DEFINE "moscrc"

.CLASS 65

.VALUE -18

.TYPE 15

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFEE
	LD	SP,HL
;  480		uint8_t file;
;  481		uint24_t got,size;
;  482		uint32_t moscrc,vdpcrc;
;  483		char* ptr;
;  484	
;  485		moscrc = 0;
.LINE 485

	LD	BC,0
	XOR	A,A
	LD	(IX+%FFFFFFEE),BC
	LD	(IX+%FFFFFFF1),A
;  486		vdpcrc = 0;
.LINE 486

	XOR	A,A
	LD	(IX+%FFFFFFF2),BC
	LD	(IX+%FFFFFFF5),A
;  487	
;  488		printf("Calculating CRC");
.LINE 488

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__115
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  489	
;  490		if(flashmos) {
.LINE 490

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_166
;  491			ptr = (char*)BUFFER1;
.LINE 491

	LD	BC,327680
	LD	(IX+%FFFFFFFC),BC
;  492			file = mos_fopen(mosfilename, fa_read);
.LINE 492

	LD	BC,1
	PUSH	BC
	LD	BC,_mosfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  493			crc32_initialize();
.LINE 493

	CALL	_crc32_initialize
;  494			
;  495			// Read file to memory
;  496			while((got = mos_fread(file, ptr, BLOCKSIZE)) > 0) {
.LINE 496

	JR	L_156
L_157:
;  497				crc32(ptr, got);
.LINE 497

	LD	BC,(IX+%FFFFFFF9)
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
;  498				ptr += got;
.LINE 498

	LD	BC,(IX+%FFFFFFF9)
	LD	HL,(IX+%FFFFFFFC)
	ADD	HL,BC
	LD	(IX+%FFFFFFFC),HL
;  499				putch('.');
.LINE 499

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  500			}		
L_156:
.LINE 500

	LD	BC,16384
	PUSH	BC
	LD	BC,(IX+%FFFFFFFC)
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFF9),HL
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_157
;  501			moscrc = crc32_finalize();
.LINE 501

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFEE),HL
	LD	(IX+%FFFFFFF1),E
;  502			mos_fclose(file);
.LINE 502

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  503		}
L_166:
.LINE 503

;  504		if(flashvdp) {
.LINE 504

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_167
;  505			file = mos_fopen(vdpfilename, fa_read);
.LINE 505

	LD	BC,1
	PUSH	BC
	LD	BC,_vdpfilename
	PUSH	BC
	CALL	_mos_fopen
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFF),A
;  506			crc32_initialize();
.LINE 506

	CALL	_crc32_initialize
;  507			while(1) {
L_163:
.LINE 507

;  508				size = mos_fread(file, (char *)BUFFER1, BLOCKSIZE);
.LINE 508

	LD	BC,16384
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fread
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFF6),HL
;  509				if(size == 0) break;
.LINE 509

	CALL	__icmpzero
	JR	Z,L_164
;  510				putch('.');
.LINE 510

	LD	BC,46
	PUSH	BC
	CALL	_putch
	POP	BC
;  511				crc32((char *)BUFFER1, size);
.LINE 511

	LD	BC,(IX+%FFFFFFF6)
	PUSH	BC
	LD	BC,327680
	PUSH	BC
	CALL	_crc32
	POP	BC
	POP	BC
	JR	L_163
;  512			}
L_164:
.LINE 512

;  513			vdpcrc = crc32_finalize();
.LINE 513

	CALL	_crc32_finalize
	LD	(IX+%FFFFFFF2),HL
	LD	(IX+%FFFFFFF5),E
;  514			mos_fclose(file);
.LINE 514

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_mos_fclose
	POP	BC
;  515		}
L_167:
.LINE 515

;  516		printf("\r\n\r\n");
.LINE 516

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__120
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  517		if(flashmos) printf("MOS CRC 0x%04lX\r\n", moscrc);
.LINE 517

	LD	A,(_flashmos)
	OR	A,A
	JR	Z,L_170
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__122
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%4
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	C,(IX+%FFFFFFF1)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%FFFFFFEE)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__123
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_170:
;  518		if(flashvdp) printf("VDP CRC 0x%04lX\r\n", vdpcrc);
.LINE 518

	LD	A,(_flashvdp)
	OR	A,A
	JR	Z,L_171
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__125
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%4
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	C,(IX+%FFFFFFF5)
	LD	B,%0
	PUSH	BC
	LD	BC,(IX+%FFFFFFF2)
	PUSH	BC
	CALL	__u_ultoa
	POP	BC
	POP	BC
	LD	BC,L__126
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_171:
;  519		printf("\r\n");
.LINE 519

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__127
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  520	}
.LINE 520

	LD	SP,IX
	POP	IX
	RET	


;**************************** _showCRC32 ***************************
;Name                         Addr/Register   Size   Type
;__u_ultoa                           IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;_vdpfilename                        STATIC    256   variable
;_flashvdp                           STATIC      1   variable
;_mos_fclose                         IMPORT  -----   function
;_crc32_finalize                     IMPORT  -----   function
;_mos_fread                          IMPORT  -----   function
;_putch                              IMPORT  -----   function
;_crc32                              IMPORT  -----   function
;_crc32_initialize                   IMPORT  -----   function
;_mosfilename                        STATIC    256   variable
;_mos_fopen                          IMPORT  -----   function
;_flashmos                           STATIC      1   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;moscrc                               IX-18      4   variable
;vdpcrc                               IX-14      4   variable
;size                                 IX-10      3   variable
;got                                   IX-7      3   variable
;ptr                                   IX-4      3   variable
;file                                  IX-1      1   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "showCRC32",520,"_showCRC32"
	SEGMENT STRSECT
L__115:
	DB	"Calculating CRC"
	DB	0
L__120:
	DB	13,10,13,10,0
L__122:
	DB	"MOS CRC 0x"
	DB	0
L__123:
	DB	13,10,0
L__125:
	DB	"VDP CRC 0x"
	DB	0
L__126:
	DB	13,10,0
L__127:
	DB	13,10,0
	SEGMENT CODE
;  521	
;  522	int main(int argc, char * argv[]) {	
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",522,"_main"

.LINE 522

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "sysvars"

.CLASS 65

.VALUE -3

.TAG "NONAME3"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;  523		sysvar_t *sysvars;
;  524	
;  525		// All checks
;  526		if(argc == 1) {
.LINE 526

	LD	BC,1
	LD	HL,(IX+%6)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_175
;  527			usage();
.LINE 527

	CALL	_usage
;  528			return 0;
.LINE 528

	OR	A,A
	SBC	HL,HL
	JR	L_192
;  529		}
L_175:
.LINE 529

;  530		if(!parseCommands(argc, argv)) {
.LINE 530

	LD	BC,(IX+%9)
	PUSH	BC
	LD	BC,(IX+%6)
	PUSH	BC
	CALL	_parseCommands
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_177
;  531			usage();
.LINE 531

	CALL	_usage
;  532			return EXIT_INVALIDPARAMETER;
.LINE 532

	LD	HL,19
	JR	L_192
;  533		}
L_177:
.LINE 533

;  534		if(!filesExist()) return EXIT_FILENOTFOUND;
.LINE 534

	CALL	_filesExist
	OR	A,A
	JR	NZ,L_179
	LD	HL,4
	JR	L_192
L_179:
;  535		if(!firmwareContentOK()) {
.LINE 535

	CALL	_firmwareContentOK
	OR	A,A
	JR	NZ,L_180
;  536			return EXIT_INVALIDPARAMETER;
.LINE 536

	LD	HL,19
	JR	L_192
;  537		}
L_180:
.LINE 537

;  538	
;  539		putch(12); // cls
.LINE 539

	LD	BC,12
	PUSH	BC
	CALL	_putch
	POP	BC
;  540		print_version();
.LINE 540

	CALL	_print_version
;  541	
;  542		if(!silent) {
.LINE 542

	LD	A,(_silent)
	OR	A,A
	JR	NZ,L_183
;  543			showCRC32();
.LINE 543

	CALL	_showCRC32
;  544			if(!getResponse()) return 0;
.LINE 544

	CALL	_getResponse
	OR	A,A
	JR	NZ,L_183
	OR	A,A
	SBC	HL,HL
	JR	L_192
;  545		}
L_183:
.LINE 545

;  546	
;  547		printf("Flashing firmware...\r\n");
.LINE 547

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__135
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  548		delayms(750);
.LINE 548

	LD	BC,750
	PUSH	BC
	CALL	_delayms
	POP	BC
;  549		return 0;
.LINE 549

	OR	A,A
	SBC	HL,HL
	JR	L_192
;  550	
;  551		sysvars = getsysvars();
;  552		while(sysvars->scrheight == 0); // wait for 1st feedback from VDP
L_185:
.LINE 552

	LD	IY,(IX+%FFFFFFFD)
	LD	HL,(IY+%11)
	CALL	__scmpzero
	JR	Z,L_185
;  553		beep(1);
.LINE 553

	LD	BC,1
	PUSH	BC
	CALL	_beep
	POP	BC
;  554		sysvars->scrheight = 0;
.LINE 554

	LD	IY,(IX+%FFFFFFFD)
	LD	(IY+%11),%0
	LD	(IY+%12),%0
;  555	
;  556		update_vdp("firmware.bin");
.LINE 556

	LD	BC,L__137
	PUSH	BC
	CALL	_update_vdp
	POP	BC
;  557		echoVDP(1);
.LINE 557

	LD	BC,1
	PUSH	BC
	CALL	_echoVDP
	POP	BC
;  558		while(sysvars->scrheight == 0);
L_188:
.LINE 558

	LD	IY,(IX+%FFFFFFFD)
	LD	HL,(IY+%11)
	CALL	__scmpzero
	JR	Z,L_188
;  559		beep(2);
.LINE 559

	LD	BC,2
	PUSH	BC
	CALL	_beep
	POP	BC
;  560		update_mos("MOS.bin");
.LINE 560

	LD	BC,L__139
	PUSH	BC
	CALL	_update_mos
	POP	BC
;  561		beep(3);
.LINE 561

	LD	BC,3
	PUSH	BC
	CALL	_beep
	POP	BC
;  562		printf("Press reset button");
.LINE 562

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__140
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  563		while(1);
L_191:
.LINE 563

	JR	L_191
;  564	}
L_192:
.LINE 564

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_silent                             STATIC      1   variable
;_putch                              IMPORT  -----   function
;sysvars                               IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",564,"_main"
	SEGMENT STRSECT
L__135:
	DB	"Flashing firmware..."
	DB	13,10,0
L__137:
	DB	"firmware.bin"
	DB	0
L__139:
	DB	"MOS.bin"
	DB	0
L__140:
	DB	"Press reset button"
	DB	0
	XREF _memcmp:ROM
	XREF _strcpy:ROM
	XREF _getFileSize:ROM
	XREF _crc32_finalize:ROM
	XREF _crc32_initialize:ROM
	XREF _crc32:ROM
	XREF _delayms:ROM
	XREF _startVDPupdate:ROM
	XREF _fastmemcpy:ROM
	XREF _lockFlashKeyRegister:ROM
	XREF _enableFlashKeyRegister:ROM
	XREF _mos_flseek:ROM
	XREF _mos_fread:ROM
	XREF _mos_fclose:ROM
	XREF _mos_fopen:ROM
	XREF _getsysvars:ROM
	XREF _getch:ROM
	XREF _tolower:ROM
	XREF __u_ultoa:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF ___print_fmt:ROM
	XREF __lcmpu:ROM
	XREF __iand:ROM
	XREF __stoiu:ROM
	XREF __scmpzero:ROM
	XREF __icmpzero:ROM
	XREF __case8D:ROM
	XREF __seqcaseD:ROM
	XREF __ishru_b:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _showCRC32
	XDEF _firmwareContentOK
	XDEF _filesExist
	XDEF _parseCommands
	XDEF _silent
	XDEF _vdpfilename
	XDEF _flashvdp
	XDEF _mosfilename
	XDEF _flashmos
	XDEF _getCommand
	XDEF _echoVDP
	XDEF _update_mos
	XDEF _update_vdp
	XDEF _getResponse
	XDEF _usage
	XDEF _print_version
	XDEF _containsESP32Header
	XDEF _esp32_magicnumbers
	XDEF _containsMosHeader
	XDEF _mos_magicnumbers
	XDEF _vdp_ota_present
	XDEF _getCharAt
	XDEF _beep
	XDEF _putch
	XDEF _errno
	END
