; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\crc32.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "NONAME0",6
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "rem"
.VALUE 3
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "quot"
.VALUE 0
.CLASS 8
.TYPE 5
.ENDEF
.DEFINE "rem"
.VALUE 4
.CLASS 8
.TYPE 5
.ENDEF
.ENDREC "NONAME1"
.BEGREC "header",6
.DEFINE "s"
.VALUE 0
.CLASS 11
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "x"
.VALUE 0
.CLASS 11
.TYPE 2
.ENDEF
.ENDREC "header"
.BEGREC "NONAME2",6
.DEFINE "ptr"
.VALUE 0
.CLASS 8
.TAG "header"
.TYPE 40
.ENDEF
.DEFINE "size"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "NONAME2"
;    1	/*
;    2	 * Title:			CRC32 functions
;    3	 * Author:			Jeroen Venema
;    4	 * Created:			17/12/2022
;    5	 * Last Updated:	17/12/2022
;    6	 * 
;    7	 * Modinfo:
;    8	 * 17/12/2022:		Initial version
;    9	 */
;   10	
;   11	#include <defines.h>
;   12	#include <ctype.h>
;   13	#include <stdlib.h>
;   14	#include <ez80.h>
;   15	#include "crc32.h"
;   16	
;   17	extern int errno;
;   18	
;   19	/*
;   20	 * Convert a string to a UINT32 integer.
;   21	 *
;   22	 * Ignores `locale' stuff.  Assumes that the upper and lower case
;   23	 * alphabets and digits are each contiguous.
;   24	 */
;   25	 
;   26	UINT32
;   27	strtoll(const char *nptr)
;   28	{
_strtoll:
.DEFINE "_strtoll"

.VALUE _strtoll

.CLASS 2

.TYPE 79

.ENDEF

.BEGFUNC "strtoll",28,"_strtoll"

.LINE 28

.DEFINE "nptr"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

.DEFINE "c"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "s"

.CLASS 65

.VALUE -6

.TYPE 194

.ENDEF

.DEFINE "acc"

.CLASS 65

.VALUE -10

.TYPE 15

.ENDEF

.DEFINE "digits"

.CLASS 65

.VALUE -13

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFE9
	LD	SP,HL
;   29		const char *s = nptr;
.LINE 29

	LD	BC,(IX+%6)
	LD	(IX+%FFFFFFFA),BC
;   30		UINT32 acc;
;   31		int c;
;   32		int digits = 0;
.LINE 32

	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
;   33	
;   34		do {
L_1:
.LINE 34

;   35			c = *s++;
.LINE 35

	LD	BC,(IX+%FFFFFFFA)
	LD	(IX+%FFFFFFED),BC
	LD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	(IX+%FFFFFFFD),HL
	LD	BC,(IX+%FFFFFFFA)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
;   36		} while (isspace(c));
.LINE 36

	LD	BC,(IX+%FFFFFFFD)
	PUSH	BC
	LD	(IX+%FFFFFFE9),A
	CALL	_isspace
	LD	A,(IX+%FFFFFFE9)
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_1
;   37		if (
;   38		    c == '0' && (*s == 'x' || *s == 'X')) {
.LINE 38

	LD	BC,48
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_22
	LD	HL,(IX+%FFFFFFFA)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,120
	OR	A,A
	SBC	HL,BC
	JR	Z,L_5
	LD	HL,(IX+%FFFFFFFA)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	BC,88
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_22
L_5:
;   39			c = s[1];
.LINE 39

	LD	HL,(IX+%FFFFFFFA)
	INC	HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	(IX+%FFFFFFFD),HL
;   40			s += 2;
.LINE 40

	LD	IY,(IX+%FFFFFFFA)
	LEA	IY,IY+%2
	LD	(IX+%FFFFFFFA),IY
;   41		}
L_22:
.LINE 41

;   42	
;   43		for (acc = 0;; c = *s++) {
.LINE 43

	LD	BC,0
	LD	D,%0
	LD	(IX+%FFFFFFF6),BC
	LD	(IX+%FFFFFFF9),D
L_20:
;   44			if (isdigit(c))
.LINE 44

	LD	BC,(IX+%FFFFFFFD)
	PUSH	BC
	LD	(IX+%FFFFFFE9),A
	CALL	_isdigit
	LD	A,(IX+%FFFFFFE9)
	POP	BC
	CALL	__icmpzero
	JR	Z,L_15
;   45				c -= '0';
.LINE 45

	LD	IY,(IX+%FFFFFFFD)
	LEA	IY,IY+%FFFFFFD0
	LD	(IX+%FFFFFFFD),IY
;   46			else if (isalpha(c))
.LINE 46

	JR	L_19
L_15:
	LD	BC,(IX+%FFFFFFFD)
	PUSH	BC
	LD	(IX+%FFFFFFE9),A
	CALL	_isalpha
	LD	A,(IX+%FFFFFFE9)
	POP	BC
	CALL	__icmpzero
	JR	Z,L_24
;   47				c -= isupper(c) ? 'A' - 10 : 'a' - 10;
.LINE 47

	LD	BC,(IX+%FFFFFFFD)
	PUSH	BC
	LD	(IX+%FFFFFFE9),A
	CALL	_isupper
	LD	A,(IX+%FFFFFFE9)
	POP	BC
	CALL	__icmpzero
	JR	Z,L_10
	LD	BC,55
	LD	(IX+%FFFFFFF0),BC
	JR	L_11
L_10:
	LD	BC,87
	LD	(IX+%FFFFFFF0),BC
L_11:
	LD	BC,(IX+%FFFFFFF0)
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	LD	(IX+%FFFFFFFD),HL
;   48			else
.LINE 48

;   49				break;
.LINE 49

L_19:
;   50			if (c >= 16)
.LINE 50

	LD	BC,16
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_24
;   51				break;
;   52			else {
;   53				acc *= 16;
.LINE 53

	LD	HL,(IX+%FFFFFFF6)
	LD	E,(IX+%FFFFFFF9)
	XOR	A,A
	CALL	__lmulu
	LD	(IX+%FFFFFFF6),HL
	LD	(IX+%FFFFFFF9),E
;   54				acc += c;
.LINE 54

	LD	BC,(IX+%FFFFFFFD)
	CALL	__itol
	LD	HL,(IX+%FFFFFFF6)
	LD	E,(IX+%FFFFFFF9)
	CALL	__ladd
	LD	(IX+%FFFFFFF6),HL
	LD	(IX+%FFFFFFF9),E
;   55				digits++;
.LINE 55

	LD	BC,(IX+%FFFFFFF3)
	INC	BC
	LD	(IX+%FFFFFFF3),BC
	LD	BC,(IX+%FFFFFFFA)
	LD	(IX+%FFFFFFEA),BC
	LD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	LD	(IX+%FFFFFFFD),HL
	LD	BC,(IX+%FFFFFFFA)
	INC	BC
	LD	(IX+%FFFFFFFA),BC
;   56			}
;   57		}
.LINE 57

	JR	L_20
L_24:
;   58		if(digits > 8) errno = ERANGE;
.LINE 58

	LD	BC,(IX+%FFFFFFF3)
	LD	HL,8
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_25
	LD	BC,5
	LD	(_errno),BC
L_25:
;   59		return (acc);
.LINE 59

	LD	HL,(IX+%FFFFFFF6)
	LD	E,(IX+%FFFFFFF9)
;   60	}
.LINE 60

	LD	SP,IX
	POP	IX
	RET	


;**************************** _strtoll ***************************
;Name                         Addr/Register   Size   Type
;_errno                              IMPORT      3   variable
;_isupper                            IMPORT  -----   function
;_isalpha                            IMPORT  -----   function
;_isdigit                            IMPORT  -----   function
;_isspace                            IMPORT  -----   function
;temp8                                IX-16      3   variable
;digits                               IX-13      3   variable
;acc                                  IX-10      4   variable
;s                                     IX-6      3   variable
;c                                     IX-3      3   variable
;nptr                                  IX+6      3   parameter


; Stack Frame Size: 32 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "strtoll",60,"_strtoll"
;   61	
;   62	
;   63	// Calculate a CRC32 over a block of memory
;   64	// Parameters:
;   65	// - s: Pointer to a memory location
;   66	// - length: Size of memoryblock in bytes
;   67	UINT32 crc32(const char *s, UINT24 length)
;   68	{
_crc32:
.DEFINE "_crc32"

.VALUE _crc32

.CLASS 2

.TYPE 79

.ENDEF

.BEGFUNC "crc32",68,"_crc32"

.LINE 68

.DEFINE "s"

.CLASS 65

.VALUE 6

.TYPE 194

.ENDEF

.DEFINE "length"

.CLASS 65

.VALUE 9

.TYPE 14

.ENDEF

.DEFINE "i"

.CLASS 65

.VALUE -4

.TYPE 15

.ENDEF

.DEFINE "j"

.CLASS 65

.VALUE -8

.TYPE 15

.ENDEF

.DEFINE "ch"

.CLASS 65

.VALUE -9

.TYPE 2

.ENDEF

.DEFINE "ch"

.CLASS 65

.VALUE -13

.TYPE 15

.ENDEF

.DEFINE "b"

.CLASS 65

.VALUE -17

.TYPE 15

.ENDEF

.DEFINE "t"

.CLASS 65

.VALUE -21

.TYPE 15

.ENDEF

;   69	  static UINT32 crc;
.LINE 69

.DEFINE "crc"

.ALIAS "_0crc"

.CLASS 83

.VALUE _0crc

.TYPE 15

.ENDEF

;   70	  static UINT32 crc32_table[256];
.LINE 70

.DEFINE "crc32_table"

.ALIAS "_1crc32_table"

.CLASS 83

.VALUE _1crc32_table

.DIM 256

.TYPE 111

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFEA
	LD	SP,HL
;   71	  UINT32 i,ch,j,b,t; 
;   72	
;   73	  // init a crc32 lookup table, fastest way to process the entire block
;   74	  for(i = 0; i < 256; i++)
.LINE 74

	LD	BC,0
	XOR	A,A
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
	JR	L_37
L_35:
;   75	  {
;   76	    ch = i;
.LINE 76

	LD	BC,(IX+%FFFFFFFC)
	LD	A,(IX+%FFFFFFFF)
	LD	(IX+%FFFFFFF3),BC
	LD	(IX+%FFFFFFF6),A
;   77	    crc = 0;
.LINE 77

	LD	BC,0
	XOR	A,A
	LD	(_0crc),BC
	LD	(_0crc+3),A
;   78	    for(j = 0; j < 8; j++)
.LINE 78

	XOR	A,A
	LD	(IX+%FFFFFFF8),BC
	LD	(IX+%FFFFFFFB),A
	JR	L_33
L_31:
;   79	    {
;   80		  b=(ch^crc)&1;
.LINE 80

	LD	HL,(_0crc)
	LD	A,(_0crc+3)
	LD	E,A
	LD	BC,(IX+%FFFFFFF3)
	LD	A,(IX+%FFFFFFF6)
	CALL	__lxor
	LD	BC,HL
	LD	A,C
	AND	A,%1
	UEXT	HL
	LD	L,A
	LD	(IX+%FFFFFFEF),HL
	LD	(IX+%FFFFFFF2),H
;   81		  crc>>=1;
.LINE 81

	LD	BC,(_0crc)
	LD	A,(_0crc+3)
	LD	L,%1
	CALL	__lshru
	LD	(_0crc),BC
	LD	(_0crc+3),A
;   82		  if(b) crc=crc^0xEDB88320;
.LINE 82

	LD	HL,(IX+%FFFFFFEF)
	LD	E,(IX+%FFFFFFF2)
	CALL	__lcmpzero
	JR	Z,L_30
	LD	HL,(_0crc)
	LD	A,(_0crc+3)
	LD	E,A
	LD	BC,12092192
	LD	A,%ED
	CALL	__lxor
	LD	(_0crc),HL
	LD	A,E
	LD	(_0crc+3),A
L_30:
;   83		  ch>>=1;
.LINE 83

	LD	BC,(IX+%FFFFFFF3)
	LD	A,(IX+%FFFFFFF6)
	LD	L,%1
	CALL	__lshru
	LD	(IX+%FFFFFFF3),BC
	LD	(IX+%FFFFFFF6),A
	LD	HL,(IX+%FFFFFFF8)
	LD	E,(IX+%FFFFFFFB)
	LD	A,%1
	CALL	__ladd_b
	LD	(IX+%FFFFFFF8),HL
	LD	(IX+%FFFFFFFB),E
;   84	    }
L_33:
.LINE 84

	LD	HL,(IX+%FFFFFFF8)
	LD	E,(IX+%FFFFFFFB)
	LD	BC,8
	XOR	A,A
	CALL	__lcmpu
	JR	C,L_31
;   85	    crc32_table[i] = crc;
.LINE 85

	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,_1crc32_table
	ADD	HL,BC
	LD	BC,(_0crc)
	LD	A,(_0crc+3)
	LD	(HL),BC
	INC	HL
	INC	HL
	INC	HL
	LD	(HL),A
	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	LD	A,%1
	CALL	__ladd_b
	LD	(IX+%FFFFFFFC),HL
	LD	(IX+%FFFFFFFF),E
;   86	  }        
L_37:
.LINE 86

	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	LD	BC,256
	XOR	A,A
	CALL	__lcmpu
	JR	C,L_35
;   87	
;   88	  // calculate the crc using the table
;   89	  crc = 0xFFFFFFFF;
.LINE 89

	LD	BC,16777215
	LD	A,%FF
	LD	(_0crc),BC
	LD	(_0crc+3),A
;   90	  for(i=0;i<length;i++)
.LINE 90

	LD	BC,0
	XOR	A,A
	LD	(IX+%FFFFFFFC),BC
	LD	(IX+%FFFFFFFF),A
	JR	L_42
L_40:
;   91	  {
;   92	    char ch=s[i];
.LINE 92

	LD	BC,(IX+%FFFFFFFC)
	LD	HL,(IX+%6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+%FFFFFFF7),A
;   93	    t=(ch^crc)&0xFF;
.LINE 93

	SEXT	HL
	LD	L,(IX+%FFFFFFF7)
	LD	BC,HL
	LD	(IX+%FFFFFFEA),H
	LD	HL,(_0crc)
	LD	A,(_0crc+3)
	LD	E,A
	LD	A,(IX+%FFFFFFEA)
	CALL	__lxor
	LD	BC,HL
	UEXT	HL
	LD	L,C
	LD	(IX+%FFFFFFEB),HL
	LD	(IX+%FFFFFFEE),H
;   94	    crc=(crc>>8)^crc32_table[t];
.LINE 94

	LD	HL,(IX+%FFFFFFEB)
	LD	E,(IX+%FFFFFFEE)
	LD	BC,4
	XOR	A,A
	CALL	__lmulu
	LD	BC,_1crc32_table
	ADD	HL,BC
	LD	IY,HL
	LD	BC,(_0crc)
	LD	A,(_0crc+3)
	LD	L,%8
	CALL	__lshru
	LD	HL,(IY)
	LD	E,(IY+%3)
	CALL	__lxor
	LD	(_0crc),HL
	LD	A,E
	LD	(_0crc+3),A
	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	LD	A,%1
	CALL	__ladd_b
	LD	(IX+%FFFFFFFC),HL
	LD	(IX+%FFFFFFFF),E
;   95	  }
L_42:
.LINE 95

	LD	BC,(IX+%9)
	XOR	A,A
	LD	HL,(IX+%FFFFFFFC)
	LD	E,(IX+%FFFFFFFF)
	CALL	__lcmpu
	JR	C,L_40
;   96	
;   97	  return ~crc;
.LINE 97

	LD	HL,(_0crc)
	LD	A,(_0crc+3)
	LD	E,A
	CALL	__lnot
;   98	}
.LINE 98

	LD	SP,IX
	POP	IX
	RET	


;**************************** _crc32 ***************************
;Name                         Addr/Register   Size   Type
;_1crc32_table                       STATIC   1024   variable
;_0crc                               STATIC      4   variable
;t                                    IX-21      4   variable
;b                                    IX-17      4   variable
;ch                                   IX-13      4   variable
;ch                                    IX-9      1   variable
;j                                     IX-8      4   variable
;i                                     IX-4      4   variable
;length                                IX+9      3   parameter
;s                                     IX+6      3   parameter


; Stack Frame Size: 34 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "crc32",98,"_crc32"
	SEGMENT BSS
_0crc:
	DS	4*1
_1crc32_table:
	DS	1024
	XREF _errno:ROM
	XREF _isupper:ROM
	XREF _isspace:ROM
	XREF _isdigit:ROM
	XREF _isalpha:ROM
	XREF __lcmpu:ROM
	XREF __ladd:ROM
	XREF __lmulu:ROM
	XREF __lnot:ROM
	XREF __lxor:ROM
	XREF __lshru:ROM
	XREF __itol:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __lcmpzero:ROM
	XREF __ladd_b:ROM
	XDEF _crc32
	XDEF _strtoll
	END
