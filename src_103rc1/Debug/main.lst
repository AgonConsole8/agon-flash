Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED20-Mar-23     11:56:16     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    	SEGMENT BSS
041A45                     A   144    _errno:
041A45                     A   145    	DS	3
                           A   146    .DEFINE "errno"
                           A   147    .ALIAS "_errno"
                           A   148    .CLASS 83
                           A   149    .VALUE _errno
                           A   150    .TYPE 4
                           A   151    .ENDEF
                           A   152    ;    1	/*
                           A   153    ;    2	 * Title:			Agon MOS firmware u
                           A   154    ;    3	 * Author:			Jeroen Venema
                           A   155    ;    4	 * Created:			17/12/2022
                           A   156    ;    5	 * Last Updated:	17/12/2022
                           A   157    ;    6	 * 
                           A   158    ;    7	 * Modinfo:
                           A   159    ;    8	 * 17/12/2022:		Initial version
                           A   160    ;    9	 * 18/12/2022:		MOS 1.00/1.01 one-o
                           A   161    ;   10	 */
                           A   162    ;   11	
                           A   163    ;   12	#include <ez80.h>
                           A   164    ;   13	#include <stdio.h>
                           A   165    ;   14	#include <stdlib.h>
                           A   166    ;   15	#include <ERRNO.H>
                           A   167    ;   16	#include "mos-interface.h"
                           A   168    ;   17	#include "flash.h"
                           A   169    ;   18	#include "agontimer.h"
                           A   170    ;   19	#include "crc32.h"
                           A   171    ;   20	
                           A   172    ;   21	int errno; // needed by standard librar
                           A   173    	SEGMENT CODE
                           A   174    ;   22	enum states{firmware,recover,systemrese
                           A   175    ;   23	
                           A   176    ;   24	#define FILENAME	"firmware103rc1.bin
                           A   177    ;   25	#define CRC103RC1	0xC7EB8372
                           A   178    ;   26	
                           A   179    ;   27	// separate putch function that doesn't
                           A   180    ;   28	// UART0 initialization done by MOS fir
                           A   181    ;   29	// This utility doesn't run without MOS
                           A   182    ;   30	int putch(int c)
                           A   183    ;   31	{
0400D7                     A   184    _putch:
                           A   185    .DEFINE "_putch"
                           A   186    
                           A   187    .VALUE _putch
                           A   188    
                           A   189    .CLASS 2
                           A   190    
                           A   191    .TYPE 68
                           A   192    
                           A   193    .ENDEF
                           A   194    
                           A   195    .BEGFUNC "putch",31,"_putch"
                           A   196    
                           A   197    .LINE 31
                           A   198    
                           A   199    .DEFINE "c"
                           A   200    
                           A   201    .CLASS 65
                           A   202    
                           A   203    .VALUE 6
                           A   204    
                           A   205    .TYPE 4
                           A   206    
0400D7 DDE5                A   207    	PUSH	IX
0400D9 DD210000 00         A   208    	LD	IX,0
0400DE DD39                A   209    	ADD	IX,SP
                           A   210    .ENDEF
                           A   211    
                           A   212    ;   32		UINT8 lsr,temt;
                           A   213    ;   33		
                           A   214    ;   34		while((UART0_LSR & 0x40) == 0);
0400E0                     A   215    L_1:
                           A   216    .LINE 34
                           A   217    
0400E0 ED38C5              A   218    	IN0	A,(197)
0400E3 E640                A   219    	AND	A,%40
0400E5 B7ED62              A   220    	UEXT	HL
0400E8 6F                  A   221    	LD	L,A
0400E9 CD B2 10 04         A   222    	CALL	__icmpzero
0400ED 28 F1               A   223    	JR	Z,L_1
                           A   224    ;   35		UART0_THR = c;
                           A   225    .LINE 35
                           A   226    
0400EF DD7E06              A   227    	LD	A,(IX+%6)
0400F2 ED39C0              A   228    	OUT0	(192),A
                           A   229    ;   36		return c;
                           A   230    .LINE 36
                           A   231    
0400F5 DD2706              A   232    	LD	HL,(IX+%6)
                           A   233    ;   37	}
                           A   234    .LINE 37
                           A   235    
0400F8 DDF9                A   236    	LD	SP,IX
0400FA DDE1                A   237    	POP	IX
0400FC C9                  A   238    	RET	
                           A   239    
                           A   240    
                           A   241    ;**************************** _putch **********
                           A   242    ;Name                         Addr/Register   S
                           A   243    ;c                                     IX+6    
                           A   244    
                           A   245    
                           A   246    ; Stack Frame Size: 9 (bytes)
                           A   247    ;       Spill Code: 0 (instruction)
                           A   248    
                           A   249    
                           A   250    .ENDFUNC "putch",37,"_putch"
                           A   251    ;   38	
                           A   252    ;   39	int main(int argc, char * argv[]) {
0400FD                     A   253    _main:
                           A   254    .DEFINE "_main"
                           A   255    
                           A   256    .VALUE _main
                           A   257    
                           A   258    .CLASS 2
                           A   259    
                           A   260    .TYPE 68
                           A   261    
                           A   262    .ENDEF
                           A   263    
                           A   264    .BEGFUNC "main",39,"_main"
                           A   265    
                           A   266    .LINE 39
                           A   267    
                           A   268    .DEFINE "argc"
                           A   269    
                           A   270    .CLASS 65
                           A   271    
                           A   272    .VALUE 6
                           A   273    
                           A   274    .TYPE 4
                           A   275    
                           A   276    .ENDEF
                           A   277    
                           A   278    .DEFINE "argv"
                           A   279    
                           A   280    .CLASS 65
                           A   281    
                           A   282    .VALUE 9
                           A   283    
                           A   284    .TYPE 290
                           A   285    
                           A   286    .ENDEF
                           A   287    
                           A   288    .DEFINE "counter"
                           A   289    
                           A   290    .CLASS 65
                           A   291    
                           A   292    .VALUE -3
                           A   293    
                           A   294    .TYPE 14
                           A   295    
                           A   296    .ENDEF
                           A   297    
                           A   298    .DEFINE "size"
                           A   299    
                           A   300    .CLASS 65
                           A   301    
                           A   302    .VALUE -6
                           A   303    
                           A   304    .TYPE 14
                           A   305    
                           A   306    .ENDEF
                           A   307    
                           A   308    .DEFINE "response"
                           A   309    
                           A   310    .CLASS 65
                           A   311    
                           A   312    .VALUE -7
                           A   313    
                           A   314    .TYPE 12
                           A   315    
                           A   316    .ENDEF
                           A   317    
                           A   318    .DEFINE "file"
                           A   319    
                           A   320    .CLASS 65
                           A   321    
                           A   322    .VALUE -8
                           A   323    
                           A   324    .TYPE 12
                           A   325    
                           A   326    .ENDEF
                           A   327    
                           A   328    .DEFINE "addressfrom"
                           A   329    
                           A   330    .CLASS 65
                           A   331    
                           A   332    .VALUE -11
                           A   333    
                           A   334    .TYPE 14
                           A   335    
                           A   336    .ENDEF
                           A   337    
                           A   338    .DEFINE "state"
                           A   339    
                           A   340    .CLASS 65
                           A   341    
                           A   342    .VALUE -14
                           A   343    
                           A   344    .TYPE 4
                           A   345    
                           A   346    .ENDEF
                           A   347    
                           A   348    .DEFINE "pagemax"
                           A   349    
                           A   350    .CLASS 65
                           A   351    
                           A   352    .VALUE -17
                           A   353    
                           A   354    .TYPE 14
                           A   355    
                           A   356    .ENDEF
                           A   357    
                           A   358    .DEFINE "ptr"
                           A   359    
                           A   360    .CLASS 65
                           A   361    
                           A   362    .VALUE -20
                           A   363    
                           A   364    .TYPE 34
                           A   365    
                           A   366    .ENDEF
                           A   367    
                           A   368    .DEFINE "addressto"
                           A   369    
                           A   370    .CLASS 65
                           A   371    
                           A   372    .VALUE -23
                           A   373    
                           A   374    .TYPE 14
                           A   375    
                           A   376    .ENDEF
                           A   377    
                           A   378    .DEFINE "value"
                           A   379    
                           A   380    .CLASS 65
                           A   381    
                           A   382    .VALUE -24
                           A   383    
                           A   384    .TYPE 12
                           A   385    
                           A   386    .ENDEF
                           A   387    
                           A   388    .DEFINE "crcresult"
                           A   389    
                           A   390    .CLASS 65
                           A   391    
                           A   392    .VALUE -28
                           A   393    
                           A   394    .TYPE 15
                           A   395    
                           A   396    .ENDEF
                           A   397    
                           A   398    .DEFINE "lastpagebytes"
                           A   399    
                           A   400    .CLASS 65
                           A   401    
                           A   402    .VALUE -31
                           A   403    
                           A   404    .TYPE 14
                           A   405    
                           A   406    .ENDEF
                           A   407    
                           A   408    .DEFINE "crcexpected"
                           A   409    
                           A   410    .CLASS 65
                           A   411    
                           A   412    .VALUE -38
                           A   413    
                           A   414    .TYPE 15
                           A   415    
                           A   416    .ENDEF
                           A   417    
                           A   418    .DEFINE "crcbackup"
                           A   419    
                           A   420    .CLASS 65
                           A   421    
                           A   422    .VALUE -42
                           A   423    
                           A   424    .TYPE 15
                           A   425    
                           A   426    .ENDEF
                           A   427    
0400FD DDE5                A   428    	PUSH	IX
0400FF DD210000 00         A   429    	LD	IX,0
040104 DD39                A   430    	ADD	IX,SP
040106 ED22D3              A   431    	LEA	HL,IX+%FFFFFFD3
040109 F9                  A   432    	LD	SP,HL
                           A   433    ;   40		UINT32 crcexpected,crcresult,crcbac
                           A   434    ;   41		UINT24 size = 0;
                           A   435    .LINE 41
                           A   436    
04010A 01000000            A   437    	LD	BC,0
04010E DD0FFA              A   438    	LD	(IX+%FFFFFFFA),BC
                           A   439    ;   42		UINT8 file;
                           A   440    ;   43		char* ptr = (char*)BUFFER1;
                           A   441    .LINE 43
                           A   442    
040111 01000005            A   443    	LD	BC,327680
040115 DD0FEC              A   444    	LD	(IX+%FFFFFFEC),BC
                           A   445    ;   44		UINT8 response;
                           A   446    ;   45		UINT8 value;
                           A   447    ;   46		UINT24 counter,pagemax, lastpagebyt
                           A   448    ;   47		UINT24 addressto,addressfrom;
                           A   449    ;   48		enum states state;
                           A   450    ;   49		
                           A   451    ;   50		printf("Agon MOS firmware upgrade u
                           A   452    .LINE 50
                           A   453    
040118 01 FD 0C 04         A   454    	LD	BC,___print_uputch
04011C ED43 BC 16 04       A   455    	LD	(___print_xputch),BC
040121 01 3F 17 04         A   456    	LD	BC,L__2
040125 C5                  A   457    	PUSH	BC
040126 CD 92 0B 04         A   458    	CALL	___print_sendstring
04012A C1                  A   459    	POP	BC
                           A   460    ;   51		printf("This utility will upgrade a
                           A   461    .LINE 51
                           A   462    
04012B 01 FD 0C 04         A   463    	LD	BC,___print_uputch
04012F ED43 BC 16 04       A   464    	LD	(___print_xputch),BC
040134 01 63 17 04         A   465    	LD	BC,L__3
040138 C5                  A   466    	PUSH	BC
040139 CD 92 0B 04         A   467    	CALL	___print_sendstring
04013D C1                  A   468    	POP	BC
                           A   469    ;   52		
                           A   470    ;   53		file = mos_fopen(FILENAME, fa_read)
                           A   471    .LINE 53
                           A   472    
04013E 01010000            A   473    	LD	BC,1
040142 C5                  A   474    	PUSH	BC
040143 01 AB 17 04         A   475    	LD	BC,L__4
040147 C5                  A   476    	PUSH	BC
040148 CD DC 06 04         A   477    	CALL	_mos_fopen
04014C C1                  A   478    	POP	BC
04014D C1                  A   479    	POP	BC
04014E DD77F8              A   480    	LD	(IX+%FFFFFFF8),A
                           A   481    ;   54		if(!file)
                           A   482    .LINE 54
                           A   483    
040151 B7                  A   484    	OR	A,A
040152 20 29               A   485    	JR	NZ,L_7
                           A   486    ;   55		{
                           A   487    ;   56			printf("Error opening \"%s\" - 
                           A   488    .LINE 56
                           A   489    
040154 01 FD 0C 04         A   490    	LD	BC,___print_uputch
040158 ED43 BC 16 04       A   491    	LD	(___print_xputch),BC
04015D 01 BE 17 04         A   492    	LD	BC,L__6
040161 C5                  A   493    	PUSH	BC
040162 CD 92 0B 04         A   494    	CALL	___print_sendstring
040166 C1                  A   495    	POP	BC
040167 01 CE 17 04         A   496    	LD	BC,L__7
04016B C5                  A   497    	PUSH	BC
04016C CD 92 0B 04         A   498    	CALL	___print_sendstring
040170 C1                  A   499    	POP	BC
040171 01 E1 17 04         A   500    	LD	BC,L__8
040175 C5                  A   501    	PUSH	BC
040176 CD 92 0B 04         A   502    	CALL	___print_sendstring
04017A C1                  A   503    	POP	BC
                           A   504    ;   57			while(1);
04017B                     A   505    L_5:
                           A   506    .LINE 57
                           A   507    
04017B 18 FE               A   508    	JR	L_5
                           A   509    ;   58		}
04017D                     A   510    L_7:
                           A   511    .LINE 58
                           A   512    
                           A   513    ;   59		
                           A   514    ;   60		crcexpected = CRC103RC1;
                           A   515    .LINE 60
                           A   516    
04017D 017283EB            A   517    	LD	BC,15434610
040181 3EC7                A   518    	LD	A,%C7
040183 DD0FDA              A   519    	LD	(IX+%FFFFFFDA),BC
040186 DD77DD              A   520    	LD	(IX+%FFFFFFDD),A
                           A   521    ;   61	
                           A   522    ;   62		printf("Loading file : %s\n\r",FILE
                           A   523    .LINE 62
                           A   524    
040189 01 FD 0C 04         A   525    	LD	BC,___print_uputch
04018D ED43 BC 16 04       A   526    	LD	(___print_xputch),BC
040192 01 FE 17 04         A   527    	LD	BC,L__9
040196 C5                  A   528    	PUSH	BC
040197 CD 92 0B 04         A   529    	CALL	___print_sendstring
04019B C1                  A   530    	POP	BC
04019C 01 0E 18 04         A   531    	LD	BC,L__10
0401A0 C5                  A   532    	PUSH	BC
0401A1 CD 92 0B 04         A   533    	CALL	___print_sendstring
0401A5 C1                  A   534    	POP	BC
0401A6 01 21 18 04         A   535    	LD	BC,L__11
0401AA C5                  A   536    	PUSH	BC
0401AB CD 92 0B 04         A   537    	CALL	___print_sendstring
0401AF C1                  A   538    	POP	BC
                           A   539    ;   63		printf("File size    : %d byte(s)",
                           A   540    .LINE 63
                           A   541    
0401B0 01 FD 0C 04         A   542    	LD	BC,___print_uputch
0401B4 ED43 BC 16 04       A   543    	LD	(___print_xputch),BC
0401B9 01 24 18 04         A   544    	LD	BC,L__12
0401BD C5                  A   545    	PUSH	BC
0401BE CD 92 0B 04         A   546    	CALL	___print_sendstring
0401C2 C1                  A   547    	POP	BC
0401C3 01000000            A   548    	LD	BC,0
0401C7 C5                  A   549    	PUSH	BC
0401C8 C5                  A   550    	PUSH	BC
0401C9 CD 97 0D 04         A   551    	CALL	__u_itoa
0401CD C1                  A   552    	POP	BC
0401CE C1                  A   553    	POP	BC
0401CF 01 34 18 04         A   554    	LD	BC,L__13
0401D3 C5                  A   555    	PUSH	BC
0401D4 CD 92 0B 04         A   556    	CALL	___print_sendstring
0401D8 C1                  A   557    	POP	BC
                           A   558    ;   64	
                           A   559    ;   65		// Read file to memory
                           A   560    ;   66		//mod = 0;
                           A   561    ;   67		while(!mos_feof(file))
                           A   562    .LINE 67
                           A   563    
0401D9 18 5C               A   564    	JR	L_11
0401DB                     A   565    L_12:
                           A   566    ;   68		{
                           A   567    ;   69			*ptr = mos_fgetc(file);
                           A   568    .LINE 69
                           A   569    
0401DB DD4EF8              A   570    	LD	C,(IX+%FFFFFFF8)
0401DE 0600                A   571    	LD	B,%0
0401E0 C5                  A   572    	PUSH	BC
0401E1 CD 09 07 04         A   573    	CALL	_mos_fgetc
0401E5 C1                  A   574    	POP	BC
0401E6 DD27EC              A   575    	LD	HL,(IX+%FFFFFFEC)
0401E9 77                  A   576    	LD	(HL),A
                           A   577    ;   70			ptr++;
                           A   578    .LINE 70
                           A   579    
0401EA DD07EC              A   580    	LD	BC,(IX+%FFFFFFEC)
0401ED 03                  A   581    	INC	BC
0401EE DD0FEC              A   582    	LD	(IX+%FFFFFFEC),BC
                           A   583    ;   71			size++;
                           A   584    .LINE 71
                           A   585    
0401F1 DD07FA              A   586    	LD	BC,(IX+%FFFFFFFA)
0401F4 03                  A   587    	INC	BC
0401F5 DD0FFA              A   588    	LD	(IX+%FFFFFFFA),BC
                           A   589    ;   72			//mod++;
                           A   590    ;   73			//if(mod > 1024)
                           A   591    ;   74			if(size%1024 == 0)
                           A   592    .LINE 74
                           A   593    
0401F8 01FF0300            A   594    	LD	BC,1023
0401FC DD27FA              A   595    	LD	HL,(IX+%FFFFFFFA)
0401FF CD 1E 14 04         A   596    	CALL	__iand
040203 CD B2 10 04         A   597    	CALL	__icmpzero
040207 20 2E               A   598    	JR	NZ,L_11
                           A   599    ;   75			{
                           A   600    ;   76				//mod = 0;
                           A   601    ;   77				printf("\rFile size    : %d
                           A   602    .LINE 77
                           A   603    
040209 01 FD 0C 04         A   604    	LD	BC,___print_uputch
04020D ED43 BC 16 04       A   605    	LD	(___print_xputch),BC
040212 01 3D 18 04         A   606    	LD	BC,L__15
040216 C5                  A   607    	PUSH	BC
040217 CD 92 0B 04         A   608    	CALL	___print_sendstring
04021B C1                  A   609    	POP	BC
04021C DD07FA              A   610    	LD	BC,(IX+%FFFFFFFA)
04021F AF                  A   611    	XOR	A,A
040220 C5D1                A   612    	LD	DE,BC
040222 4F                  A   613    	LD	C,A
040223 0600                A   614    	LD	B,%0
040225 C5                  A   615    	PUSH	BC
040226 D5                  A   616    	PUSH	DE
040227 CD 97 0D 04         A   617    	CALL	__u_itoa
04022B C1                  A   618    	POP	BC
04022C C1                  A   619    	POP	BC
04022D 01 4E 18 04         A   620    	LD	BC,L__16
040231 C5                  A   621    	PUSH	BC
040232 CD 92 0B 04         A   622    	CALL	___print_sendstring
040236 C1                  A   623    	POP	BC
                           A   624    ;   78	
                           A   625    ;   79			}
                           A   626    ;   80		}		
040237                     A   627    L_11:
                           A   628    .LINE 80
                           A   629    
040237 DD4EF8              A   630    	LD	C,(IX+%FFFFFFF8)
04023A 0600                A   631    	LD	B,%0
04023C C5                  A   632    	PUSH	BC
04023D CD 1E 07 04         A   633    	CALL	_mos_feof
040241 C1                  A   634    	POP	BC
040242 B7                  A   635    	OR	A,A
040243 28 96               A   636    	JR	Z,L_12
                           A   637    ;   81		mos_fclose(file);	
                           A   638    .LINE 81
                           A   639    
040245 DD4EF8              A   640    	LD	C,(IX+%FFFFFFF8)
040248 0600                A   641    	LD	B,%0
04024A C5                  A   642    	PUSH	BC
04024B CD F4 06 04         A   643    	CALL	_mos_fclose
04024F C1                  A   644    	POP	BC
                           A   645    ;   82		printf("\rFile size    : %d byte(s)
                           A   646    .LINE 82
                           A   647    
040250 01 FD 0C 04         A   648    	LD	BC,___print_uputch
040254 ED43 BC 16 04       A   649    	LD	(___print_xputch),BC
040259 01 57 18 04         A   650    	LD	BC,L__18
04025D C5                  A   651    	PUSH	BC
04025E CD 92 0B 04         A   652    	CALL	___print_sendstring
040262 C1                  A   653    	POP	BC
040263 DD07FA              A   654    	LD	BC,(IX+%FFFFFFFA)
040266 AF                  A   655    	XOR	A,A
040267 C5D1                A   656    	LD	DE,BC
040269 4F                  A   657    	LD	C,A
04026A 0600                A   658    	LD	B,%0
04026C C5                  A   659    	PUSH	BC
04026D D5                  A   660    	PUSH	DE
04026E CD 97 0D 04         A   661    	CALL	__u_itoa
040272 C1                  A   662    	POP	BC
040273 C1                  A   663    	POP	BC
040274 01 68 18 04         A   664    	LD	BC,L__19
040278 C5                  A   665    	PUSH	BC
040279 CD 92 0B 04         A   666    	CALL	___print_sendstring
04027D C1                  A   667    	POP	BC
                           A   668    ;   83	
                           A   669    ;   84		printf("Testing CRC32: 0x%08lx\n\r"
                           A   670    .LINE 84
                           A   671    
04027E 01 FD 0C 04         A   672    	LD	BC,___print_uputch
040282 ED43 BC 16 04       A   673    	LD	(___print_xputch),BC
040287 01 73 18 04         A   674    	LD	BC,L__20
04028B C5                  A   675    	PUSH	BC
04028C CD 92 0B 04         A   676    	CALL	___print_sendstring
040290 C1                  A   677    	POP	BC
040291 3E08                A   678    	LD	A,%8
040293 32 5F 1E 04         A   679    	LD	(___print_fmt+5),A
040297 3E40                A   680    	LD	A,%40
040299 32 5B 1E 04         A   681    	LD	(___print_fmt+1),A
04029D 3E78                A   682    	LD	A,%78
04029F 32 5E 1E 04         A   683    	LD	(___print_fmt+4),A
0402A3 01C70000            A   684    	LD	BC,199
0402A7 C5                  A   685    	PUSH	BC
0402A8 017283EB            A   686    	LD	BC,15434610
0402AC C5                  A   687    	PUSH	BC
0402AD CD 86 14 04         A   688    	CALL	__u_ultoa
0402B1 C1                  A   689    	POP	BC
0402B2 C1                  A   690    	POP	BC
0402B3 01 85 18 04         A   691    	LD	BC,L__21
0402B7 C5                  A   692    	PUSH	BC
0402B8 CD 92 0B 04         A   693    	CALL	___print_sendstring
0402BC C1                  A   694    	POP	BC
                           A   695    ;   85		crcresult = crc32((char*)BUFFER1, s
                           A   696    .LINE 85
                           A   697    
0402BD DD07FA              A   698    	LD	BC,(IX+%FFFFFFFA)
0402C0 C5                  A   699    	PUSH	BC
0402C1 01000005            A   700    	LD	BC,327680
0402C5 C5                  A   701    	PUSH	BC
0402C6 CD 65 09 04         A   702    	CALL	_crc32
0402CA C1                  A   703    	POP	BC
0402CB C1                  A   704    	POP	BC
0402CC DD2FE4              A   705    	LD	(IX+%FFFFFFE4),HL
0402CF DD73E7              A   706    	LD	(IX+%FFFFFFE7),E
                           A   707    ;   86		printf("CRC32 result : 0x%08lx\n\r"
                           A   708    .LINE 86
                           A   709    
0402D2 01 FD 0C 04         A   710    	LD	BC,___print_uputch
0402D6 ED43 BC 16 04       A   711    	LD	(___print_xputch),BC
0402DB 01 88 18 04         A   712    	LD	BC,L__22
0402DF C5                  A   713    	PUSH	BC
0402E0 CD 92 0B 04         A   714    	CALL	___print_sendstring
0402E4 C1                  A   715    	POP	BC
0402E5 3E08                A   716    	LD	A,%8
0402E7 32 5F 1E 04         A   717    	LD	(___print_fmt+5),A
0402EB 3E40                A   718    	LD	A,%40
0402ED 32 5B 1E 04         A   719    	LD	(___print_fmt+1),A
0402F1 3E78                A   720    	LD	A,%78
0402F3 32 5E 1E 04         A   721    	LD	(___print_fmt+4),A
0402F7 DD4EE7              A   722    	LD	C,(IX+%FFFFFFE7)
0402FA 0600                A   723    	LD	B,%0
0402FC C5                  A   724    	PUSH	BC
0402FD DD07E4              A   725    	LD	BC,(IX+%FFFFFFE4)
040300 C5                  A   726    	PUSH	BC
040301 CD 86 14 04         A   727    	CALL	__u_ultoa
040305 C1                  A   728    	POP	BC
040306 C1                  A   729    	POP	BC
040307 01 9A 18 04         A   730    	LD	BC,L__23
04030B C5                  A   731    	PUSH	BC
04030C CD 92 0B 04         A   732    	CALL	___print_sendstring
040310 C1                  A   733    	POP	BC
                           A   734    ;   87	
                           A   735    ;   88		if(crcexpected != crcresult)
                           A   736    .LINE 88
                           A   737    
040311 DD27E4              A   738    	LD	HL,(IX+%FFFFFFE4)
040314 DD5EE7              A   739    	LD	E,(IX+%FFFFFFE7)
040317 017283EB            A   740    	LD	BC,15434610
04031B 3EC7                A   741    	LD	A,%C7
04031D CD FB 13 04         A   742    	CALL	__lcmpu
040321 28 15               A   743    	JR	Z,L_17
                           A   744    ;   89		{
                           A   745    ;   90			printf("\n\rMismatch, aborting 
                           A   746    .LINE 90
                           A   747    
040323 01 FD 0C 04         A   748    	LD	BC,___print_uputch
040327 ED43 BC 16 04       A   749    	LD	(___print_xputch),BC
04032C 01 9D 18 04         A   750    	LD	BC,L__25
040330 C5                  A   751    	PUSH	BC
040331 CD 92 0B 04         A   752    	CALL	___print_sendstring
040335 C1                  A   753    	POP	BC
                           A   754    ;   91			while(1);
040336                     A   755    L_15:
                           A   756    .LINE 91
                           A   757    
040336 18 FE               A   758    	JR	L_15
                           A   759    ;   92		}
040338                     A   760    L_17:
                           A   761    .LINE 92
                           A   762    
                           A   763    ;   93		printf("\n\rOK\n\r\n\r");
                           A   764    .LINE 93
                           A   765    
040338 01 FD 0C 04         A   766    	LD	BC,___print_uputch
04033C ED43 BC 16 04       A   767    	LD	(___print_xputch),BC
040341 01 CD 18 04         A   768    	LD	BC,L__26
040345 C5                  A   769    	PUSH	BC
040346 CD 92 0B 04         A   770    	CALL	___print_sendstring
04034A C1                  A   771    	POP	BC
                           A   772    ;   94	
                           A   773    ;   95		// Ask user to continue
                           A   774    ;   96		printf("Erase and program flash (y/
                           A   775    .LINE 96
                           A   776    
04034B 01 FD 0C 04         A   777    	LD	BC,___print_uputch
04034F ED43 BC 16 04       A   778    	LD	(___print_xputch),BC
040354 01 D6 18 04         A   779    	LD	BC,L__27
040358 C5                  A   780    	PUSH	BC
040359 CD 92 0B 04         A   781    	CALL	___print_sendstring
04035D C1                  A   782    	POP	BC
                           A   783    ;   97		response = 0;
                           A   784    .LINE 97
                           A   785    
04035E DD36F900            A   786    	LD	(IX+%FFFFFFF9),%0
                           A   787    ;   98		while((response != 'y') && (respons
                           A   788    .LINE 98
                           A   789    
040362 18 07               A   790    	JR	L_19
040364                     A   791    L_20:
040364 CD C3 06 04         A   792    	CALL	_getch
040368 DD77F9              A   793    	LD	(IX+%FFFFFFF9),A
04036B                     A   794    L_19:
04036B DD7EF9              A   795    	LD	A,(IX+%FFFFFFF9)
04036E FE79                A   796    	CP	A,%79
040370 28 07               A   797    	JR	Z,L_62
040372 DD7EF9              A   798    	LD	A,(IX+%FFFFFFF9)
040375 FE6E                A   799    	CP	A,%6E
040377 20 EB               A   800    	JR	NZ,L_20
040379                     A   801    L_62:
                           A   802    ;   99		if(response == 'y')
                           A   803    .LINE 99
                           A   804    
040379 DD7EF9              A   805    	LD	A,(IX+%FFFFFFF9)
04037C FE79                A   806    	CP	A,%79
04037E C2 A9 06 04         A   807    	JR	NZ,L_61
                           A   808    ;  100		{
                           A   809    ;  101			printf("\r\nBacking up existing
                           A   810    .LINE 101
                           A   811    
040382 01 FD 0C 04         A   812    	LD	BC,___print_uputch
040386 ED43 BC 16 04       A   813    	LD	(___print_xputch),BC
04038B 01 F6 18 04         A   814    	LD	BC,L__31
04038F C5                  A   815    	PUSH	BC
040390 CD 92 0B 04         A   816    	CALL	___print_sendstring
040394 C1                  A   817    	POP	BC
                           A   818    ;  102			fastmemcpy(BUFFER2, 0x0, FLASHS
                           A   819    .LINE 102
                           A   820    
040395 01000002            A   821    	LD	BC,131072
040399 C5                  A   822    	PUSH	BC
04039A 01000000            A   823    	LD	BC,0
04039E C5                  A   824    	PUSH	BC
04039F 01000007            A   825    	LD	BC,458752
0403A3 C5                  A   826    	PUSH	BC
0403A4 CD 60 07 04         A   827    	CALL	_fastmemcpy
0403A8 C1                  A   828    	POP	BC
0403A9 C1                  A   829    	POP	BC
0403AA C1                  A   830    	POP	BC
                           A   831    ;  103			crcbackup = crc32((char*)0x0, F
                           A   832    .LINE 103
                           A   833    
0403AB 01000002            A   834    	LD	BC,131072
0403AF C5                  A   835    	PUSH	BC
0403B0 01000000            A   836    	LD	BC,0
0403B4 C5                  A   837    	PUSH	BC
0403B5 CD 65 09 04         A   838    	CALL	_crc32
0403B9 C1                  A   839    	POP	BC
0403BA C1                  A   840    	POP	BC
0403BB DD2FD6              A   841    	LD	(IX+%FFFFFFD6),HL
0403BE DD73D9              A   842    	LD	(IX+%FFFFFFD9),E
                           A   843    ;  104			
                           A   844    ;  105			di();							
                           A   845    .LINE 105
                           A   846    
0403C1 F3                  A   847    	di
                           A   848    ;  106	
                           A   849    ;  107			// start address in flash
                           A   850    ;  108			addressto = FLASHSTART;
                           A   851    .LINE 108
                           A   852    
0403C2 01000000            A   853    	LD	BC,0
0403C6 DD0FE9              A   854    	LD	(IX+%FFFFFFE9),BC
                           A   855    ;  109			addressfrom = BUFFER1;
                           A   856    .LINE 109
                           A   857    
0403C9 01000005            A   858    	LD	BC,327680
0403CD DD0FF5              A   859    	LD	(IX+%FFFFFFF5),BC
                           A   860    ;  110			
                           A   861    ;  111			state = firmware;		
                           A   862    .LINE 111
                           A   863    
0403D0 01000000            A   864    	LD	BC,0
0403D4 DD0FF2              A   865    	LD	(IX+%FFFFFFF2),BC
                           A   866    ;  112			while(1)
0403D7                     A   867    L_59:
                           A   868    .LINE 112
                           A   869    
                           A   870    ;  113			{
                           A   871    ;  114				switch(state)
                           A   872    .LINE 114
                           A   873    
0403D7 DD27F2              A   874    	LD	HL,(IX+%FFFFFFF2)
0403DA CD B8 13 04         A   875    	CALL	__case8D
0403DE E9                  A   876    	JP	(HL)
0403DF                     A   877    L__32:
0403DF 0200                A   878    	DW	2
0403E1 00                  A   879    	DB	0
0403E2 EC0304              A   880    	DW24	L_21	
                           A   881    
0403E5 01                  A   882    	DB	1
0403E6 F50304              A   883    	DW24	L_22	
                           A   884    
0403E9 050404              A   885    	DW24	L_23	
                           A   886    
                           A   887    ;  115				{
                           A   888    ;  116					case firmware:
0403EC                     A   889    L_21:
                           A   890    .LINE 116
                           A   891    
                           A   892    ;  117						// start address in
                           A   893    ;  118						addressfrom = BUFFE
                           A   894    .LINE 118
                           A   895    
0403EC 01000005            A   896    	LD	BC,327680
0403F0 DD0FF5              A   897    	LD	(IX+%FFFFFFF5),BC
                           A   898    ;  119						break;
                           A   899    .LINE 119
                           A   900    
0403F3 18 7C               A   901    	JR	L_29
                           A   902    ;  120					case recover:
0403F5                     A   903    L_22:
                           A   904    .LINE 120
                           A   905    
                           A   906    ;  121						// start address in
                           A   907    ;  122						addressfrom = BUFFE
                           A   908    .LINE 122
                           A   909    
0403F5 01000007            A   910    	LD	BC,458752
0403F9 DD0FF5              A   911    	LD	(IX+%FFFFFFF5),BC
                           A   912    ;  123						size = FLASHSIZE;	
                           A   913    .LINE 123
                           A   914    
0403FC 01000002            A   915    	LD	BC,131072
040400 DD0FFA              A   916    	LD	(IX+%FFFFFFFA),BC
                           A   917    ;  124						break;
                           A   918    .LINE 124
                           A   919    
040403 18 6C               A   920    	JR	L_29
                           A   921    ;  125					default:
040405                     A   922    L_23:
                           A   923    .LINE 125
                           A   924    
                           A   925    ;  126						// RESET SYSTEM
                           A   926    ;  127						printf("\r\n");
                           A   927    .LINE 127
                           A   928    
040405 01 FD 0C 04         A   929    	LD	BC,___print_uputch
040409 ED43 BC 16 04       A   930    	LD	(___print_xputch),BC
04040E 01 19 19 04         A   931    	LD	BC,L__33
040412 C5                  A   932    	PUSH	BC
040413 CD 92 0B 04         A   933    	CALL	___print_sendstring
040417 C1                  A   934    	POP	BC
                           A   935    ;  128						for(counter = 9; co
                           A   936    .LINE 128
                           A   937    
040418 01090000            A   938    	LD	BC,9
04041C DD0FFD              A   939    	LD	(IX+%FFFFFFFD),BC
04041F 18 41               A   940    	JR	L_27
040421                     A   941    L_25:
                           A   942    ;  129						{
                           A   943    ;  130							printf("\rReset
                           A   944    .LINE 130
                           A   945    
040421 01 FD 0C 04         A   946    	LD	BC,___print_uputch
040425 ED43 BC 16 04       A   947    	LD	(___print_xputch),BC
04042A 01 1C 19 04         A   948    	LD	BC,L__34
04042E C5                  A   949    	PUSH	BC
04042F CD 92 0B 04         A   950    	CALL	___print_sendstring
040433 C1                  A   951    	POP	BC
040434 DD07FD              A   952    	LD	BC,(IX+%FFFFFFFD)
040437 AF                  A   953    	XOR	A,A
040438 C5D1                A   954    	LD	DE,BC
04043A 4F                  A   955    	LD	C,A
04043B 0600                A   956    	LD	B,%0
04043D C5                  A   957    	PUSH	BC
04043E D5                  A   958    	PUSH	DE
04043F CD 97 0D 04         A   959    	CALL	__u_itoa
040443 C1                  A   960    	POP	BC
040444 C1                  A   961    	POP	BC
040445 01730000            A   962    	LD	BC,115
040449 C5                  A   963    	PUSH	BC
04044A CD FD 0C 04         A   964    	CALL	___print_uputch
04044E C1                  A   965    	POP	BC
                           A   966    ;  131							delayms(1000);
                           A   967    .LINE 131
                           A   968    
04044F 01E80300            A   969    	LD	BC,1000
040453 C5                  A   970    	PUSH	BC
040454 CD 7F 07 04         A   971    	CALL	_delayms
040458 C1                  A   972    	POP	BC
040459 DD31FD              A   973    	LD	IY,(IX+%FFFFFFFD)
04045C ED33FF              A   974    	LEA	IY,IY+%FFFFFFFF
04045F DD3EFD              A   975    	LD	(IX+%FFFFFFFD),IY
                           A   976    ;  132						}
040462                     A   977    L_27:
                           A   978    .LINE 132
                           A   979    
040462 DD07FD              A   980    	LD	BC,(IX+%FFFFFFFD)
040465 B7                  A   981    	OR	A,A
040466 ED62                A   982    	SBC	HL,HL
040468 B7                  A   983    	OR	A,A
040469 ED42                A   984    	SBC	HL,BC
04046B 38 B4               A   985    	JR	C,L_25
                           A   986    ;  133						reset();
                           A   987    .LINE 133
                           A   988    
04046D CD 5E 07 04         A   989    	CALL	_reset
                           A   990    ;  134				}
040471                     A   991    L_29:
                           A   992    .LINE 134
                           A   993    
                           A   994    ;  135		
                           A   995    ;  136				// Unprotect and erase flas
                           A   996    ;  137				printf("\r\nErasing flash..
                           A   997    .LINE 137
                           A   998    
040471 01 FD 0C 04         A   999    	LD	BC,___print_uputch
040475 ED43 BC 16 04       A  1000    	LD	(___print_xputch),BC
04047A 01 27 19 04         A  1001    	LD	BC,L__36
04047E C5                  A  1002    	PUSH	BC
04047F CD 92 0B 04         A  1003    	CALL	___print_sendstring
040483 C1                  A  1004    	POP	BC
                           A  1005    ;  138				enableFlashKeyRegister();	
                           A  1006    .LINE 138
                           A  1007    
040484 CD 33 07 04         A  1008    	CALL	_enableFlashKeyRegister
                           A  1009    ;  139				FLASH_PROT = 0;				
                           A  1010    .LINE 139
                           A  1011    
040488 AF                  A  1012    	XOR	A,A
040489 ED39FA              A  1013    	OUT0	(250),A
                           A  1014    ;  140				enableFlashKeyRegister();	
                           A  1015    .LINE 140
                           A  1016    
04048C CD 33 07 04         A  1017    	CALL	_enableFlashKeyRegister
                           A  1018    ;  141				FLASH_FDIV = 0x5F;			
                           A  1019    .LINE 141
                           A  1020    
040490 3E5F                A  1021    	LD	A,%5F
040492 ED39F9              A  1022    	OUT0	(249),A
                           A  1023    ;  142				
                           A  1024    ;  143				for(counter = 0; counter < 
                           A  1025    .LINE 143
                           A  1026    
040495 01000000            A  1027    	LD	BC,0
040499 DD0FFD              A  1028    	LD	(IX+%FFFFFFFD),BC
04049C 18 1C               A  1029    	JR	L_35
04049E                     A  1030    L_33:
                           A  1031    ;  144				{
                           A  1032    ;  145					FLASH_PAGE = counter;
                           A  1033    .LINE 145
                           A  1034    
04049E DD7EFD              A  1035    	LD	A,(IX+%FFFFFFFD)
0404A1 ED39FC              A  1036    	OUT0	(252),A
                           A  1037    ;  146					FLASH_PGCTL = 0x02;		
                           A  1038    .LINE 146
                           A  1039    
0404A4 3E02                A  1040    	LD	A,%2
0404A6 ED39FF              A  1041    	OUT0	(255),A
                           A  1042    ;  147	
                           A  1043    ;  148					do
0404A9                     A  1044    L_31:
                           A  1045    .LINE 148
                           A  1046    
                           A  1047    ;  149					{
                           A  1048    ;  150						value = FLASH_PGCTL
                           A  1049    .LINE 150
                           A  1050    
0404A9 ED38FF              A  1051    	IN0	A,(255)
0404AC DD77E8              A  1052    	LD	(IX+%FFFFFFE8),A
                           A  1053    ;  151					}
                           A  1054    ;  152					while(value & 0x02);// 
                           A  1055    .LINE 152
                           A  1056    
0404AF E602                A  1057    	AND	A,%2
0404B1 20 F6               A  1058    	JR	NZ,L_31
0404B3 DD07FD              A  1059    	LD	BC,(IX+%FFFFFFFD)
0404B6 03                  A  1060    	INC	BC
0404B7 DD0FFD              A  1061    	LD	(IX+%FFFFFFFD),BC
                           A  1062    ;  153				}
0404BA                     A  1063    L_35:
                           A  1064    .LINE 153
                           A  1065    
0404BA 01800000            A  1066    	LD	BC,128
0404BE DD27FD              A  1067    	LD	HL,(IX+%FFFFFFFD)
0404C1 B7                  A  1068    	OR	A,A
0404C2 ED42                A  1069    	SBC	HL,BC
0404C4 38 D8               A  1070    	JR	C,L_33
                           A  1071    ;  154				
                           A  1072    ;  155				printf("\r\nWriting new fir
                           A  1073    .LINE 155
                           A  1074    
0404C6 01 FD 0C 04         A  1075    	LD	BC,___print_uputch
0404CA ED43 BC 16 04       A  1076    	LD	(___print_xputch),BC
0404CF 01 3B 19 04         A  1077    	LD	BC,L__39
0404D3 C5                  A  1078    	PUSH	BC
0404D4 CD 92 0B 04         A  1079    	CALL	___print_sendstring
0404D8 C1                  A  1080    	POP	BC
                           A  1081    ;  156				
                           A  1082    ;  157				// determine number of page
                           A  1083    ;  158				pagemax = size/PAGESIZE;
                           A  1084    .LINE 158
                           A  1085    
0404D9 DD27FA              A  1086    	LD	HL,(IX+%FFFFFFFA)
0404DC 3E0A                A  1087    	LD	A,%A
0404DE CD 8C 13 04         A  1088    	CALL	__ishru_b
0404E2 DD2FEF              A  1089    	LD	(IX+%FFFFFFEF),HL
                           A  1090    ;  159				if(size%PAGESIZE) // last p
                           A  1091    .LINE 159
                           A  1092    
0404E5 01FF0300            A  1093    	LD	BC,1023
0404E9 DD27FA              A  1094    	LD	HL,(IX+%FFFFFFFA)
0404EC CD 1E 14 04         A  1095    	CALL	__iand
0404F0 DD2FDE              A  1096    	LD	(IX+%FFFFFFDE),HL
0404F3 CD B2 10 04         A  1097    	CALL	__icmpzero
0404F7 28 0F               A  1098    	JR	Z,L_38
                           A  1099    ;  160				{
                           A  1100    ;  161					pagemax += 1;
                           A  1101    .LINE 161
                           A  1102    
0404F9 DD07EF              A  1103    	LD	BC,(IX+%FFFFFFEF)
0404FC 03                  A  1104    	INC	BC
0404FD DD0FEF              A  1105    	LD	(IX+%FFFFFFEF),BC
                           A  1106    ;  162					lastpagebytes = size%PA
                           A  1107    .LINE 162
                           A  1108    
040500 DD07DE              A  1109    	LD	BC,(IX+%FFFFFFDE)
040503 DD0FE1              A  1110    	LD	(IX+%FFFFFFE1),BC
                           A  1111    ;  163				}
                           A  1112    ;  164				else lastpagebytes = PAGESI
                           A  1113    .LINE 164
                           A  1114    
040506 18 07               A  1115    	JR	L_46
040508                     A  1116    L_38:
040508 01000400            A  1117    	LD	BC,1024
04050C DD0FE1              A  1118    	LD	(IX+%FFFFFFE1),BC
04050F                     A  1119    L_46:
                           A  1120    ;  165				
                           A  1121    ;  166				// write out each page to f
                           A  1122    ;  167				for(counter = 0; counter < 
                           A  1123    .LINE 167
                           A  1124    
04050F 01000000            A  1125    	LD	BC,0
040513 DD0FFD              A  1126    	LD	(IX+%FFFFFFFD),BC
040516 C3 C2 05 04         A  1127    	JR	L_45
04051A                     A  1128    L_43:
                           A  1129    ;  168				{
                           A  1130    ;  169					printf("\rWriting flash
                           A  1131    .LINE 169
                           A  1132    
04051A 01 FD 0C 04         A  1133    	LD	BC,___print_uputch
04051E ED43 BC 16 04       A  1134    	LD	(___print_xputch),BC
040523 01 57 19 04         A  1135    	LD	BC,L__41
040527 C5                  A  1136    	PUSH	BC
040528 CD 92 0B 04         A  1137    	CALL	___print_sendstring
04052C C1                  A  1138    	POP	BC
04052D 3E03                A  1139    	LD	A,%3
04052F 32 5F 1E 04         A  1140    	LD	(___print_fmt+5),A
040533 3E40                A  1141    	LD	A,%40
040535 32 5B 1E 04         A  1142    	LD	(___print_fmt+1),A
040539 DD07FD              A  1143    	LD	BC,(IX+%FFFFFFFD)
04053C 03                  A  1144    	INC	BC
04053D AF                  A  1145    	XOR	A,A
04053E C5D1                A  1146    	LD	DE,BC
040540 4F                  A  1147    	LD	C,A
040541 0600                A  1148    	LD	B,%0
040543 C5                  A  1149    	PUSH	BC
040544 D5                  A  1150    	PUSH	DE
040545 CD 97 0D 04         A  1151    	CALL	__u_itoa
040549 C1                  A  1152    	POP	BC
04054A C1                  A  1153    	POP	BC
04054B 012F0000            A  1154    	LD	BC,47
04054F C5                  A  1155    	PUSH	BC
040550 CD FD 0C 04         A  1156    	CALL	___print_uputch
040554 C1                  A  1157    	POP	BC
040555 3E03                A  1158    	LD	A,%3
040557 32 5F 1E 04         A  1159    	LD	(___print_fmt+5),A
04055B 3E40                A  1160    	LD	A,%40
04055D 32 5B 1E 04         A  1161    	LD	(___print_fmt+1),A
040561 DD07EF              A  1162    	LD	BC,(IX+%FFFFFFEF)
040564 AF                  A  1163    	XOR	A,A
040565 C5D1                A  1164    	LD	DE,BC
040567 4F                  A  1165    	LD	C,A
040568 0600                A  1166    	LD	B,%0
04056A C5                  A  1167    	PUSH	BC
04056B D5                  A  1168    	PUSH	DE
04056C CD 97 0D 04         A  1169    	CALL	__u_itoa
040570 C1                  A  1170    	POP	BC
040571 C1                  A  1171    	POP	BC
                           A  1172    ;  170					
                           A  1173    ;  171					if(counter == (pagemax 
                           A  1174    .LINE 171
                           A  1175    
040572 DD31EF              A  1176    	LD	IY,(IX+%FFFFFFEF)
040575 ED23FF              A  1177    	LEA	HL,IY+%FFFFFFFF
040578 DD07FD              A  1178    	LD	BC,(IX+%FFFFFFFD)
04057B B7                  A  1179    	OR	A,A
04057C ED42                A  1180    	SBC	HL,BC
04057E 20 15               A  1181    	JR	NZ,L_41
                           A  1182    ;  172						fastmemcpy(addresst
                           A  1183    .LINE 172
                           A  1184    
040580 DD07E1              A  1185    	LD	BC,(IX+%FFFFFFE1)
040583 C5                  A  1186    	PUSH	BC
040584 DD07F5              A  1187    	LD	BC,(IX+%FFFFFFF5)
040587 C5                  A  1188    	PUSH	BC
040588 DD07E9              A  1189    	LD	BC,(IX+%FFFFFFE9)
04058B C5                  A  1190    	PUSH	BC
04058C CD 60 07 04         A  1191    	CALL	_fastmemcpy
040590 C1                  A  1192    	POP	BC
040591 C1                  A  1193    	POP	BC
040592 C1                  A  1194    	POP	BC
                           A  1195    ;  173						//printf("Fake copy
                           A  1196    ;  174					else 
                           A  1197    .LINE 174
                           A  1198    
040593 18 14               A  1199    	JR	L_42
040595                     A  1200    L_41:
                           A  1201    ;  175						fastmemcpy(addresst
                           A  1202    .LINE 175
                           A  1203    
040595 01000400            A  1204    	LD	BC,1024
040599 C5                  A  1205    	PUSH	BC
04059A DD07F5              A  1206    	LD	BC,(IX+%FFFFFFF5)
04059D C5                  A  1207    	PUSH	BC
04059E DD07E9              A  1208    	LD	BC,(IX+%FFFFFFE9)
0405A1 C5                  A  1209    	PUSH	BC
0405A2 CD 60 07 04         A  1210    	CALL	_fastmemcpy
0405A6 C1                  A  1211    	POP	BC
0405A7 C1                  A  1212    	POP	BC
0405A8 C1                  A  1213    	POP	BC
0405A9                     A  1214    L_42:
                           A  1215    ;  176						//printf("Fake copy
                           A  1216    ;  177				
                           A  1217    ;  178					addressto += PAGESIZE;
                           A  1218    .LINE 178
                           A  1219    
0405A9 01000400            A  1220    	LD	BC,1024
0405AD DD27E9              A  1221    	LD	HL,(IX+%FFFFFFE9)
0405B0 09                  A  1222    	ADD	HL,BC
0405B1 DD2FE9              A  1223    	LD	(IX+%FFFFFFE9),HL
                           A  1224    ;  179					addressfrom += PAGESIZE
                           A  1225    .LINE 179
                           A  1226    
0405B4 DD27F5              A  1227    	LD	HL,(IX+%FFFFFFF5)
0405B7 09                  A  1228    	ADD	HL,BC
0405B8 DD2FF5              A  1229    	LD	(IX+%FFFFFFF5),HL
0405BB DD07FD              A  1230    	LD	BC,(IX+%FFFFFFFD)
0405BE 03                  A  1231    	INC	BC
0405BF DD0FFD              A  1232    	LD	(IX+%FFFFFFFD),BC
                           A  1233    ;  180				}
0405C2                     A  1234    L_45:
                           A  1235    .LINE 180
                           A  1236    
0405C2 DD07EF              A  1237    	LD	BC,(IX+%FFFFFFEF)
0405C5 DD27FD              A  1238    	LD	HL,(IX+%FFFFFFFD)
0405C8 B7                  A  1239    	OR	A,A
0405C9 ED42                A  1240    	SBC	HL,BC
0405CB DA 1A 05 04         A  1241    	JR	C,L_43
                           A  1242    ;  181				lockFlashKeyRegister();	// 
                           A  1243    .LINE 181
                           A  1244    
0405CF CD 4B 07 04         A  1245    	CALL	_lockFlashKeyRegister
                           A  1246    ;  182				printf("\r\n");
                           A  1247    .LINE 182
                           A  1248    
0405D3 01 FD 0C 04         A  1249    	LD	BC,___print_uputch
0405D7 ED43 BC 16 04       A  1250    	LD	(___print_xputch),BC
0405DC 01 6C 19 04         A  1251    	LD	BC,L__44
0405E0 C5                  A  1252    	PUSH	BC
0405E1 CD 92 0B 04         A  1253    	CALL	___print_sendstring
0405E5 C1                  A  1254    	POP	BC
                           A  1255    ;  183				
                           A  1256    ;  184				//Verify correct CRC in fla
                           A  1257    ;  185				printf("Verifying flash che
                           A  1258    .LINE 185
                           A  1259    
0405E6 01 FD 0C 04         A  1260    	LD	BC,___print_uputch
0405EA ED43 BC 16 04       A  1261    	LD	(___print_xputch),BC
0405EF 01 6F 19 04         A  1262    	LD	BC,L__45
0405F3 C5                  A  1263    	PUSH	BC
0405F4 CD 92 0B 04         A  1264    	CALL	___print_sendstring
0405F8 C1                  A  1265    	POP	BC
                           A  1266    ;  186				crcresult = crc32((char*)FL
                           A  1267    .LINE 186
                           A  1268    
0405F9 DD07FA              A  1269    	LD	BC,(IX+%FFFFFFFA)
0405FC C5                  A  1270    	PUSH	BC
0405FD 01000000            A  1271    	LD	BC,0
040601 C5                  A  1272    	PUSH	BC
040602 CD 65 09 04         A  1273    	CALL	_crc32
040606 C1                  A  1274    	POP	BC
040607 C1                  A  1275    	POP	BC
040608 DD2FE4              A  1276    	LD	(IX+%FFFFFFE4),HL
04060B DD73E7              A  1277    	LD	(IX+%FFFFFFE7),E
                           A  1278    ;  187	
                           A  1279    ;  188				if(state == recover) crcexp
                           A  1280    .LINE 188
                           A  1281    
04060E 01010000            A  1282    	LD	BC,1
040612 DD27F2              A  1283    	LD	HL,(IX+%FFFFFFF2)
040615 B7                  A  1284    	OR	A,A
040616 ED42                A  1285    	SBC	HL,BC
040618 20 0C               A  1286    	JR	NZ,L_57
04061A DD07D6              A  1287    	LD	BC,(IX+%FFFFFFD6)
04061D DD7ED9              A  1288    	LD	A,(IX+%FFFFFFD9)
040620 DD0FDA              A  1289    	LD	(IX+%FFFFFFDA),BC
040623 DD77DD              A  1290    	LD	(IX+%FFFFFFDD),A
040626                     A  1291    L_57:
                           A  1292    ;  189				
                           A  1293    ;  190				if(crcresult == crcexpected
                           A  1294    .LINE 190
                           A  1295    
040626 DD27E4              A  1296    	LD	HL,(IX+%FFFFFFE4)
040629 DD5EE7              A  1297    	LD	E,(IX+%FFFFFFE7)
04062C DD07DA              A  1298    	LD	BC,(IX+%FFFFFFDA)
04062F DD7EDD              A  1299    	LD	A,(IX+%FFFFFFDD)
040632 CD FB 13 04         A  1300    	CALL	__lcmpu
040636 20 1E               A  1301    	JR	NZ,L_56
                           A  1302    ;  191				{
                           A  1303    ;  192					printf("- OK\r\n");
                           A  1304    .LINE 192
                           A  1305    
040638 01 FD 0C 04         A  1306    	LD	BC,___print_uputch
04063C ED43 BC 16 04       A  1307    	LD	(___print_xputch),BC
040641 01 8C 19 04         A  1308    	LD	BC,L__48
040645 C5                  A  1309    	PUSH	BC
040646 CD 92 0B 04         A  1310    	CALL	___print_sendstring
04064A C1                  A  1311    	POP	BC
                           A  1312    ;  193					state = systemreset;
                           A  1313    .LINE 193
                           A  1314    
04064B 01020000            A  1315    	LD	BC,2
04064F DD0FF2              A  1316    	LD	(IX+%FFFFFFF2),BC
                           A  1317    ;  194				}
                           A  1318    ;  195				else // CRC Failure - next 
                           A  1319    .LINE 195
                           A  1320    
040652 C3 D7 03 04         A  1321    	JR	L_59
040656                     A  1322    L_56:
                           A  1323    ;  196				{	 // User interaction no
                           A  1324    ;  197					switch(state)
                           A  1325    .LINE 197
                           A  1326    
040656 DD27F2              A  1327    	LD	HL,(IX+%FFFFFFF2)
040659 CD B8 13 04         A  1328    	CALL	__case8D
04065D E9                  A  1329    	JP	(HL)
04065E                     A  1330    L__49:
04065E 0200                A  1331    	DW	2
040660 00                  A  1332    	DB	0
040661 6B0604              A  1333    	DW24	L_49	
                           A  1334    
040664 01                  A  1335    	DB	1
040665 890604              A  1336    	DW24	L_50	
                           A  1337    
040668 9E0604              A  1338    	DW24	L_53	
                           A  1339    
                           A  1340    ;  198					{
                           A  1341    ;  199						case firmware:
04066B                     A  1342    L_49:
                           A  1343    .LINE 199
                           A  1344    
                           A  1345    ;  200							printf("\r\nErr
                           A  1346    .LINE 200
                           A  1347    
04066B 01 FD 0C 04         A  1348    	LD	BC,___print_uputch
04066F ED43 BC 16 04       A  1349    	LD	(___print_xputch),BC
040674 01 93 19 04         A  1350    	LD	BC,L__50
040678 C5                  A  1351    	PUSH	BC
040679 CD 92 0B 04         A  1352    	CALL	___print_sendstring
04067D C1                  A  1353    	POP	BC
                           A  1354    ;  201							state = recover
                           A  1355    .LINE 201
                           A  1356    
04067E 01010000            A  1357    	LD	BC,1
040682 DD0FF2              A  1358    	LD	(IX+%FFFFFFF2),BC
                           A  1359    ;  202							break;
                           A  1360    .LINE 202
                           A  1361    
040685 C3 D7 03 04         A  1362    	JR	L_59
                           A  1363    ;  203						case recover:
040689                     A  1364    L_50:
                           A  1365    .LINE 203
                           A  1366    
                           A  1367    ;  204							printf("\r\nErr
                           A  1368    .LINE 204
                           A  1369    
040689 01 FD 0C 04         A  1370    	LD	BC,___print_uputch
04068D ED43 BC 16 04       A  1371    	LD	(___print_xputch),BC
040692 01 E0 19 04         A  1372    	LD	BC,L__51
040696 C5                  A  1373    	PUSH	BC
040697 CD 92 0B 04         A  1374    	CALL	___print_sendstring
04069B C1                  A  1375    	POP	BC
                           A  1376    ;  205							while(1); // no
04069C                     A  1377    L_52:
                           A  1378    .LINE 205
                           A  1379    
04069C 18 FE               A  1380    	JR	L_52
                           A  1381    ;  206						default:
04069E                     A  1382    L_53:
                           A  1383    .LINE 206
                           A  1384    
                           A  1385    ;  207							state = recover
                           A  1386    .LINE 207
                           A  1387    
04069E 01010000            A  1388    	LD	BC,1
0406A2 DD0FF2              A  1389    	LD	(IX+%FFFFFFF2),BC
0406A5 C3 D7 03 04         A  1390    	JR	L_59
                           A  1391    ;  208					}
                           A  1392    ;  209				}
                           A  1393    ;  210			}		
                           A  1394    ;  211		}
                           A  1395    ;  212		else printf("\n\rUser abort - pleas
0406A9                     A  1396    L_61:
                           A  1397    .LINE 212
                           A  1398    
0406A9 01 FD 0C 04         A  1399    	LD	BC,___print_uputch
0406AD ED43 BC 16 04       A  1400    	LD	(___print_xputch),BC
0406B2 01 1D 1A 04         A  1401    	LD	BC,L__52
0406B6 C5                  A  1402    	PUSH	BC
0406B7 CD 92 0B 04         A  1403    	CALL	___print_sendstring
0406BB C1                  A  1404    	POP	BC
                           A  1405    ;  213		
                           A  1406    ;  214		while(1);
0406BC                     A  1407    L_64:
                           A  1408    .LINE 214
                           A  1409    
0406BC 18 FE               A  1410    	JR	L_64
                           A  1411    ;  215	}
                           A  1412    .LINE 215
                           A  1413    
0406BE DDF9                A  1414    	LD	SP,IX
0406C0 DDE1                A  1415    	POP	IX
0406C2 C9                  A  1416    	RET	
                           A  1417    
                           A  1418    
                           A  1419    ;**************************** _main ***********
                           A  1420    ;Name                         Addr/Register   S
                           A  1421    ;_lockFlashKeyRegister               IMPORT  --
                           A  1422    ;_enableFlashKeyRegister             IMPORT  --
                           A  1423    ;_reset                              IMPORT  --
                           A  1424    ;_delayms                            IMPORT  --
                           A  1425    ;_fastmemcpy                         IMPORT  --
                           A  1426    ;_getch                              IMPORT  --
                           A  1427    ;_crc32                              IMPORT  --
                           A  1428    ;__u_ultoa                           IMPORT  --
                           A  1429    ;___print_fmt                        IMPORT    
                           A  1430    ;_mos_fclose                         IMPORT  --
                           A  1431    ;_mos_feof                           IMPORT  --
                           A  1432    ;_mos_fgetc                          IMPORT  --
                           A  1433    ;__u_itoa                            IMPORT  --
                           A  1434    ;_mos_fopen                          IMPORT  --
                           A  1435    ;___print_sendstring                 IMPORT  --
                           A  1436    ;___print_xputch                     IMPORT    
                           A  1437    ;___print_uputch                     IMPORT  --
                           A  1438    ;crcbackup                            IX-42    
                           A  1439    ;crcexpected                          IX-38    
                           A  1440    ;G_0                                  IX-34    
                           A  1441    ;lastpagebytes                        IX-31    
                           A  1442    ;crcresult                            IX-28    
                           A  1443    ;value                                IX-24    
                           A  1444    ;addressto                            IX-23    
                           A  1445    ;ptr                                  IX-20    
                           A  1446    ;pagemax                              IX-17    
                           A  1447    ;state                                IX-14    
                           A  1448    ;addressfrom                          IX-11    
                           A  1449    ;file                                  IX-8    
                           A  1450    ;response                              IX-7    
                           A  1451    ;size                                  IX-6    
                           A  1452    ;counter                               IX-3    
                           A  1453    ;argv                                  IX+9    
                           A  1454    ;argc                                  IX+6    
                           A  1455    
                           A  1456    
                           A  1457    ; Stack Frame Size: 57 (bytes)
                           A  1458    ;       Spill Code: 0 (instruction)
                           A  1459    
                           A  1460    
                           A  1461    .ENDFUNC "main",215,"_main"
                           A  1462    	SEGMENT STRSECT
04173F                     A  1463    L__2:
04173F 41676F6E 204D4F53   A  1464    	DB	"Agon MOS firmware upgrade utility"
041747 20666972 6D776172 
04174F 65207570 67726164 
041757 65207574 696C6974 
04175F 79 
041760 0A0D00              A  1465    	DB	10,13,0
041763                     A  1466    L__3:
041763 54686973 20757469   A  1467    	DB	"This utility will upgrade an existing 
04176B 6C697479 2077696C 
041773 6C207570 67726164 
04177B 6520616E 20657869 
041783 7374696E 6720312E 
04178B 30302F31 2E303120 
041793 6669726D 77617265 
04179B 20746F20 312E3033 
0417A3 726331 
0417A6 0D0A0D0A 00         A  1468    	DB	13,10,13,10,0
0417AB                     A  1469    L__4:
0417AB 6669726D 77617265   A  1470    	DB	"firmware103rc1.bin"
0417B3 31303372 63312E62 
0417BB 696E 
0417BD 00                  A  1471    	DB	0
0417BE                     A  1472    L__6:
0417BE 4572726F 72206F70   A  1473    	DB	"Error opening \""
0417C6 656E696E 672022 
0417CD 00                  A  1474    	DB	0
0417CE                     A  1475    L__7:
0417CE 6669726D 77617265   A  1476    	DB	"firmware103rc1.bin"
0417D6 31303372 63312E62 
0417DE 696E 
0417E0 00                  A  1477    	DB	0
0417E1                     A  1478    L__8:
0417E1 22202D20 706C6561   A  1479    	DB	"\" - please push reset button"
0417E9 73652070 75736820 
0417F1 72657365 74206275 
0417F9 74746F6E 
0417FD 00                  A  1480    	DB	0
0417FE                     A  1481    L__9:
0417FE 4C6F6164 696E6720   A  1482    	DB	"Loading file : "
041806 66696C65 203A20 
04180D 00                  A  1483    	DB	0
04180E                     A  1484    L__10:
04180E 6669726D 77617265   A  1485    	DB	"firmware103rc1.bin"
041816 31303372 63312E62 
04181E 696E 
041820 00                  A  1486    	DB	0
041821                     A  1487    L__11:
041821 0A0D00              A  1488    	DB	10,13,0
041824                     A  1489    L__12:
041824 46696C65 2073697A   A  1490    	DB	"File size    : "
04182C 65202020 203A20 
041833 00                  A  1491    	DB	0
041834                     A  1492    L__13:
041834 20627974 65287329   A  1493    	DB	" byte(s)"
04183C 00                  A  1494    	DB	0
04183D                     A  1495    L__15:
04183D 0D                  A  1496    	DB	13
04183E 46696C65 2073697A   A  1497    	DB	"File size    : "
041846 65202020 203A20 
04184D 00                  A  1498    	DB	0
04184E                     A  1499    L__16:
04184E 20627974 65287329   A  1500    	DB	" byte(s)"
041856 00                  A  1501    	DB	0
041857                     A  1502    L__18:
041857 0D                  A  1503    	DB	13
041858 46696C65 2073697A   A  1504    	DB	"File size    : "
041860 65202020 203A20 
041867 00                  A  1505    	DB	0
041868                     A  1506    L__19:
041868 20627974 65287329   A  1507    	DB	" byte(s)"
041870 0A0D00              A  1508    	DB	10,13,0
041873                     A  1509    L__20:
041873 54657374 696E6720   A  1510    	DB	"Testing CRC32: 0x"
04187B 43524333 323A2030 
041883 78 
041884 00                  A  1511    	DB	0
041885                     A  1512    L__21:
041885 0A0D00              A  1513    	DB	10,13,0
041888                     A  1514    L__22:
041888 43524333 32207265   A  1515    	DB	"CRC32 result : 0x"
041890 73756C74 203A2030 
041898 78 
041899 00                  A  1516    	DB	0
04189A                     A  1517    L__23:
04189A 0A0D00              A  1518    	DB	10,13,0
04189D                     A  1519    L__25:
04189D 0A0D                A  1520    	DB	10,13
04189F 4D69736D 61746368   A  1521    	DB	"Mismatch, aborting - please push reset
0418A7 2C206162 6F727469 
0418AF 6E67202D 20706C65 
0418B7 61736520 70757368 
0418BF 20726573 65742062 
0418C7 7574746F 6E 
0418CC 00                  A  1522    	DB	0
0418CD                     A  1523    L__26:
0418CD 0A0D                A  1524    	DB	10,13
0418CF 4F4B                A  1525    	DB	"OK"
0418D1 0A0D0A0D 00         A  1526    	DB	10,13,10,13,0
0418D6                     A  1527    L__27:
0418D6 45726173 6520616E   A  1528    	DB	"Erase and program flash (y/n)? "
0418DE 64207072 6F677261 
0418E6 6D20666C 61736820 
0418EE 28792F6E 293F20 
0418F5 00                  A  1529    	DB	0
0418F6                     A  1530    L__31:
0418F6 0D0A                A  1531    	DB	13,10
0418F8 4261636B 696E6720   A  1532    	DB	"Backing up existing firmware... "
041900 75702065 78697374 
041908 696E6720 6669726D 
041910 77617265 2E2E2E20 
041918 00                  A  1533    	DB	0
041919                     A  1534    L__33:
041919 0D0A00              A  1535    	DB	13,10,0
04191C                     A  1536    L__34:
04191C 0D                  A  1537    	DB	13
04191D 52657365 7420696E   A  1538    	DB	"Reset in "
041925 20 
041926 00                  A  1539    	DB	0
041927                     A  1540    L__36:
041927 0D0A                A  1541    	DB	13,10
041929 45726173 696E6720   A  1542    	DB	"Erasing flash... "
041931 666C6173 682E2E2E 
041939 20 
04193A 00                  A  1543    	DB	0
04193B                     A  1544    L__39:
04193B 0D0A                A  1545    	DB	13,10
04193D 57726974 696E6720   A  1546    	DB	"Writing new firmware..."
041945 6E657720 6669726D 
04194D 77617265 2E2E2E 
041954 0D0A00              A  1547    	DB	13,10,0
041957                     A  1548    L__41:
041957 0D                  A  1549    	DB	13
041958 57726974 696E6720   A  1550    	DB	"Writing flash page "
041960 666C6173 68207061 
041968 676520 
04196B 00                  A  1551    	DB	0
04196C                     A  1552    L__44:
04196C 0D0A00              A  1553    	DB	13,10,0
04196F                     A  1554    L__45:
04196F 56657269 6679696E   A  1555    	DB	"Verifying flash checksum... "
041977 6720666C 61736820 
04197F 63686563 6B73756D 
041987 2E2E2E20 
04198B 00                  A  1556    	DB	0
04198C                     A  1557    L__48:
04198C 2D204F4B            A  1558    	DB	"- OK"
041990 0D0A00              A  1559    	DB	13,10,0
041993                     A  1560    L__50:
041993 0D0A                A  1561    	DB	13,10
041995 4572726F 72206F63   A  1562    	DB	"Error occured during flash write"
04199D 63757265 64206475 
0419A5 72696E67 20666C61 
0419AD 73682077 72697465 
0419B5 0D0A                A  1563    	DB	13,10
0419B7 41747465 6D707469   A  1564    	DB	"Attempting to flash backup firmware...
0419BF 6E672074 6F20666C 
0419C7 61736820 6261636B 
0419CF 75702066 69726D77 
0419D7 6172652E 2E2E 
0419DD 0D0A00              A  1565    	DB	13,10,0
0419E0                     A  1566    L__51:
0419E0 0D0A                A  1567    	DB	13,10
0419E2 4572726F 72206F63   A  1568    	DB	"Error occured during flash write"
0419EA 63757265 64206475 
0419F2 72696E67 20666C61 
0419FA 73682077 72697465 
041A02 0D0A                A  1569    	DB	13,10
041A04 4261636B 75702072   A  1570    	DB	"Backup recovery failed"
041A0C 65636F76 65727920 
041A14 6661696C 6564 
041A1A 0D0A00              A  1571    	DB	13,10,0
041A1D                     A  1572    L__52:
041A1D 0A0D                A  1573    	DB	10,13
041A1F 55736572 2061626F   A  1574    	DB	"User abort - please push reset button"
041A27 7274202D 20706C65 
041A2F 61736520 70757368 
041A37 20726573 65742062 
041A3F 7574746F 6E 
041A44 00                  A  1575    	DB	0
                           A  1576    	XREF _crc32:ROM
                           A  1577    	XREF _delayms:ROM
                           A  1578    	XREF _reset:ROM
                           A  1579    	XREF _fastmemcpy:ROM
                           A  1580    	XREF _lockFlashKeyRegister:ROM
                           A  1581    	XREF _enableFlashKeyRegister:ROM
                           A  1582    	XREF _mos_feof:ROM
                           A  1583    	XREF _mos_fgetc:ROM
                           A  1584    	XREF _mos_fclose:ROM
                           A  1585    	XREF _mos_fopen:ROM
                           A  1586    	XREF _getch:ROM
                           A  1587    	XREF __u_ultoa:ROM
                           A  1588    	XREF __u_itoa:ROM
                           A  1589    	XREF ___print_sendstring:ROM
                           A  1590    	XREF ___print_xputch:ROM
                           A  1591    	XREF ___print_uputch:ROM
                           A  1592    	XREF ___print_fmt:ROM
                           A  1593    	XREF __lcmpu:ROM
                           A  1594    	XREF __iand:ROM
                           A  1595    	XREF __icmpzero:ROM
                           A  1596    	XREF __case8D:ROM
                           A  1597    	XREF __ishru_b:ROM
                           A  1598    	XDEF _main
                           A  1599    	XDEF _putch
                           A  1600    	XDEF _errno
                           A  1601    	END


Errors: 0
Warnings: 0
Lines Assembled: 1602
